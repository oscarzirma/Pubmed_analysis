%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: oncogene.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Jason Schwarz
%%CreationDate: 8/8/14
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 9036 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD18FFA8FFFF7DA8A8A8FD79FF27A8%7D52527D527D7DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA8A8A87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA8A8A87DA87DA87DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87DA87DA87DA87DA8FD14FFA8A8A87DA87DA87DA8FFFF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87ECFFFA8FFA8FF%A8FFA8FFA8FFA8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF7DFD06A8%FD1BFFA8A8FD11FFA8FD24FFA97FA9FD0CFF7DA8A8A87DA8A8A87DFD15A8%FD1BFFA8A8FD33FFA9FFFF7FFFA9A9FD0BFFA8FD1AFFA8FFA8FD1BFFA8A8%FD11FFA8FD21FF55A9A9A9FFFFA9A9FD0AFF7DFFFFA97FA9A9A9FFFFFF7D%5252527D7DFD09527DA8A8A8FD1BFFA8A8FD32FFA9FFA97FA9FFFFFFA9A9%FD09FFA8A8FFFFFFA9FD05FF7D7D7DA87DA8527D5252527D7DA852A8A8FF%A8FD1BFFA8A8FD11FFA8FD11FFA8FD0DFFA9A9FFFF7FFD05FF7EFD09FFA8%FD0BFFA8FFFFFFA8FFFF7DA8FFA8FD04FFA8A8A8FD1BFFA8FD33FFA9FD07%FFA9A9FD09FFA8A8FD19FFA8FFA8FD1BFFA8A8FD11FFA8FD1FFF7FFD09FF%7FFD09FFA8FFFFFFAEFFA8FD04FFA87DA87D7D7DA87DFF7DA87DFD07A8FD%1BFFA8A8FD31FFA9FD09FFA9A9FD08FFA8FFFFA8AEA8AEA8FFFFFF7D5227%7D527D5252527D527D527D52A8A8FFA8FD1BFFA8A8FD11FFA8FD1FFF7EFD%09FF7FFD09FF7DFD0BFFA87DA87DA87DFD04A8FF7D7D7DFD04A8FD1BFFA8%A8FD30FFA9A9FD09FFA9A9FD08FFFD0CA8FFFD07A8FFA8A8A8FFA8A87DFF%A8FD1BFFA8A8FD11FFA8FD1FFFA9FD09FFA9A9FF7FA9FD07FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8FD1BFFA8A8FD30%FFA9FD0BFFA9FF7FFD23FFA8FD14FFA8FFFFFFA8FFA8A8A8FD11FFA8FD11%FFA8FD0CFFA9A9FD09FFFD04A97EFD09FFA8FD17FFA8A8FD13FFA87DA8A8%527D7D527DA8FD24FFA8FD0BFFA9FD0BFF7FA9FFA9FD1CFFA8FD04FFA87D%FD14FF52A87D52527D527DA8FD11FFA8FD09FFA8FFA8FFA8FFFFFFA8FD0C%FFA9A9FD0AFF7FA9FFA8A9FD08FFA8FD17FFA8A8FD1BFFA8A8FD1BFFA8FD%0552FD0FFFA9FD0FFF7FFD21FFA8FD1BFFA8A8FD11FFA8FD09FFA87D277D%7D27A8FD0DFFA9A9FD0FFFA9A9FD07FFA8FD13FFA8FFFFFFA8A8FD1BFFA8%A8FD30FFA9FD0FFFA9FD21FFA8FD1BFFA8A8FFA87DA8A87DFFA8FD05FFA8%A87DFFA8FFA8FFA8FFFFA8A8FFFFFF7DA8FD10FFA9A9FD10FF7FFD07FFA8%FD17FFA8A8FD1BFFA8A8FFA8F8522752275227A8525227FD045227272752%5252A8F82727525227F85227FD0EFFA9FD11FFA9FD20FFA8FD1BFFA8A8FF%A87D7D7DA87D5252A8FD047DA8A8A852A87DA852A8A8FD047DA8FD047DA8%FFA8FD0BFF7EFD11FFA3A9FD06FFA8FD17FFA8A8FD1BFFA8FD09FFA8FFA8%FD0FFFA8FD05FFA8FD0EFFA9FD12FFA9FD1FFFA8FD12FFA8FD08FFA8A8FD%07FFA852F8F827522752F852277D522727522727F8522727527DF8A8FD0E%FF7FFD12FFA9FD06FFA8FD17FFA8A8FD11FF527DFD08FFA8A8FD08FFA87D%7DA87DA87DA87D7DA8A87DA87DA852A87D7D7DFFA87DFD0EFFA9A9FD12FF%A9FD1FFFA8FD10FFA85252FD08FFA8A8FD2FFF7FFFA8FFA8FFA8FD0CFFA9%A9FD05FFA8FD13FFA8FFFFFFA8A8FD11FF52A8FD08FFA8A8FD15FFA82752%277D525227F8275227FD0DFFA9A9FF7D7D52275252FD0CFFA9FD1EFFA8FD%11FF7D7DFD08FFA8A8FD11FFA8FFFFFFA8FD047DA87D2752A87D7DA8FD0C%FFA9A9FF7D7D27272752FD0CFF7FFD05FFA8FD17FFA8A8FD11FF527DFD08%FFA8FD1DFF7DFD11FFA9FD14FFA9A9FD1DFFA8FD10FFA87D7DFF52FFA8FD%047DA87DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FD08%FF7DA8FFA8FFFFFFA8FFFFFFA8FFFFA9A8FF7DFD04A8FF7DFFA8A87DFFFF%FFA8FFFFFFA8A9FFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFA8FFA8FFA8A8FD11FF277DFF7D7DA8FD04527DA8FD20FF7DFFFFFFA8FD%09FF7FFFFF52F8522727F8527DFD0527A8FD05FFA3FD17FFA8FD04FFA87D%FD11FFA8A8FF7DFD08A8FD20FF7DA8FD0BFFA9A9FFFFA87D7DA87D7DA87D%52A87D7D7DFD05FFA9A9FD1CFFA8A8FD11FFA8FD09FFA8A8FD20FF7DFD0D%FFA9FD09FF7DFFA8FD09FFA9FD1DFFA8FD11FF5252FD08FFA8A8FD11FFA8%FD0EFF7DA8FD0BFFA8A9FFFFA827F8FD0527F82752FD08FFA9A9FFFFFFA8%FD13FFA8FFFFFFA8A8FD11FF52A8FD08FFA8A8FD20FF7DFD0CFFA9FD04FF%7D7D7DA87DA87D7D7DA8FD08FFA9FD1DFFA8FD10FFA8527DFD08FFA8A8FD%11FFA8FD0EFF7DA8FD0BFF7FFD16FFA9A9FFFFFFA8FD17FFA8A8FD11FF52%7DFD08FFA8A8FD20FF7DFD0CFFA9A9FD05FF7DFD0FFFA9A9FD1CFFA8FD10%FFA87DA8FD08FFA8A8FD11FFA8FD0EFF7DA8FFA8FD09FF7FFD05FFA87DFD%10FF7FFFFFFFA8FD17FFA8A8FD10FFA87DFD09FFA8FD21FF7DFD0CFFA9FD%06FF7DFD10FFA9FD1CFFA8FD10FFA8527DFD08FFA8A8FD11FFA8FD0EFF7D%A8FD0BFFA9FD05FFA87DFD10FFA9FFFFFFA8FD17FFA8A8FD11FF527DFD08%FFA8A8FD20FF7DFD0BFFA9FD07FF7DFD10FFA9FD1CFFA8FD12FFA8FD08FF%A8A8FD11FFA8FD0EFF7DA8FD0AFFA9A9FD05FFA87DFD10FF7EFFFFFFA8FD%13FFA8FFFFFFA8A8FD11FF52A8FD08FFA8A8FD20FF7DFD0BFFA9FFAE84FD%04FF7DFD11FF7FA9FD1AFFA8FD10FFA8527DFD09FFA8FD11FFA8FD0EFF27%A8FD0AFFA984AE84FFFFFFA87DFD10FFFD04A9CFFD17FFA8A8FD11FF52A8%FFA8FFFFA8A8A8FF7DFD21FF52FD0BFFA9AEFFFFA8FFFFFF7DFD13FFA9FD%19FFA8FD10FFA8527DA827A87D52277D277D7DFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA87E83FFA8A8FFFF7D27A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%CFA9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8FD11%FF7DA8FF7DA8A87DA87DA87DA8FD2CFF5AFFFFFFA8FFFFFF7DFD13FFA9A9%FD18FFA8FD10FFA87D7DFD08FFA8A8FD11FFA8FD19FFA884FFFFFFAEFFFF%5FFD15FF7EFD17FFA8A8FD11FF52A8FD08FFA8A8FD2BFFA884FFFFFF84FF%AE83AEFD14FFA9FD18FFA8FD11FF5252FD08FFA8A8FD11FFA8FD18FFAE59%FD04FFA8A8AEA8A8FD14FF7EA9FD12FFA8FFFFFFA8A8FD11FF52A8FD08FF%A8A8FD2AFF83A9FD04FFAEAEA8FF83FD15FF7FFD17FFA8FD10FF7D527DFD%08FFA8A8FD11FFA8FD17FF83A9A9FD05FF5FAEFFAE83AE83AEFD10FFCFA9%A9FD15FFA8A8FD1BFFA8A8FD29FFA87FFD06FF83AEFFFFAEFFFFA884A8FD%05FF84FFFFAE83FFFFAEAEFFFD04A9FD14FFA8FD1BFFA8A8FD11FFA8FD11%FFA8FD05FF7DA9FD06FFA8FD07FFAEA883AFFFFFA8A88484A8AE83838384%A8FFA8A9A9A9FD12FFA8A8FD1BFFA8FD29FFAEA9A9FD11FF83AEFFAEFD06%FFA8FFA8AEFD04FF7FFD13FFA8FD1BFFA8A8FD11FFA8FD16FFAE7EFD13FF%83AE83FD09FF83FD05FF7EFD11FFA8A8FD1BFFA8A8FD26FFA8AE83A9FD14%FF5FFD0AFFAEA8FD05FF7FFD11FFA8FD1BFFA8A8FD11FFA8FD13FFA8AEA8%FF7FFD1FFFA88384FD05FF7EFD0BFFA8FFFFFFA8A8FD1BFFA8A8FD25FFAE%FFFFFFA9FD21FF84AEFD05FF7FFD0FFFA8FD14FFA8FD05FFA8A8A8FD11FF%A8FD13FF83FFFFFF7FFD1FFFA8FFAE84FD05FFA9A9FFA9A9A9FD04FFA9A9%FFFFFFA8A8FD13FFA87DA8A852FD047DA8FD24FFA8AEFFFFA9A9FD22FFA8%AFA883FFFFFFFD06A9FFFFA97EA9A9FFFFFF7EFD14FF52A87D7D527D527D%7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFCB83A8FFA8FF7EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF59A8A884FFFFCFFFCFFFA8A9%7E7F7EFFA8A37EA953A8FD1BFFA8FD24FFAE84FFFFFFA9A9FD26FFA8AEAE%FD0DFFA9FFA8FD1BFFA8A8FD11FFA8FD10FF83A8FD04FFA9A9FD1FFFA8FD%07FF83AE83AEFD0CFFA8A8FD1BFFA8A8FD21FFAEA8FD05FFA9FD2BFF83FD%0DFFA8FD1BFFA8A8FD11FFA8FD0FFF83FD06FFA9A9FD1FFFA8FD0BFF83FD%07FFA8FFFFFFA8A8FD1BFFA8A8FD20FFA8AFFD06FFA9FD2DFFA8FFAEFD09%FFA8FD1BFFA8A8FD11FFA8FD0EFFA8A8FD06FFA9FD20FFA8FD0CFFA88383%83FD07FFA8A8FD1BFFA8A8FD20FFA8FD07FFA9FD30FFAEA8FD07FFA8FD1B%FFA8A8FD11FFA8FD0DFFA8AEFFFFA8FFFFFFA9A9FD20FFA8FD0FFFAF83A8%FFA883A8FFA8A8FD1BFFA8FD20FFAEAEFD07FFA9FD32FFAE83AEAEAE84A8%A8FD1BFFA8A8FD11FFA8FD0DFF83FD07FF7FFD21FFA8FD17FFA8A8FD1BFF%A8A8FD1FFFAEFD07FFA9FD3AFFA8FD1BFFA8A8FD11FFA8FD0DFF83FD06FF%A9A9FD21FFA8FD13FFA8FFFFFFA8A8FD1BFFA8FD1FFFA8FD07FFA9FD3BFF%A8FD14FF7DFFA87D7DA87DA87DFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF%7DA8A8AFA8FFA87E7E7F7EA87D83A8CBA8FFA8A87E7FA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8FD13FFA852A8A8FD%04527DA87D847D847D847D847D847D847D847D847D7D59847D847D847D7E%7D7E7D7E7EA87E7E7EA87DFD09A87DFD07A87DFD07A87DFD07A87DFD07A8%7DFD07A87DFD05A87DFD06A8FD14FF7DA8A8A87D7D527D7DA87DA8FD0CFF%7DA87DA87D7DA8FD0BFFA8A87DA87DA87DFD0CFFA8FD057DA8FD0CFF7DA8%FD047DA8FD0BFFA87D7DA87DA87DFFFFFFA8FD18FF7DA8FD04527DFD0BFF%A8FD057D52A8FD0BFFA87D7D5252527DFD0CFF7D7D527D52527DFD0BFFA8%7D7D52527D52A8FD0BFFA8527D7DA87D7DFD1CFFFD07A8FD0CFF7DFD05A8%FD0CFFFD07A8FD0CFFA87DFD05A8FD0BFFA87DFD05A8FD0CFFFD04A87DA8%7DFD4EFF7DA8A8FFA8FD7AFFA85227522752A8FD7BFFA87DA8A8FDFCFFFD%BFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-08-07T20:10:15-07:00</xap:CreateDate>
         <xap:ModifyDate>2014-08-08T19:33:08-07:00</xap:ModifyDate>
         <xap:MetadataDate>2014-08-08T19:33:08-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmaeUv&#xA;zMXyzFph1Ot+lys7Xv1+5L/7xmEn1PTDsgvaXfpH4OP7qnEccVVJtC/MG2vLe7jujFYafeX1yUl1&#xA;C4mL28kqSxB0Kn1h6SyRCN2pHUFfZVk2kDzvdaVZ3NzqOmLczwxyyrHYTlAzpyIWt6agE9e+Kov6&#xA;r5u/6uWn/wDSBN/2WYq76r5up/x0tPr/AMwE3/ZZirvqvm7/AKuWn/8ASBN/2WYqpTQedFkgEeo6&#xA;aVdysxaxmBC+m5BUfXNzzC7eFcVVfqvm7/q5af8A9IE3/ZZirvqvm6n/AB0tPr/zATf9lmKu+q+b&#xA;v+rlp/8A0gTf9lmKu+q+bqf8dLT6/wDMBN/2WYqpQwedWlnEmo6aESQCErYzklOCGrf6ZseRYfKh&#xA;xVV+q+bqf8dLT6/8wE3/AGWYq76r5u/6uWn/APSBN/2WYq76r5up/wAdLT6/8wE3/ZZiqldf4ntL&#xA;Wa6uNV0+OCBGllc2E9FRByY/72dlByUIGUhEcyqG0W682alpsVwdQsIbniFu7ZrCcNDOFBeJ1N5U&#xA;FSfpG42IOTzYTjlR+Y5Ed4/H2oBtHfVfN3/Vy0//AKQJv+yzKku+q+bqf8dLT6/8wE3/AGWYqhNR&#xA;uvMWnpE9zqdn+/k9KFItLu5nZ+JegSK6dvsIx6YqgJte8yB4RFdIyM5E7NoOqgqnBiCo9bc8+I+V&#xA;cVVP05rv/LaP+4Bqn/VbFW/05rlP97BX/tgap/1WxVr9Oa7/AMto/wC4Bqn/AFWxVv8ATmuU/wB7&#xA;BX/tgap/1WxVSXXfMv1mRWukFsEQxuNB1XkXLNzBHrdAoWnzxVedc1/lG8d/ayLFc2cd5ay6XeWk&#xA;piu7hYOSGe4HH9qjcGFRirLsVdirsVdirsVdiqF1b/jlXv8Axgl/4gcVWaHU6Jp5PX6tD/ybHiB+&#xA;rFUbirsVdiqnKTzh93Nev8jex/hiqpirsVdirsVU4iec3s4p1/kX2H8cVVMVdiqE1e/Nhplzdqok&#xA;liQ+hETT1JW+GKOvi7kKPnluDHxzEeh5+Q6n4DdBNMeS01hDa+Wr55r+F5EnfVHUnnaxfvJI5WA4&#xA;czMqx8T9qN+5V6Z5njN5o1E1XD/SOwI8uGzfSQ6WGNHknGq6TLI73+mzG11VYyqSCjRzcQSkc8Z2&#xA;deXeoYb8WFTmJhzgemY4oX8R5g9Pu7wWRCM0+8S+0+2vYxRLqJJkHWgkUMP15VlxmEjE9DSgojK0&#xA;pVrP/HR0H/mOf/qBucVV7iHXWmY293axwn7CSW0kjDbuwuIwf+BGXxlireMr/rD/AIko3V7NL9EY&#xA;Xs0U0lfhaGJoQB4ENJNX78ryGJPpBHvN/oChg3my2/NefXLhNAu2tdMcwLFKosWRIS0YnZROjy/W&#xA;AeZHIGPh255BKFkg/N5IZ45Li7lmQwJBNaDSVV7dJkE70nTa8eMOV29Ch6BsVSN7/wDPWXVbnTYX&#xA;nF1Bp8D3M6W1qtj9YZtPLiymuIkEk/A3nIPI0f2fsnoqmJs/z2Gnzyi/L3UscarB6WnK0XD6gXeF&#xA;aFPVcG9qssrJULQjYlVPF/Svpxfpc8tV+reXPr7cUSs/6Rk9T4Y2dB8VdlYjwNMVZzirsVdirsVd&#xA;irsVQurf8cq9/wCMEv8AxA4qp6EKaJp4/wCXaH/k2PAn9eKo7FXYq7FVOUVkh9nPh/I3uP4/xxVU&#xA;xV2KuxV2KqcQpJN7uPD+Rfc/w/jiqpirsVSrVgbjU9LsP91mR7ydf5ktQOA+ieWJvozKwemE5eXC&#xA;P87/AI6JBBTXMVLsVSryv8OhwW46WbS2SmtaraSvbg/SIsydZ/eE/wA6pf6YCX6UR5JrmMlKtZ/4&#xA;6Og/8xz/APUDc4qiZ5dYErCC2t3iH2Xe4dGPzUQuB9+RJLWTK9gPn+xWtXvGQm6ijievwiKRpQR7&#xA;lki/VhF9WUSerA/PHnD8wtFu7l9I0VNQ0+OeC3hAtrqaVi9u0zyH0SapzVYQVQ8WaprTixZJannP&#xA;80YJ79JrFZbWzuXR7ltJv+SxSahLAnppFIfrKxW6JKWhB5KwHZmxV0vnr805IGf/AAzLaz2dut1P&#xA;GsMkqzyXFn9Yht4z8Rb0pFeGfjRufGhUNRlVbVfP35hac99YvopuL2xV5GurfT76a3kjBsuBg4MV&#xA;ldxcXNIxKN4/iKb4qnt/NLPdvNKhjllj8vPJGy8GVm1KQlSpLcSD2rirMcVdirsVdirsVaDoRyDC&#xA;leNa7Vrxp9+2KoPVpYv0XeDmtTDKoFRuQhqPoxV2h1OiaeT1+rQ/8mx4gfqxVG4q7FXYqpyk84fd&#xA;zXr/ACN7H+GKqmKuxV2KuxVTiJ5zezinX+RfYfxxVUxV2KpX/e+ZxTb6lZGvv9clFPu+qH78yeWH&#xA;+tL/AHI/48jqmmYyXYqxa6vdQtYNVsNKZF1KfUPQ031RyVWnt0upXI2FF5Sv7kU65s4Y4SMJz+gQ&#xA;uXwkYj/ehhfcyHTb6O/062vo1KpdRJMqN9pQ6huJ9xWhzAy4zCZiehpkDa3UdLs9QSJLkSfuJPVh&#xA;eKWWF1fiyVDxMjfZdh175WlAyeW9PDxATX1GYhv9yF904k/79Ph7Yqv/AMM6d/v6+/7iF9/1WxV3&#xA;+GdO/wB/X3/cQvv+q2Ku/wAM6d/v6+/7iF9/1WxV3+GdO/39ff8AcQvv+q2KrB5b0/13X1r7iFUg&#xA;fpC+6ktX/dvt44qhdW0iysLISweq0s17piySTzTXDlY76IqvKZ5CAC7bDxxVkWKuxV2KuxV2KvM2&#xA;/Jp/8LL5dj1WGO1WYThhZbBjYtp7MEE4AkMbesH/AN//ALylPgxVBS/kmLO6g1YawCNMlu7wQLa8&#xA;DJ6sUCDm/qtylItB6kjKeVahVIBxV6J5dsoYfL+nRK0pUW0W7yyO28e/xM7n9rb4ttqdBiqY/V4/&#xA;F/8Ag38QfH2xVxgQilX8Ptv4EePvirvq8fi//Bv4g+PtiqnNboWhFW+0f22r/duOvIHv7/xCqp9X&#xA;j8X/AODfxB8fbFXGBCKVfw+2/gR4++KvLvNH5xv5f1WXT59HDul9e2nrm9uBF6VnbWt567GO2lKD&#xA;0rrlKCKIqPRnNFZVOfy5/MKXzde61pl9pL6PqOh/Vlurb621wQ1xG/JWYJFxZHR1odyAH7jFWaRW&#xA;8fqTGr7uD9tv5UP8x8Pb7uqqoYEIpV/D7b+BHj74q76vH4v/AMG/iD4+2KpZp8CS6zq0xLD0jBZj&#xA;42BpHCZq1r/y9nv+rMnLtjgO+5fM1/vUDmmf1ePxf/g38QfH2zGS4wIRSr+H238CPH3xVLE8uxDz&#xA;HLrLTSENbJbx2/JuKuJC8kta9WUIvsAf5jmSdR+5GOv4rv7h95+KK3tZocEdvNqOmEuBbTtNAOTA&#xA;mC7BlDbHoJXlRf8AU8Rh1HqEZ94o++O33UfigJt9Xj8X/wCDfxB8fbMVkpzW6FoRVvtH9tq/3bjr&#xA;yB7+/wDEKqn1ePxf/g38QfH2xVxgQilX8Ptv4EePvirvq8fi/wDwb+IPj7Yq4wIRSr+H238CPH3x&#xA;VTW3j+syGr7on7bfzE/ze3h/HFUr80WcTWVpIWl5Q3+nlAJZApP12EfEobi/X9oHFU8xV2KuxV2K&#xA;uxV2KoXVv+OVe/8AGCX/AIgcVYl5y8weadB/LFNU8r6adW1yKGyW2sRBLc8xI8aSH0omhkPFGY9R&#xA;TqdhirG5fzW/MyC/1Ef4Cubix06a/i/drdJLcrFcQR2ctvWB1YOkzcxvVVZ1O3DFVW1/ObzNcab5&#xA;huU8kXstzoSwhLKE3cklxPKtu5iCmyRlbhc81HFmCrWVYqjFV13+Zn5l3Wqy6TpfkuWymW71C1t9&#xA;Qvku5rWVLa1le0nrHDAiJNOsYbnKNjRC5JKKqH/K2/zBSe3t5Py/1Ceae0n1OOVVuIIo4/TuZ7ez&#xA;mPoXAW69JII3VWP7xm2WgQqqg/OHz0gtEn/LjUluLmW1RhGbmWJIrhecsjSLZ7G3V4wyuFq5YA0Q&#xA;tiqjq/5wfmJp/mXUbCD8u9Q1LTIPrK2d1brdJVrQz/FJI9t6bC49OMxiLnQNszseAVWa5+bf5nRq&#xA;G0nyHPwivbeC4a4TUZG9CWWZHYRxWSmipCJGkiMoUOg4sxKqqy/8v/POv+Z59Rj1XyrfeW1sktGg&#xA;lveXG4a5iLyLHyjiP7lhxPz3Cn4cVZbETzm9nFOv8i+w/jiqpirsVSvy+A8d9dH7dzfXHPp/x7v9&#xA;VXp/kW65k6nYxj3Rj9vq++SAmmYyXYq7FUpvR9V8wWN2KiO9R7GcDoXUGeBm9l4SqPd8ysfqxSj/&#xA;ADfUPuP+9+TE802zFZKcpPOH3c16/wAjex/hiqpirsVdirsVU1J+sOO3BPHxb2p+OKpd5m/450P/&#xA;ADHaf/1HQ4qmuKuxV2KuxVhtn+YD3P5gXHlaO2t2toCyfXFuojKXWFZWX6uP3gKNyVgQNirCo5UV&#xA;ZliqF1b/AI5V7/xgl/4gcVU9CFNE08f8u0P/ACbHgT+vFUdiry7zt5O/OS71bUJfJ3mSx0bTb+SW&#xA;SS3aGJZSRZQxRN6q2sknqNOj83LsQgTj044q6x8s/n3GIFuvNtnIFa0N05hgZnUxBL1Y+NlCEKuz&#xA;vCxDcuMYYIA/NVCaZ5W/5yCs7XS7a6802F00FrElzM4Uu10l7zchmtOTo2nj0+TVYua0/wB2BVE3&#xA;vlv/AJyAF7d3Nj5rsHhkuL76rYzxQrGltMFWx+NLIyepAWd25Fg3FV7lgqlkXkn/AJyJF7AJPN1o&#xA;1haQ28cQaSskk0csMk003CxhLq6xMoj51+LdyOQZVONI8u/nvDa3jal5ns7i5liuY7SJUh4RMXga&#xA;2f1VsIj6oRZ0d2jZN1b0juuKsm/LnQvNmj+Xmi82at+mNfubmW5vLpWLQLzIVI7dCkXpxqiD4AtO&#xA;RJ74qySIUkm93Hh/Ivuf4fxxVUxV2KpX5Xq3l6wmb7dzCtzL1/vLj98/Xf7TnMnWf3sh3GvlsPuR&#xA;HkmmYyXYq7FUt8yQyS6LctCpe4tgt1boP2pbZhPGv+yeMDMjSSAyC+R2PulsfvRLkj4Zop4UmiYP&#xA;FKoeNx0KsKgj5jKJRINHmEtSiskPs58P5G9x/H+OBVTFXYq7FXYqpqP9Ic/5CeHi3v8Aw/sVS7zN&#xA;/wAc6H/mO0//AKjocVTXFXYq7FXYq8409mH50anEsKSr6KzSORykhJtYkDghRGqvx47uZa/s+nQ4&#xA;qy0edfKZ05NS/Stt9Qkm+rJccxwMvHnxB/1Bzr04fF9nfFUNe+cfK91Z3Nra6lDcXEouLZIoiXYy&#xA;wxBpBRQaBVlQlvs/Eu+4xVNtDqdE08nr9Wh/5NjxA/ViqNxV2KuxVTlJ5w+7mvX+RvY/wxVI/PPk&#xA;rSvOegSaJqks8NrI6uz2zIr1UEf7sSVP2tiVqpoy0ZVYKsQuP+cevJc0upyfW75f0rczXlyjCymV&#xA;ZZ5o539MT20vEFoVDD9sbPyAFFUhsv8AnGXQLrzPPq+tzT/Vba9FxpdnFcxzrOglaVjfl7SEymTn&#xA;xKuZGCfCZWFKKsv/AC38g+UfJmta3YaHeX1xeyW+m/XobyQSJFFDFJDbelxSNRyWNuQ36DoKDFWd&#xA;RE85vZxTr/IvsP44qqYql3mSWSHy9qckTcZVtZvSPfn6ZCU9y1KZkaSIOWIPLiH3olySLzxoXl+6&#xA;tNHTUNTg0eLTpp3tZZnWNmX9HXMDpHIXiZSkMjSkqagIfmKJSJNnql5hpv8AzjPDb6j6LecRJdQy&#xA;W128ENjBFKkAaXZYxKyRKZGlMDpGPTatKsAQFe8W11a3UXq20yTxcnj9SNg6843MbrVSRVHUqw7E&#xA;UxVdBPBcQR3FvIs0EyrJFLGwZHRhVWVhUEEGoIxVfiqU+Wf3WmfUCOLabLJZBO6xRN/o9fdrcxt9&#xA;OZWr3nxfzwJfE/V/srYxTKUnnD7ua9f5G9j/AAzFZKmKuxV2KuxVTUn6w47cE8fFvan44ql3mb/j&#xA;nQ/8x2n/APUdDiqa4q7FXYq7FXntvD5Of857u5F1dP5qiso7c2riNrdIJIzJWPkrSr9j42QqhJAN&#xA;WxVMF/Kry6NKXS/rF4bNZA/AyrUgWpsOBPCpU2Z9Dx4715/FiqCvPyj8o2wXU41nN1pvrz2bM6ng&#xA;rRRqsKnjVY0FulOJDHcMWDMCqyry7p9jB5f06GG2ijiFtFSNEVV+KPfZajfkfvxVMfq1v19JK/6o&#xA;8Qf1gYq429uRQxJTpTiOlCP1EjFXfVrfr6SV/wBUeIP6wMVU5ra3LQgxJTkduK9PTdfEdmPjiqp9&#xA;Wt+vpJX/AFR4g/rAxVxt7cihiSnSnEdKEfqJGKu+rW/X0kr/AKo8Qf1gYqxXRoID+YvmhTGpUWOk&#xA;0WgpubwfqNMVZNFa2/qTH0k3cH7K/wAqHxPdQe38cVVDb25FDElOlOI6UI/USMVSvzFb25soIhEn&#xA;Oe8tF48R8QFzHJIDt04Rkn5Zk6X6ie6Mv9ya+2kSY3+cHlXyJq/lJp/OM89jomkyC7lubQMHQlGt&#xA;1ZhHHK5VfXPRafzfDUZjJeMah5X/AOcYL7Sz6vm6/W1slht5p4olV1Z1uJ44iy2HKN3USB40483A&#xA;5q0u5VVprb8i5vNNta3+s3j6fpZhg0mxktHuLnULoXM+oSjibOWWW3k/SaRoFK+rv9sBXxV6D+W3&#xA;5JeQbF/LvnLR7nUn4wNfWUN01sisuoWyr/pEdvDGruqU3qTy3LNtir1g29uRQxJTpTiOlCP1EjFU&#xA;rsLa3i13VYPSUiUW95UqNjKphp0/5cw2ZOTfFA93FH5b/wC+QOaYTW1uWhBiSnI7cV6em6+I7MfH&#xA;MZKp9Wt+vpJX/VHiD+sDFXG3tyKGJKdKcR0oR+okYq76tb9fSSv+qPEH9YGKuNvbkUMSU6U4jpQj&#xA;9RIxVTW1tvrMh9JKlE/ZX+Ynx8QO39iqV+aLGyeytJWt4mkgv9PaFyilkP12FaqafDsSNsVTzFXY&#xA;q7FXYq8t8uwat/ytvVZJJTJZpcThY0+ufu1a3jKq5kh9BkLNy+GQEOSoqF3VepYqhdW/45V7/wAY&#xA;Jf8AiBxVZodTomnk9fq0P/JseIH6sVRuKuxV2KqcpPOH3c16/wAjex/hiqpirsVdirFdF/8AJj+a&#xA;P+YHSf8AiV5irJoiec3s4p1/kX2H8cVVMVSvVDz1bRoV+2k8tww/4rS2kiJ/4KdMycO2OZ8gP9kD&#xA;+goPMInVdI0nV7GTT9WsoNQsJuPrWl1Ek8L8GDLyjkDKaMoIqOuYyWMWfl3yDq+p6xpc3lbTGGj3&#xA;cfJpLS2dZJp7dLgyhTH8LfvqE9TiqZS/l3+X8xdpfLOkyGSR5nL2NsxaSXj6jmqbs/BeR6mgxVPL&#xA;a2t7W3itraJILaBFjggjUIiIg4qqqtAqqBQAYqqYqlb/ALrzRFxH+9ljJ6p/5hJk4f8AUU+ZI3wn&#xA;+jIf7IG/9yEdUwlJ5w+7mvX+RvY/wzGSqYq7FXYq7FVNSfrDjtwTx8W9qfjiqXeZv+OdD/zHaf8A&#xA;9R0OKprirsVdirsVYTpWn+c7L8w7+s97P5Uuudyq3MttLDHK8cY4wkr9ZRA4YCEfCPtcvi44qzbF&#xA;ULq3/HKvf+MEv/EDiqnoQpomnj/l2h/5NjwJ/XiqOxV2KuxVTlFZIfZz4fyN7j+P8cVVMVdirsVY&#xA;rov/AJMfzR/zA6T/AMSvMVZNEKSTe7jw/kX3P8P44qqYqlb/AL3zPDx/49LKX1P+jqWPh/1CtmSN&#xA;sJ/pSH+xB/4oI6ppmMlivlX/AJS/zr/zHWf/AHTbbFWVYq7FXYqleq/BqmjSjZmuJIHb/it7aVyP&#xA;peJMycO8Jj+iD/sgPuJQeiYSiskPs58P5G9x/H+OYyVTFXYq7FXYqpqP9Ic/5CeHi3v/AA/sVS7z&#xA;N/xzof8AmO0//qOhxVNcVdirsVdirzDTWsIPzn1aMynkAsxjM9zJGsstmnKRopg0KSenDx5RMAE4&#xA;qeu6rIIvzQ8uyaBFrfpXSW0kxhMTRqJUAtDfmR150CCzX1uvLjtTl8OKoO4/NXyre262MRnW61J5&#xA;7W0jdFHNVtxMLioYj0XWRArdeTAEA1oqyby7qFjP5f06aK5iliNtFSRHVlPGP4t/bifuOKpj9Zt+&#xA;nqpX/WHiB+sjFXG4twKmVKda8h0oT+oE4q76zb9PVSv+sPED9ZGKqctzAGiPqoF5Gp5duDt79lr2&#xA;xVU+s2/T1Ur/AKw8QP1kYq43FuBUypTrXkOlCf1AnFXfWbfp6qV/1h4gfrIxViuj2Oq2/wCYvmXV&#xA;LqeE6Ne2Wmrp/EUblCLn1VZ+VDx3bp0b23VZNFdW/qTAyps4H2h/Ko707tiqobi3AqZUp1ryHShP&#xA;6gTirGZLtLzzXeWkNz6KGOKG7kicK/p24MhQNUsjSPfoARQ0DUNel2Y/u4R7+KX3R/3rRMky4R8f&#xA;x8fvTTQpLW2gurNZFCWlzKqksKcZR9ZXcnsktPozGhtsnCKBHcf2/pY95M1nTLnzt57t4pwZbe/s&#xA;xMpDLSthBGKFgAfiUjb28Rk25mZuLcCplSnWvIdKE/qBOKu+s2/T1Ur/AKw8QP1kYq43FuBUypTr&#xA;XkOlCf1AnFULqMFjfwCCS4MRSRJEkicK6tG4Iod+p+E/PLMWUwNjf3oItAaZcrbahd6dJcmVIXiu&#xA;Ld5ZDIRBNC4oZG5En1beVtzstPYZdnqUYzAAuwfePL3GKhOfrNv09VK/6w8QP1kZipcbi3AqZUp1&#xA;ryHShP6gTirvrNv09VK/6w8QP1kYq43FuBUypTrXkOlCf1AnFVNbq3+sOPVTZV25DryI/WR3/tVS&#xA;vzRfWSWVpE1xEsk9/p6woXUM5+uwtRRX4tgTtiqeYq7FXYq7FXnVjcRH84dShklbnGI/S4FSP3tk&#xA;hEMjkBqD0XkEIJUE8zQsMVZQvkTyctpHZLpFstpEweO3CARqy1AIUbfZYr/q/D9nbFVG/wDJvlSD&#xA;TrmSHSbWOSJpr2KRYlDLcNHxMgNKhuKgfIAdhiqa6EKaJp4/5dof+TY8Cf14qjsVdirsVU5RWSH2&#xA;c+H8je4/j/HFVTFXYq7FXYqpxCkk3u48P5F9z/D+OKr5JEjRpJGCIgLO7GgAG5JJxUmmPeUQt3Nq&#xA;2ugH09UuqWrbgNbWqiCNwD/OyswPcEHLMp3A7oj/AIr7yWjDuTLv5e4fgouS8i0+/wBXlf8AuUto&#xA;r6RR9osFkjen+wgTMe6JUyEZSPlf3/qU/K1sYo757qOMazLcA6vLEKLLMsMaRuNz/wAe6x/ThgTW&#xA;/NlhlIipfUOad5NtdirsVdiqS6qot/MGj31aJM01jL2FZIzLEzGo6NCUXru/vmVi9WKUe6pfLY/f&#xA;f+axPNOsxWTsVdirsVU1H+kOf8hPDxb3/h/Yql3mb/jnQ/8AMdp//UdDiqa4q7FXYq7FWJaH5Gut&#xA;N85an5kmvoL1tSBT97asbqKIO7pFHctO/GMB1UosYU8FNA3JmVZbiqF1b/jlXv8Axgl/4gcVWaHU&#xA;6Jp5PX6tD/ybHiB+rFUbirsVdiqnKTzh93Nev8jex/hiqpirsVdirsVU4iec3s4p1/kX2H8cVY/5&#xA;0nkaG10+GhmuXJRWAZS1VhiLKftCOeeOUjwQ5ZggJZAJfSPUfdHevi0ZtyI/H8fEhPrO0gs7SC0t&#xA;14QW0aRQp1oiKFUfcMGSZnIyPMm28BKtbsru41fTPSjJtWLreSD9lY3juI+XiGaHh/sjlEwSQ4+W&#xA;BMo1y6/Yf0Im7sNROofWbG4jgWeIRXRkQyH92xMbRgMq8qOwJavbY0phMTezKUJcVxNXzWi51WwP&#xA;G8ja/tR0u4E/fKP+LYF+1/rRDc/sAY2Rz3XilHnuO8c/iP1fJH2t5a3cImtZUmiJI5oQwqOoNOhH&#xA;cZIEHk2RkJCwgZPMNlFczRSxzJFA/pG79MvCZOAcoGTkQRyA+IAFvhFW2yPGGs5wCQb9/T8f2LP8&#xA;SWMRP19JNNjKl4JbsLGsqgEnieRo1BXg1Hp260fEHXZHjgfV6ff+Ps5qNxLHr1lcWJSaxmDgIZVA&#xA;lQmMy29wi/FSjgMvKlGUg7imXafPwTEq5dO8d3xGzKE+O9q/HN1r5lkpbLfafc2zO6W11cMgW3ju&#xA;WPAIC7LI6NJRUkRCpqN8yp6Qb8MonqB1MfhsDXME3zZ8SeZhMnYq7FVNSfrDjtwTx8W9qfjiqXeZ&#xA;v+OdD/zHaf8A9R0OKprirsVdirsVdirsVQurf8cq9/4wS/8AEDiqnoQpomnj/l2h/wCTY8Cf14qj&#xA;sVdirsVU5RWSH2c+H8je4/j/ABxVUxV2KuxV2KoK6vUskllMbzM8yRxwxcebu4VQByYD3NSKDfpv&#xA;gJphOfCEmnFxca9YXVxA9ur3awRQSlSxSG0uZS/wMw/vXA6/sg+GX6blkP8AR/30WuNmVkV0/H46&#xA;MmylvdirsVdiqVapZXUMx1TS4Vkv1XhPbkhBcx9lZjsHQ7ox91/aqISB5jm05IkHiiPV96L0yy+p&#xA;WMVuW9SRQWmlpTnK5LyPTtzdi2SiKDPHDhjSIkiikAEiK4Vg6hgDRlNQRXuDhpkRaUa0TY3trq6o&#xA;zwpWG/WMcm9HizJLxBBb0WJ2AJ4sxpkJbG2rJ6TxfP3fs/SUwubey1PTnhk4z2d5FQlTVWRxsysv&#xA;sagjLsWQwkJR5ht2I8kDp2o3ltPDperj/S2BW1vlp6V3wWrdKenLxUs0Z7VKlgG435cUZAzx/T1H&#xA;WP6x0v51YsA9Cm+YrJ2Kqaj/AEhz/kJ4eLe/8P7FUu8zf8c6H/mO0/8A6jocVTXFXYq7FXYq7FXm&#xA;a/nTE3lVtc/R0ImFwYlszeChjFgL+vqelX1KMLcx8P8Aej93y/axVSm/N/65I2mDT7dJbq7udOWP&#xA;66TPxiQ8pBH6ATlGP76NpBwqgBdnAxVnvl29im8v6dKqygG2i2eGVG+FN/hdEb9nbbfbxGKph9Yj&#xA;8H/4B/EDw98VcZ0ArR/H7D+BPh7Yq76xH4P/AMA/iB4e+KrJZ1DRGj05GvwPWnBj2U+H+ZoCqv8A&#xA;rEfg/wDwD+IHh74q4zoBWj+P2H8CfD2xV31iPwf/AIB/EDw98VcZ0ArR/H7D+BPh7YqlLzrc+YUh&#xA;o/p2Cm5ccHH7yZRBF+zuOPrVp8/lA7y9zUd5gd2/z2H6V93Oh8x6crByi2t5KBwf7StAoOw/ldh/&#xA;bTMyH9zL+tH/AH36mzqmf1iPwf8A4B/EDw98xkuM6AVo/j9h/Anw9sVd9Yj8H/4B/EDw98VcZ0Ar&#xA;R/H7D+BPh7Yq76xH4P8A8A/iB4e+KuM6AVo/j9h/Anw9sVd9Yj8H/wCAfxA8PfFVks6hojR6cjX4&#xA;HrTgx7KfD/M0BVSYahbaHdS2hjlNrdFptNgiiYsZiw9W3jWg6s3qLU0oXOyJUV3w7ONxDGa6Hl+k&#xA;fp+fQKkksGu6ZPbzJLZXtvIKgKXlt54x6sUikAhtqMOxB4kbkZkafOYSuvIjvHUfFthLiHcQ2Lzz&#xA;SyrEbazibYPdB7mQA7AsIPQjrufs+sP9bbLqwc7mfKgPts/Ph+DLdqPzMtrEy61by2c8QJeaOGaW&#xA;2dQCwkSVUPGoH2HowO1COLMTpuI3jPED7hL3V+kbfHYN96hF5j1JLp7i70yaPSpAoheNJZLmNakC&#xA;SeAR1CuT0QsyjdgBy4k6eB9MZesf6X3CX66B6dLbKH13zX5euobO0tL1Lq5nv7DhHAGlKhb2Ekye&#xA;mGEYFKVegrt1yqemyQFyiQPMUmwyvKEuxV2KuxV2KtcEpTiKVrSneta/fiqF1UAaVe0FKwSk/Pgc&#xA;VWaEKaJp4/5dof8Ak2PAn9eKo7FXYq7FVOUVkh9nPh/I3uP4/wAcVVMVdirsVS/WLq4QW9naMUu7&#xA;2QRrIACY41+KWWjBh8KCi1BHMqD1yMj0DVlkdgOZ/BP460v03T7ezNz6fJ5JZA0s0jF5HYIoqzFm&#xA;PyGwHYUwiNMoQEVCL4/M9zy/497KD0/+e8s3P/kwuZR2wjzkfsEf1ll1TTMZLsVdirsVdirsVdiq&#xA;nKKyQ+znw/kb3H8f44qqYqgrrSlmuhdR3E1rMU9KVoSg9RASVD81f7JJ4kUIqd8iY721yx2bulG0&#xA;nurO7TT72U3Cz8zZXbAKzcfiMMgAC81XdSPtKDtUVIBINFjEmJ4TvfI/oTPJtymo/wBIc/5CeHi3&#xA;v/D+xVLfMoA06IgUJv8ATyff/ToBiqbYq7FXYq7FXYq7FULq3/HKvf8AjBL/AMQOKrNDqdE08nr9&#xA;Wh/5NjxA/ViqNxV2KuxVTlJ5w+7mvX+RvY/wxVUxV2KuxVLrMCfWL+5bf6tws4u9BwWaRl/1jIoP&#xA;+oMgNyWqO8ye7b9P49yNiJ5zezinX+RfYfxybagNNrJq+sTN9qOWG1X/AFI4EmH/AA1w2ZOXbHAe&#xA;RP2kf71A5pnmMl2KuxV2KuxV2KuxVTlJ5w+7mvX+RvY/wxVUxV2KoXUrEXto0If0pQRJbzgVMcqG&#xA;qOBtWh6juNuhyMhYYZIcQpATS6ppjpe312Lmyb4LxViWKOAE/DMm7OEH+7ObtQfF8IU1iSRuWomU&#xA;N5Gx18vP9fzRlzqmn2hM91dRQW7InCWRwqmvI7MaA7b7HJmQHNtlkjEWTQQ3mQhtMgZTUG+08gjo&#xA;R9ehws02xV2KuxV2KuxV2KoXVv8AjlXv/GCX/iBxVT0IU0TTx/y7Q/8AJseBP68VR2KuxV2Kqcor&#xA;JD7OfD+Rvcfx/jiqpirsVd03OKpd5eBbSYbg9bwvd0PUC5dplU/6quF+jIQ5NWH6b79/nuiw8cQu&#xA;JZGCRo3J3NAAAi1JNT4d6fxywAk0G1A+W43/AEWl1KpW41BmvJlYUceueSI1e8UfGP8A2OZGrI4+&#xA;Eco+n5dfibPxRFNMxkuxV2KuxV2KuxV2KqcorJD7OfD+Rvcfx/jiqpirsVdirsVQNppOl2t/NcW1&#xA;pDBNJGoeSONEYjkxNSu+59vv7REQGEccQbAASnXNE022s7eWCNk4X9gY4vUkMKE30NfThLGNP9io&#xA;xEAERxRBsfj4cmSZJsdirsVdirsVear5u/Mg+WIbj9Fk60bkK8P1G5CmM2Rl4cC3wj6+Pq3qcqBP&#xA;3v2TyxVIbn80vNsV02nazFb2MX1h7fUJJbS5iWKKZI+IZ2YiNEAuXWYgrKI/hp1ZVkml+dfMdra2&#xA;WmzQaBJdxuNN5Lq90qSXUHGKRUrppG0jKh3PFyEJ5bYWNlkX178xP+rJpH/cWuf+8bjsty7vx8nf&#xA;XvzE/wCrJpH/AHFrn/vG47Lcu78fJbJqX5gxxtI+i6OqICzMdWudgNyf+Ob4Y7Lcu78fJj8v5i66&#xA;zWzQwaEQYRfNGuqXsjvaurIrIq6Zy+3Q9CaA7d8dluXd+PkjdH87+ZNakkj0qy0O7kijimkSPWLr&#xA;ksc6CSJiDpgPxKa47Lcu78fJETS/m48hMVpoEMR6Ibq8kcCh/b+rIK/7D6MujLEBvGRP9b/jv6Ue&#xA;ryU50/NS6tPqlzaaMqOGW5mt7+5jkdG2ATnZSiM0+0fi9uPXK5iEjtcR8/t2+5hOMpCroIi+1/zb&#xA;pkdsLrS9It0uJo7S2rqlzRppTxjjFNOP2jsMNQ7z8v2trGbzztqWqQy20t95eg029Zw4TULl3a2i&#xA;hjknX1TaxLHyiJYOVIKMCteuW4csMZ4qJkOXTfoa3v7FItmWn615g1GzjvLGz02e2lrwkW/npVSV&#xA;YH/Q6gqy8SDuDWu4zGSiPrXm7/q26f8A9J83/ZHirvrXm6n/ABzdPr/zHzf9keKpPqfni60qS5j1&#xA;FNKtntEjkuFk1CcFUmYrGf8AeLflxbYeGKqFv+YE5EUE0uiteGZLJ1j1GcK10xMfFAbMniZVKA1I&#xA;r8NeQpiqf/WvN3/Vt0//AKT5v+yPFXfWvN1P+Obp9f8AmPm/7I8Vaa882KpZtN08KoqT9fm6D/oz&#xA;8MVY3N+YzMbZ0m0aNaSTyRy6hcLI0UYljKqhswyv6qUCkVPFqDbFUx0rzhfavO8GmJpN5LHHFO6R&#xA;alKxEc6LJG+1n0aORW+RXxGKpp9a83U/45un1/5j5v8AsjxV31rzd/1bdP8A+k+b/sjxVBat5j1r&#xA;SLZbnUbTTraBnEYle+uOIYqW+IiyPFQFqWOwG5xVK4fP1y99Jxk0VoCXgSmoz/DNaI09zzf6nwAW&#xA;Blce2+4OKo1L7XfMWn2U1lb6a+my3VvNJdxX00hCWtyskgRDaJycGIrxZloeuKsrxV2KuxV2KuxV&#xA;2KsV8y/lzo/mOe/fU7m4kt9Rht7ae0AtvTWO2aRl9NmhaVGPrygsH5UY0I2oqhLL8ovKFlqH161W&#xA;aGT64176aMixktcRXfpFVQVT6xbxyV+38IUtx+HFWa4q7FWmBKkAlSRQMKVHuK1GKsMi/KjQFVfW&#xA;uru4lTT5dLS4Y28cogn5hzzhhiJcJIUUmvEdByJJVTrSPKGkaTq17qdmHWW9AUwkj0olrVlhQAcQ&#xA;7fE253xVOsVdiqW69oiaxawW0l1PapDc293yt/S5O1rKs0at6sco4+oiseNDtStKgqsQb8jfIzzL&#xA;NIk7ScrpnZTFHU3kC20nERRoIh6MapSLhUABuWKs00bSbfSdPSygd5FDyzSSykGSSW4laaaR+IVa&#xA;vJIzHiAN9gBiqh5m1+Hy/o82rT2091bWxU3CWqiSVUZgpcISC3GtSBvTpirGIvzp8itZRXM1zLEZ&#xA;EncxelI7A2sH1iYDgDzAToy1Un4a12xVH675E0rzUJ7rULi7S31G0ht3sWjt1EaI/rKQJYHlSWrM&#xA;CeVRU0oQCFUPD+UnlGC+a9gSWGZ7iOdhEY40KRP6q25VEUGL1Dyb9tj9pjirNMVdiq2VC8TortGW&#xA;UgSLTkpIpUcgRUe4xVhSflF5d9O3Wa7vbiW2UFLiR4RI06STSxXMnCJFeaN7qUh2HxFiX5HfFU08&#xA;teQdC8u3bXVgZmkMCWyCZ+YRVSNHK7A8pfQRnqTVhUUqaqsjxV2KpV5k8vQ69Yx2U11PawpPHcP9&#xA;X9I+p6R5LHKs0cyNGWoSvHegxVIf+VVeXvq62i3N2tiJppXtA8RR1mtGsRCSYy6xx28jogVgfiJJ&#xA;LUIVZLomj2+j6aljBJJMqvLK807BpJJbiVppXcqFWrSSMdgB4YqjsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdiqyaGGeJopo1licUeNwGUjwIO2KpWPJ/lISeqNEsPULyyl/qsPLnOoSZ6&#xA;8ftSKOLn9obHFU3xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:E12C002D0120E4118EC0CEC0D3579FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D0F2D2641620E4118EC0CEC0D3579FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
80.4224 388.8 li
88.8452 388.8 li
97.2681 388.8 li
105.691 388.8 li
114.113 388.8 li
122.536 388.8 li
130.958 388.8 li
139.381 388.8 li
147.804 388.8 li
156.226 388.8 li
164.649 388.8 li
173.072 388.8 li
181.494 387.319 li
189.917 385.935 li
198.34 384.753 li
206.762 388.8 li
215.185 388.8 li
223.608 388.8 li
232.03 387.625 li
240.453 387.639 li
248.875 385.391 li
257.298 360.46 li
265.721 286.01 li
274.143 263.441 li
282.566 202.114 li
290.989 143.85 li
299.411 81.9468 li
307.834 57.1909 li
316.257 69.9722 li
324.679 48.271 li
333.102 57.0518 li
341.525 61.9902 li
349.947 116.865 li
358.37 95.6929 li
366.792 122.859 li
375.215 148.831 li
383.638 180.726 li
392.06 238.973 li
400.483 237.823 li
408.906 267.182 li
417.328 285.032 li
425.751 281.524 li
434.174 296.419 li
442.596 302.611 li
451.02 315.248 li
459.442 316.591 li
467.864 313.948 li
476.287 320.769 li
484.709 322.186 li
493.132 314.491 li
501.555 321.003 li
509.977 323.775 li
518.4 320.646 li
0 0 1 rgb
@
72 388.8 mo
80.4224 388.8 li
88.8452 388.8 li
97.2681 388.8 li
105.691 388.8 li
114.113 388.8 li
122.536 388.8 li
130.958 388.8 li
139.381 388.8 li
147.804 388.8 li
156.226 388.8 li
164.649 388.8 li
173.072 388.8 li
181.494 388.8 li
189.917 388.8 li
198.34 388.8 li
206.762 387.486 li
215.185 382.445 li
223.608 347.324 li
232.03 330.038 li
240.453 326.112 li
248.875 300.151 li
257.298 301.6 li
265.721 272.512 li
274.143 265.431 li
282.566 240.577 li
290.989 235.036 li
299.411 284.825 li
307.834 257.438 li
316.257 279.727 li
324.679 275.786 li
333.102 280.669 li
341.525 285.142 li
349.947 289.278 li
358.37 300.8 li
366.792 281.639 li
375.215 286.591 li
383.638 281.285 li
392.06 288.713 li
400.483 280.959 li
408.906 299.613 li
417.328 307.976 li
425.751 323.327 li
434.174 316.316 li
442.596 329.736 li
451.02 328.297 li
459.442 336.117 li
467.864 350.681 li
476.287 347.135 li
484.709 359.193 li
493.132 362.037 li
501.555 357.77 li
509.977 364.202 li
518.4 361.355 li
0 0.501961 0 rgb
@
0.5 lw
0 lc
[1 3 ] 0 dsh
72 388.8 mo
72 43.2002 li
0 0 0 rgb
@
grestore
72 388.8 mo
72 384.8 li
0 0 0 rgb
f
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
72 384.8 li
@
72 43.2002 mo
72 47.2002 li
f
72 43.2002 mo
72 47.2002 li
@
59.3281 400.764 mo
61.2598 400.764 li
61.2598 394.092 li
59.1602 394.512 li
59.1602 393.432 li
61.248 393.012 li
62.436 393.012 li
62.436 400.764 li
64.3682 400.764 li
64.3682 401.76 li
59.3281 401.76 li
59.3281 400.764 li
59.3281 400.764 li
cp
ef
69.1919 397.872 mo
69.7202 397.872 70.1401 397.692 70.4521 397.332 cv
70.7642 396.972 70.9199 396.468 70.9199 395.832 cv
70.9199 395.208 70.7642 394.704 70.4521 394.344 cv
70.1401 393.984 69.7202 393.792 69.1919 393.792 cv
68.6641 393.792 68.2441 393.984 67.9321 394.344 cv
67.6201 394.704 67.4639 395.208 67.4639 395.832 cv
67.4639 396.468 67.6201 396.972 67.9321 397.332 cv
68.2441 397.692 68.6641 397.872 69.1919 397.872 cv
69.1919 397.872 li
cp
66.8398 401.58 mo
66.8398 400.5 li
67.1279 400.644 67.4282 400.752 67.7402 400.824 cv
68.04 400.896 68.3398 400.932 68.6401 400.932 cv
69.4082 400.932 70.0078 400.68 70.416 400.152 cv
70.8242 399.624 71.064 398.832 71.1362 397.752 cv
70.896 398.088 70.6079 398.352 70.272 398.532 cv
69.9238 398.712 69.54 398.796 69.1201 398.796 cv
68.2319 398.796 67.5361 398.532 67.0322 398.004 cv
66.5278 397.476 66.2759 396.756 66.2759 395.832 cv
66.2759 394.944 66.54 394.224 67.0679 393.672 cv
67.5962 393.132 68.3042 392.856 69.1919 392.856 cv
70.2002 392.856 70.98 393.252 71.5078 394.02 cv
72.0361 394.8 72.312 395.928 72.312 397.392 cv
72.312 398.784 71.9761 399.876 71.3281 400.692 cv
70.668 401.508 69.792 401.916 68.688 401.916 cv
68.3882 401.916 68.0879 401.88 67.7881 401.832 cv
67.4761 401.784 67.1641 401.7 66.8398 401.58 cv
ef
79.272 393.204 mo
79.272 394.284 li
78.9722 394.14 78.6719 394.032 78.3721 393.96 cv
78.0601 393.888 77.7598 393.852 77.4722 393.852 cv
76.6802 393.852 76.0801 394.116 75.6719 394.644 cv
75.2642 395.172 75.0239 395.976 74.9761 397.032 cv
75.2041 396.696 75.4922 396.432 75.8398 396.252 cv
76.188 396.072 76.5718 395.976 76.9922 395.976 cv
77.8682 395.976 78.564 396.252 79.0679 396.78 cv
79.5718 397.308 79.8359 398.04 79.8359 398.952 cv
79.8359 399.852 79.5601 400.572 79.0322 401.112 cv
78.5039 401.652 77.7959 401.916 76.9199 401.916 cv
75.9121 401.916 75.1318 401.532 74.604 400.764 cv
74.064 399.996 73.7998 398.868 73.7998 397.392 cv
73.7998 396.012 74.124 394.908 74.7842 394.092 cv
75.4321 393.276 76.3198 392.856 77.4238 392.856 cv
77.7119 392.856 78.0122 392.892 78.3242 392.94 cv
78.624 393 78.936 393.084 79.272 393.204 cv
79.272 393.204 li
cp
76.9199 396.912 mo
76.3921 396.912 75.9722 397.104 75.6602 397.464 cv
75.3481 397.824 75.1919 398.328 75.1919 398.952 cv
75.1919 399.588 75.3481 400.092 75.6602 400.452 cv
75.9722 400.812 76.3921 400.992 76.9199 400.992 cv
77.4482 400.992 77.8682 400.812 78.1802 400.452 cv
78.4922 400.092 78.6479 399.588 78.6479 398.952 cv
78.6479 398.328 78.4922 397.824 78.1802 397.464 cv
77.8682 397.104 77.4482 396.912 76.9199 396.912 cv
ef
84.4561 392.856 mo
85.4282 392.856 86.1719 393.252 86.7002 394.02 cv
87.2158 394.8 87.48 395.928 87.48 397.392 cv
87.48 398.868 87.2158 399.996 86.7002 400.764 cv
86.1719 401.532 85.4282 401.916 84.4561 401.916 cv
83.4722 401.916 82.7158 401.532 82.2002 400.764 cv
81.6841 399.996 81.4321 398.868 81.4321 397.392 cv
81.4321 395.928 81.6841 394.8 82.2002 394.02 cv
82.7158 393.252 83.4722 392.856 84.4561 392.856 cv
84.4561 392.856 li
cp
84.4561 393.792 mo
83.8438 393.792 83.3882 394.092 83.0762 394.692 cv
82.7642 395.292 82.6201 396.192 82.6201 397.392 cv
82.6201 398.592 82.7642 399.492 83.0762 400.092 cv
83.3882 400.692 83.8438 400.992 84.4561 400.992 cv
85.0679 400.992 85.5239 400.692 85.8359 400.092 cv
86.1362 399.492 86.292 398.592 86.292 397.392 cv
86.292 396.192 86.1362 395.292 85.8359 394.692 cv
85.5239 394.092 85.0679 393.792 84.4561 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
156.226 388.8 mo
156.226 43.2002 li
@
grestore
156.226 388.8 mo
156.226 384.8 li
f
156.226 388.8 mo
156.226 384.8 li
@
156.226 43.2002 mo
156.226 47.2002 li
f
156.226 43.2002 mo
156.226 47.2002 li
@
143.568 400.764 mo
145.5 400.764 li
145.5 394.092 li
143.4 394.512 li
143.4 393.432 li
145.488 393.012 li
146.676 393.012 li
146.676 400.764 li
148.608 400.764 li
148.608 401.76 li
143.568 401.76 li
143.568 400.764 li
143.568 400.764 li
cp
ef
153.192 397.872 mo
153.72 397.872 154.14 397.692 154.452 397.332 cv
154.764 396.972 154.92 396.468 154.92 395.832 cv
154.92 395.208 154.764 394.704 154.452 394.344 cv
154.14 393.984 153.72 393.792 153.192 393.792 cv
152.664 393.792 152.244 393.984 151.932 394.344 cv
151.62 394.704 151.464 395.208 151.464 395.832 cv
151.464 396.468 151.62 396.972 151.932 397.332 cv
152.244 397.692 152.664 397.872 153.192 397.872 cv
153.192 397.872 li
cp
150.84 401.58 mo
150.84 400.5 li
151.128 400.644 151.428 400.752 151.74 400.824 cv
152.04 400.896 152.34 400.932 152.64 400.932 cv
153.408 400.932 154.008 400.68 154.416 400.152 cv
154.824 399.624 155.064 398.832 155.136 397.752 cv
154.896 398.088 154.608 398.352 154.272 398.532 cv
153.924 398.712 153.54 398.796 153.12 398.796 cv
152.232 398.796 151.536 398.532 151.032 398.004 cv
150.528 397.476 150.276 396.756 150.276 395.832 cv
150.276 394.944 150.54 394.224 151.068 393.672 cv
151.596 393.132 152.304 392.856 153.192 392.856 cv
154.2 392.856 154.98 393.252 155.508 394.02 cv
156.036 394.8 156.312 395.928 156.312 397.392 cv
156.312 398.784 155.976 399.876 155.328 400.692 cv
154.668 401.508 153.792 401.916 152.688 401.916 cv
152.388 401.916 152.088 401.88 151.788 401.832 cv
151.476 401.784 151.164 401.7 150.84 401.58 cv
ef
158.184 393.012 mo
163.812 393.012 li
163.812 393.516 li
160.632 401.76 li
159.396 401.76 li
162.384 394.008 li
158.184 394.008 li
158.184 393.012 li
158.184 393.012 li
cp
ef
168.696 392.856 mo
169.668 392.856 170.412 393.252 170.94 394.02 cv
171.456 394.8 171.72 395.928 171.72 397.392 cv
171.72 398.868 171.456 399.996 170.94 400.764 cv
170.412 401.532 169.668 401.916 168.696 401.916 cv
167.712 401.916 166.956 401.532 166.44 400.764 cv
165.924 399.996 165.672 398.868 165.672 397.392 cv
165.672 395.928 165.924 394.8 166.44 394.02 cv
166.956 393.252 167.712 392.856 168.696 392.856 cv
168.696 392.856 li
cp
168.696 393.792 mo
168.084 393.792 167.628 394.092 167.316 394.692 cv
167.004 395.292 166.86 396.192 166.86 397.392 cv
166.86 398.592 167.004 399.492 167.316 400.092 cv
167.628 400.692 168.084 400.992 168.696 400.992 cv
169.308 400.992 169.764 400.692 170.076 400.092 cv
170.376 399.492 170.532 398.592 170.532 397.392 cv
170.532 396.192 170.376 395.292 170.076 394.692 cv
169.764 394.092 169.308 393.792 168.696 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
240.453 388.8 mo
240.453 43.2002 li
@
grestore
240.453 388.8 mo
240.453 384.8 li
f
240.453 388.8 mo
240.453 384.8 li
@
240.453 43.2002 mo
240.453 47.2002 li
f
240.453 43.2002 mo
240.453 47.2002 li
@
227.808 400.764 mo
229.74 400.764 li
229.74 394.092 li
227.64 394.512 li
227.64 393.432 li
229.728 393.012 li
230.916 393.012 li
230.916 400.764 li
232.848 400.764 li
232.848 401.76 li
227.808 401.76 li
227.808 400.764 li
227.808 400.764 li
cp
ef
237.432 397.872 mo
237.96 397.872 238.38 397.692 238.692 397.332 cv
239.004 396.972 239.16 396.468 239.16 395.832 cv
239.16 395.208 239.004 394.704 238.692 394.344 cv
238.38 393.984 237.96 393.792 237.432 393.792 cv
236.904 393.792 236.484 393.984 236.172 394.344 cv
235.86 394.704 235.704 395.208 235.704 395.832 cv
235.704 396.468 235.86 396.972 236.172 397.332 cv
236.484 397.692 236.904 397.872 237.432 397.872 cv
237.432 397.872 li
cp
235.08 401.58 mo
235.08 400.5 li
235.368 400.644 235.668 400.752 235.98 400.824 cv
236.28 400.896 236.58 400.932 236.88 400.932 cv
237.648 400.932 238.248 400.68 238.656 400.152 cv
239.064 399.624 239.304 398.832 239.376 397.752 cv
239.136 398.088 238.848 398.352 238.512 398.532 cv
238.164 398.712 237.78 398.796 237.36 398.796 cv
236.472 398.796 235.776 398.532 235.272 398.004 cv
234.768 397.476 234.516 396.756 234.516 395.832 cv
234.516 394.944 234.78 394.224 235.308 393.672 cv
235.836 393.132 236.544 392.856 237.432 392.856 cv
238.44 392.856 239.22 393.252 239.748 394.02 cv
240.276 394.8 240.552 395.928 240.552 397.392 cv
240.552 398.784 240.216 399.876 239.568 400.692 cv
238.908 401.508 238.032 401.916 236.928 401.916 cv
236.628 401.916 236.328 401.88 236.028 401.832 cv
235.716 401.784 235.404 401.7 235.08 401.58 cv
ef
243.636 395.232 mo
243.636 395.688 243.768 396.048 244.056 396.3 cv
244.344 396.552 244.74 396.672 245.256 396.672 cv
245.76 396.672 246.156 396.552 246.444 396.3 cv
246.732 396.048 246.876 395.688 246.876 395.232 cv
246.876 394.776 246.732 394.428 246.444 394.176 cv
246.156 393.924 245.76 393.792 245.256 393.792 cv
244.74 393.792 244.344 393.924 244.056 394.176 cv
243.768 394.428 243.636 394.776 243.636 395.232 cv
243.636 395.232 li
cp
244.068 397.104 mo
243.564 396.984 243.168 396.744 242.88 396.396 cv
242.592 396.048 242.46 395.628 242.46 395.124 cv
242.46 394.428 242.7 393.876 243.204 393.468 cv
243.696 393.06 244.38 392.856 245.256 392.856 cv
246.12 392.856 246.804 393.06 247.308 393.468 cv
247.8 393.876 248.052 394.428 248.052 395.124 cv
248.052 395.628 247.908 396.048 247.62 396.396 cv
247.332 396.744 246.948 396.984 246.444 397.104 cv
247.008 397.236 247.452 397.5 247.776 397.884 cv
248.088 398.268 248.256 398.748 248.256 399.3 cv
248.256 400.152 247.992 400.8 247.476 401.244 cv
246.948 401.7 246.216 401.916 245.256 401.916 cv
244.284 401.916 243.54 401.7 243.024 401.244 cv
242.508 400.8 242.256 400.152 242.256 399.3 cv
242.256 398.748 242.412 398.268 242.736 397.884 cv
243.048 397.5 243.492 397.236 244.068 397.104 cv
245.256 397.608 mo
244.692 397.608 244.248 397.764 243.924 398.064 cv
243.6 398.364 243.444 398.771 243.444 399.3 cv
243.444 399.828 243.6 400.248 243.924 400.548 cv
244.248 400.848 244.692 400.992 245.256 400.992 cv
245.808 400.992 246.252 400.848 246.576 400.536 cv
246.9 400.236 247.068 399.828 247.068 399.3 cv
247.068 398.771 246.9 398.364 246.588 398.064 cv
246.264 397.764 245.82 397.608 245.256 397.608 cv
ef
252.936 392.856 mo
253.908 392.856 254.652 393.252 255.18 394.02 cv
255.696 394.8 255.96 395.928 255.96 397.392 cv
255.96 398.868 255.696 399.996 255.18 400.764 cv
254.652 401.532 253.908 401.916 252.936 401.916 cv
251.952 401.916 251.196 401.532 250.68 400.764 cv
250.164 399.996 249.912 398.868 249.912 397.392 cv
249.912 395.928 250.164 394.8 250.68 394.02 cv
251.196 393.252 251.952 392.856 252.936 392.856 cv
252.936 392.856 li
cp
252.936 393.792 mo
252.324 393.792 251.868 394.092 251.556 394.692 cv
251.244 395.292 251.1 396.192 251.1 397.392 cv
251.1 398.592 251.244 399.492 251.556 400.092 cv
251.868 400.692 252.324 400.992 252.936 400.992 cv
253.548 400.992 254.004 400.692 254.316 400.092 cv
254.616 399.492 254.772 398.592 254.772 397.392 cv
254.772 396.192 254.616 395.292 254.316 394.692 cv
254.004 394.092 253.548 393.792 252.936 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
grestore
324.679 388.8 mo
324.679 384.8 li
f
324.679 388.8 mo
324.679 384.8 li
@
324.679 43.2002 mo
324.679 47.2002 li
f
324.679 43.2002 mo
324.679 47.2002 li
@
312.048 400.764 mo
313.98 400.764 li
313.98 394.092 li
311.88 394.512 li
311.88 393.432 li
313.968 393.012 li
315.156 393.012 li
315.156 400.764 li
317.088 400.764 li
317.088 401.76 li
312.048 401.76 li
312.048 400.764 li
312.048 400.764 li
cp
ef
321.672 397.872 mo
322.2 397.872 322.62 397.692 322.932 397.332 cv
323.244 396.972 323.4 396.468 323.4 395.832 cv
323.4 395.208 323.244 394.704 322.932 394.344 cv
322.62 393.984 322.2 393.792 321.672 393.792 cv
321.144 393.792 320.724 393.984 320.412 394.344 cv
320.1 394.704 319.944 395.208 319.944 395.832 cv
319.944 396.468 320.1 396.972 320.412 397.332 cv
320.724 397.692 321.144 397.872 321.672 397.872 cv
321.672 397.872 li
cp
319.32 401.58 mo
319.32 400.5 li
319.608 400.644 319.908 400.752 320.22 400.824 cv
320.52 400.896 320.82 400.932 321.12 400.932 cv
321.888 400.932 322.488 400.68 322.896 400.152 cv
323.304 399.624 323.544 398.832 323.616 397.752 cv
323.376 398.088 323.088 398.352 322.752 398.532 cv
322.404 398.712 322.02 398.796 321.6 398.796 cv
320.712 398.796 320.016 398.532 319.512 398.004 cv
319.008 397.476 318.756 396.756 318.756 395.832 cv
318.756 394.944 319.02 394.224 319.548 393.672 cv
320.076 393.132 320.784 392.856 321.672 392.856 cv
322.68 392.856 323.46 393.252 323.988 394.02 cv
324.516 394.8 324.792 395.928 324.792 397.392 cv
324.792 398.784 324.456 399.876 323.808 400.692 cv
323.148 401.508 322.272 401.916 321.168 401.916 cv
320.868 401.916 320.568 401.88 320.268 401.832 cv
319.956 401.784 319.644 401.7 319.32 401.58 cv
ef
329.352 397.872 mo
329.88 397.872 330.3 397.692 330.612 397.332 cv
330.924 396.972 331.08 396.468 331.08 395.832 cv
331.08 395.208 330.924 394.704 330.612 394.344 cv
330.3 393.984 329.88 393.792 329.352 393.792 cv
328.824 393.792 328.404 393.984 328.092 394.344 cv
327.78 394.704 327.624 395.208 327.624 395.832 cv
327.624 396.468 327.78 396.972 328.092 397.332 cv
328.404 397.692 328.824 397.872 329.352 397.872 cv
329.352 397.872 li
cp
327 401.58 mo
327 400.5 li
327.288 400.644 327.588 400.752 327.9 400.824 cv
328.2 400.896 328.5 400.932 328.8 400.932 cv
329.568 400.932 330.168 400.68 330.576 400.152 cv
330.984 399.624 331.224 398.832 331.296 397.752 cv
331.056 398.088 330.768 398.352 330.432 398.532 cv
330.084 398.712 329.7 398.796 329.28 398.796 cv
328.392 398.796 327.696 398.532 327.192 398.004 cv
326.688 397.476 326.436 396.756 326.436 395.832 cv
326.436 394.944 326.7 394.224 327.228 393.672 cv
327.756 393.132 328.464 392.856 329.352 392.856 cv
330.36 392.856 331.14 393.252 331.668 394.02 cv
332.196 394.8 332.472 395.928 332.472 397.392 cv
332.472 398.784 332.136 399.876 331.488 400.692 cv
330.828 401.508 329.952 401.916 328.848 401.916 cv
328.548 401.916 328.248 401.88 327.948 401.832 cv
327.636 401.784 327.324 401.7 327 401.58 cv
ef
337.176 392.856 mo
338.148 392.856 338.892 393.252 339.42 394.02 cv
339.936 394.8 340.2 395.928 340.2 397.392 cv
340.2 398.868 339.936 399.996 339.42 400.764 cv
338.892 401.532 338.148 401.916 337.176 401.916 cv
336.192 401.916 335.436 401.532 334.92 400.764 cv
334.404 399.996 334.152 398.868 334.152 397.392 cv
334.152 395.928 334.404 394.8 334.92 394.02 cv
335.436 393.252 336.192 392.856 337.176 392.856 cv
337.176 392.856 li
cp
337.176 393.792 mo
336.564 393.792 336.108 394.092 335.796 394.692 cv
335.484 395.292 335.34 396.192 335.34 397.392 cv
335.34 398.592 335.484 399.492 335.796 400.092 cv
336.108 400.692 336.564 400.992 337.176 400.992 cv
337.788 400.992 338.244 400.692 338.556 400.092 cv
338.856 399.492 339.012 398.592 339.012 397.392 cv
339.012 396.192 338.856 395.292 338.556 394.692 cv
338.244 394.092 337.788 393.792 337.176 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
408.906 388.8 mo
408.906 43.2002 li
@
grestore
408.906 388.8 mo
408.906 384.8 li
f
408.906 388.8 mo
408.906 384.8 li
@
408.906 43.2002 mo
408.906 47.2002 li
f
408.906 43.2002 mo
408.906 47.2002 li
@
396.864 400.764 mo
400.992 400.764 li
400.992 401.76 li
395.436 401.76 li
395.436 400.764 li
395.88 400.308 396.492 399.684 397.272 398.892 cv
398.04 398.112 398.532 397.608 398.736 397.38 cv
399.12 396.96 399.384 396.6 399.528 396.3 cv
399.672 396.012 399.756 395.712 399.756 395.424 cv
399.756 394.968 399.588 394.584 399.264 394.296 cv
398.94 394.008 398.52 393.852 397.992 393.852 cv
397.62 393.852 397.224 393.924 396.816 394.044 cv
396.408 394.176 395.964 394.368 395.496 394.632 cv
395.496 393.432 li
395.976 393.24 396.42 393.096 396.828 393 cv
397.236 392.904 397.62 392.856 397.968 392.856 cv
398.868 392.856 399.588 393.084 400.128 393.54 cv
400.668 393.996 400.944 394.596 400.944 395.352 cv
400.944 395.712 400.872 396.06 400.74 396.372 cv
400.608 396.696 400.368 397.08 400.008 397.512 cv
399.912 397.632 399.6 397.956 399.072 398.496 cv
398.544 399.036 397.813 399.792 396.864 400.764 cv
396.864 400.764 li
cp
ef
405.816 392.856 mo
406.788 392.856 407.532 393.252 408.06 394.02 cv
408.576 394.8 408.84 395.928 408.84 397.392 cv
408.84 398.868 408.576 399.996 408.06 400.764 cv
407.532 401.532 406.788 401.916 405.816 401.916 cv
404.832 401.916 404.076 401.532 403.56 400.764 cv
403.044 399.996 402.792 398.868 402.792 397.392 cv
402.792 395.928 403.044 394.8 403.56 394.02 cv
404.076 393.252 404.832 392.856 405.816 392.856 cv
405.816 392.856 li
cp
405.816 393.792 mo
405.204 393.792 404.748 394.092 404.436 394.692 cv
404.124 395.292 403.98 396.192 403.98 397.392 cv
403.98 398.592 404.124 399.492 404.436 400.092 cv
404.748 400.692 405.204 400.992 405.816 400.992 cv
406.428 400.992 406.884 400.692 407.196 400.092 cv
407.496 399.492 407.652 398.592 407.652 397.392 cv
407.652 396.192 407.496 395.292 407.196 394.692 cv
406.884 394.092 406.428 393.792 405.816 393.792 cv
ef
413.496 392.856 mo
414.468 392.856 415.212 393.252 415.74 394.02 cv
416.256 394.8 416.52 395.928 416.52 397.392 cv
416.52 398.868 416.256 399.996 415.74 400.764 cv
415.212 401.532 414.468 401.916 413.496 401.916 cv
412.512 401.916 411.756 401.532 411.24 400.764 cv
410.724 399.996 410.472 398.868 410.472 397.392 cv
410.472 395.928 410.724 394.8 411.24 394.02 cv
411.756 393.252 412.512 392.856 413.496 392.856 cv
413.496 392.856 li
cp
413.496 393.792 mo
412.884 393.792 412.428 394.092 412.116 394.692 cv
411.804 395.292 411.66 396.192 411.66 397.392 cv
411.66 398.592 411.804 399.492 412.116 400.092 cv
412.428 400.692 412.884 400.992 413.496 400.992 cv
414.108 400.992 414.564 400.692 414.876 400.092 cv
415.176 399.492 415.332 398.592 415.332 397.392 cv
415.332 396.192 415.176 395.292 414.876 394.692 cv
414.564 394.092 414.108 393.792 413.496 393.792 cv
ef
421.176 392.856 mo
422.148 392.856 422.892 393.252 423.42 394.02 cv
423.936 394.8 424.2 395.928 424.2 397.392 cv
424.2 398.868 423.936 399.996 423.42 400.764 cv
422.892 401.532 422.148 401.916 421.176 401.916 cv
420.192 401.916 419.436 401.532 418.92 400.764 cv
418.404 399.996 418.152 398.868 418.152 397.392 cv
418.152 395.928 418.404 394.8 418.92 394.02 cv
419.436 393.252 420.192 392.856 421.176 392.856 cv
421.176 392.856 li
cp
421.176 393.792 mo
420.564 393.792 420.108 394.092 419.796 394.692 cv
419.484 395.292 419.34 396.192 419.34 397.392 cv
419.34 398.592 419.484 399.492 419.796 400.092 cv
420.108 400.692 420.564 400.992 421.176 400.992 cv
421.788 400.992 422.244 400.692 422.556 400.092 cv
422.856 399.492 423.012 398.592 423.012 397.392 cv
423.012 396.192 422.856 395.292 422.556 394.692 cv
422.244 394.092 421.788 393.792 421.176 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
493.132 388.8 mo
493.132 43.2002 li
@
grestore
493.132 388.8 mo
493.132 384.8 li
f
493.132 388.8 mo
493.132 384.8 li
@
493.132 43.2002 mo
493.132 47.2002 li
f
493.132 43.2002 mo
493.132 47.2002 li
@
481.104 400.764 mo
485.232 400.764 li
485.232 401.76 li
479.676 401.76 li
479.676 400.764 li
480.12 400.308 480.732 399.684 481.512 398.892 cv
482.28 398.112 482.771 397.608 482.976 397.38 cv
483.36 396.96 483.624 396.6 483.768 396.3 cv
483.912 396.012 483.996 395.712 483.996 395.424 cv
483.996 394.968 483.828 394.584 483.504 394.296 cv
483.18 394.008 482.76 393.852 482.232 393.852 cv
481.86 393.852 481.464 393.924 481.056 394.044 cv
480.648 394.176 480.204 394.368 479.736 394.632 cv
479.736 393.432 li
480.216 393.24 480.66 393.096 481.068 393 cv
481.476 392.904 481.86 392.856 482.208 392.856 cv
483.108 392.856 483.828 393.084 484.368 393.54 cv
484.908 393.996 485.184 394.596 485.184 395.352 cv
485.184 395.712 485.112 396.06 484.98 396.372 cv
484.848 396.696 484.608 397.08 484.248 397.512 cv
484.152 397.632 483.84 397.956 483.313 398.496 cv
482.784 399.036 482.052 399.792 481.104 400.764 cv
481.104 400.764 li
cp
ef
490.056 392.856 mo
491.028 392.856 491.771 393.252 492.3 394.02 cv
492.816 394.8 493.08 395.928 493.08 397.392 cv
493.08 398.868 492.816 399.996 492.3 400.764 cv
491.771 401.532 491.028 401.916 490.056 401.916 cv
489.072 401.916 488.316 401.532 487.8 400.764 cv
487.284 399.996 487.032 398.868 487.032 397.392 cv
487.032 395.928 487.284 394.8 487.8 394.02 cv
488.316 393.252 489.072 392.856 490.056 392.856 cv
490.056 392.856 li
cp
490.056 393.792 mo
489.444 393.792 488.988 394.092 488.676 394.692 cv
488.364 395.292 488.22 396.192 488.22 397.392 cv
488.22 398.592 488.364 399.492 488.676 400.092 cv
488.988 400.692 489.444 400.992 490.056 400.992 cv
490.668 400.992 491.124 400.692 491.436 400.092 cv
491.736 399.492 491.892 398.592 491.892 397.392 cv
491.892 396.192 491.736 395.292 491.436 394.692 cv
491.124 394.092 490.668 393.792 490.056 393.792 cv
ef
495.408 400.764 mo
497.34 400.764 li
497.34 394.092 li
495.24 394.512 li
495.24 393.432 li
497.328 393.012 li
498.516 393.012 li
498.516 400.764 li
500.448 400.764 li
500.448 401.76 li
495.408 401.76 li
495.408 400.764 li
495.408 400.764 li
cp
ef
505.416 392.856 mo
506.388 392.856 507.132 393.252 507.66 394.02 cv
508.176 394.8 508.44 395.928 508.44 397.392 cv
508.44 398.868 508.176 399.996 507.66 400.764 cv
507.132 401.532 506.388 401.916 505.416 401.916 cv
504.432 401.916 503.676 401.532 503.16 400.764 cv
502.644 399.996 502.392 398.868 502.392 397.392 cv
502.392 395.928 502.644 394.8 503.16 394.02 cv
503.676 393.252 504.432 392.856 505.416 392.856 cv
505.416 392.856 li
cp
505.416 393.792 mo
504.804 393.792 504.348 394.092 504.036 394.692 cv
503.724 395.292 503.58 396.192 503.58 397.392 cv
503.58 398.592 503.724 399.492 504.036 400.092 cv
504.348 400.692 504.804 400.992 505.416 400.992 cv
506.028 400.992 506.484 400.692 506.796 400.092 cv
507.096 399.492 507.252 398.592 507.252 397.392 cv
507.252 396.192 507.096 395.292 506.796 394.692 cv
506.484 394.092 506.028 393.792 505.416 393.792 cv
ef
282.468 406.932 mo
283.728 406.932 li
286.152 410.532 li
288.564 406.932 li
289.836 406.932 li
286.74 411.516 li
286.74 415.68 li
285.552 415.68 li
285.552 411.516 li
282.468 406.932 li
282.468 406.932 li
cp
ef
293.904 411.816 mo
293.892 411.228 293.724 410.76 293.412 410.4 cv
293.088 410.052 292.656 409.872 292.128 409.872 cv
291.528 409.872 291.048 410.052 290.688 410.388 cv
290.328 410.724 290.112 411.204 290.064 411.816 cv
293.904 411.816 li
293.904 411.816 li
cp
294.984 412.128 mo
294.984 412.656 li
290.028 412.656 li
290.076 413.4 290.292 413.976 290.7 414.36 cv
291.096 414.744 291.648 414.936 292.368 414.936 cv
292.776 414.936 293.184 414.888 293.568 414.792 cv
293.952 414.696 294.348 414.54 294.732 414.324 cv
294.732 415.344 li
294.348 415.512 293.952 415.644 293.544 415.716 cv
293.136 415.788 292.716 415.836 292.308 415.836 cv
291.252 415.836 290.424 415.536 289.813 414.936 cv
289.2 414.336 288.9 413.508 288.9 412.464 cv
288.9 411.396 289.188 410.544 289.764 409.908 cv
290.34 409.284 291.132 408.96 292.116 408.96 cv
293.004 408.96 293.7 409.248 294.216 409.812 cv
294.72 410.388 294.984 411.156 294.984 412.128 cv
ef
301.944 411.936 mo
301.944 415.68 li
300.864 415.68 li
300.864 414.684 li
300.612 415.092 300.3 415.38 299.94 415.56 cv
299.58 415.74 299.124 415.836 298.596 415.836 cv
297.924 415.836 297.384 415.656 296.988 415.284 cv
296.592 414.912 296.4 414.408 296.4 413.771 cv
296.4 413.04 296.64 412.488 297.144 412.104 cv
297.636 411.732 298.368 411.54 299.352 411.54 cv
300.864 411.54 li
300.864 411.432 li
300.864 410.94 300.696 410.556 300.372 410.28 cv
300.048 410.016 299.592 409.872 299.004 409.872 cv
298.62 409.872 298.26 409.92 297.9 410.016 cv
297.54 410.112 297.204 410.244 296.88 410.412 cv
296.88 409.416 li
297.264 409.271 297.648 409.152 298.02 409.08 cv
298.392 409.008 298.752 408.96 299.112 408.96 cv
300.06 408.96 300.768 409.212 301.236 409.704 cv
301.704 410.196 301.944 410.94 301.944 411.936 cv
301.944 411.936 li
cp
299.796 412.38 mo
298.92 412.38 298.32 412.488 297.984 412.68 cv
297.648 412.884 297.48 413.22 297.48 413.7 cv
297.48 414.084 297.6 414.396 297.852 414.612 cv
298.104 414.84 298.452 414.948 298.884 414.948 cv
299.484 414.948 299.964 414.744 300.324 414.312 cv
300.684 413.892 300.864 413.328 300.864 412.62 cv
300.864 412.38 li
299.796 412.38 li
ef
307.813 410.124 mo
307.692 410.052 307.56 410.004 307.416 409.968 cv
307.272 409.944 307.116 409.92 306.948 409.92 cv
306.336 409.92 305.868 410.124 305.544 410.52 cv
305.208 410.916 305.052 411.48 305.052 412.224 cv
305.052 415.68 li
303.972 415.68 li
303.972 409.116 li
305.052 409.116 li
305.052 410.136 li
305.268 409.74 305.568 409.44 305.928 409.248 cv
306.288 409.056 306.732 408.96 307.26 408.96 cv
307.332 408.96 307.416 408.972 307.512 408.972 cv
307.596 408.984 307.692 408.996 307.813 409.02 cv
307.813 410.124 li
307.813 410.124 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 388.8 mo
518.4 388.8 li
@
grestore
72 388.8 mo
76 388.8 li
f
72 388.8 mo
76 388.8 li
@
518.4 388.8 mo
514.4 388.8 li
f
518.4 388.8 mo
514.4 388.8 li
@
39.0962 384.216 mo
40.0679 384.216 40.812 384.612 41.3398 385.38 cv
41.856 386.16 42.1201 387.288 42.1201 388.752 cv
42.1201 390.228 41.856 391.356 41.3398 392.124 cv
40.812 392.892 40.0679 393.276 39.0962 393.276 cv
38.1118 393.276 37.356 392.892 36.8398 392.124 cv
36.3242 391.356 36.0718 390.228 36.0718 388.752 cv
36.0718 387.288 36.3242 386.16 36.8398 385.38 cv
37.356 384.612 38.1118 384.216 39.0962 384.216 cv
39.0962 384.216 li
cp
39.0962 385.152 mo
38.4839 385.152 38.0278 385.452 37.7158 386.052 cv
37.4038 386.652 37.2598 387.552 37.2598 388.752 cv
37.2598 389.952 37.4038 390.852 37.7158 391.452 cv
38.0278 392.052 38.4839 392.352 39.0962 392.352 cv
39.708 392.352 40.1641 392.052 40.4761 391.452 cv
40.7759 390.852 40.9321 389.952 40.9321 388.752 cv
40.9321 387.552 40.7759 386.652 40.4761 386.052 cv
40.1641 385.452 39.708 385.152 39.0962 385.152 cv
ef
44.2441 391.632 mo
45.48 391.632 li
45.48 393.12 li
44.2441 393.12 li
44.2441 391.632 li
44.2441 391.632 li
cp
ef
50.376 384.216 mo
51.3481 384.216 52.0918 384.612 52.6201 385.38 cv
53.1362 386.16 53.3999 387.288 53.3999 388.752 cv
53.3999 390.228 53.1362 391.356 52.6201 392.124 cv
52.0918 392.892 51.3481 393.276 50.376 393.276 cv
49.3921 393.276 48.6362 392.892 48.1201 392.124 cv
47.604 391.356 47.3521 390.228 47.3521 388.752 cv
47.3521 387.288 47.604 386.16 48.1201 385.38 cv
48.6362 384.612 49.3921 384.216 50.376 384.216 cv
50.376 384.216 li
cp
50.376 385.152 mo
49.7642 385.152 49.3081 385.452 48.9961 386.052 cv
48.6841 386.652 48.54 387.552 48.54 388.752 cv
48.54 389.952 48.6841 390.852 48.9961 391.452 cv
49.3081 392.052 49.7642 392.352 50.376 392.352 cv
50.9878 392.352 51.4438 392.052 51.7559 391.452 cv
52.0562 390.852 52.2119 389.952 52.2119 388.752 cv
52.2119 387.552 52.0562 386.652 51.7559 386.052 cv
51.4438 385.452 50.9878 385.152 50.376 385.152 cv
ef
58.0562 384.216 mo
59.0278 384.216 59.772 384.612 60.2998 385.38 cv
60.8159 386.16 61.0801 387.288 61.0801 388.752 cv
61.0801 390.228 60.8159 391.356 60.2998 392.124 cv
59.772 392.892 59.0278 393.276 58.0562 393.276 cv
57.0718 393.276 56.3159 392.892 55.7998 392.124 cv
55.2842 391.356 55.0322 390.228 55.0322 388.752 cv
55.0322 387.288 55.2842 386.16 55.7998 385.38 cv
56.3159 384.612 57.0718 384.216 58.0562 384.216 cv
58.0562 384.216 li
cp
58.0562 385.152 mo
57.4438 385.152 56.9878 385.452 56.6758 386.052 cv
56.3638 386.652 56.2202 387.552 56.2202 388.752 cv
56.2202 389.952 56.3638 390.852 56.6758 391.452 cv
56.9878 392.052 57.4438 392.352 58.0562 392.352 cv
58.668 392.352 59.124 392.052 59.436 391.452 cv
59.7358 390.852 59.8921 389.952 59.8921 388.752 cv
59.8921 387.552 59.7358 386.652 59.436 386.052 cv
59.124 385.452 58.668 385.152 58.0562 385.152 cv
ef
65.7358 384.216 mo
66.708 384.216 67.4521 384.612 67.98 385.38 cv
68.4961 386.16 68.7598 387.288 68.7598 388.752 cv
68.7598 390.228 68.4961 391.356 67.98 392.124 cv
67.4521 392.892 66.708 393.276 65.7358 393.276 cv
64.752 393.276 63.9961 392.892 63.48 392.124 cv
62.9639 391.356 62.7119 390.228 62.7119 388.752 cv
62.7119 387.288 62.9639 386.16 63.48 385.38 cv
63.9961 384.612 64.752 384.216 65.7358 384.216 cv
65.7358 384.216 li
cp
65.7358 385.152 mo
65.124 385.152 64.668 385.452 64.356 386.052 cv
64.0439 386.652 63.8999 387.552 63.8999 388.752 cv
63.8999 389.952 64.0439 390.852 64.356 391.452 cv
64.668 392.052 65.124 392.352 65.7358 392.352 cv
66.3481 392.352 66.8042 392.052 67.1162 391.452 cv
67.416 390.852 67.5718 389.952 67.5718 388.752 cv
67.5718 387.552 67.416 386.652 67.1162 386.052 cv
66.8042 385.452 66.3481 385.152 65.7358 385.152 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 319.68 mo
518.4 319.68 li
@
grestore
72 319.68 mo
76 319.68 li
f
72 319.68 mo
76 319.68 li
@
518.4 319.68 mo
514.4 319.68 li
f
518.4 319.68 mo
514.4 319.68 li
@
39.3359 315.096 mo
40.3081 315.096 41.0518 315.492 41.5801 316.26 cv
42.0962 317.04 42.3599 318.168 42.3599 319.632 cv
42.3599 321.108 42.0962 322.236 41.5801 323.004 cv
41.0518 323.771 40.3081 324.156 39.3359 324.156 cv
38.3521 324.156 37.5962 323.771 37.0801 323.004 cv
36.564 322.236 36.312 321.108 36.312 319.632 cv
36.312 318.168 36.564 317.04 37.0801 316.26 cv
37.5962 315.492 38.3521 315.096 39.3359 315.096 cv
39.3359 315.096 li
cp
39.3359 316.032 mo
38.7241 316.032 38.2681 316.332 37.9561 316.932 cv
37.644 317.532 37.5 318.432 37.5 319.632 cv
37.5 320.832 37.644 321.732 37.9561 322.332 cv
38.2681 322.932 38.7241 323.232 39.3359 323.232 cv
39.9478 323.232 40.4038 322.932 40.7158 322.332 cv
41.0161 321.732 41.1719 320.832 41.1719 319.632 cv
41.1719 318.432 41.0161 317.532 40.7158 316.932 cv
40.4038 316.332 39.9478 316.032 39.3359 316.032 cv
ef
44.4839 322.512 mo
45.7202 322.512 li
45.7202 324 li
44.4839 324 li
44.4839 322.512 li
44.4839 322.512 li
cp
ef
50.856 315.096 mo
51.8281 315.096 52.5718 315.492 53.1001 316.26 cv
53.6162 317.04 53.8799 318.168 53.8799 319.632 cv
53.8799 321.108 53.6162 322.236 53.1001 323.004 cv
52.5718 323.771 51.8281 324.156 50.856 324.156 cv
49.8721 324.156 49.1162 323.771 48.6001 323.004 cv
48.084 322.236 47.832 321.108 47.832 319.632 cv
47.832 318.168 48.084 317.04 48.6001 316.26 cv
49.1162 315.492 49.8721 315.096 50.856 315.096 cv
50.856 315.096 li
cp
50.856 316.032 mo
50.2441 316.032 49.7881 316.332 49.4761 316.932 cv
49.1641 317.532 49.02 318.432 49.02 319.632 cv
49.02 320.832 49.1641 321.732 49.4761 322.332 cv
49.7881 322.932 50.2441 323.232 50.856 323.232 cv
51.4678 323.232 51.9238 322.932 52.2358 322.332 cv
52.5361 321.732 52.6919 320.832 52.6919 319.632 cv
52.6919 318.432 52.5361 317.532 52.2358 316.932 cv
51.9238 316.332 51.4678 316.032 50.856 316.032 cv
ef
58.5361 315.096 mo
59.5078 315.096 60.252 315.492 60.7798 316.26 cv
61.2959 317.04 61.5601 318.168 61.5601 319.632 cv
61.5601 321.108 61.2959 322.236 60.7798 323.004 cv
60.252 323.771 59.5078 324.156 58.5361 324.156 cv
57.5518 324.156 56.7959 323.771 56.2798 323.004 cv
55.7642 322.236 55.5122 321.108 55.5122 319.632 cv
55.5122 318.168 55.7642 317.04 56.2798 316.26 cv
56.7959 315.492 57.5518 315.096 58.5361 315.096 cv
58.5361 315.096 li
cp
58.5361 316.032 mo
57.9238 316.032 57.4678 316.332 57.1558 316.932 cv
56.8438 317.532 56.7002 318.432 56.7002 319.632 cv
56.7002 320.832 56.8438 321.732 57.1558 322.332 cv
57.4678 322.932 57.9238 323.232 58.5361 323.232 cv
59.1479 323.232 59.604 322.932 59.916 322.332 cv
60.2158 321.732 60.3721 320.832 60.3721 319.632 cv
60.3721 318.432 60.2158 317.532 59.916 316.932 cv
59.604 316.332 59.1479 316.032 58.5361 316.032 cv
ef
64.7041 323.004 mo
68.832 323.004 li
68.832 324 li
63.2759 324 li
63.2759 323.004 li
63.7202 322.548 64.332 321.924 65.1118 321.132 cv
65.8799 320.352 66.3721 319.848 66.5762 319.62 cv
66.96 319.2 67.2241 318.84 67.3682 318.54 cv
67.5122 318.252 67.5962 317.952 67.5962 317.664 cv
67.5962 317.208 67.4282 316.824 67.104 316.536 cv
66.7798 316.248 66.3599 316.092 65.832 316.092 cv
65.46 316.092 65.064 316.164 64.6558 316.284 cv
64.248 316.416 63.8042 316.608 63.3359 316.872 cv
63.3359 315.672 li
63.8159 315.48 64.2598 315.336 64.668 315.24 cv
65.0762 315.144 65.46 315.096 65.8081 315.096 cv
66.708 315.096 67.4282 315.324 67.9678 315.78 cv
68.5078 316.236 68.7842 316.836 68.7842 317.592 cv
68.7842 317.952 68.7119 318.3 68.5801 318.612 cv
68.4482 318.936 68.208 319.32 67.8481 319.752 cv
67.752 319.872 67.4399 320.196 66.9121 320.736 cv
66.3838 321.276 65.6519 322.032 64.7041 323.004 cv
64.7041 323.004 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 250.56 mo
518.4 250.56 li
@
grestore
72 250.56 mo
76 250.56 li
f
72 250.56 mo
76 250.56 li
@
518.4 250.56 mo
514.4 250.56 li
f
518.4 250.56 mo
514.4 250.56 li
@
38.856 245.976 mo
39.8281 245.976 40.5718 246.372 41.1001 247.14 cv
41.6162 247.92 41.8799 249.048 41.8799 250.512 cv
41.8799 251.988 41.6162 253.116 41.1001 253.884 cv
40.5718 254.652 39.8281 255.036 38.856 255.036 cv
37.8721 255.036 37.1162 254.652 36.6001 253.884 cv
36.084 253.116 35.832 251.988 35.832 250.512 cv
35.832 249.048 36.084 247.92 36.6001 247.14 cv
37.1162 246.372 37.8721 245.976 38.856 245.976 cv
38.856 245.976 li
cp
38.856 246.912 mo
38.2441 246.912 37.7881 247.212 37.4761 247.812 cv
37.1641 248.412 37.02 249.312 37.02 250.512 cv
37.02 251.712 37.1641 252.612 37.4761 253.212 cv
37.7881 253.812 38.2441 254.112 38.856 254.112 cv
39.4678 254.112 39.9238 253.812 40.2358 253.212 cv
40.5361 252.612 40.6919 251.712 40.6919 250.512 cv
40.6919 249.312 40.5361 248.412 40.2358 247.812 cv
39.9238 247.212 39.4678 246.912 38.856 246.912 cv
ef
44.0039 253.392 mo
45.2402 253.392 li
45.2402 254.88 li
44.0039 254.88 li
44.0039 253.392 li
44.0039 253.392 li
cp
ef
50.376 245.976 mo
51.3481 245.976 52.0918 246.372 52.6201 247.14 cv
53.1362 247.92 53.3999 249.048 53.3999 250.512 cv
53.3999 251.988 53.1362 253.116 52.6201 253.884 cv
52.0918 254.652 51.3481 255.036 50.376 255.036 cv
49.3921 255.036 48.6362 254.652 48.1201 253.884 cv
47.604 253.116 47.3521 251.988 47.3521 250.512 cv
47.3521 249.048 47.604 247.92 48.1201 247.14 cv
48.6362 246.372 49.3921 245.976 50.376 245.976 cv
50.376 245.976 li
cp
50.376 246.912 mo
49.7642 246.912 49.3081 247.212 48.9961 247.812 cv
48.6841 248.412 48.54 249.312 48.54 250.512 cv
48.54 251.712 48.6841 252.612 48.9961 253.212 cv
49.3081 253.812 49.7642 254.112 50.376 254.112 cv
50.9878 254.112 51.4438 253.812 51.7559 253.212 cv
52.0562 252.612 52.2119 251.712 52.2119 250.512 cv
52.2119 249.312 52.0562 248.412 51.7559 247.812 cv
51.4438 247.212 50.9878 246.912 50.376 246.912 cv
ef
58.0562 245.976 mo
59.0278 245.976 59.772 246.372 60.2998 247.14 cv
60.8159 247.92 61.0801 249.048 61.0801 250.512 cv
61.0801 251.988 60.8159 253.116 60.2998 253.884 cv
59.772 254.652 59.0278 255.036 58.0562 255.036 cv
57.0718 255.036 56.3159 254.652 55.7998 253.884 cv
55.2842 253.116 55.0322 251.988 55.0322 250.512 cv
55.0322 249.048 55.2842 247.92 55.7998 247.14 cv
56.3159 246.372 57.0718 245.976 58.0562 245.976 cv
58.0562 245.976 li
cp
58.0562 246.912 mo
57.4438 246.912 56.9878 247.212 56.6758 247.812 cv
56.3638 248.412 56.2202 249.312 56.2202 250.512 cv
56.2202 251.712 56.3638 252.612 56.6758 253.212 cv
56.9878 253.812 57.4438 254.112 58.0562 254.112 cv
58.668 254.112 59.124 253.812 59.436 253.212 cv
59.7358 252.612 59.8921 251.712 59.8921 250.512 cv
59.8921 249.312 59.7358 248.412 59.436 247.812 cv
59.124 247.212 58.668 246.912 58.0562 246.912 cv
ef
66.144 246.132 mo
67.6318 246.132 li
67.6318 251.832 li
68.8799 251.832 li
68.8799 252.816 li
67.6318 252.816 li
67.6318 254.88 li
66.4561 254.88 li
66.4561 252.816 li
62.5078 252.816 li
62.5078 251.676 li
66.144 246.132 li
66.144 246.132 li
cp
66.4561 247.164 mo
63.4678 251.832 li
66.4561 251.832 li
66.4561 247.164 li
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 181.44 mo
518.4 181.44 li
@
grestore
72 181.44 mo
76 181.44 li
f
72 181.44 mo
76 181.44 li
@
518.4 181.44 mo
514.4 181.44 li
f
518.4 181.44 mo
514.4 181.44 li
@
39.0962 176.856 mo
40.0679 176.856 40.812 177.252 41.3398 178.02 cv
41.856 178.8 42.1201 179.928 42.1201 181.392 cv
42.1201 182.868 41.856 183.996 41.3398 184.764 cv
40.812 185.532 40.0679 185.916 39.0962 185.916 cv
38.1118 185.916 37.356 185.532 36.8398 184.764 cv
36.3242 183.996 36.0718 182.868 36.0718 181.392 cv
36.0718 179.928 36.3242 178.8 36.8398 178.02 cv
37.356 177.252 38.1118 176.856 39.0962 176.856 cv
39.0962 176.856 li
cp
39.0962 177.792 mo
38.4839 177.792 38.0278 178.092 37.7158 178.692 cv
37.4038 179.292 37.2598 180.192 37.2598 181.392 cv
37.2598 182.592 37.4038 183.492 37.7158 184.092 cv
38.0278 184.692 38.4839 184.992 39.0962 184.992 cv
39.708 184.992 40.1641 184.692 40.4761 184.092 cv
40.7759 183.492 40.9321 182.592 40.9321 181.392 cv
40.9321 180.192 40.7759 179.292 40.4761 178.692 cv
40.1641 178.092 39.708 177.792 39.0962 177.792 cv
ef
44.0039 184.272 mo
45.2402 184.272 li
45.2402 185.76 li
44.0039 185.76 li
44.0039 184.272 li
44.0039 184.272 li
cp
ef
50.376 176.856 mo
51.3481 176.856 52.0918 177.252 52.6201 178.02 cv
53.1362 178.8 53.3999 179.928 53.3999 181.392 cv
53.3999 182.868 53.1362 183.996 52.6201 184.764 cv
52.0918 185.532 51.3481 185.916 50.376 185.916 cv
49.3921 185.916 48.6362 185.532 48.1201 184.764 cv
47.604 183.996 47.3521 182.868 47.3521 181.392 cv
47.3521 179.928 47.604 178.8 48.1201 178.02 cv
48.6362 177.252 49.3921 176.856 50.376 176.856 cv
50.376 176.856 li
cp
50.376 177.792 mo
49.7642 177.792 49.3081 178.092 48.9961 178.692 cv
48.6841 179.292 48.54 180.192 48.54 181.392 cv
48.54 182.592 48.6841 183.492 48.9961 184.092 cv
49.3081 184.692 49.7642 184.992 50.376 184.992 cv
50.9878 184.992 51.4438 184.692 51.7559 184.092 cv
52.0562 183.492 52.2119 182.592 52.2119 181.392 cv
52.2119 180.192 52.0562 179.292 51.7559 178.692 cv
51.4438 178.092 50.9878 177.792 50.376 177.792 cv
ef
58.0562 176.856 mo
59.0278 176.856 59.772 177.252 60.2998 178.02 cv
60.8159 178.8 61.0801 179.928 61.0801 181.392 cv
61.0801 182.868 60.8159 183.996 60.2998 184.764 cv
59.772 185.532 59.0278 185.916 58.0562 185.916 cv
57.0718 185.916 56.3159 185.532 55.7998 184.764 cv
55.2842 183.996 55.0322 182.868 55.0322 181.392 cv
55.0322 179.928 55.2842 178.8 55.7998 178.02 cv
56.3159 177.252 57.0718 176.856 58.0562 176.856 cv
58.0562 176.856 li
cp
58.0562 177.792 mo
57.4438 177.792 56.9878 178.092 56.6758 178.692 cv
56.3638 179.292 56.2202 180.192 56.2202 181.392 cv
56.2202 182.592 56.3638 183.492 56.6758 184.092 cv
56.9878 184.692 57.4438 184.992 58.0562 184.992 cv
58.668 184.992 59.124 184.692 59.436 184.092 cv
59.7358 183.492 59.8921 182.592 59.8921 181.392 cv
59.8921 180.192 59.7358 179.292 59.436 178.692 cv
59.124 178.092 58.668 177.792 58.0562 177.792 cv
ef
68.2319 177.204 mo
68.2319 178.284 li
67.9321 178.14 67.6318 178.032 67.332 177.96 cv
67.02 177.888 66.7202 177.852 66.4321 177.852 cv
65.6401 177.852 65.04 178.116 64.6318 178.644 cv
64.2241 179.172 63.9839 179.976 63.936 181.032 cv
64.1641 180.696 64.4521 180.432 64.7998 180.252 cv
65.1479 180.072 65.5322 179.976 65.9521 179.976 cv
66.8281 179.976 67.5239 180.252 68.0278 180.78 cv
68.5322 181.308 68.7959 182.04 68.7959 182.952 cv
68.7959 183.852 68.52 184.572 67.9922 185.112 cv
67.4639 185.652 66.7559 185.916 65.8799 185.916 cv
64.8721 185.916 64.0918 185.532 63.564 184.764 cv
63.0239 183.996 62.7598 182.868 62.7598 181.392 cv
62.7598 180.012 63.084 178.908 63.7441 178.092 cv
64.3921 177.276 65.2798 176.856 66.3838 176.856 cv
66.6719 176.856 66.9722 176.892 67.2842 176.94 cv
67.584 177 67.896 177.084 68.2319 177.204 cv
68.2319 177.204 li
cp
65.8799 180.912 mo
65.3521 180.912 64.9321 181.104 64.6201 181.464 cv
64.3081 181.824 64.1519 182.328 64.1519 182.952 cv
64.1519 183.588 64.3081 184.092 64.6201 184.452 cv
64.9321 184.812 65.3521 184.992 65.8799 184.992 cv
66.4082 184.992 66.8281 184.812 67.1401 184.452 cv
67.4521 184.092 67.6079 183.588 67.6079 182.952 cv
67.6079 182.328 67.4521 181.824 67.1401 181.464 cv
66.8281 181.104 66.4082 180.912 65.8799 180.912 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 112.32 mo
518.4 112.32 li
@
grestore
72 112.32 mo
76 112.32 li
f
72 112.32 mo
76 112.32 li
@
518.4 112.32 mo
514.4 112.32 li
f
518.4 112.32 mo
514.4 112.32 li
@
39.0962 107.736 mo
40.0679 107.736 40.812 108.132 41.3398 108.9 cv
41.856 109.68 42.1201 110.808 42.1201 112.272 cv
42.1201 113.748 41.856 114.876 41.3398 115.644 cv
40.812 116.412 40.0679 116.796 39.0962 116.796 cv
38.1118 116.796 37.356 116.412 36.8398 115.644 cv
36.3242 114.876 36.0718 113.748 36.0718 112.272 cv
36.0718 110.808 36.3242 109.68 36.8398 108.9 cv
37.356 108.132 38.1118 107.736 39.0962 107.736 cv
39.0962 107.736 li
cp
39.0962 108.672 mo
38.4839 108.672 38.0278 108.972 37.7158 109.572 cv
37.4038 110.172 37.2598 111.072 37.2598 112.272 cv
37.2598 113.472 37.4038 114.372 37.7158 114.972 cv
38.0278 115.572 38.4839 115.872 39.0962 115.872 cv
39.708 115.872 40.1641 115.572 40.4761 114.972 cv
40.7759 114.372 40.9321 113.472 40.9321 112.272 cv
40.9321 111.072 40.7759 110.172 40.4761 109.572 cv
40.1641 108.972 39.708 108.672 39.0962 108.672 cv
ef
44.2441 115.152 mo
45.48 115.152 li
45.48 116.64 li
44.2441 116.64 li
44.2441 115.152 li
44.2441 115.152 li
cp
ef
50.6162 107.736 mo
51.5879 107.736 52.332 108.132 52.8599 108.9 cv
53.376 109.68 53.6401 110.808 53.6401 112.272 cv
53.6401 113.748 53.376 114.876 52.8599 115.644 cv
52.332 116.412 51.5879 116.796 50.6162 116.796 cv
49.6318 116.796 48.876 116.412 48.3599 115.644 cv
47.8438 114.876 47.5918 113.748 47.5918 112.272 cv
47.5918 110.808 47.8438 109.68 48.3599 108.9 cv
48.876 108.132 49.6318 107.736 50.6162 107.736 cv
50.6162 107.736 li
cp
50.6162 108.672 mo
50.0039 108.672 49.5479 108.972 49.2358 109.572 cv
48.9238 110.172 48.7798 111.072 48.7798 112.272 cv
48.7798 113.472 48.9238 114.372 49.2358 114.972 cv
49.5479 115.572 50.0039 115.872 50.6162 115.872 cv
51.228 115.872 51.6841 115.572 51.9961 114.972 cv
52.2959 114.372 52.4521 113.472 52.4521 112.272 cv
52.4521 111.072 52.2959 110.172 51.9961 109.572 cv
51.6841 108.972 51.228 108.672 50.6162 108.672 cv
ef
58.0562 107.736 mo
59.0278 107.736 59.772 108.132 60.2998 108.9 cv
60.8159 109.68 61.0801 110.808 61.0801 112.272 cv
61.0801 113.748 60.8159 114.876 60.2998 115.644 cv
59.772 116.412 59.0278 116.796 58.0562 116.796 cv
57.0718 116.796 56.3159 116.412 55.7998 115.644 cv
55.2842 114.876 55.0322 113.748 55.0322 112.272 cv
55.0322 110.808 55.2842 109.68 55.7998 108.9 cv
56.3159 108.132 57.0718 107.736 58.0562 107.736 cv
58.0562 107.736 li
cp
58.0562 108.672 mo
57.4438 108.672 56.9878 108.972 56.6758 109.572 cv
56.3638 110.172 56.2202 111.072 56.2202 112.272 cv
56.2202 113.472 56.3638 114.372 56.6758 114.972 cv
56.9878 115.572 57.4438 115.872 58.0562 115.872 cv
58.668 115.872 59.124 115.572 59.436 114.972 cv
59.7358 114.372 59.8921 113.472 59.8921 112.272 cv
59.8921 111.072 59.7358 110.172 59.436 109.572 cv
59.124 108.972 58.668 108.672 58.0562 108.672 cv
ef
64.1162 110.112 mo
64.1162 110.568 64.248 110.928 64.5361 111.18 cv
64.8242 111.432 65.2202 111.552 65.7358 111.552 cv
66.2402 111.552 66.6362 111.432 66.9238 111.18 cv
67.2119 110.928 67.356 110.568 67.356 110.112 cv
67.356 109.656 67.2119 109.308 66.9238 109.056 cv
66.6362 108.804 66.2402 108.672 65.7358 108.672 cv
65.2202 108.672 64.8242 108.804 64.5361 109.056 cv
64.248 109.308 64.1162 109.656 64.1162 110.112 cv
64.1162 110.112 li
cp
64.5479 111.984 mo
64.0439 111.864 63.6479 111.624 63.3599 111.276 cv
63.0718 110.928 62.9399 110.508 62.9399 110.004 cv
62.9399 109.308 63.1802 108.756 63.6841 108.348 cv
64.1758 107.94 64.8599 107.736 65.7358 107.736 cv
66.6001 107.736 67.2842 107.94 67.7881 108.348 cv
68.2798 108.756 68.5322 109.308 68.5322 110.004 cv
68.5322 110.508 68.3882 110.928 68.1001 111.276 cv
67.812 111.624 67.4282 111.864 66.9238 111.984 cv
67.4878 112.116 67.9321 112.38 68.2559 112.764 cv
68.5679 113.148 68.7358 113.628 68.7358 114.18 cv
68.7358 115.032 68.4722 115.68 67.9561 116.124 cv
67.4282 116.58 66.6958 116.796 65.7358 116.796 cv
64.7642 116.796 64.02 116.58 63.5039 116.124 cv
62.9878 115.68 62.7358 115.032 62.7358 114.18 cv
62.7358 113.628 62.8921 113.148 63.2158 112.764 cv
63.5278 112.38 63.9722 112.116 64.5479 111.984 cv
65.7358 112.488 mo
65.1719 112.488 64.728 112.644 64.4038 112.944 cv
64.0801 113.244 63.9238 113.652 63.9238 114.18 cv
63.9238 114.708 64.0801 115.128 64.4038 115.428 cv
64.728 115.728 65.1719 115.872 65.7358 115.872 cv
66.2881 115.872 66.7319 115.728 67.0562 115.416 cv
67.3799 115.116 67.5479 114.708 67.5479 114.18 cv
67.5479 113.652 67.3799 113.244 67.0679 112.944 cv
66.7441 112.644 66.2998 112.488 65.7358 112.488 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 43.2002 mo
518.4 43.2002 li
@
grestore
72 43.2002 mo
76 43.2002 li
f
72 43.2002 mo
76 43.2002 li
@
518.4 43.2002 mo
514.4 43.2002 li
f
518.4 43.2002 mo
514.4 43.2002 li
@
39.0962 38.6162 mo
40.0679 38.6162 40.812 39.0117 41.3398 39.7798 cv
41.856 40.5601 42.1201 41.688 42.1201 43.1519 cv
42.1201 44.6279 41.856 45.7559 41.3398 46.5239 cv
40.812 47.292 40.0679 47.6758 39.0962 47.6758 cv
38.1118 47.6758 37.356 47.292 36.8398 46.5239 cv
36.3242 45.7559 36.0718 44.6279 36.0718 43.1519 cv
36.0718 41.688 36.3242 40.5601 36.8398 39.7798 cv
37.356 39.0117 38.1118 38.6162 39.0962 38.6162 cv
39.0962 38.6162 li
cp
39.0962 39.5518 mo
38.4839 39.5518 38.0278 39.8521 37.7158 40.4521 cv
37.4038 41.0518 37.2598 41.9521 37.2598 43.1519 cv
37.2598 44.3521 37.4038 45.252 37.7158 45.8521 cv
38.0278 46.4521 38.4839 46.752 39.0962 46.752 cv
39.708 46.752 40.1641 46.4521 40.4761 45.8521 cv
40.7759 45.252 40.9321 44.3521 40.9321 43.1519 cv
40.9321 41.9521 40.7759 41.0518 40.4761 40.4521 cv
40.1641 39.8521 39.708 39.5518 39.0962 39.5518 cv
ef
44.2441 46.0322 mo
45.48 46.0322 li
45.48 47.52 li
44.2441 47.52 li
44.2441 46.0322 li
44.2441 46.0322 li
cp
ef
50.376 38.6162 mo
51.3481 38.6162 52.0918 39.0117 52.6201 39.7798 cv
53.1362 40.5601 53.3999 41.688 53.3999 43.1519 cv
53.3999 44.6279 53.1362 45.7559 52.6201 46.5239 cv
52.0918 47.292 51.3481 47.6758 50.376 47.6758 cv
49.3921 47.6758 48.6362 47.292 48.1201 46.5239 cv
47.604 45.7559 47.3521 44.6279 47.3521 43.1519 cv
47.3521 41.688 47.604 40.5601 48.1201 39.7798 cv
48.6362 39.0117 49.3921 38.6162 50.376 38.6162 cv
50.376 38.6162 li
cp
50.376 39.5518 mo
49.7642 39.5518 49.3081 39.8521 48.9961 40.4521 cv
48.6841 41.0518 48.54 41.9521 48.54 43.1519 cv
48.54 44.3521 48.6841 45.252 48.9961 45.8521 cv
49.3081 46.4521 49.7642 46.752 50.376 46.752 cv
50.9878 46.752 51.4438 46.4521 51.7559 45.8521 cv
52.0562 45.252 52.2119 44.3521 52.2119 43.1519 cv
52.2119 41.9521 52.0562 41.0518 51.7559 40.4521 cv
51.4438 39.8521 50.9878 39.5518 50.376 39.5518 cv
ef
55.728 46.5239 mo
57.6602 46.5239 li
57.6602 39.8521 li
55.5601 40.272 li
55.5601 39.1919 li
57.6479 38.772 li
58.8359 38.772 li
58.8359 46.5239 li
60.7681 46.5239 li
60.7681 47.52 li
55.728 47.52 li
55.728 46.5239 li
55.728 46.5239 li
cp
ef
65.7358 38.6162 mo
66.708 38.6162 67.4521 39.0117 67.98 39.7798 cv
68.4961 40.5601 68.7598 41.688 68.7598 43.1519 cv
68.7598 44.6279 68.4961 45.7559 67.98 46.5239 cv
67.4521 47.292 66.708 47.6758 65.7358 47.6758 cv
64.752 47.6758 63.9961 47.292 63.48 46.5239 cv
62.9639 45.7559 62.7119 44.6279 62.7119 43.1519 cv
62.7119 41.688 62.9639 40.5601 63.48 39.7798 cv
63.9961 39.0117 64.752 38.6162 65.7358 38.6162 cv
65.7358 38.6162 li
cp
65.7358 39.5518 mo
65.124 39.5518 64.668 39.8521 64.356 40.4521 cv
64.0439 41.0518 63.8999 41.9521 63.8999 43.1519 cv
63.8999 44.3521 64.0439 45.252 64.356 45.8521 cv
64.668 46.4521 65.124 46.752 65.7358 46.752 cv
66.3481 46.752 66.8042 46.4521 67.1162 45.8521 cv
67.416 45.252 67.5718 44.3521 67.5718 43.1519 cv
67.5718 41.9521 67.416 41.0518 67.1162 40.4521 cv
66.8042 39.8521 66.3481 39.5518 65.7358 39.5518 cv
ef
21.252 278.184 mo
21.252 275.508 li
21.252 274.536 21.48 273.792 21.9238 273.288 cv
22.3682 272.784 23.0161 272.532 23.8682 272.532 cv
24.7319 272.532 25.3921 272.784 25.8242 273.288 cv
26.2681 273.792 26.4839 274.536 26.4839 275.508 cv
26.4839 276.996 li
30 276.996 li
30 278.184 li
21.252 278.184 li
21.252 278.184 li
cp
22.2241 276.996 mo
25.5122 276.996 li
25.5122 275.508 li
25.5122 274.956 25.3799 274.536 25.0918 274.236 cv
24.8042 273.936 24.396 273.78 23.8682 273.78 cv
23.3398 273.78 22.9438 273.936 22.6563 274.236 cv
22.3682 274.536 22.2241 274.956 22.2241 275.508 cv
22.2241 276.996 li
ef
26.1357 266.976 mo
25.5479 266.988 25.0801 267.156 24.7202 267.468 cv
24.3721 267.792 24.1919 268.224 24.1919 268.752 cv
24.1919 269.352 24.3721 269.832 24.708 270.192 cv
25.0439 270.552 25.5239 270.768 26.1357 270.816 cv
26.1357 266.976 li
26.1357 266.976 li
cp
26.4478 265.896 mo
26.9761 265.896 li
26.9761 270.852 li
27.7202 270.804 28.2959 270.588 28.6802 270.18 cv
29.064 269.784 29.2559 269.232 29.2559 268.512 cv
29.2559 268.104 29.208 267.696 29.1118 267.312 cv
29.0161 266.928 28.8599 266.532 28.644 266.148 cv
29.6641 266.148 li
29.832 266.532 29.9639 266.928 30.0361 267.336 cv
30.1079 267.744 30.1563 268.164 30.1563 268.572 cv
30.1563 269.628 29.856 270.456 29.2559 271.068 cv
28.6563 271.68 27.8281 271.98 26.7842 271.98 cv
25.7158 271.98 24.8638 271.692 24.228 271.116 cv
23.604 270.54 23.2798 269.748 23.2798 268.764 cv
23.2798 267.876 23.5679 267.18 24.1318 266.664 cv
24.708 266.16 25.4761 265.896 26.4478 265.896 cv
ef
24.4438 260.268 mo
24.3721 260.388 24.3242 260.52 24.2881 260.664 cv
24.2642 260.808 24.2402 260.964 24.2402 261.132 cv
24.2402 261.744 24.4438 262.212 24.8398 262.536 cv
25.2358 262.872 25.7998 263.028 26.5439 263.028 cv
30 263.028 li
30 264.108 li
23.436 264.108 li
23.436 263.028 li
24.4561 263.028 li
24.0601 262.812 23.7598 262.512 23.5679 262.152 cv
23.376 261.792 23.2798 261.348 23.2798 260.82 cv
23.2798 260.748 23.292 260.664 23.292 260.568 cv
23.3042 260.484 23.3159 260.388 23.3398 260.268 cv
24.4438 260.268 li
24.4438 260.268 li
cp
ef
23.688 254.544 mo
24.6958 254.544 li
24.5278 254.855 24.4082 255.156 24.3242 255.468 cv
24.2402 255.78 24.1919 256.08 24.1919 256.392 cv
24.1919 257.088 24.4199 257.64 24.8638 258.024 cv
25.3081 258.408 25.9321 258.6 26.7241 258.6 cv
27.5278 258.6 28.1519 258.408 28.5962 258.024 cv
29.04 257.64 29.2559 257.088 29.2559 256.392 cv
29.2559 256.08 29.2202 255.78 29.1357 255.468 cv
29.0518 255.156 28.9199 254.855 28.752 254.544 cv
29.748 254.544 li
29.8921 254.855 30 255.168 30.0601 255.48 cv
30.1201 255.804 30.1563 256.152 30.1563 256.512 cv
30.1563 257.496 29.856 258.288 29.2319 258.864 cv
28.6201 259.452 27.7798 259.74 26.7241 259.74 cv
25.6563 259.74 24.8159 259.452 24.2041 258.864 cv
23.5918 258.276 23.2798 257.472 23.2798 256.44 cv
23.2798 256.104 23.3159 255.78 23.3882 255.468 cv
23.46 255.156 23.5562 254.844 23.688 254.544 cv
23.688 254.544 li
cp
ef
26.1357 248.256 mo
25.5479 248.268 25.0801 248.436 24.7202 248.748 cv
24.3721 249.072 24.1919 249.504 24.1919 250.032 cv
24.1919 250.632 24.3721 251.112 24.708 251.472 cv
25.0439 251.832 25.5239 252.048 26.1357 252.096 cv
26.1357 248.256 li
26.1357 248.256 li
cp
26.4478 247.176 mo
26.9761 247.176 li
26.9761 252.132 li
27.7202 252.084 28.2959 251.868 28.6802 251.46 cv
29.064 251.064 29.2559 250.512 29.2559 249.792 cv
29.2559 249.384 29.208 248.976 29.1118 248.592 cv
29.0161 248.208 28.8599 247.812 28.644 247.428 cv
29.6641 247.428 li
29.832 247.812 29.9639 248.208 30.0361 248.616 cv
30.1079 249.024 30.1563 249.444 30.1563 249.852 cv
30.1563 250.908 29.856 251.736 29.2559 252.348 cv
28.6563 252.96 27.8281 253.26 26.7842 253.26 cv
25.7158 253.26 24.8638 252.972 24.228 252.396 cv
23.604 251.82 23.2798 251.028 23.2798 250.044 cv
23.2798 249.156 23.5679 248.46 24.1318 247.944 cv
24.708 247.44 25.4761 247.176 26.4478 247.176 cv
ef
26.04 239.892 mo
30 239.892 li
30 240.972 li
26.0762 240.972 li
25.4521 240.972 24.9961 241.104 24.6841 241.344 cv
24.3721 241.584 24.2158 241.944 24.2158 242.424 cv
24.2158 243.012 24.4082 243.468 24.7798 243.804 cv
25.1519 244.14 25.6563 244.308 26.292 244.308 cv
30 244.308 li
30 245.388 li
23.436 245.388 li
23.436 244.308 li
24.4561 244.308 li
24.0718 244.056 23.772 243.756 23.5801 243.396 cv
23.3882 243.048 23.2798 242.64 23.2798 242.184 cv
23.2798 241.44 23.52 240.864 23.9878 240.48 cv
24.4561 240.096 25.1401 239.892 26.04 239.892 cv
26.04 239.892 li
cp
ef
21.5762 236.604 mo
23.436 236.604 li
23.436 234.384 li
24.2759 234.384 li
24.2759 236.604 li
27.8398 236.604 li
28.3799 236.604 28.728 236.532 28.8721 236.388 cv
29.0278 236.244 29.1001 235.944 29.1001 235.488 cv
29.1001 234.384 li
30 234.384 li
30 235.488 li
30 236.328 29.8438 236.904 29.5322 237.216 cv
29.2202 237.528 28.6563 237.684 27.8398 237.684 cv
24.2759 237.684 li
24.2759 238.476 li
23.436 238.476 li
23.436 237.684 li
21.5762 237.684 li
21.5762 236.604 li
21.5762 236.604 li
cp
ef
23.2798 226.728 mo
23.2798 225.792 23.5918 225.06 24.1919 224.52 cv
24.8042 223.992 25.644 223.716 26.7241 223.716 cv
27.8042 223.716 28.644 223.992 29.2441 224.52 cv
29.856 225.06 30.1563 225.792 30.1563 226.728 cv
30.1563 227.676 29.856 228.42 29.2441 228.948 cv
28.644 229.476 27.8042 229.74 26.7241 229.74 cv
25.644 229.74 24.8042 229.476 24.1919 228.948 cv
23.5918 228.42 23.2798 227.676 23.2798 226.728 cv
23.2798 226.728 li
cp
24.1919 226.728 mo
24.1919 227.304 24.4199 227.76 24.876 228.096 cv
25.332 228.432 25.9438 228.6 26.7241 228.6 cv
27.5161 228.6 28.1279 228.444 28.584 228.108 cv
29.04 227.771 29.2559 227.316 29.2559 226.728 cv
29.2559 226.152 29.04 225.696 28.584 225.36 cv
28.1279 225.024 27.5161 224.855 26.7241 224.855 cv
25.9561 224.855 25.332 225.024 24.876 225.36 cv
24.4199 225.696 24.1919 226.152 24.1919 226.728 cv
ef
20.8799 218.508 mo
21.7798 218.508 li
21.7798 219.54 li
21.7798 219.924 21.8638 220.2 22.02 220.344 cv
22.1758 220.5 22.4521 220.572 22.8599 220.572 cv
23.436 220.572 li
23.436 218.796 li
24.2759 218.796 li
24.2759 220.572 li
30 220.572 li
30 221.652 li
24.2759 221.652 li
24.2759 222.684 li
23.436 222.684 li
23.436 221.652 li
22.98 221.652 li
22.2598 221.652 21.7202 221.484 21.3838 221.148 cv
21.0479 220.812 20.8799 220.271 20.8799 219.528 cv
20.8799 218.508 li
20.8799 218.508 li
cp
ef
21.5762 212.844 mo
23.436 212.844 li
23.436 210.624 li
24.2759 210.624 li
24.2759 212.844 li
27.8398 212.844 li
28.3799 212.844 28.728 212.772 28.8721 212.628 cv
29.0278 212.484 29.1001 212.184 29.1001 211.728 cv
29.1001 210.624 li
30 210.624 li
30 211.728 li
30 212.568 29.8438 213.144 29.5322 213.456 cv
29.2202 213.768 28.6563 213.924 27.8398 213.924 cv
24.2759 213.924 li
24.2759 214.716 li
23.436 214.716 li
23.436 213.924 li
21.5762 213.924 li
21.5762 212.844 li
21.5762 212.844 li
cp
ef
20.8799 209.112 mo
20.8799 208.032 li
22.248 208.032 li
22.248 209.112 li
20.8799 209.112 li
20.8799 209.112 li
cp
23.436 209.112 mo
23.436 208.032 li
30 208.032 li
30 209.112 li
23.436 209.112 li
ef
21.5762 204.684 mo
23.436 204.684 li
23.436 202.464 li
24.2759 202.464 li
24.2759 204.684 li
27.8398 204.684 li
28.3799 204.684 28.728 204.612 28.8721 204.468 cv
29.0278 204.324 29.1001 204.024 29.1001 203.568 cv
29.1001 202.464 li
30 202.464 li
30 203.568 li
30 204.408 29.8438 204.984 29.5322 205.296 cv
29.2202 205.608 28.6563 205.764 27.8398 205.764 cv
24.2759 205.764 li
24.2759 206.556 li
23.436 206.556 li
23.436 205.764 li
21.5762 205.764 li
21.5762 204.684 li
21.5762 204.684 li
cp
ef
20.8799 201.192 mo
20.8799 200.112 li
30 200.112 li
30 201.192 li
20.8799 201.192 li
20.8799 201.192 li
cp
ef
26.1357 193.296 mo
25.5479 193.308 25.0801 193.476 24.7202 193.788 cv
24.3721 194.112 24.1919 194.544 24.1919 195.072 cv
24.1919 195.672 24.3721 196.152 24.708 196.512 cv
25.0439 196.872 25.5239 197.088 26.1357 197.136 cv
26.1357 193.296 li
26.1357 193.296 li
cp
26.4478 192.216 mo
26.9761 192.216 li
26.9761 197.172 li
27.7202 197.124 28.2959 196.908 28.6802 196.5 cv
29.064 196.104 29.2559 195.552 29.2559 194.832 cv
29.2559 194.424 29.208 194.016 29.1118 193.632 cv
29.0161 193.248 28.8599 192.852 28.644 192.468 cv
29.6641 192.468 li
29.832 192.852 29.9639 193.248 30.0361 193.656 cv
30.1079 194.064 30.1563 194.484 30.1563 194.892 cv
30.1563 195.948 29.856 196.776 29.2559 197.388 cv
28.6563 198 27.8281 198.3 26.7842 198.3 cv
25.7158 198.3 24.8638 198.012 24.228 197.436 cv
23.604 196.86 23.2798 196.068 23.2798 195.084 cv
23.2798 194.196 23.5679 193.5 24.1318 192.984 cv
24.708 192.48 25.4761 192.216 26.4478 192.216 cv
ef
23.436 187.176 mo
23.436 186.096 li
28.5601 184.752 li
23.436 183.408 li
23.436 182.136 li
28.5601 180.792 li
23.436 179.448 li
23.436 178.368 li
30 180.084 li
30 181.356 li
24.624 182.772 li
30 184.188 li
30 185.46 li
23.436 187.176 li
23.436 187.176 li
cp
ef
23.2798 174.168 mo
23.2798 173.232 23.5918 172.5 24.1919 171.96 cv
24.8042 171.432 25.644 171.156 26.7241 171.156 cv
27.8042 171.156 28.644 171.432 29.2441 171.96 cv
29.856 172.5 30.1563 173.232 30.1563 174.168 cv
30.1563 175.116 29.856 175.86 29.2441 176.388 cv
28.644 176.916 27.8042 177.18 26.7241 177.18 cv
25.644 177.18 24.8042 176.916 24.1919 176.388 cv
23.5918 175.86 23.2798 175.116 23.2798 174.168 cv
23.2798 174.168 li
cp
24.1919 174.168 mo
24.1919 174.744 24.4199 175.2 24.876 175.536 cv
25.332 175.872 25.9438 176.04 26.7241 176.04 cv
27.5161 176.04 28.1279 175.884 28.584 175.548 cv
29.04 175.212 29.2559 174.756 29.2559 174.168 cv
29.2559 173.592 29.04 173.136 28.584 172.8 cv
28.1279 172.464 27.5161 172.296 26.7241 172.296 cv
25.9561 172.296 25.332 172.464 24.876 172.8 cv
24.4199 173.136 24.1919 173.592 24.1919 174.168 cv
ef
24.4438 165.708 mo
24.3721 165.828 24.3242 165.96 24.2881 166.104 cv
24.2642 166.248 24.2402 166.404 24.2402 166.572 cv
24.2402 167.184 24.4438 167.652 24.8398 167.976 cv
25.2358 168.312 25.7998 168.468 26.5439 168.468 cv
30 168.468 li
30 169.548 li
23.436 169.548 li
23.436 168.468 li
24.4561 168.468 li
24.0601 168.252 23.7598 167.952 23.5679 167.592 cv
23.376 167.232 23.2798 166.788 23.2798 166.26 cv
23.2798 166.188 23.292 166.104 23.292 166.008 cv
23.3042 165.924 23.3159 165.828 23.3398 165.708 cv
24.4438 165.708 li
24.4438 165.708 li
cp
ef
26.7241 164.064 mo
27.5161 164.064 28.1401 163.908 28.5962 163.584 cv
29.0518 163.26 29.2681 162.804 29.2681 162.228 cv
29.2681 161.664 29.0518 161.22 28.5962 160.884 cv
28.1401 160.56 27.5161 160.392 26.7241 160.392 cv
25.9321 160.392 25.3198 160.56 24.8638 160.884 cv
24.4082 161.22 24.1802 161.664 24.1802 162.228 cv
24.1802 162.804 24.4082 163.26 24.8638 163.584 cv
25.3198 163.908 25.9321 164.064 26.7241 164.064 cv
26.7241 164.064 li
cp
24.4321 160.392 mo
20.8799 160.392 li
20.8799 159.312 li
30 159.312 li
30 160.392 li
29.0161 160.392 li
29.4121 160.62 29.7002 160.908 29.8799 161.256 cv
30.0601 161.604 30.1563 162.012 30.1563 162.492 cv
30.1563 163.284 29.8438 163.932 29.2202 164.436 cv
28.5962 164.94 27.7559 165.18 26.7241 165.18 cv
25.6919 165.18 24.8638 164.94 24.228 164.436 cv
23.604 163.932 23.2798 163.284 23.2798 162.492 cv
23.2798 162.012 23.376 161.604 23.5679 161.256 cv
23.7598 160.908 24.0479 160.62 24.4321 160.392 cv
ef
23.6279 152.844 mo
24.6479 152.844 li
24.5039 153.156 24.3838 153.468 24.2998 153.792 cv
24.228 154.128 24.1802 154.464 24.1802 154.812 cv
24.1802 155.352 24.2642 155.76 24.4321 156.024 cv
24.6001 156.288 24.8398 156.42 25.1641 156.42 cv
25.416 156.42 25.6079 156.324 25.752 156.132 cv
25.896 155.94 26.04 155.556 26.1602 154.98 cv
26.2441 154.608 li
26.4121 153.84 26.6519 153.3 26.9399 152.976 cv
27.2402 152.664 27.6602 152.496 28.188 152.496 cv
28.7998 152.496 29.2798 152.736 29.6279 153.216 cv
29.9878 153.696 30.1563 154.368 30.1563 155.208 cv
30.1563 155.568 30.1201 155.928 30.0601 156.312 cv
30 156.696 29.9038 157.092 29.7598 157.512 cv
28.644 157.512 li
28.8599 157.116 29.0161 156.72 29.1118 156.336 cv
29.2202 155.952 29.2681 155.568 29.2681 155.184 cv
29.2681 154.68 29.1841 154.284 29.0161 154.008 cv
28.8481 153.744 28.5962 153.6 28.272 153.6 cv
27.9839 153.6 27.7559 153.708 27.6001 153.9 cv
27.4438 154.092 27.2881 154.524 27.144 155.196 cv
27.0601 155.568 li
26.916 156.24 26.7002 156.732 26.4121 157.02 cv
26.124 157.32 25.728 157.464 25.2119 157.464 cv
24.6001 157.464 24.1201 157.248 23.7842 156.816 cv
23.4478 156.384 23.2798 155.76 23.2798 154.944 cv
23.2798 154.548 23.3159 154.176 23.376 153.816 cv
23.436 153.468 23.52 153.144 23.6279 152.844 cv
23.6279 152.844 li
cp
ef
1 lw
2 lc
72 388.8 mo
72 43.2002 li
72 388.8 mo
518.4 388.8 li
518.4 388.8 mo
518.4 43.2002 li
72 43.2002 mo
518.4 43.2002 li
@
390.391 93.5107 mo
511.2 93.5107 li
511.2 50.3999 li
390.391 50.3999 li
390.391 93.5107 li
390.391 93.5107 li
cp
1 1 1 rgb
f
390.391 93.5107 mo
511.2 93.5107 li
511.2 50.3999 li
390.391 50.3999 li
390.391 93.5107 li
390.391 93.5107 li
cp
0 0 0 rgb
@
400.471 61.7607 mo
420.631 61.7607 li
0 0 1 rgb
@
440.967 58.6563 mo
442.09 58.6563 442.968 59.0303 443.616 59.7505 cv
444.25 60.4849 444.581 61.4927 444.581 62.7886 cv
444.581 64.085 444.25 65.0928 443.616 65.8125 cv
442.968 66.5474 442.09 66.9072 440.967 66.9072 cv
439.829 66.9072 438.936 66.5474 438.303 65.8125 cv
437.669 65.0928 437.352 64.085 437.352 62.7886 cv
437.352 61.4927 437.669 60.4849 438.303 59.7505 cv
438.936 59.0303 439.829 58.6563 440.967 58.6563 cv
440.967 58.6563 li
cp
440.967 59.7505 mo
440.275 59.7505 439.729 60.0239 439.325 60.5713 cv
438.922 61.1182 438.72 61.8525 438.72 62.7886 cv
438.72 63.7393 438.907 64.4736 439.311 65.0205 cv
439.714 65.5679 440.261 65.8271 440.967 65.8271 cv
441.657 65.8271 442.205 65.5679 442.608 65.0205 cv
443.012 64.4736 443.213 63.7393 443.213 62.7886 cv
443.213 61.8672 443.012 61.1182 442.608 60.5713 cv
442.205 60.0239 441.657 59.7505 440.967 59.7505 cv
0 0 0 rgb
ef
453.105 61.9678 mo
453.105 66.7197 li
451.81 66.7197 li
451.81 62.0112 li
451.81 61.2622 451.651 60.7153 451.363 60.3408 cv
451.075 59.9663 450.644 59.7793 450.067 59.7793 cv
449.361 59.7793 448.814 60.0098 448.411 60.4561 cv
448.008 60.9023 447.807 61.5073 447.807 62.2705 cv
447.807 66.7197 li
446.511 66.7197 li
446.511 58.8433 li
447.807 58.8433 li
447.807 60.0674 li
448.108 59.6064 448.469 59.2461 448.9 59.0161 cv
449.318 58.7856 449.808 58.6563 450.355 58.6563 cv
451.248 58.6563 451.939 58.9438 452.4 59.5054 cv
452.861 60.0674 453.105 60.8877 453.105 61.9678 cv
453.105 61.9678 li
cp
ef
461.348 59.1455 mo
461.348 60.355 li
460.973 60.1533 460.613 60.0098 460.238 59.9087 cv
459.864 59.8081 459.504 59.7505 459.13 59.7505 cv
458.295 59.7505 457.632 60.0239 457.171 60.5566 cv
456.711 61.0894 456.48 61.8384 456.48 62.7886 cv
456.48 63.7534 456.711 64.5024 457.171 65.0352 cv
457.632 65.5679 458.295 65.8271 459.13 65.8271 cv
459.504 65.8271 459.864 65.7842 460.238 65.6831 cv
460.613 65.5825 460.973 65.4238 461.348 65.2222 cv
461.348 66.4175 li
460.973 66.5903 460.599 66.7197 460.224 66.792 cv
459.835 66.8638 459.418 66.9072 458.985 66.9072 cv
457.805 66.9072 456.854 66.5474 456.163 65.7983 cv
455.458 65.064 455.112 64.0562 455.112 62.7886 cv
455.112 61.5073 455.458 60.499 456.163 59.7646 cv
456.869 59.0303 457.834 58.6563 459.072 58.6563 cv
459.476 58.6563 459.864 58.6992 460.238 58.7856 cv
460.613 58.8721 460.987 58.9873 461.348 59.1455 cv
461.348 59.1455 li
cp
ef
466.646 58.6563 mo
467.77 58.6563 468.648 59.0303 469.296 59.7505 cv
469.93 60.4849 470.261 61.4927 470.261 62.7886 cv
470.261 64.085 469.93 65.0928 469.296 65.8125 cv
468.648 66.5474 467.77 66.9072 466.646 66.9072 cv
465.509 66.9072 464.616 66.5474 463.982 65.8125 cv
463.349 65.0928 463.032 64.085 463.032 62.7886 cv
463.032 61.4927 463.349 60.4849 463.982 59.7505 cv
464.616 59.0303 465.509 58.6563 466.646 58.6563 cv
466.646 58.6563 li
cp
466.646 59.7505 mo
465.955 59.7505 465.408 60.0239 465.005 60.5713 cv
464.602 61.1182 464.4 61.8525 464.4 62.7886 cv
464.4 63.7393 464.587 64.4736 464.99 65.0205 cv
465.394 65.5679 465.94 65.8271 466.646 65.8271 cv
467.338 65.8271 467.885 65.5679 468.288 65.0205 cv
468.691 64.4736 468.893 63.7393 468.893 62.7886 cv
468.893 61.8672 468.691 61.1182 468.288 60.5713 cv
467.885 60.0239 467.338 59.7505 466.646 59.7505 cv
ef
478.953 65.7407 mo
478.953 67.0654 478.651 68.0591 478.061 68.7217 cv
477.456 69.3696 476.549 69.7007 475.325 69.7007 cv
474.864 69.7007 474.446 69.6577 474.043 69.6001 cv
473.64 69.5278 473.236 69.4272 472.862 69.2832 cv
472.862 68.0303 li
473.236 68.2319 473.611 68.376 473.985 68.4766 cv
474.36 68.5776 474.734 68.6353 475.123 68.6353 cv
475.958 68.6353 476.592 68.4048 477.024 67.9727 cv
477.441 67.5264 477.657 66.8638 477.657 65.9712 cv
477.657 65.3374 li
477.384 65.7983 477.038 66.144 476.621 66.3745 cv
476.203 66.6045 475.714 66.7197 475.138 66.7197 cv
474.158 66.7197 473.381 66.3599 472.79 65.6255 cv
472.2 64.8911 471.912 63.9121 471.912 62.688 cv
471.912 61.4785 472.2 60.499 472.79 59.7646 cv
473.381 59.0303 474.158 58.6563 475.138 58.6563 cv
475.714 58.6563 476.203 58.771 476.621 59.0015 cv
477.038 59.2319 477.384 59.5776 477.657 60.0381 cv
477.657 58.8433 li
478.953 58.8433 li
478.953 65.7407 li
478.953 65.7407 li
cp
477.657 62.688 mo
477.657 61.7666 477.456 61.0322 477.082 60.5137 cv
476.692 59.9951 476.146 59.7358 475.454 59.7358 cv
474.764 59.7358 474.216 59.9951 473.827 60.5137 cv
473.438 61.0322 473.251 61.7666 473.251 62.688 cv
473.251 63.624 473.438 64.3438 473.827 64.8623 cv
474.216 65.3809 474.764 65.6401 475.454 65.6401 cv
476.146 65.6401 476.692 65.3809 477.082 64.8623 cv
477.456 64.3438 477.657 63.624 477.657 62.688 cv
ef
487.037 62.083 mo
487.022 61.3774 486.82 60.8159 486.446 60.3838 cv
486.058 59.9663 485.539 59.7505 484.905 59.7505 cv
484.186 59.7505 483.609 59.9663 483.178 60.3696 cv
482.746 60.7729 482.486 61.3486 482.429 62.083 cv
487.037 62.083 li
487.037 62.083 li
cp
488.333 62.4575 mo
488.333 63.0913 li
482.386 63.0913 li
482.443 63.9839 482.702 64.6753 483.192 65.1357 cv
483.667 65.5967 484.33 65.8271 485.193 65.8271 cv
485.684 65.8271 486.173 65.7695 486.634 65.6543 cv
487.095 65.5391 487.569 65.3521 488.03 65.0928 cv
488.03 66.3169 li
487.569 66.5186 487.095 66.6768 486.604 66.7632 cv
486.115 66.8496 485.611 66.9072 485.121 66.9072 cv
483.854 66.9072 482.861 66.5474 482.126 65.8271 cv
481.392 65.1074 481.032 64.1138 481.032 62.8608 cv
481.032 61.5791 481.378 60.5566 482.068 59.7935 cv
482.76 59.0449 483.711 58.6563 484.892 58.6563 cv
485.957 58.6563 486.792 59.0015 487.411 59.6782 cv
488.016 60.3696 488.333 61.291 488.333 62.4575 cv
ef
497.025 61.9678 mo
497.025 66.7197 li
495.729 66.7197 li
495.729 62.0112 li
495.729 61.2622 495.571 60.7153 495.283 60.3408 cv
494.995 59.9663 494.563 59.7793 493.987 59.7793 cv
493.281 59.7793 492.734 60.0098 492.331 60.4561 cv
491.928 60.9023 491.727 61.5073 491.727 62.2705 cv
491.727 66.7197 li
490.431 66.7197 li
490.431 58.8433 li
491.727 58.8433 li
491.727 60.0674 li
492.029 59.6064 492.389 59.2461 492.82 59.0161 cv
493.238 58.7856 493.729 58.6563 494.275 58.6563 cv
495.168 58.6563 495.859 58.9438 496.32 59.5054 cv
496.781 60.0674 497.025 60.8877 497.025 61.9678 cv
497.025 61.9678 li
cp
ef
505.037 62.083 mo
505.022 61.3774 504.82 60.8159 504.446 60.3838 cv
504.058 59.9663 503.539 59.7505 502.905 59.7505 cv
502.186 59.7505 501.609 59.9663 501.178 60.3696 cv
500.746 60.7729 500.486 61.3486 500.429 62.083 cv
505.037 62.083 li
505.037 62.083 li
cp
506.333 62.4575 mo
506.333 63.0913 li
500.386 63.0913 li
500.443 63.9839 500.702 64.6753 501.192 65.1357 cv
501.667 65.5967 502.33 65.8271 503.193 65.8271 cv
503.684 65.8271 504.173 65.7695 504.634 65.6543 cv
505.095 65.5391 505.569 65.3521 506.03 65.0928 cv
506.03 66.3169 li
505.569 66.5186 505.095 66.6768 504.604 66.7632 cv
504.115 66.8496 503.611 66.9072 503.121 66.9072 cv
501.854 66.9072 500.861 66.5474 500.126 65.8271 cv
499.392 65.1074 499.032 64.1138 499.032 62.8608 cv
499.032 61.5791 499.378 60.5566 500.068 59.7935 cv
500.76 59.0449 501.711 58.6563 502.892 58.6563 cv
503.957 58.6563 504.792 59.0015 505.411 59.6782 cv
506.016 60.3696 506.333 61.291 506.333 62.4575 cv
ef
400.471 82.5068 mo
420.631 82.5068 li
0 0.501961 0 rgb
@
442.479 80.9326 mo
442.334 80.8462 442.176 80.7886 442.003 80.7456 cv
441.83 80.7168 441.644 80.688 441.441 80.688 cv
440.707 80.688 440.146 80.9326 439.757 81.4082 cv
439.354 81.8833 439.166 82.5601 439.166 83.4526 cv
439.166 87.6001 li
437.87 87.6001 li
437.87 79.7231 li
439.166 79.7231 li
439.166 80.9473 li
439.426 80.4717 439.785 80.1118 440.218 79.8818 cv
440.649 79.6514 441.183 79.5361 441.816 79.5361 cv
441.902 79.5361 442.003 79.5503 442.118 79.5503 cv
442.219 79.5649 442.334 79.5791 442.479 79.6079 cv
442.479 80.9326 li
442.479 80.9326 li
cp
0 0 0 rgb
ef
448.877 82.9629 mo
448.862 82.2578 448.661 81.6958 448.286 81.2642 cv
447.897 80.8462 447.379 80.6304 446.746 80.6304 cv
446.025 80.6304 445.449 80.8462 445.018 81.2495 cv
444.586 81.6528 444.326 82.2285 444.269 82.9629 cv
448.877 82.9629 li
448.877 82.9629 li
cp
450.173 83.3374 mo
450.173 83.9712 li
444.226 83.9712 li
444.283 84.8638 444.542 85.5552 445.032 86.0161 cv
445.507 86.4766 446.17 86.707 447.033 86.707 cv
447.523 86.707 448.013 86.6494 448.474 86.5342 cv
448.935 86.4189 449.409 86.2319 449.87 85.9727 cv
449.87 87.1968 li
449.409 87.3984 448.935 87.5566 448.445 87.6431 cv
447.955 87.7295 447.451 87.7871 446.962 87.7871 cv
445.694 87.7871 444.701 87.4272 443.967 86.707 cv
443.232 85.9873 442.872 84.9937 442.872 83.7407 cv
442.872 82.459 443.218 81.4365 443.909 80.6738 cv
444.6 79.9248 445.551 79.5361 446.731 79.5361 cv
447.797 79.5361 448.632 79.8818 449.251 80.5586 cv
449.856 81.2495 450.173 82.1709 450.173 83.3374 cv
ef
453.596 77.4912 mo
453.596 79.7231 li
456.259 79.7231 li
456.259 80.7314 li
453.596 80.7314 li
453.596 85.0078 li
453.596 85.6563 453.682 86.0737 453.854 86.2461 cv
454.027 86.4336 454.387 86.52 454.935 86.52 cv
456.259 86.52 li
456.259 87.6001 li
454.935 87.6001 li
453.927 87.6001 453.235 87.4126 452.861 87.0381 cv
452.486 86.6641 452.299 85.9873 452.299 85.0078 cv
452.299 80.7314 li
451.349 80.7314 li
451.349 79.7231 li
452.299 79.7231 li
452.299 77.4912 li
453.596 77.4912 li
453.596 77.4912 li
cp
ef
462.398 80.9326 mo
462.254 80.8462 462.096 80.7886 461.923 80.7456 cv
461.75 80.7168 461.563 80.688 461.361 80.688 cv
460.627 80.688 460.065 80.9326 459.677 81.4082 cv
459.273 81.8833 459.086 82.5601 459.086 83.4526 cv
459.086 87.6001 li
457.79 87.6001 li
457.79 79.7231 li
459.086 79.7231 li
459.086 80.9473 li
459.346 80.4717 459.706 80.1118 460.138 79.8818 cv
460.569 79.6514 461.103 79.5361 461.736 79.5361 cv
461.822 79.5361 461.923 79.5503 462.038 79.5503 cv
462.14 79.5649 462.254 79.5791 462.398 79.6079 cv
462.398 80.9326 li
462.398 80.9326 li
cp
ef
466.406 79.5361 mo
467.529 79.5361 468.408 79.9102 469.056 80.6304 cv
469.689 81.3647 470.021 82.3726 470.021 83.6689 cv
470.021 84.9648 469.689 85.9727 469.056 86.6929 cv
468.408 87.4272 467.529 87.7871 466.406 87.7871 cv
465.269 87.7871 464.376 87.4272 463.742 86.6929 cv
463.108 85.9727 462.792 84.9648 462.792 83.6689 cv
462.792 82.3726 463.108 81.3647 463.742 80.6304 cv
464.376 79.9102 465.269 79.5361 466.406 79.5361 cv
466.406 79.5361 li
cp
466.406 80.6304 mo
465.715 80.6304 465.168 80.9038 464.765 81.4512 cv
464.361 81.9985 464.16 82.7329 464.16 83.6689 cv
464.16 84.6191 464.348 85.3535 464.75 85.9009 cv
465.153 86.4482 465.701 86.707 466.406 86.707 cv
467.098 86.707 467.645 86.4482 468.048 85.9009 cv
468.451 85.3535 468.652 84.6191 468.652 83.6689 cv
468.652 82.7471 468.451 81.9985 468.048 81.4512 cv
467.645 80.9038 467.098 80.6304 466.406 80.6304 cv
ef
471.313 79.7231 mo
472.68 79.7231 li
475.143 86.333 li
477.604 79.7231 li
478.973 79.7231 li
476.021 87.6001 li
474.264 87.6001 li
471.313 79.7231 li
471.313 79.7231 li
cp
ef
480.634 76.6563 mo
481.93 76.6563 li
481.93 78.2974 li
480.634 78.2974 li
480.634 76.6563 li
480.634 76.6563 li
cp
480.634 79.7231 mo
481.93 79.7231 li
481.93 87.6001 li
480.634 87.6001 li
480.634 79.7231 li
ef
489.278 80.9326 mo
489.135 80.8462 488.976 80.7886 488.803 80.7456 cv
488.631 80.7168 488.443 80.688 488.241 80.688 cv
487.507 80.688 486.945 80.9326 486.557 81.4082 cv
486.153 81.8833 485.967 82.5601 485.967 83.4526 cv
485.967 87.6001 li
484.67 87.6001 li
484.67 79.7231 li
485.967 79.7231 li
485.967 80.9473 li
486.226 80.4717 486.586 80.1118 487.018 79.8818 cv
487.449 79.6514 487.982 79.5361 488.616 79.5361 cv
488.702 79.5361 488.803 79.5503 488.918 79.5503 cv
489.02 79.5649 489.135 79.5791 489.278 79.6079 cv
489.278 80.9326 li
489.278 80.9326 li
cp
ef
490.344 84.4897 mo
490.344 79.7231 li
491.64 79.7231 li
491.64 84.4463 li
491.64 85.1953 491.784 85.7422 492.072 86.1167 cv
492.36 86.4912 492.792 86.6782 493.383 86.6782 cv
494.073 86.6782 494.635 86.4624 495.038 86.0161 cv
495.441 85.5693 495.644 84.9648 495.644 84.187 cv
495.644 79.7231 li
496.939 79.7231 li
496.939 87.6001 li
495.644 87.6001 li
495.644 86.3906 li
495.326 86.8799 494.952 87.2256 494.549 87.4561 cv
494.131 87.6719 493.656 87.7871 493.108 87.7871 cv
492.201 87.7871 491.511 87.5137 491.05 86.9521 cv
490.574 86.4048 490.344 85.584 490.344 84.4897 cv
490.344 84.4897 li
cp
ef
504.619 79.9536 mo
504.619 81.1777 li
504.245 81.0049 503.87 80.8608 503.481 80.7598 cv
503.078 80.6738 502.675 80.6162 502.258 80.6162 cv
501.609 80.6162 501.12 80.7168 500.803 80.9185 cv
500.486 81.1201 500.328 81.4082 500.328 81.7969 cv
500.328 82.0991 500.443 82.3296 500.674 82.5024 cv
500.904 82.6753 501.365 82.8481 502.056 82.9922 cv
502.502 83.0928 li
503.424 83.2944 504.072 83.5825 504.461 83.9277 cv
504.835 84.2881 505.037 84.792 505.037 85.4258 cv
505.037 86.1602 504.749 86.7358 504.173 87.1533 cv
503.597 87.5854 502.79 87.7871 501.782 87.7871 cv
501.351 87.7871 500.918 87.7441 500.458 87.6719 cv
499.997 87.6001 499.521 87.4849 499.018 87.312 cv
499.018 85.9727 li
499.493 86.2319 499.968 86.4189 500.429 86.5342 cv
500.89 86.6641 501.351 86.7217 501.812 86.7217 cv
502.416 86.7217 502.892 86.6206 503.223 86.4189 cv
503.539 86.2178 503.712 85.915 503.712 85.5264 cv
503.712 85.1807 503.582 84.9072 503.352 84.7197 cv
503.121 84.5327 502.604 84.3457 501.797 84.1729 cv
501.351 84.0718 li
500.544 83.8994 499.953 83.6401 499.608 83.2944 cv
499.248 82.9487 499.075 82.4736 499.075 81.8545 cv
499.075 81.1201 499.334 80.5439 499.853 80.1406 cv
500.371 79.7373 501.12 79.5361 502.1 79.5361 cv
502.574 79.5361 503.021 79.5791 503.453 79.6514 cv
503.87 79.7231 504.259 79.8242 504.619 79.9536 cv
504.619 79.9536 li
cp
ef
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 49 /one putdup 55 /seven putdup 56 /eight putdup 57 /nine putdup 66 /B putdup 78 /N putdup 86 /V putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 119 /w putdup 122 /z putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings30 dict dup begin/space <1C60D8A8C9B896187A> |-/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-/seven <1C60D8A8C9B7BA8F425ECEA3CCEB01EB08904B1DBA8C9FADA482DD5BD7B85932F4448BE6EA91291DDC2715CACD23> |-/eight <1C60D8A8C9B7BA8F623D810BCFAA50091BF89AB5BE3357ACF7A8EC11C35A526108259CA49EFD17EA8971235551BABBA49C018C3375128659D5D7051D45E4C4ECFE02CC0D35373F3D4B2DC792F4C41BCD9DEAF2AC24EA7A456EB3C15513EE5D201ACCA4975153635E279761AFF1AF1596B3D3861988A67B17B4B842347EAF131C1ABA71797B1264826F04BDED0719803E211C51F417CEBD773552253C6786889CD2B3EB81707FCE2453D0BD7C65B6D6DB5614A7F2FDB700BE408D6F36A3C20DDE8F30CA7C808E9263350AB2907E45DC2CA6BBA6B44E98822CA142BAF4C98107A946AA8711E8E6F4BC5EB9C6DC60704FA7E3779BF270D263AF4819BBE793351D4C> |-/nine <1C60D8A8C9B7BA8F63126F4A1F6CE00289C1CCAFA389E5E5FA018A9CA94A9AB8FCD76431E4E0F7BC7A33615EC70702BC420EB4D303A110985122EC77C7B03EB8C71982B066BE2C1A366D2D1F4CF54461387C6A50BE96E3793F2EC562860986B8187C9036DC54CA8C289E1AE1DBD61F35DAC84B3776130ECC3480C8D38B2E2C8B3A54D553A0E087E1F35341759A> |-/B <1C60D8A8C9B79D2DDA73CBA562CCA616611FA2F6D9A4F73A34564160886E9CF893B5F30C6CA3CC5C829E6C86CCD8B6039E0C7F2FD0FFEC5790BDC97E18D50224F8DBF29BE62BF93B9B46A0E426252323AF779BE129778FBC2237B0172C862C48766856E64A95D30B6FDF49C5041364379F758936E5F343D201DDC5AF9E1CC2D12A5BB71D809FD0C76D483DCA8BBD4974D0EC93996621F2710B5158F156401628A148FF8FBE9DF1DF727E152C865F07> |-/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F8457D1A44289B0DB31B4E1DC1F3487A85D6C086A5A13FB7D7B66A3F61EF4969C1AE080F7AF6D145220EBF9A7BF4151121C2FA015E52FB7E43B5305D938D71B0B61429953BBCCA81012B7A0E4> |-/V <1C60D8A8C9B7EDAFD30F79AA728C73B6F9D7243B3F3111E28F2A88FF9E5531C99B386BBCEA887616E38278755F3D624761739CBCFEBE737FE4F6B41F26A8CE4C75B9203972AF1AD2A0D0E820> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624097F1B5D47BF4F384727F53BA1763156DBDB0266> |-/d <1C60D8A8C9B7E7C1D82219353B31AE497773900CFE039E7C34F7CEBE101056958EFFC2C789CCBD8768CC683564B6074DAAAE648B50C88AD4C58AC712C8476BA68C74E592EF7E71792F9E5367AB3C80F9D183D28DD5E961AA14DCB5D9206768FB9E099DA642A8BAA73D52C56C9913DC619FDF3F90996DC8D242E6BF94BEBE752CB2F5D6196384CDD6E5AC10AFB49712810FFD82A2782B9B182DA37A23E6043872EFC1C407DD53136E> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/f <1C60D8A8C9B8469EE0EEFD5AEC6CA97A72064EDB5F8138E6D1529C05D71AD800DE9767801FDF34CB86E1E21FD9D405698D46905E6F519DDB7CBC96570BA09B7E74CE45A9784C89ACE8876894AF309C859106C75B1212CD> |-/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F43B727FC67DAAB0A1AC346364003E4FEF79FBAC399EF60BAB44182D20FA0C6402BF1E27F05398DCDDDA14D79F5733F11E560A813FF9D16C42617DFDA23021803BAB86086244EE74B29A5E1F99E79BC6C6C8880FE4C572C55E990D88B7521BD46854B97930948AAC94E7DFE2FF69F2221950186414A7427A5E80E1B04B219E3300404246D87351FD05C6F3EA0B95C636083B47E4D5C2DAA8BBB8D343439CEC8A6CCD7C3BA57C2332F2A02343DC56BF6AA691E1A081F9D254D> |-/h <1C60D8A8C9B790A816BA887E1DA4852044FABD5C80CA3A9E2E9C1F200BD200369E1A531F52CE66B5B19C492F0751A1C2858510B2E2690FB789B214E0E0C6537C1C71B0F5B79BE42FC591254AEEEA9BA5BA2F0A43A49AB11B4C> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/m <1C60D8A8C9B6B7700392E60257FC106462D2DFCBC2A10DB5A615FEAAB80AD406B3832324841574E3D3133104747B3854CDADF52623F13A7F1244387949CA519BF305061F6B288B581C60DA40B94376A357459EBA755901A927650F836941E942CE400E1FF6115974FBE2B4AAC56A74FF06B173793CC52E5CDF6F129032B1749CF571CC87D5D8236938E9D26865B5B2E013E76E7BD1DBAB8AA6F040AACF> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CEF7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFBBE8C69D79181> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F89019F8CCCB6FE3AF5C57> |-/v <1C60D8A8C9B75A17982D11DC3FC677436DFDC6EA949B3A8A476902498B78CD729866CE567C88B5C4105F11006EA75E6774682E91A2E1F257423C8BD0B940F1B9F1BCB8B413DFC78AF75D4027> |-/w <1C60D8A8C9B615D1D39C3ADF830FB08A1A35A87DCFD157E58FABDD21BA80846DED508D58D627D5468CDEA878B4EBB2BC39F9E17357A3B538845D213A53BE481E0D6B92FA11EAB84DAA099CD1E52DEE6734C0A900F3A37F8B6CBD74174B2BAF5100CBE402299FC69ADD471E1494375657D0074EB17A39D5C9C17257D613AB99E3> |-/z <1C60D8A8C9B76F05D40D9AF06C62C52F8E7A83C69F6CDC031056F31E455ADB43C89D34E1A28A8E500535BCBC2826CEC41780F6E88D88BBC16CBA809407E19164AA6CDC22FB> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BWBVGC+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/BWBVGC+MyriadPro-Regular*1 [32{/.notdef}rp /space 16{/.notdef}rp /one 5{/.notdef}rp /seven /eight /nine 8{/.notdef}rp /B 11{/.notdef}rp /N 7{/.notdef}rp /V 10{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w 2{/.notdef}rp /z 133{/.notdef}rp]BWBVGC+MyriadPro-Regular nfBWBVGC+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf298.335 171.774 mo(1989)[6.15625 6.15527 6.15625 0 ]xsh298.335 186.175 mo(Nobel prize)[7.89551 6.58789 6.82813 6.01172 2.83203 2.54395 6.82813 3.97168 2.80762 5.05273 0 ]xsh298.335 200.574 mo( awarded)[2.54395 5.6875 8.78418 5.78418 3.80371 6.76855 6.01172 0 ]xsh200.376 126.334 mo(1978)[6.15576 6.15576 6.15576 0 ]xsh84.4932 140.734 mo(Bishop and Varmus describe)[6.50391 2.80811 4.75195 6.66016 6.58789 6.82764 2.54395 5.78369 6.66016 6.76807 2.11182 6.30029 5.78418 3.97168 10.0078 6.61182 4.75195 2.54395 6.76807 6.01172 4.75195 5.37598 3.97168 2.80811 6.82764 0 ]xsh112.957 155.134 mo(retrovirus mutation of )[3.80371 6.01172 3.97217 3.8042 6.50391 5.77197 2.80811 3.92383 6.61182 4.75195 2.54395 10.0078 6.61182 3.97168 5.73633 3.97168 2.80811 6.58789 6.65967 2.54395 6.58789 3.50391 0 ]xsh174.468 169.534 mo(oncogene)[6.58789 6.66016 5.3042 6.58789 6.70801 6.01172 6.66016 0 ]xsh2 lw
0 lc
0 lj
4 ml
223.333 175.333 mo
223.333 242 li
@
224.358 244.361 mo
224.858 242.709 225.318 241.634 225.85 240.308 cv
220.806 240.308 li
221.031 240.782 221.798 242.709 222.297 244.361 cv
222.832 246.131 223.198 247.736 223.328 248.776 cv
223.458 247.736 223.824 246.131 224.358 244.361 cv
cp
f
312 207.999 mo
312 250 li
@
313.025 252.362 mo
313.524 250.709 313.984 249.634 314.517 248.308 cv
309.473 248.308 li
309.697 248.782 310.465 250.709 310.964 252.362 cv
311.498 254.132 311.864 255.736 311.994 256.776 cv
312.125 255.736 312.49 254.132 313.025 252.362 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/BWBVGC+MyriadPro-Regular*1 uf/BWBVGC+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Jason Schwarz) ()%%Title: (oncogene.eps)%%CreationDate: 8/8/14 7:33 PM%AI9_DataStream%Gb"-6Bj9lHdP-"H!<3')'LX*#M)1pu4>0ti$7\[OA@VA^mgnl*5?0ilSWJLIlut\?\^"BF$D$UflKYD7lKYBk,#N"a>.$ic^!Qb*%2(m'Egsk><BuY;KLa<\GNUqHL]Lo1%3r#_aqPW0CCVA=M[[ZZ%D`(l!VqR"M<Sub,21AVF2V\7h(Rin+:SC@Vh<IAXUOTk7C(8n#%SCcX'c"^=YE\Zd"RZ2VF\8$IgJ#Y>ooh)jn<UIi/N.bcJnl-G_R^M1lf1Wfh)V65:Mq'2,hc10u"!$he/`(9V2@$Yd.:?8]m<uh2%*^7Y.Oj=j:INJgq#fqPNq+a3qltTcLs-*2-;kqt5<r7l"lZ\50Hs-L71opR9+eC#P)*P-)(Anq3Z^NQRS&?hg6"k)q9`!6^F8`:3%rEhgIl>*0FDtcHZOA6auPSX(4s.]%%(nE*IEC5n&l1puTmp<C?I6*,\Sjf+h[;5F^.jAg\bpna;%S:hmdgDGlmX)VX4OJ$VE0LJ4%I0>cuXSu/e3WMo9p"!^ORUE`O.oKW]TJIFlX;aXa1mPRe&capLT$nQ*R=JfB?k:n]GFSd#T>GuGF;s\.ega$;pU&Cde=8PA!Jf*1%"S7R$r)ilPU'RO]pZjDc1,)GmaQWpVkidU"\GQ=jC/l3D.`I?NJ3KW(JGF)JWr;3tglbV]^0CV!?MLFZX<YPG<Q3jMJ\NcEIi"$U%<)rIlWo?rW`M]_.T2mGoR^Os[XCW7DbqQAf@:1\)W)S#6QA'H4$gUpa%pN6Rf!6j.KqIineg_H?<j@H4Ma`"k/7P/B"eSgFL4QHW%'ms>eco)SJMD)r(6DRD^-%E(tYlt'G=u[l,NO<_!I&-BPNX1,E*?5[j`c6&ld'bn\r/KTQ7/.^JU3*+mj,!1`NZ8"-.?4^C;JK,)%=:<0'^TgP1Jn9=Y&9CHR8ju>ur(UDDO]1TqmM%Se*AQ_u`,!_L=:<0)^Tf.IK65W8)4`M[Mm[MOI"j(MBNlGurl/k93]d<9RpqC(%p`"#-q!^557EQp@XqX&dj?.s[F8k->7e*6Qa'+^FS1\pE'RRcgi^MhST)!c])Z1]._9m8J`6i"/3bnL*a+qF7(?KHS+/K9\MncM,%N\6XUSBYW#;N=):gs(,3o*XY=`11iTjTR7QHql-H.<^s@'J?4$@a8V>O,`.Z[5`9^4)Iccdsi'Q.[cNjl't]+clO[t+6?j"g1d$Y%JkN-h=e&4smo/Z:I.-PH[WZnO9=cq&SBB,>+@_laf\3#'a-G].iR30h93IS%5Q"0^U<NTc$@Uq3V>iB3IWte>J$F[0dh:gsrKk^T%n'5;:cSXm1e)[`-p+N&9:Ro2l?_Ka"4+HM0=JAch--floY?[s^S\OfhAH/G$*9Rf]ds7eIq)A-d`i!K=9s9d285Gl8Z<=0f9rsg7%j\>Y[.HQ**8hLXT;6H]F\q7\<-2nna7esmO_,!So'].QI#Q>bDe(.ub[l'+L_i];<;6&^q<W%=PPldT,f(^o2(]KUK(G"@ni_QBr%jkOggIrXnLQ@\(NE>@[np`u'$,m?eRjkpAY'qLb9r^'oHgDV@k:F%QJpfXD8JbCMTD>``9Uc!o5IruddclQ<T4MeDAZ/JK`'KMHL%)B"HeT/]%B3%5Oh2OY!A)duATX2R])7)tlJkMd$6A.AdXe,"a[5'5h7V%O^JV$67qbTRVO"YN6<1pPUiT5b]+D..$Rq_@A<2LK;-%\cPnP$O\]PT5<_&&Lne]VZ=\ncke\LBJ*+^Af+Z/5.5'R)J/c_B1l<j*7YN/7@bNi08$J^,A`%OYpVLG*/kc$)WbhU':RApSM=,b%dE]`M\NEE'O:$R1?1H:7_IOu@8gKh0aSN`j^Cm)U2HiQN7:ksG2](.PA+Lpt9r-DZ3MDGoE$WrWfs"IO<Q(DJ5*[^s(JGbani+VM%$X+>%S4)EW53)Qul[hc-/2o058-!"Jcgs%/;rBGDkCWREi>,^#TIui[-3FUQbg9Tm9QDF*LR@+/QR&o/K\9q$i]-i,RY/EfA=L`_%@0DnA>I+rn.ZU*0oWpOq57sm9ES]VA([T+/)<=#\bO@11(B2;Q\jCNhetq7q%?o<mZWUm\Y=RO?:s?K<?p-gU>VB#>YdGm+_Z/>[%>+kF]i2D<\LAuXZgd?0u7AQ]/Z,6LGkN'7sq1s"uko2U:N1Ek'Nh#Ae>/mOmhdDK..*@?+c2`X[K.jBF$IMF'9Zc?nijL[':H5^j%qQ.PU>hP]oL!X'ER7'P238]Idn.jX8.&IMgCJHN)I[6u*MS7--2WY]H*Qf[m6K6]h2$`4f%M@E]\V+G\9N.E)7$etA-mc)6:*#[E%+?a]CA_'IB(mFD.E*e`$F=#m.:%Tm2D+UNOV8'1c\jbZFUU,FHruKO'"Lc"pqm6J#gcf5K=iF^&E5#V!A-KaTq!27C3)so5.30kV%D/CqGlcU>.?%4>W(8`;g"C%F29Vf>D.IUCKA?IHH4?-0-<J?KjlOit423TTu'Sb_N3Q$/J^`PPa?:-;>:VLEK1JRY^/NL16U0Gbm%/8`Piq!$G1"L-IcS]Wd0,g!@^AWhY06g`gaU\lp'ioO+BNhJ5JFeOFPd8ku@cXBsBfYR>Cp9M1dEZ79@G)IeWl^jqn7C7:k;/3@+%^g,m32M@W3lU#3s.'f=_^o7O%Cpj[4Gkob/N>5a6D&^O8M=hTS02]3gkf%nk"lLZ-7gRk9:;dK[W:"$rCS`/I@r`Ko.J%+LUO(24%LX_Juq_gCh\BQG[Lt97lV5]Ru.pS6OHYR[=/&RTm1_VJ()M7;_'jEJY7;YM?<V_$cQ5<>]9koHVI`!82<Q0GWmG>a1GjAVf<4R0>%m$(b^ejZJ+a8+[P['Q(.XTkZ;J^f#&]`pGqUO-C:gX=A.k9Ce-](V)Kkt7aQW&6iA[@nI\nQS:qD\B_f*2;T=I*EB[$.Qko:0FL,%GJ6^&ZT?1>A_Z&LOT@(E$IHdl\Yb(0aF;Z=fr/^NATChGg^d:<N)u&5`2-D1]4s)f2G3UIg(kL4U%5@7LdLhX'l#sr<]7(BG&.?5%.K*rKoIm12ABWgAqYDOT$_(gHd8D:A08psFg/KjcKS`OHIuX%[o>31240[?Cb3Z+Oa+0r*@o(C`jL`FqWs3$kR$@tjOcp5H8ZI-Y%?d<l$%j_YlLX*$'+`-4>U79:`"Y'S\@JEffb>^9[\o\ume<IC+a5t;1@"EAmp'0$HUY6,6UB@.W=SSsh\uku<-HtqOOtfo2[5$WD%gU;gGIuJD(Q#@6j@:)g+9,%'lN6b%AL!2*`-KAZ10R=+pB.d7$r,>>]\TPpdpr%?C=JsT>@KC)(CVKALXb2(EMfLh<U<%eF])hMD%Nkri<3*'=-EOj(;?P+^+30)3AgAqIuQ:*"9FQU]u^X7J.UGX=;\omd?(:fet02S'eetjLfaD"%[$nk;rBq5XjB!OV]/%c*8iU]^T%8G8'Y(il%2fI`NSJ;t,I$d(F&@/.QLcRe3Y.GH/EY%)I^r3*!P?=5Q83V:CVH(_9"LUh#c_C>r?PmZ"*p`K0=OCo+Zi+$g'SQo[3%Xh>(:,DVHnUh7`:7pJ\lStuF:PVC_%s+7@W1qk1IG8XXX*&"8f0AVtVn#RkW%$;HENO15PGRH)&R=tQ=^5'A#KJ)'GKN9_5%foT\%r!.>3jn`:1qlqpP.C2m<q-M#0PR%.u4"=R2ZbM5N',5er8KD#1.WUt>]4-+?lLodM0<FTKAH"I,j&R"gEI1bsgR"."Zo58YFm?(F%Hf3b.%a"824$Iu%Mrc!fVnFlU@[E8L7=*BIqk>nkR!YDb'Qe<!^DE;$A=j618m7W]Q]<hfVsq7#O-J>\$2BLOG/b/K$FP$jj]2hc%D!7d+q[;GWH9D2h[+fK,hruro1O4"<mghIaqj;,0^Ba.T^"6r22sYJ,aM)l!J(69:-_%:sl<SY_bN?G+3*Ud4f,DnG2-[5t%f5kb%EPKo&e[$X9=tG#3\#@_)<RP*[qV(/I%_gegotRh5V[dQN-(VgAcKh9;/6f#HlU'(3h6]J[DpUNSTh`M.dj!VgZ>EdS:$]6A\o#&s%S"_[2<<onr^o86q%d^d7lMGqAS#l^Com6<Hkah,6leNnJU/ui`d')fZT\6F@Z^khI.F@n36Ar$^X7jsE.Wn<2*;!:T^:$-'F;sZj%rG95QXjt1dh9RXk_$66?[JRB.>;fj6T(JK%hFGdBl8/aZY=<<c<8rE-WOK0?")i0qW#kunmag7[crHi@a3S,ChWphk?[.8SPV_O\%K6e%5=_n&<Q*()bg8oacO2,%\f4ks;fWF#!D4'*e1u8Hkeb-+h^KH'P45VG4lHNq9K-Ti-Wiu)3Sk_bH0cU!gcF/j*=uAPo>Q5ms%#U9G.8Z2Iom?;p=b%Y:dnQ,f1`$UpIo/liu>IR4;ZomQ\$)U*gCqRkKdTnF$epmcWp&N1e%_uf1O?prm4*($mmF?%VaVUo0s(Dph%^`p%"?=;0dn2X9)UMM/VVPMn?ja/2`mb*m!BVcAGksX`rO8FU]\=tj``,;aAUDhEWYLgi&Xm&6$<F<AZn(g%,<dc7q5t.57F=d;D%BY@KZK<Jm0cj)RI\*BU=f.+.c?'\&9UV?bMfc,=h=6%?jO9Th?2-"P-[P>F<2?#EHhWbdDHCl4\Q5sj6UF@jG;*^cn3LG'*epaT*%rmRjemU\at1*2d'C)1J_ruP./nAWI,>&PN6rI4qV7/DuPTKqgCS8nH>P>)nu&JROG;/Ol&Df8bqkSFPXc$$\cg>E^q6j%c%UV_ZO%9e1S]<I_3lA$VqD5qAU)`FUQdX`gARh[Bn9ba.P=IPn:L)WP@i^jjs?n+F2b8Q`M0]_usBcdth%q37_*=mRUY\kZu;">i>s$,aj0%fPq.gQqsX)!Bf*#[KiA:elt5%,a=.X<r4!/65/F_Q\r+)qDD#P5j;_;Y<"8Y<#_B-BRc@SN7<9:T=k(&bmBA4Jb/,8d-0(OGBEA4%_5c=9Tf_Id`%Tm4VN%5FOc:\<-DaiEIg1j1d\(a2U6H^R`%$!Tjh(KkEDW<O0EcXq5IpMt'ilK`F>mP)!;J[c+jjq4!3:WJW]TUi%=8k,[>8#%qoY);_'M;+to=R!I(]T$-nMRne;Z3`Rr=[1@9$=?OlHOKB5gh99,qFFCm<6@X`b>L6=T\sRo'DICrRJ^mMYP.\[8SI:%p-1%&k!]D2DH9u7c:PS&-)r'F?dNG'Psig^:3G(`U?Yrc$.k#D2mDKZbW4ne"3X%_HdDgUM0t/`_AHHn^b'n<rMmo)ERjL[QMbH_%;l7uVU1/]M`=EeNS5u;Z.AG%mXNIhUUC11d5JnETWkHEQfV7."XG8]2aQM\WQdpdb8e#5V<P/:L=(+eird"GW%*<f)+4=n?B[G4R%9ZlEQ92abI`lOR:.[(C+DNZgZ8[]%qX]2e*(f.Pi0E8hSIJE:ZY/L>TfA]<jqqk;a#,Sfl0s#L*jqD]QHn?Ct-O$_'5[uB@Y`,d)%i`VKQT<T3KWWiA1(j8G;,Y'hZ_[$A[$_Sp-afAa]r)^RS;QCtXKZFYRI&J.u;aKtP_<rS!"sKaN]!PK?IG/Q<l_@e*ARBTi$nBfK%;^,Ak'p1LM3b"&=oX<(P2Sbb$72$\lSCbU*8bTt!+im$m*_:Ddqg#2NO'&EedXJUOF@mcO2R-,.5&"0JIba1-k/D$U3&.[Sq="/1%8L>Vl86`89\VJVuT\9>sk`UkD(Kc1"MA/:38TrYtrkGSTVBU^X"!l\)s%s6l?qh=ZBM_2>Nmt&+0^iD(&DU&gU1<L`2C$,RrHE'+%$17@BG$;-?i8DUPlA*`W3!D[e,Sbd6HH6_I7+ZJGk5Sl/d#k4[TQ>i<c]4c<U8KRB%\/+-";]&H[mu4om98??iEAA>pD7Z8C\8FH%&%df;fIur[H_Do[GkM)3(K9O)W:fufqq,f"7I)?qRII-LX8btn:7ijL>.piKWnlMMa;V-4\8uXirN"Wln@D`Y$`MYY3Mk7C-9]ti%s/"4jBol:r3<F2NL_oa`0d4GJ$Al0Ws1;bDRk4nWEI?%)lY!mHASf$APbrrIdEA5YO#4&"l:\H)L%.[YjSpPm?i;L\W+4BX1)K!?%?3e/mqs2"tao6@/\D"!X$&!(8W/dhCp`Gh1^u^%W.fWk;db``nrWfXHs(*qK2&ib!gNBdF2oe4:Hti=@OWE$1qXi;C;.b*`c$re>%lT'T9GCtYGY=>Yo&S5d[idZ/;R];;bcpo+;c(^/QfDP(I$"#hN@Rtu=dP1^gJXG/iEVpJ]*<5qt=Qt["]4__dYBBCgT)\Xb%h$g8%)hkJA^KL`_B2Ujn$1XC`0ip^VFqQ::e3<^kic"Hp2"bb!e#iB0h7r7Fp0[K1#Q5[%fqa-&m6Mg=)<1Vkh]o^]D)OHFf/D?BJ&a97%UYUg[GE7!;=_1aqN_3+7DAAp1<rT,6p=nEu9=7o>^".r>aDjt3Gb`m1pERXacrWbu70rt72k&X1i^`[u8,SnLh=rpKD8i'4&;><-%fn.HrN$80q:Je9q._.T))>$!e+hW.hf2^WJZPBZeq_.>O[g'ce_FS7RTC[^[<9nb/X^7n4m.U8dT[9XVH]<O,,BenKo*i:7BSm[4%<tW6/X?'+c?+t5!M6'u]G"on(kN,@pc$6eMkZ;+0bsq^THe(.qa`6'N7j>G%LXjuQT__uUT=-h/lF`%2C>0GnC9?XWKWf.Zdt:T&%e*_Qt<LXH;eN#g7[8%saep(3sU[6]DSDT7f#Q;*U0uFE;`B2T[LdSB92/$#2/s6;caOJ?1;8(NtHjT.p54>OQitZYBf.VTkWn8Ld%.,L",$]6;^q"-^+oXas+o4Q$HD+=oO)_IdFg-'Jh)1o&BW"K>MKcha`$`R>u%96pWl<Mh83J[WJ<D*;X2,uO<;;&JO#Hb[lE@+41%4O']0`?XE<7jH'tV\`dZEN']\pCO_[*nDQ@+pD;_DM^Xb_*f-CHbpKhKrCY5>1%)IM++J+VNuS-[+4BFNaP',Z44:E@qoR:SSk<U%DrSr^*A]^R/)bX8%`kbc`0u200:?"Wf6D46?0fRNT<Ho38,M\U=7;3Mp+K3!?a)qk?C3H+Z=<^5dB#j:=7*[XqHqcJGZ@qF41p"P%eUD@Y1U$0]."FK2c4Es[VQD7Qn3)gUFh>%T]8Om5*<@32^4@PW[(H?MlW$2%U6A&?+[Q>@S(19r,@\@$JoU+hIskqE\c]9m/N_'_%76T.N3[C9LN7%p-XH0:$%$upIqf4i#Xju<*'aVG35h%k<+H=rVHUP9EE1/b\.TsbtWngteECiSA=hP#+P/.FQaHcYi:?9!<P))q=%<"h`/Fc9Pm\Zq/kfu?'>>lj6s[7;[T[oP^lCNd:-m8fV4G'Y$2e%6In)EPjN$n*tioNP-l=94.krnY\<]ul&10Rbn:USo?7a0^qD%K+h.DDH;@9m+/a2\+Igl'IVH+k,-`<LA^n5iL@:-YCFE2T2W#Ns/:-/#S'K6<>WJZYtg:Mb;6kp".)DA.HISG>+urc=fT5f2Q=Z&%reZuQNP?%Z:i-C'SaC=9!pNTY6&TU9-,[WR`(FQa'hOVK]'$rTG6Rkqet\Ocmec50"7#e1Cm=m6OdI6If>r7]9+e;UBtjQ[_P!^M%CTA7@;Q/&_2!mGNTVh2JLn9\h7(\I_0tLUOqOpRtQto<AlgtB7HrR,\ibI'EW]*;@W!=X])Pj(\Y>p(U@eAXc<=6`L/%eVU7YP(.%./Qe&WnWSL%J(N*oM^N[-V$,Wr!XiIM_7LnOQpX?64?A_d-eQ$Qj]]V04a:B6>\F%7b?*O>_&fZ*jf5u.0NP\g1kVOJ@!K>W\mBV%K2-X#1jP@saM`#^0<fl*p-Esf,VO%1:*3C(^Q`\raO225qMIKcbbAci&#(R00!+MbZUrWS>W_DJrd4Sj?VlP)cPNMl`5H8h^,&8V%g2q(#\Rm?I;OqL@2E%8XB"*lHnBI\;er?\DgN75>NsiWGH!WFi>?jCjUpsXD*3s+F.NYe^OGh&$a"IVHEZg@oHi&^$fj)Cu@B"Yc%R3\lbqeU@^n(.oOJ$9jR;0@5."<:nN?qk1dC;91,mJZ_dL<0h1(?e<0mig`Fn;*Ws9m6R\_P)O783Hl&QGmmL"K@d'..6JjHDuq;%LqTZEp#fS+lhVnXA^a.Bl)g#\MOtT"rG5KA+.V#VaFc?ml`skG]idFh]6!-Se^Bq/[qS',dMqAha%T+]h3_?e/tU)r1[301opO>"%05G1qUB-FIh_I"P_<T"`o$M;gAjnaYV!Q*,P(;.sMQ&D6Vt>uL\^ICaFn32E(/378IMlM-elSFnmG*[NeXWPcmSge996@e8)__$K%cLLo-J^rL3GLpagQ1clu]%h`/-'`pZmOg"/q2JI$.A(B1.-g_5]"#%f%e'sfT]+<"A^j(_*[ipGl*/e,Y4XCJaRYpeeLp&>*6`_@%V15U0[QbS(g4E!@T/bYMInRItkh@)Q2g8jLaM>p1PWgnVT"1VaheR`"lV8*shj)t^+1f4J*mX\7mc5G^e\0"^0@7c8j25!9"4dKf%1_+[Ar]o(JP22_"kkYBEPomA9ATc)q)G<%tH]-';.fhp.O(<D'Y3ZZu]=X=XdaF72d+M%9LaD2)kG_t+YtC;)Ro05_@kMbIOj=75%I?o'=IU+s!@4VK4SX&T]]pHsF07b5E<"0'(FE,\q??NC-X:_,@M_AZ9SDF8os&SiS&Su3,<\sL(`_eH"5dg:s.m:%:!eKX]PM*YP%eDXpF[b?.786cB"Xh5RS776_Og<9LsK7N@k`S1'1D?$lDcR+!s\V71.d-fgp:8F%WpV6ZW8enD>kl:l8mTH*q\F-Nq"4cgg99nDH%kIr13Xn:0WT@rN<5G597['MkS%N)6$[oe.;4p`(j9X`^ASB`A+V'5E$<L1(6gG;>"1tRR1]OO+K(%)pc]9T/sW,ZhPGtijU+$M3X%OoF(#%e%TP+4+,a2nStCbC.[,)$I#Wkg<;;&I<LUo;S)f!.(9#/lq:$!Yfq(6f<T^LP&cY\aKpuib<0[&ErZ%mXDt_-u+4u^*m8?%hO;.]SirS_>eIi$9OFIELN5Hfkg`FOVb)EY&jBegOKL\1Fo]mkeFhkHF5@_sc.:($+&L>+#kmL3hnKI?n:N(d5.OA_"$Jhns)VCJ%?h+Bs]:V).5]M2i*p_ElHJpafBLR5.qd0"%HEs+,hWK5S%o@dC^m>#%(]aatG@tfRV*bTs3nrP3$dD^rE-&3+d.EFHSBS+3*X?%J%+I0?gNNRK,cV*Hm%-XUsjB614Un_Fj!*'dnPIk_*R;VJAIh%%43'[KO;\4_PR>3et!^O5A6`TXLD,Hs1amu`m]JKB+aW^ob]>(rG%,&c`r]sbPX%o<7BG$#JcaXap>Kg,RE1@PA42RZKlkiu<j4jr/e6=OAo!*-M2%M&kBKL3^?GMgkVmS=Fn1dp83CLQqFJ$oSIPp,PM%c+gWgdKt'Ps(T:PSU>X(pos5aHr-A:QhDKKrICf(RrYo\3p65OAtZFlP:4YAn>W%7fmRQP\]VRDc\L.bG5%cLQSQ=RX`!RfpTEq0%C<uls^Mh8a^N0=UpD.AL:N"<f!DiT.#CH>h4o_DbddL;t0V-c"!RHb'j6b+-@_gHF\'rm_onr3:oD"Zr=&NV_LLQ%e]KMT3_bZ8G%X6P+Y1Z7MDo")>[ZgE$Q;s^`mF>Mfk'EVJ,/jC)1b6S'F8,:<"NKfn&IsQJP/+T=h;`Plfr:\I'g<1rH:VXWu/"^t5s68A.;rbO%%6JM?5m.\rAc/$:>T>%M>54j,(]i?t&QZJE7MUcX+/,e.b\ps$)l1`6XT=nCbVhpnLg3%GuGg#Pi\%D0P(/(U\B?;D_cO<$>$@=.5%KeIg7UkH>TVm"t$n&:IYe%tWjE[e7Wo1Y_c;%0%7UmAH-QE!^Gbt`#eA+01R6qM6!]CUN.p6'Tk:Q+qt/EaK"'6b3J9*]8'b];tG%AnLl8&b_Jc[EG!!I;4;):3$;:S67js!aFm^1ImpODR;V/Ru;+bc[hTL10][@*PEJTbmrDQ]rg$skH^),QP<PHZXqeWADMR<40'oM%S?B*@c?ri$JiDjl<<)i&FL1QoJ,Un"q]],ooahOR[dpp@#ZRf<N0=77`Z4?.>3ah*"4dYJmP+k.cAWeQFD%LuB*2/]\e)ZG]5ulL%i.2!dBt=WK>6Ls3b_tOFgHHF(eeT%`*2!:CXa,'UJFsHj\ZOm&<4faM#!,t6QX!GQ##"Y"!C1'P$%%Go+J@7MTP0>R8?7;O,o0&p%:p``qK#kRj!2\8#H`VQ%Slq>F_:BaeaX8tYa+IQkH7*cVO6d,$S3>PmM,:B;Gkt)>g&f<2CWko>/W]*^lfDZgd-_oQmY=S,[/]h*%@5qh8M;L<R#9"[9ZX6q"i4^B6+l$.6bNGT^SM#G=>eD^F]W:3!5]jEIfh'aI]j;o`?c[]G9*tMRB*29,\@J!9#Oo8Wa\.=P's+4Z%/f_:.\QMZ5^HaS9p,6u&$'e:&^3LGO>haH'-qjG`,!gZ$1Uo=]%'pUo"JtbQMn1DM:n[^2eL>lO^m/]>7,SZ&#tCrX6-=gX[P>8&%9R]ib;L]/?`F0L[%"#7Ur8D$?dE/S5EDQ!Y^+K0=cu4<:KK)<hX*S"@RmC]de?/&[UJ^WlI)Pd`pI!#3_]o;#f9X:1'n-()/m9rp%Z%s.Cfl]!T`tB!:h'&*V[eP7iQ*VIEZ7.,@<a2`P0CFihq&m7]*DW2nnh7[q]#V[Dj\\0bb:Tp_.6eM.+olu^DUfCnN1>mJZ<[Cb%gTe@er<]uTYeZ2Q?`>S@SFf2=+hE(>J)-#Xf-/k5E<gpMVm_5S1)2c*Fai`9E3,bD=#!>4LUkg.?D'%fKSWU25$^1D&p_\YWmh(f%Q+n6N>OK"fM%KgscnOR:;T>PACb^&%\Ptf</@]P>ELJe0*khq`Ck)$%#kPKnr"ZS2T@loE/9#VjUpFOm5!io]?%LM9I'B(n9%tk?%e_.k/#]^_6FbGsZ't[AZ>V;A0kq=qrEm((,?IW,mksS1d4e_Y/BgLasp>M"rm#`:/)qg9qHGb@OiT/PX!6g[GV=;[^pE/I:+mEKj%H)JT'QF-I%G!&\)Xfo=0\i-SRfg0uOFKlI_0TE@U?+a:oEGJQ_=c+NFSDR+`0Y[5@0Dg:tb=jn#E.$?$-s<l"CScYZ"Hs>RIEVkg%[*<,Gl3mlcFA0e?%2M<JIb,!g1?kOZ?e8Va<6iULFB2VIQG`6M-),Q@C>TVXQg7>8F;Dgdit'SClD?g$\#,^X@W%/`2T;%rM_UYu%\@l*dDd7K`<6F6*`t#8jc]@kn2b.Nk_4^JQA+.$\k&i40A75;h$G5/cp]OLj^8q/Q'Fr.8.+?Z#iL0%N,okXCSbW!0M8&?Zg+_9%%LcRVq?W#Vb!FsgL3D(Gc?6W'AfG;ec#donE;&Q26U*/I'/Up0P;.@i`iHo+>Uf+p"<8mOB)fJMIO#1\i[k!3oH'KA4T8Tl>A>qd7%J,lLe*^/K<)+/fT#RG7aAcknf-,r::LC1iZ0gXn"lqL%P_"\\bh<tT/Deo%4.%KA'LdWoh*Es\M5Jq'SMnVC:GOInj%T@pDh?iTS%]"Wjp3eR.eJ+fZsH1iilJ&Xt(@&Y5J_umJ3CmTgndO-/<7oUAP)h!ctUE5Wn#8).8UV0=t?3(T-OG*EB^eUI3a!T/^+7bMlo;h('%(ptfQi0)o?m!$asj1@mUMe#f]#&8Ve7;.0a=oNu!j(i#%pHEM)M#a/9e,eqI,5CA2,J8-`]_/Bq,toFa#aD7T3'NEHIgo4%aC!ui%A3k.F4:Q1,)FK]7[jca`25T-IO!PtedqfLpcfT[I4)U*VI"K\?7TmS\g3!n\bFn.WMiG+UY+A?R?4OV`i",U1ok]@FV<=+.ogYud%<s^b$J7@K-Ic+B$I\Zs)#6;`LhYiBeiQf<mn5:'1b9D(Lj/k\W/PGIcpJR>MVVUb]0WNlcE4H@C3]AF=&t\lG!hJd1ShUbHMFR8?%@;"7Anj7UQgu"![8X&H#,10oTK*cggbZ`)N-_0^dm`3#'*!7/C9Ut`2Ylp4r*kX[`5pq`Bc^=$iYi#3>b^Df;efsB?+!`B-7E`<>%`3O*J0T^?dc[tau`s^lFFQaBc`YW/Rgg3GqV-nbl&q9_!>GEeGBXFi12-Q)s"Cu!L)Qibu4fs`^_>A<iI-AK"b(qE9fU4M*V,W+"%_Stl;Z@Cu6d=*58=6"'Q5MlY/B6&uT24_'Tda(kMdFks-mpBW4qnrP!>:6Q[>E],4d&s-2IiHA8/K$$rYQ<TcncX)(%=EsCF*2gM%\<2f#,S/AgVdsWTr-2rl3ZCT2'%mdpZZhu1UE@.cr3lC&`=`h'-l?udNi$5Sp>\$k`khr"_Y]`\"G6:*CC(KC]T;D,=E4I;Eo5=K%db1!o^Tb+bRJAJjX5V;Kp:ZAU+25j#38'<&G??(*0O'Tt?4EU7.,2eX[Eu=fJBfM8\J/J,lLU4C@Q3>Z[!Yr[Rn;sn="eAAS7iYL%n[%]_HANq;p(M-t$ssCQL8iH>.?gifT!]+s_O$h$O?jbAIJH`"&rutBD_6(^8hkS5$,[%U"TYaH_!S(YPXI"=4VkP1(h$92Y]REN%L<^tLA->OA]$a)o'gd&FRprKfe=!,d12oa*)c=nu:/=.icp-+Y]EusUUVl?/./=6"jl?^,j]Rs+50MA[i3F'\:C^Ws?@!ca["-6*%i;NYG2jQX`PS&QVG2e51cg\VFe<%-`FS5$,>(h/=lgtBClUPRHOVE`5:C]E'E6feMZ7Gi2['K`GUR9/X"Q'8N@"^#iM/3<j_VE!O%_I]plbQm2G$oBBf#G1^.QK7jhDJ&_)cNRq#*R:aR.o1U3FKrc+Ep1@rk_:jII[EJ=Sj>kjYES.rKkJbdAIFN^6Pl=[kKXk@Gn+,)%#$ic7SK,61$p%1mi/_sC_DCCbM<X*JKkJbpk`.+Qd"U'rfhYPfTaT2>'>8@KjNrTncnTl`F:Oj'+?;F!XQ*r1LW7+7B*)q"O+gJn%VtY;,4">2rj!>Qd?V7R!-B,#h>o4.c)VrjMF?1EiQ9=r$mrU9DdVLHq%;4?&8")"u9En-[E2'kgpd.#GSp5Y$JfUCB(O^\!;=Y?f%kao\^d3o025)sT7KqL8m15F`60pCaol'f4q6*+@s4l[hbN=cLaANqR[jKUh<ZT/pclC1I(hU"S`G<>)%A?q[d&op+T+CAJ&obd:2%2udA,mk/<bZJ1F,6/:0,#SV6].rJ'ODF:WY4.Cf(qdXg3%`*`[lV?/^@T2g`aaGod,O2Aqltq!'K<XU"\_^aS1ng2M,h'"r9N`ED%e.fpMHi&]X=gh_!H!P'X*J`lf2b@l,07i>"-WZjOE+6Rh()Vm.#g<C_mt[AGj5f`a^UbP.S6]tZ0Z$qN\T43@_5V.<rN6"uPX8&X%57]k!'c[<o:L0dlZfXcs^lOVuf*[#Z^t]cPHm<]AJsjH?_ok*QBMF8gS<K#lb`m*.F0@&,;X@i1Y%9/A"WrGW4\2HtIS)?(j#>R1%$?YQOp,r'$%lY'g]-@t+RA^Ae/OT*j]\4R."%V;QAj0PDo[aB5mVg??fYk_&D"`Tg]-3ZWJ9OC0KtH#l8\2\o/Dj`k\9i@13e/Pd%Wn\+tB_Z*`Gg@%ni\k!68!>1mLsa-6J]&,VX"]DN@@#)Spa]/,\",pn,F.0"Q]0[Zg`)Ln9/D;hF+&;1:MUrZ`R%YB>=tRqE^!YS%3$ZRa#(C*D!D83ID@>2?$`$]c)-'qZe*Ii[,ERdT-grLERg"%k>pL1&Po1BoOs_=he(Mb3aFp4^Njjn"A_9HCaGc!OO,t%lJs,la%*F&)`cf:-bkH3$c4^Ab_ba*W14*d(EIKY^jIE"3Tg[MU8M+>R6f787Q3;LpK4>KZR8+\XFnNAWkfn.fL:BQ9h\JiU]rE4U+3$+If%5<fcm<2=r\j;ahP&W)^H77h;+L(_a4cXoYeNCP^h3sX6U8_gn?_]oA[Cc&(,mU/(N*ATIdaBA7p*$l&2,;jq3S7d97*(1->(n!SM%$!dhZ(*&T@2dS&1DhRCAe9J[r]K0\b$dBA,*?[\3l[iJA-$"%5:d'=k\*+-&LU(H86l'(l@O'e!3K8DG)@nX@/O"/<geZck2L[i[%Ih_O^oAM$R:lUtU2^1S29)3Eo-Vl:EU[mAkhZt,;+8F<43,^Vf5Q7-i5+KrG8$TBLkJK`59>D84iIlIg6i*[M&*L88$TQ^':WcHD%kWJZMQ#Hqb*#%R^`Gi%u)'pVM-q`K3Z@=`WH9EaOLlmcDq[&/hNdS^%rHL6Hj'ZBOA#,_gF6mTo_u"'G)#2Jsm4-U/k)FRsZ6(QN%5"Bmc_A8`!it=]Up)j<.YGl&#Sb-EU)t^eLlX7g@csqW9=FRdW5ru!c)@(Ra5n*3C;gB<9kpK.5U[;AZ58/jHfF%uDK^ZLGr</aj%qnGiU0[(FsF2)0reD&?gY(kfaLa,T?HrsK/dZb6r:^\/?2q,i=IJBCC7OiL<]o:HrmjVeCb-Uq$1/b0Z8'Bl)7*A,TIO<L46G?Qt%[u--_`cq;:DFSC5f0G6u@fNr%+s8$^9cZ16#iDSeRTpmH_q!h(M2:<G@]=<tH>KU\E+k;lN9G6lncu.561Zkf<4Ie_QB>,)`nOSo%1_n=-%\flhIj>cSf;gUu<4F(N=N(.UXIi?hJ`m!R+c0"_!/^7&#k,1Am\]\E2,$!imc3e\%n:L\@qY3GO\]B&]_'u4)'86c_4?Ql%b[_q=iIlk:@$]]3O%t?@+h?9Y;FHNV]V@[6"7lM`d9GXYfpS=YjFYV2g\k?ZoW*"\Z(:7u%a3\KNMhcZd\e'X'FWUmS'kPis.Zlc%^:;s35GntcZuZR3(Q4R5LIt9DgmfrnRuk.,"b6*N:U8aFQC*Sa#s72nOXIcc?/M31mOM?Gf]Hr=r[oVPm5?Za$ub9l6Se#L[FtXH%NB+XNqfblBgP?9MNZ&<?YLO*cMO/(m#N]Ekg_k:,A@GKC&V.Gk^rTO)2Ge=t)d\WZ%*Gg';BZp$Z^#8P&?&Pg=?d5pMYHWe[,]SU%:pShS=L-\o&I`dED!mVlFQbp&`(B!f)?f[pKY5>1f7?1QO-Rmi(&+fTdh`eh:[C!O_9te2;E_E9H0S7Pn^`qrQWE\iH;(NNqdjF)%KJD@u?:35q,q\sEW5Z!.qiN&2?4.OiWi+Wb7&:.i:=2sd2EYp.R,l]!n5kGW`EWQk<?)TH)BS'Mmp;o8PFUMnEk_!ARHQ!.0thNn%00T2P2Inn8O@HlQg`=u_HAUF5\@sCt+r<5QJ:$/t`p/RPC#iP%Obk,&Pg]4W[@c=u(L:A$UY_@+([`4/!kM7#hXRr:Id2\+0:U7*%+5hD&VNjm=QV6NAI[E^4l25p\54UI;2P"2-h#s.,@iSt`7b[l%S'FA:Df564ZK_:u)Yo,LZ*W]m2YGHujDhKir6B#0[;nmmFFLcB%Ss,9cACLAM=krJ"Rmo<,T<I)(]hU)I0'#/s;p;-1bGB:#N_Uggc>V)WZTluV3^8kAD`41LS'GsO@YqA6dg4WKIe2_A%5h!@h/HF?%mhGae2I3P(3R)BOYpf>+CqAT.n6KeXcDLIf`Q$)uo@m]mVOgNFf)a!qSn^0S?O*j8B@H[IQ41aJ:Rk/BQV6Mt]hY.nkEeBp4rKbX%2P"2-STfLM4IaWW(p;W!VNOXi+d6[KflV\RF<UDK9tgY`8s[&!"6d:&m!XPD&MZRf`^=sB]/cT35"4$<e@M%@I<BueKj#9W]!!a9%\qihROZ2%+R+/!r2c"fSJmf7N"\O1j5p7rJfcR2%PTm)Y8@Qd%`D:q2dHHV(#l4*il/WXO&Z/u'kZ!Tm]rk$]pQ!>Xm.kGS]d3B+%=bh7aKN0SuU:W.#f)2_^F2-lfRRo^B20ZkTAj=0.E7A[k68H*G-.55.-[9l`1:uaf_?'$7J7=]h[m[ag/rE/=J,JV]!^2Da(YqO%%<@W`/F2r@Z`ead-oEqR%=6V`[0ou"!X3SQ2ngq4McQX[MNXep<TrfXhcK4:17#Jq`rj60*r=eEb>ZWVJ57^jYrtH+17`PGI,%VSq%#B</V8jgH4;[FX0#^$#j3B>4k>=:skk7aD8"YOormtM01n%j+RbRZ=*n4#cN9J7=L@[b\@(D3F97KbWAIRP!c&Xe]ZM2sto07g;/%O!Vg3k@[GZCR7HcR8a5Z0-8piPUS^UZAWf_3jCU(#'OooXo4,d6#p]J)r[i>oX=m2B>sjP(1+5iO.@_^,/],B/!-!Fl:W0r7_%nE%`/$Zo/`htbL,/3D9d=i@JMGYUA!ua.2s!d$#")WGVj=T5h%!+h(e=:HT91`E)P-]6[PXsD;&k$XnW-GG8O)7sEsCE02=udcT8q'@%:Z@`XnTY0^4HX'r'4/&ZQA-"i(;E@OVF2-9M/KhEngj\-\GMC*%c)*uo6[OY\`#0Z)CKaa9dB87Pb-;tGpC6TnkFC.a\)uPj)43\%q7bR0-nd$l7?_6=E&ZdjfB$E_f'"(@U;#.tK2e_2fYt]bJp4EG'5OYT:EsmgA'ks*X0XIn/qXG!:flf>'G>1'^AY@la*l8Km:T[B%QJXbJTV!YYem^9pcma>q2S,O=pVMc\28VEu"4NWT`l`5oOm%i&<:i2YiZj2e'Do1jHf'E^/E8Jf+s\m+FZk('pF8'VNG0dc/D@O<%R$YUJqsD><=FsN/7WMEt8Rd#2HM6bkhcF9]B@J1RqbH*Y`<?sh%T^e`)29sm2%qj,.?\+AbcH$t6\J@]N*&^s)MWHeL*;Dc(cTLC%E;L7BV?Yq%f$cRb#A/XKfG6n=Z(Vm'hU2*c#;UJal^[m0%5S^51%K9,oPVLeYBtZ]OX2YYf(3R7Fr1"0.8SN9=H9F,]i)<0[,M=O%VjZ(nh<pT!TIG2R>Ih@JU@bL,G?OcBmV_33NQ_90+nJkg(:"/^`d,tj$W!M]7ZVh]4SQ'cFdi&Rq/ESA-E#[T>]b1uH7H4`.j$CW%p3I@9KVs;N-.Z__U/#kZC^'#$ok#_^C`lQRE`kBn!uahZHe?7f0e^o:Y\WZ-/-2\29<?lP:%neJL%h<'mIoRZ/Kje+2AqmNef?lr%^.EQ70gagk[4gLa3DUQbkB9#_8FOGOs1T26&([6If=nm+"M/PSs/6)%Xnr.\pV*'9B=EEpQHI8B3rqUk?.\1l?D(p6W3@Jl&^b+p%OA@D6F*20irTgQhemku9*;79YU`Qqn.BUXVa[<tdki@>"))R-:IL>`]Du6Y[@:>@6qK=mF/S5CXW:=A+C\)trIBK52n;mdN,^i0O%M.T#++>m1J9Mf13lEMdl<o')D"0:3@fEe(Edm\0\>(imH]:%cp1gXiq8-51Qc'(B<8fJM=al6\QnPe2[S3N##.?,"H3=7&kC\l+F%A>2STdN\\OYZ/DG5Ok-3&e_+M:%9*]NHM;&9RH!mqJKHG0@N.L/"4%q/4Vk;%.V/spVoqhX`7pBr@);&4dN!baob"XR+sq"=J!BV%)e%%jNi^9KYOrDhbMLn!nhaZ>M`H;bo>O2e>-P?k.'4os0i-0;Mph<2buSHf_oE`s_n7CMC$h$-\:Z"eK.DL-F7_:4b4Tm0@N>We%m)mXc7jo-rXUKJ2KI_R\BCoCE]_4nS:;""KZ8dl287qQchjG*;OmLKmSc`VKa3Lq.A\>RdYoKV!r0PB^HJj,[,$<kL8jdSj';P]@%ot>8nVrp3E_5Vquc(?N4@WCFSASTG.SaifY'6TV#J<r@02Pd[AQiE(5Z'"eX6m&3[9o>q!UmMqMfhf9LY]]0Nb>5DDUZMQ&,J&Ad%+;SDOaks*1eA]M9j%)1\3;Yqd!qacF:_'-0U&'Bm_!i>(Tl[I\Ac[3[-#eW"*![E>6^-<(7k+/\/3qgOK]E+Cj]D\LA!.f(KK\l:%Z2fMSEr/HkkEQaRTi$*:Vm.o:)s]u%+(*1R^+JY8FX`rT=(1rlnr:AGD&Sc3d67'[FQaE`.3CQA*:F*E+'ctOkCoE)V0o!2,>[])%^8Ud-:2hYSbH$.a*GQ)c8=a!S8du9?eScApL;J<9VNT%Y[<Fu4G-@NbB\p\)+%4l[hWl!G(%TJOqU*!**j5.jlM&bO6[A.n$hju3%m_m/Yf.UNdfWBTgmtMbT?GB%$4Rp+6iK5:8kA$`<r?>cm:#TDCR`Q<*cF)8j$1INp+565_Ps;n40Dnkc+5HqVF0AsGJG^Wka1p6P%GFHD+CArj4rPBf)!o=+JVG>Y5UVPq8_<RNR?GGu`Nh#Z6iEj:g>Q)Qh"'+9mIc4MeJ10Wdn+H:1RW<<=S+o1].HJ-3^Xk-O(Gbkd%\CWD35XgLmT'0LqnAJJ%N78s*lfWbj_Jf,=gs5ELHi8]:i5AjuGb!3Cdo4o4Ic8F#k#o<FHEWt03K7lBcs>)\p\KRK>e;diIt"Sn%.t;?u<kk@&>lF.u^Mj8F)qcROf.U+SY)njFEN`aEl0oPanP/Kg&,1L"PNP+(hs*.L2M_=GIc3f8_9o^Oh<PkpajZdSam\m1^X[6`%=_XYj1Lc4*h!5c*hX$4Gq!#J@iOAYXE$*sS5oO2+nP/p:*W&mPWSGNQE\AHlm1$u-qMfP2T1?dmG-Be"ZA%UF5<E@g_L)5tp@>oI%mjD7Pj-r&[4>u?8IUQj6_`-rVVfJuu2"FsChs2(1mrd'*rTmi7hMqN@Hi:sB\am;_n)qg^p8reHqiSirV6P*5_J]#SH-=lCp\G'W%0kLUuX^XN-f.T85Bum4E_gD?6dc7]3'T8RS[$lq#PnW'@2r;:>Vt^%u'\C^6IZm/1MYHt$F$qRRPBYNiIc6$TI?HSK]meoHZ-J4h%ftDjn\,,pQ@m@QV0?a]r2U"#Goo!S&9QmV3HR?G8qLrP5NcD70pu3tOM_jq;Ic61eZ]ssX1,H:"*,6WFdrf(Yikt@o.<XMDbgLW@%E:&febWp.X&%m+a/UI&V[X@L,]if<2II^$QGnJ#3?O0!H"F(9<.6>)S&O_uu2NtdL%;&YHManZXd$j-_%X[$7d`]rf]m%f..uDd[%p#\fklUJJ[Z'T;<Wf+K3dotJ:TDpc1Ze&!tj=BEHft0aaFoLB4Y*A]t>oYKJ5<:="KQ2#,rKR2\*PQHA4s,7oe1WB=pgNpoqEjTi%]NooT24@T.fqZCVdnVCgoMeM^rnQaf:;0KPCN#d9YO-ctEKOMmG1HDVflk'"9h=jtCT1ZrYLdJ=I?`ObT)Ui>fh\tIh<rkZl-.TE%SYI(!E7.F`]kZ;"7G?I[.[N(/BkOSs/FArIIrr;^Xd/>4@rnoa\:"4+".s"iQCHdnoS.X=O&If$db^ejFmc6`Hf(G_WB@0W.O6o*%,enH-f.[*&j:<a[q2JJ=$:oK(i*t[Bgn.\C=hFI=RKkpb]A56&B5W_?dXG]&,98mZk*Hhr\#8i[>-j;M^"D"FI(n7fd&_pG,Aef`%_DFE?=)s'(It0-!Q/6=gDe5g#p^NaP$(U1_[%)6onl-=Bk;gq3q,Yn5@/e`/1Gib;&a?Nb>DrUCZk]]j;u")`cM!SsBhNfp(<Xef%2O#6LDnfR`*p7a,kMrqGDerFTq=@e[p\rr#)6$ND9:)V[P>dakSXUmR8u>8)M*WGu]=0/S+'7'(M.36KQ#UhJjk%gs9?Q+?Xsd)X%[:LdkrEd;tINB^X<j4G4QlGEgFmEd#6b;BjI;Y0`L8:oRV8u`2fQJ4JY,9<Bo%']0D^a6br@C9rok!\cSR5`RXurQK&#?\TmJ$"U%_jN.8I39`F/@D):#>='/@cG@UJ<@adUFWle5K\cmhDa<X#EnRaAUa*#5<)E#Oifb@ZW4Ug9e+0r[//'Xk1+pf,4r4j=d?3BbE`;0%=Mf`f06u//<:HqTqgNfafR9BgBpG$FN,Rr?>7oGQH!lp`h@F[nTp8rD,5-()Ok7UrYIc1C/*lp%f=akd.8olBP0P+SI&c].Eg]$i%;T>_2QHK\l,,OEr8SMKVb0*iNEI1EkSekNB<$kVDA;<1XHY&WfHHc6Y(J@HKUEoI[BBOU,l)V4pZ$E/dkB"CR8LdH6?PbN'"QSCO%HR8^B54%AADJl$dp/4e@g*\!=c*B-68niJO/\rCKh+Hq`SkRhOoQm7<:X(DDHid%q%IP<pYUeg7okA+$_t?^EQ/1XL"L5G41/R=o%d)/rgZ.HC+pp@cMSaCR.M!UH4e^G1=Z1m%Bb;aJ@Mf)'N0rN)H5^2UnLeh_;bq!(LK+K\KE(Z;_oq@.:Zg%&Rm4ORmJ]0A0Efs\1%8aaEJYIPr/n^Z;#NV&3WRVt)#+Re[b>-oQ(_0URdV9E(,c)jp0q0'/ln*:SeIIP#h`;YH$jQ4@A/4sj'R7,h3>(-&8*i*Y;IfiSq%JE(7(BUpF8VQ[Fq^>%Gd9)?`I(=`JU\a/)2o4PcA(1X8XWpHgaE,pu[KuZFt;l42ToCC1,dY.FE5Ok8?q3`8Q<'bgkL=<@smE^\o%aPKnE>KX5P@nD14(6Olb=D&Rs(IOo`Bl]t\)_[a\-+0I!!Te7OPk*&d*f4(ifp+RXoR3N;nS/f>TB!PQfAr:mWss@;C&XJtGq&cT%-bP(Tq3`''6MtLmh$#[NZrE3TPD@?7UWXXEK:@Y.9'Z*CH,q&e9E(XQ7E%.t4aSo(KlhY$U0M3jai:C)N$Io!I_ai*7]IuXb88DX%/4^YmJ`)?.nXT)l0mG_W"rkQ%:kNZEQa/7qg8&Osisq@)Gotp3U%GKmq=J@dBm6Ia(OE^Qm6]X@Vd3[8([a\<SZ;(RI'/1oM/-\f%X,t463=1Vf]7_\TMNq2VQWVr(C`;>fFdq'"0!3V%jL3@6m$KV&gG_c*@a2\j^^S)fk-R:!9/ELWng[c="V7cjR]T_)n27D0&^=I+%E9D\p5Z4,=gR35n9]%2E/_m&WkGUh"-=>o]+$`B)*Udbj=ACHAfO2_(12!uNr;no3alV=/*.JV*i\Qf?8;XRQVHkkRGU>h/#?o\%%!FkZb9kL.G..o4>Jn7>p&;`*N5I$('H!pu,mp.mZeEsSQP*)EKFlI[Zf4p?YJH;;RVo2",?P:`<;8W3ae:C>Gh,rZ\B(jOc-UJ(\%d$N]i-I/001(ku;=X:iLacRYeYe-Lk8jr2MhTu+&.A.(&J\[2]*S@\?eci_sH3,'?bN<5SB`a,nUpj'QiW*Hp`Bn+W*t:RdgtoTu%gbSj_BU6MK*9`F/[gV1+p`WS`%W&;,-%=E6;WLH3mVpiKbs*K08WbYrG2_&(aH]!=0M.BW73$n>!d(`G$\9s\1^o-iS[fkYV/%ut%<^0g$M^:"dKJ1AYCgiZpN67K<*8tk5LQmI$OVU*80;[LQ`Ja]oT9d)qb$dL)W[O?Gg>-[c9q02Ub/a:)-K:t%*X;E@O/4$KXq<d^%RT+:'6jDV66_uR/0H:9794\AkQ3q)`W&Q=3C)o6oKlu?O)Iq_k=6(Zi-[mfi9+FJeOcln$@1p?I;iVt^_tp!OQ<?iJ/XIXuh$_r.%0sf6mD9U5d4,Yo<++JHHd]](pRJE$AJ6q"%REY$B2*>^tc_NKa:[m!89_qh2)h'AV&>-*epWX/$md5i7s(O%o3Ad0(&)W>BUg7"A%g\/I]diu,^@0^t#kj/VG8kA5YB&qiAF7tuV?`1pbN4r*`m.59<r3SSF'TX^fTBa*cdlT$#g52TYT5bkAFGn;7;"r<#llBtLd_rQ/%2g3MZHIG]VV6$73G28l`?=d9'p@VZs.BgL(W=/$GSSVe]FVAr<.s2'Xp2br[LUd^XO4P`HNG_/QdrTj@GjMjtoO-o+O([c-WW&V0%o'=G""a\i*>Q*t:aYojb"K]el?7l!7nW-"!..WD29eJH;ZY@%+9)kE)_8h^NfX`6Lk:>l:5thf2O"S.HC&dd>$h$gRI;7HTcJCI*%+a"inFj\%-2f'7)5PjTjPX#U?P0g^cZA&$ji-,YAf@9`p8r:%iPiV^Y=k_cd80]SXd19_#F&RSR@iE[G]MknJ65O99cmGedoi!Hg%g8I:9O*8B>;S*ZBhKeR+j48:47AB!dZ;O_`9H8:,]fEQnaF:du2h5?BEdEGX`SiLMHi#Id]rD6726G]H6'8f#4PS4(P$q;KF$hQZ%5MQtHd/6^d<pYFJ8[&T^XXj<IG9-0g^V?B6"a:hop;9mC@SnU.q\9W;3#nWfC+CUll/"B8TIat4m@[*q'o$=8l)eL2V`^=F(dQs=%5[@L([m6\R3dEur\kssSaZCU456-^g/BP*e3C@-P2KknpQ[<btes_cu;YOQk^@hh/FmJo!!%,o>6&Vca*+'bYp9:URI>m+5?nD+`%F]V/ZJ*l8ikL;n:"V=BZ)8p)8eWT*>e-uqQ=EI?W&fmV)bnB&/M#<MP,15UQl?m"GaDT_j$-!RX8W!9KLEaj+j_Wtcs%C`%FR$dS%#WF'#aC1-%\O1#i`j1fC`Vcj@3R@Y,gthU8Q'XcP0YGFCMMDo^4c%hS)W,_j_cI.\Uc/P%F#\e!bX!id?hFSgQg["c]=WT@Y+dP5%Wb_1ra&5K7==P:u=/PONZ\[$tc<^TcE-K%&.35KAT&M9YF_EpFP#i:^k;[r,BVOLt]UN&2NA,jeK`;Il7+:<b^a\*ZbIP2:&([#^%T>I(k-6HmDh;=jfjF+7.f4dm-5:UNHPs+nA.1k*RBs.GS=74qK5NS4ndPb'S3%Ef"lK?n,<c9c;aeaXfY46[=^+%@a<nb<qC\X\g%Oqsj1`L;-7XB>)#QgCi\C!0VncbCNNT0qqP?%A9tKa4G!ng<)gY*sc7$SS1oG.K^:lHT65/.&>,h-*Q9iadlU=YNA=j3nAQUA`Vj%_&dZE6A\4;e3N0>M(:Zf->IPIPEDE5]R6)Q)`Bbp?KfZ0-7!Qe6UHjJnMLaL?-st1HBrO\.58bBF'NDL;Xs`&En2lKnh<oS9qDCE%s*Vo!TSH]'Mb:BI$5V1Vk<O-"YlK?N@.g?uCemkDmSV)!Kj)Sq"fo%<>BfF1d^)R7/[!K*be-T0npJp!7Er(=Mt-\A*D0N)[klA2%nZ4a)oBRWAL.<;hH#ZkP(f3CB=<+9eLrBrl.0ce?BD/`O3kqEg4Znp8%e!i6\E`<0?B$"-GWO;TJoHfB#GCmt$emkVjWP[n:m@k2%>r5o%(^en+jaA95gDSWgQ*QkYk\L5H5H_'_`pX!Pji=rR'EU2:q%EDq5i.4rX&rfhGo+u%H3uMo%6UsF.]N:[hudO6/#PU-[cQU]%AI3JCec@/BDULPaK'cK[d7**N'#E:!K_@Lph)6Lg!Uf(=C5&0n46@L8=0cu/H#@%=/njGB&rG(GAi$pr@L6*Pj>]8kA77qK<b`%d%EW*7hbR0UEcV0qIJ50Lg8D]Z&F&We(-Q4l$-4Q>BkGqu9F>-grc>N_+bM_2h?[5E&Y2\4&5e*%H?X63naCJ9R$hjC.Aci]PB9^p!%@?.F0l)g2\TIsK!D33B?.HRt@%7#1PKQNk4\1R>\3joT(8Q4c?o!I0)PBR[53mQe0Yf_,$GjNs/k1"u?G7;5a2kWlg'Nf5\]3qqI%(7g^iGs;4MSo*]SAN[M/"m5+cjIPbY4_,I5V=/G/;B8jCGq>lUQWCo'I!J[obggfOTl<Y\SKpsH$\_eOjFh`&Kln^`s5E`'(,4W;%;*8qBLK3[N@L8+o9;WJ;>!l5"<_X"rEj4aR/GdoUM!(PY-F1cDZ`T8Ef?i)GJHaVDHak<:VqF7l['qtXHg3rXFW^7po,2.sWQN\n%5G/2*[na0d[dpf7F::s+%H*d_i18?N1#96.ailDKY>*@o?b=Ie\qTKNhM!Gg'nR7ipi^[<0Xb"3Ui.sJ,d>=jL&?&[jOa4mk.#T?%P0#Uo:G8Va-bC,8,ttVQ!NP'A)du=Bh`rJsTfQJhQ\9be[?dQp!8,-g)BVO]\mZ5\h(-E^']H_Gj]Qk6_k"d@8dVHfVsLJs\5O]C%h,Q?&$9Z"Oqf9sU[XVWEf=h!C;H@^lCVbT_^Y2^\k:<"40Jf?I2X\l"aWc=BTa&W8=A80Z-96Z,9me`9\/,fSBc!!j%4YI0b%iR!%T^q`n,?7LnI%,Q3OdFt_2lT5;"+3:Fa`PkH3r@Gtm`n_U60!Z7(qeRcD:0";Cs:@en&X,2,W\nJ=4l+lNHOc7[G'e0*.*hh;"GWl%KYGE8.$.o`,B3jU)en7sFhYB%*u%eH#G-GSk5hg&H_*G]OTd.o'"q+NB4K%4'-ZfYQ\>YGjINsmHCU9diB34+2"V(R)8LlGR=$;e%\/?\Sh0/XD,+1Gf<[%!JkW>m_Lo=]`$ZR&O,SCZgS7L#-]*n\RkMb_Al#qnY:A4<d-,E\O.PHY2c]RuA!0I#>Z?M'6@@fIn,&"_l%9%iM+_WlJ`nZ&m$f)?']9mG\Slr\&XaN'RS<LfjT:OcoI6cMH=9^S<^QFTrI?E@M"p1bO&9M+'rb+*r7'd;]heU3hGnQJr;*dC[q%YEoo3;(\!d))+,2jXSFjs5b$@cFjp>\sHQ9e'"MlC$d?'="dR=I%lA14^m:m;<0mRql0U78/1Leo^.qDE(C\(;>eap7$4PO;t^`Y%b5\*Y=>"7.EDqKsg%.M9hEC*]hA`TlEbm=nc0rdF<NF]RFR/VCqVV6LqfVC.DtW.knSJ3!\@6,9V>=u><f\n40$?7f#B"lX%J%jZ%"/\n@ZZ\NVkKZ#dV)RXVdsF]K;Kk(@@6cAprr;YZeF>2-B)/2&O.P5a1[2a@`Q[o#D/!TN3`8e(q^+Wh4#u>fnb$[Gjgigbh5F5r%j!2>qX3HWjr,UtFTD1Uoh=[6GoltR#IS%Je6)'tXcOYfs+'QJc&nF7#^FM#<Ghd:#Z[D^R#39]?B9Fdq=a%Naq7/DiP#kFfe-h<n%WCCrMAu0YDJ7g)BSp<:C*Xh<STYG=VM/i0fMp&-l?Oo!3EcL-""\]\LT8:3d@>nsE%[3u">7b4aL)5a*9"W$m=0`I\Zcg8nN3c:e%MA_B$gs+I\"[NiJFAkg>b>g-^>icJsQ\74&US%@7m:C8X!uprQP<Z'XKEo6sO5'TKTs,qk7"hWg,35;3\f(VaZ760bG:JX,IfogZ%JNhaIbVJ:eF!@;i8[C9bk=QmjMPqgsMeTK^0HGGM[pnh$0hmC[b3<>h/kshoEI'7rY#U3`2>hbn]*3Io;1eqYJ=.+4,2OP#R2-Ul%]9A3;]i_="VV[1P7cgGm2!7R&N!uVMm!208hV:(<MrX4fldoJpnadg*,XEo`2HGb3X+dtEi^`F0PJ>>NDWj,^\6jOb:8T2OYI=s&%3a/rElWKb8Qc!BC\Y<m6b;kE7?cH1AVs(&Dlnr(^JE.M>C`Oa<+*)`3XL,_)c"qAi5Z4eZZS*7Lp-e+Ap2.&>AX5aO[Z>b$'P2c<%Ai[8Akp,on?EpCJ#l9Q2q!peD"O/LNpR-P#aspE+d>5HQF\GHf-9aeuE;P0!&RU[sNM^BXRA-Se?_Suqf;8iXb2W-=DjCi/b`I/O%2GTSFZ#Ep;Ts#AJ/Am2S%<\sTn4U8:?3%^>Z<nlKQEAeI\N8/SgD=8)Eg.)J]KEd-E%KiSJo#.N]e'gJ?n[qRQig1[2X"ncW?3dU%n^2%9'Fh)X<fiEm&Vi:P6g;P_+Yj?8Yn)/+B$u)&;7@cFc\=beQ/7B8ZMJ;W$q7l'P<HO1;bmWDnmZ;\U[@3YG\h5DBfJ5!jiE:/%<0Gh'l3bfok%56[q,1UJ01%*uKeDH/m>`_WWi>LHMN$MYfuE/SRI$<^5ptVe??Z:lbO2sp`^q]Jj9;4,&'X$0I\MWkWh!hMl%YA0%K2,n_-h`kG\ctT.3q44TNOVZY7u*Xi7Gc0-Rfncr#tUEfOFY@,r"=kE\Rb0XlqA+=.mtfj'-Sp>AAokr"3RdP,?#eLJ6;c!7+g]n%%6sQI]Nm\f4-@"WKM@-UW0+R!M-gZ%iq@I*9+5t5Vk+m/MkLW,T.*P@1o<?\(SKlVr$3Ik*lNGJpA0jWL-]0o0\h4L.RUfjpVi.S%%%mIO8VV5mRe7'O-7hS0PXfrf\1Il-&YT=!__$<_-]r:?k=^MQ5dD%i]<M-)PMo>3Uj;+'Vi-A;JZ#]p&TAl!+,%Uu]J=4[Wp@]#%#O6_92T6.IF-NL,`I>['`0uP*Pt^n,]''j)Oe`CinlFoIAC<b^G%\;BBM2iQl+X3I$T5c)9!OhM5I+3@TcKJk`Hm<G9:W:uh.)\G%$Y#>/(ejFX1;CZ3]CW2-3'?o0ak>p[7St$IO*S@iS_q^f1lU7UMSsf,B1`7^?fe4G0HTgpna`'79]BD?Z7qidMB'<ffD44EA1Ot`%]!@Hd8E+!9U/tSEY/o]!6'md-iD/5S%:(m\7?V1%U-8IrpV99N`t&XoZhMAAIr!IQ06cm?0d!:+pL?9P%.e#%A=>3gp0*'3'`F0j%`\PjSa5@X[-t[_A9%MiiMYYu1%b[a*@O`cY%X)=S6!AYTR&2=eAG-PPUhrr(Fh:@KI*a<'8a2fu*r;pt`I.<KX/);IIdG?M#A%9j%?6<h$4on*9*qc4c+\s3'FP"(8FcKhT`4fU8dn&.J[P7ql>ie%2HqO\:FTZt6:Rl!!VYJ^`P3n3Nqg*ES\lFI%#<^LI/tWjfRHANY%FOP/FY6hIqkCmO1I49[BqK>t%fUKG@fnL9umhbW/i4"6QV!Ce.XJ\:g7io:_Zbm6mh5g9GkNb4EJ!od$Mnse9r2Y!ug%^o>_n?n*%lT"J'*``)j65-]B[rQY@s31mD%6lA;HFV(;[_IC-?[h$ilUL#caW#99hBk@.UQWssRn@eSa^94B^64%)4DHU25H-<`.C!/KKO;f9%(iXgMZ.C\bPcN#LKpr8**DKG`$J=aaHg3RhZV"rn5"u1)QDPD63CMHfD+qG4TgFXM.2t\$o6sX87Cr>e`(u4D)jnBDO18P:s-E2"%?HGb"nmh'Y+H3V96A:Nt=[;uU4TVto3l_d&en;>9S8D9=DeQr2*bB\#m5&R+454Im6:"Q@HiI_7#2G-W%8Z(d9g!0H,na$p;=>#V%=@%EdeDD4I_s0JZDG6)>rt>7Mh`32>.qW&6Fnh\@l/>8d8a==W<;`s890?eWh0u?ng2F?&ea>Zl<@k^E3kX/s`E2*,mM")UM^JNE%km;+BUD0;<49:140e&]LTA+k7#4UdY:jA$m$jA'Y#JTQBLHeW-YIG?4MVnH"i\bOl*g:.]DJJ^FQslHYTh.H3Z2pTeRIc7tI#ED?%]CVDS0hk*ee[Ujc)5a+g(bc)>Ru\uu:e#t5r$VcM&<J$$;'\^65dI4s1dr#!RPFT$0f<6VQWY3F0P+=RSBDb8A@]hs,9nFi`A1H:%kc3TZX!noZG?<8TN,![Me#eQXBl6lY1BV%?h;sTSTpb>WVOiojZ5\OpAi*/u[V!N5V&Y`!P+8f<>[1=+N+D-C=B1YBWbOgu<R*!r%:*sO!:fhY1U;BFRe6T#OWh(r@S-p'3K.WjMr;g"XVdki!K\'4]#nTVG1'7dm:D"7-Z3Vc]d+uRqF?N!2bN1K>"^"#eXGg`<r_9&s%#+[3iX0.r5-)q,J2fpRQasun9Jb:i+W,>dR>g4_E^p:1<Q8A"Ta#0528QSJH)9AsqED8BCr"]cL"#LbK0]SU6^fYV(QDm.BS=,:N%#3&$se+ASM!LmOs9/B.X\sh"]*P2CZP!tfX5]eR_QrmBY7c&j)*)JdG!@A/$O9jCE*)PHhTUH2nbG<2^]#pHZ<ro=;QisJo6jLlQ%Onq[F`A1`9nQ87c!K$ot#XXl/l8UO95Xkrd_(pOQ8VS-b1`3>g,YJBrWX>uB!`NMFA@/oTK@I.sb@imVBrhCgjI?Pa"ULup"?db0%WEXZYb#I;3'3S!fe;PYWH5o@(V^#(2*0=Gn_#jaPP"!QEm"P_3^cY3"9V@h>G8"Wjbqk5,'C77pP=%V:U6r6@lsrXPG@49].VEkF%`2:=L^^M-#2R%dE&UG?&col"YE>3e^HQ7_?A(2bq,9UADYeLQF.QIrm.tI[#$ft3=ARkst7mYZ,5\/&'[0@Q3s&U[DWAkO:Q&8CK%.i#>5<[q]N7k0Eh7:l'<.M]bJaQ]QpW;o[I'p_LnQnUucQP6``,3pob<&\cu!cg],?IUJD%*(2)[pFUl2_7tY.nWRW=gg`3U6m>]%W_9Mqdt3ZpVP%!):_((1kb;B\5ad.aC8,$31uLQ#FX\).k^\Uk'6(pB;JPJbEc&dI9EX=sM2DI.^aRMD$h=m.^U@T;c,rH&<\.?+%-^.CeM?PBU,]_up(-k[DA=$Vb%H'MskL(lD$'V9$JmLaB0rPkqoa3/R_c.(BYK/CHMP7WRM@?HH,ZT":(=X\.@Z$%32Lp$-R7BcP%!)&^a<D$N$kQXS6@>Ke0#%Cd@6-iCZ0TSJGh5+4=ic<+EU1+/Y%8C>i-,)``TSs?rd(LE#j2;#i.M;HU_(q:^aF\CT(fObqaj\Z=%lNiqb-?SL'i9I-VqhX'YJTVa7ilP0tp'/=H;e$3^7r+!VmqYk\=#:n17g1go2DW22E!tZ]TPLn:@1EU5aN1S8n.;tLW?<T;m_#VM%PTf]GZJ&blfoQnG`oL5M"8fkVJjS1+-7Q6F2:)QCCjnes:gdo<@/6.'d&Y(s@>"&"'A<q_]u?9An,O;h-qr,g+:<c/FrAq"Uc$d8%$>N$J(GCF34_PRb+-$m>EX3`pA5o/(0F)"PBs^:V:k6&rL(XeAKI)@"a\E/N!g60WCK:gDC+2[-WJ[L7&l#5;1H!N!fM'DS$8+<:%$$,OZ"M$s#AR`K;n$6\9"d>V'g/nQY@_l$,Id%Jq/#:0m.li:tBP=/;">'clLQ&5>M$bOiKqtAJ_XFcsL;cb50gJB967j;t?!Va5%=<a^OKkB;ds%4V*=30=iK8-`<r,Xpm"=oF#HK$6D%WSSW)(Uk9OePIcN\p;iQX`rB)8q81-uZb]M$EoHH.XCTL3#i9EAS/f96"nd%%YU0F64uj(C*@qfIW/FVip1+^;2@omB%RAg4LHf/*+OgT.qBJp:/RP`(qUqGp>ABLOQa&e:l7#rGStWZ'\L&.-8%g80Gp-\87>FD%9+r(3S.eWGr_=gL9M9REaX#*(Z0=]S2js;X\q=BeCc$kg$BLmc&l_B=1A;]fJ5Rl9*888[M8Xh)ZCE*f:)OO2VG^pP!>9\)'j>&`%S@;pq'uD8[@T&o)&/pkuK[&irLMt*T66Nl^S0^h;"CP&8_",R8;3YJ*-!8m\%b_9\L+2[&/YF@I#\iWd''!Z;)k`e!H@S;L60N6^%KN(I*aMqC7&8$Y2fu(;rYt8In'BmM7EequFFsb-hD6H-%8MoiM;7^-NfJ>fqlALn+Q6JD%BQ%!5Khab/.;FDN#%Ih23Y5%=UM;-n%-:\1_a!!hCS8>`/,`UbqQPmSl7/>M!l#`U4i8M].DTAs_[;MFhQ&W?"oX$D<<eB^hr#/Z&[$J[QN89[$P@]'u5oGqi)_2:4NLYg8%;rWa3/>H0`HK(00i!K%_Z*L?H@rBVOGQ(Eh,ns`[VTT/.4ljg?Ta1cf-G'V<95+ZCVEoBZ&jm<),?YC*[&4Wc$5skGA2"mRXdVj9%bNV^Fb&k0\oqNp1aXc=$_itk?()Y%<'-OMF.*pQ8aU1gV>+q)iQ9S6F->rCB<"[:lm:<)A9o:lF7i"(WN[j"j(.oG*/SZ24#ucBj%=Wf,]Z:R\?-'oiYl?!tY6N\I,+'p/:QX.eOI?\>fN>"Pn3a==LMc^?`7f,Y@[toqB8>5=5?dL,2^Y:k^QPkaFfT3iW(l_p_d-)CN%dG5t:3F,PIb+WQ\C_l+CB5t1Zb#s8)<FXS%Z#'QF)h^e5r!"s^LfK54$tf4K?NLmaY/CYoL(J(ePR,I4?"QsG'K[M^.2ib`9S);!%[Ls-CUc<*=j&0!a%B9kJ_NVDWJ@;1%PgERVaeBA5\6E"$#sj<(&tgr-KBrc0<"l',o%`5jZqP,V-$ui5i[F"u,-@M'FMh72:g28@%<)%!s6@TG!"8Jh""P*TW_X.``YiiNtj@D)O=^+S*CcE^NeX`uc1OAGK@/d+DA:rnLn29>N`D%<WDd0p/K+jKRQ/eTHf?/YEWENb,%3R6[e4HnOF2HF3m>)J+q0+^UnMej$qDJUeB=<]1S7Lm7UNhoA2`%u=lqR%D![e_3HdB/;DC8h0#,sjHlC_S2(S`A;#AMO),[SG5,%BF;a.q^rAGQ#K$qqlke%L*T<kNK,UA2Tf:qS[l,8"&(])oQD77XtN+#)T,e_VSZf8aWa>,'4D,_]0mJS06;loHZBD1iJD++=P:(D%GWXC5S[;IjM.DeH*T/"NHlV43B@ti2jck$q*rjhs*A*VYj!;k)&W4?HnM*-UEMT9\&-^BA\2n"M&4HioEseAK^i=g2/(LpVdJ4rM%g!1+EW0oZ4pB-tL`3nl7-3,nK^(L)iZ[Ek2#lMhu5n'(ls+b&36iIUiN;>aQ6hU4=Y_4Y'bl<4t?N16I:G2YPIWtZRYf,l-:^l1?%s%j-Aj8Zn-O8f<?>lG8QaLV3jpg$qJ&RbK#8/otVJH]rk#F9W4+,HTEs+)Jjrr^#_r?"!u\,QP%k4X:4M:_cYPMu4b@#<Y<iKW!,%4e[]-5=e:rs+:=Cpcf$V0)l0E1RJ,o%*mo5+B3CW5HmQFIj"9prXT]@\,QP'>lG8G^er$F&bCK[f.R(.(3od"A7A"-#ED.CIh5@s%q*2sA7K3U$B:&XN0YQ6@5m5*eruf2=np_(k*;=qBZuu9g"B1Ze!sdl[Ih6mEq`h=+mJe;-ipqRY,m)s@DZ>L@%sKok^`8\oK+`B5%3+t)e7Go,&Zk/sirXU1u0)l/Scg1VH1:R:9:gN^C\-dnWEVVhhIN0!"?N5e5P!a'1j8Tsf[TB*#A1KXnBhAjohJA]m)1["XJM*-$%f?,3MJMJF-$7p3%hZIkPO3VU:`e5OH?BrVO143"'l;o;t*A2^!>6[3;1G%A8++01p@Y!u?,]9HK@)-6.._Er1/>MnTZ\@qVgsd3g%&p%2(EQ$``@tqJA&\$"*E/k+j+N9UtNAfZ$3(%aF%%p(_[OI-BA1gr,8'90_"j;]8hSoj/FKX=HhG/n`3i@qcJ9Sr2A-3K9Bqo2P%gd[dZM0I\KN^7ntmhi8d;3nXG-cZ[DQ`Et7/<uVg>b.?62d*[PLD$Hc\3@Ap`%g"Xbl2d3i\n@Mc`uOOUq"*Vj38=I1SM6TcgcEB%Y64]5nXTjN"\LU)XB^c=q&H.LG8T"84!as;g2833!P9_K8iAe_Q8Vd6i&S!U@!L[;I3s$Z?%W\BA6[l5g&HY06R_r:?,Q01`0#fB%)Sh"0flS=+Wg`:A^WaE8b+--I[\X23ZZcu'm(EL8X15SEWlEgV5"-Yl%0J<FJ22J&&-h)pk-Xe1,E%,Qjd6S/ff07KFQ7lTp+\2Q%3+*&X;7^\]mqbM0Fq(I+-[333pC16!S)Q%$9>D1H`-m9<=kqu\CZuHpS)rB//0Hj(Y]!?\g%H5VU;cTNi+;ci;F"2Ah_njKgI\Vt%"*Vm:bk;KJU<AF0j+(^b&nDpd`&X/o^.GUZ^_2p9Df"`iULgS<]2fEq1$:+P*D?/kL$]jZ%4sM^1.$-o=JEunm-G^^'&-.oMV-4*%FHg8I!+bO`k*<,'D!umcba6<B%V4EQ<DZjY3p&l9Pnm8Oks&J^kc8[O&[`\r&Dr>>+]2;-r=+m(Q%UH(G<+qlVo7!(65eNBOIitG%$MP&:c/'tW,o2W=^,WiX^_5DJ/MWimIX?FL_'3K53-FS,"gWit&rCMp1j]:EN['IVW1hJ/Ra)[X=She._BH1jKtoIeE(U[c29-+U%1.!0&gfgP/0+eVLfuq;p-@AUM_jCVpPW8"S(6POf],tpm42;i*hEd!&rZ#WaYR%>J/Jpfo8ao^n5quA@-ap))!JQK4>9ZC)EH5O+%E>Aq8=lH8>FRXH<2M#[X%M`iFCf9"igX@l6AZn;Hkd^%HojebBB78b@J8:M19HYe%&r$-oM;hQY_/Ebu2aV\Hq.$!'"*GNJBH$V_%.&JV_(t<h(gY$.Ka?iZ`#sT0?l#a]8)KTj!eZKPt[F&U[[4jSp$HFpNAVI0%'W*Bi7sJ.UN,Z)I_e+.Fa]=6<7^IYlir4EHD5"lh%S6]`j_!];k'<Xp.N_N32*>gg_#K11sd_ob:4*THm7oD%>m,7PpOI73P;1=6$'$Pt8>UQhQnWhJ<UG.Q17e+Ue/5%AV',n?5S&q(u%nD.XON>:BV+<dZ&:BVB/'QnStWN[r]@ii@`YV\ore&eE<f&_:lU;f-[Hd&I#nn;1<-d,Y$Cj6^WUZ4l_&e/8mn9.FjTnu3SoG1Nj%2LU6L#b-^%JZ=O%B$obXCm\H7fT\,QOdNo/Aie[,UQ_ltm05>eL;IrkgltajckrD9#cA%6%\l'rbaotFj3[r.DfoErF%^CTq#ok$%cAdAXR+V),;O&S1DBo6&"Hu-#JD:;kgMP!HGIiE%B9Kq+e0;F==gb:NHZJ-l0[S]<[3^\E.>jju=;FOrcG"-pN#2lQ'275mCmE.*%eS5<M[I[1B'4FZoZGl?YmA`V50*uB37(;oa,o5O]%%ZFG``[sT\o,QBOW^?O&r#RZb!QHpY%:cr0q6Fg_]mJ%*r77#SJQ3!S1;dS%Zc0'DZk2o.*r*[0g^,+.6&=m__VlX[C>0u,+hp(Yjt<]<d\JDlS\t'WZD]g#rYNEbYgJ/Qgg064-.L;28NX`5O=>bMHDn$0ZpZGh%alYp[>-GnK%+$ro;)Ud:f$;A*,Y9a'fltQO*i)rice`b_mNF,(ERZ&Jop&YpZ$-;UD:cQ2YR"<VF9]NCePkpgU^rnr`.G9<`f%.7%$n<Q#FA.m9/W:ZR=Zq*W':"W'p6cB_[u_K351`/?+?L*$S8JC>E.l.12BsRA[qK/IPl)lY'$4-g=uV-cJ;)mlJ_'r*,.;OQD>/@:%lWGgD=O4LTkai0W*C]m3LDrcPJ[,_SMR'.=-RCd33[Mm)XqIPs07qYWabR-H2!Tqlg6Y?QWdQJSFc)o]M)D#28/W;M*'ILurij/[%78bF4PO=[T9k:GO.@/$iP1BR4JkN[0;@#jq#++o+=pC>94gs5`>\Zpl!iFmR>;g,3M8:I'_52>Gc@*M;/eq'r-2VPo*_\Lt#bk1G%_eQs1!IVg"9.JtH_THfS0oI]mFcK`$N%Ypij%BA5KD63h!]#"HN31+1M=RIO&n1pNfp*>-R"-/mfn)_2?$V1*&/-`jBe*OJkHn\l%5Wim=@n[?`M(B5mJkQ/,1(ll"!+BX\A[3EFj_u,gS4!`?Ts&mV`0cLV$+FjjA$RVO51kZ4@2S1A[=9e`-86PDj8+W^aD;m0h<$`W%?63VY-?n'n9Pp?Uq,<A(&acG''L=']aN.nRah$L>&.Xj8[FYLq,Q+JFe/2Kph.9p.K[]8AlW9SEGhbjK:J^j\9*U[;N!$G25j[!f%-;d%^c%I:V"@1!FfX@G+cNhVn'/7b2A:Ot30Di&sgtRc=`uE<`UR+Ee-?bGND"cTTn%5bJjSbT=*^Sba7P,ApF62;eO)AuY2rdP#%l;WhCNSdAlU'<C(3>Trd)'3*["Ahc?B%Io28YjS$!eJhR%KecF=b_?f,R0$elu4Drbb:)+9Q.o;Ykb^1&C'E\XE8XbUT%@YKKFf_%9Mo)G+rQ#RphV<\UgpUh,=tL>PNik'?#6\L;5TC:RAe0VqMo$07pQ!a_`J\HU#EsCS,#9WG]D>u)0p+EgD&mQDGT$*1u,ILD<@YF%=%d3.NU@*$qEq$9_\!lWbNQCbpBraf!(Q=n_s"NdD@=SO[`.tOBm!4Iq+OPiHXa]!dH]]kB:;H:*lr@qlc&.\_d1;f/2=Zc7pi=I%*N)-0[&__G8ipq\Vq&a8ijMjf9;Kcb6*e'Jo/!K9q>1=i=0"DrX_DoR_BZgIp9Yu_I_Idai6#g1g%c@8ToEN*:Vb;Fe*ONl;AfjQ%FrP>:c[2q/6Aj_rN0Y83q*@_W?=#^rQFAH.h(Qt+k,Y8:dFtZOVAJj4Q-d6>m<2IP4#4lDrf>]rVWAiR^rc-_V3B:AF,SF/Z%G>i%fC<o-$hN*.%\-)!>k'Wd:l?X:#B!BmkDuT1[M-c^;^!r(C.B%7SJ=47P%6.52@XCr*#W&O]5GZ+\sZW`btO7b?]?\@UJ5M]\g,Yb%Blin7,*M&ni38@)&%a;b,X'7`P+9t1bO"mEa0`@YNOY7KYXHA0>&RX(_\%(pkk-kS98r1K)OR?/EQ8Mrj_^4!aV@_G7p'TrZQVd<%ZFc&/,Z.O@UmhsO**gK0JF,jdlF0K3c.EYh;;E:+IlM9#HDLs=9QWt!njIMGM3/0\M2Y>VKps89Gtu4&QCI(TRje<0huqbT:JXFl%AFO9iN8cb-r`?.F@Y;,DXl?3NVmM=JlDTEUAj9L/5TosIYX&o@i'J&/P:*'$=Zj2rnXH*8&t<Su0?:?('+9448Z5Cg/ScLkOYUL)%jheg!Eq)sq@p*83Q'NTASL`5rFKYphrgrpC.b@K`#f?Q[jOa<1qCa"RpJKJ'rmhY%2B>Xc,"!J$I?E\2*[W;&64BbPaQ`DYj_mpg%#pa]o%DBbY!Q($@aP[8=G6@S#qi!'(]*AE,\!$O1P68+o4f0YJ!W5Rai<Ogl^HFXl62`6oc#2HO:`ifLkA_dWLc3]DAmQ&?JGj]&%[g$j'q@OU5c%qn']SF%GmYc[94*jhOW"%%]jDf/P/;Xaj\m>\:q^R$%BT!"f9Vc`j[Q!edNT&>`UAYYGkRds+,ZbZ8Lg1We,^Okg%Qm,`-bC'a+MN\<]I1A2G^`XI'k3"=3ODU2tDV(TE8Jt'4[ggpkA[2>E8t6=ZX5pF]@prjCFU@-rqN'Y44W"7lAokG8R50+hONI57%r\It+n'bFqj-I&D$]#:Y]"8j2SZg+S!u8o">J4VXJLGJI5-`ERKn8W4)r$11pXG/m3UT,V]3jiFSjYQ=]*,s\@pXPB_2A#je?9*G%08[[f<6V6Kh4[Q.,6HS<?HBdPaiNk[_27i3@p+Iej0r1=e8PKsU6VQ_iDQTpH6([AqBhqm%SY;E-RT.bY0[@jn2a9kFi;PcCh^hr%W-1*d(Qt_<(3&(<\qQBr#nmj%P1VU3(FE1GW+7joQUl"'UFT=C6*:cJ*KHA+M7!Y!@E+aEG@/PY^!YDFN<eH%.d.*_;F[3Zp_;Bo%rJp6JbYo*B+!q:)2l?qHXq7JIYqG.%c89OKZCTk7]s#]R/1JGEqC)>I!_&^J)OJZ[`$0>)(b(WhD:4sF\4c5^+N`rOibdAs5_nJS%N>!\:aU,nuiCl:pH+olRDE,;5\2bquZEbSTkA;D3cGHL^C.NZFmYWoZ.-[8cQ<n<F7=.lmmW+QmLc.NG;YRNkg>,Nu=[_Y>E[&($%Pel`Z9*l*4))8,V=C7"44iqTi/;`/X-H45Z8B!`Ah(B'[W*&2&^^;3jT;f=*dfQ>T#@.`e/s/2,@8bl*;as)npKIj1o4j]Z0l%Cs%X\="4EDN:K0aGHrH(q!E<qe4"SLFmrP*QMI"kh('fIF.:JO7Ri'DniS>Vdek*%0PkPe6-c&)t6901*_20Z7S$$7-)]i#7@&f(gm+%!ULGR!,rB7'I<L:(puU<8Q!uC;'ur%SJ0i-9+A%;n%.Am&DPoV@0e"M0EeUq(h1A`h'EJ,O>=Q;(5Bnr`2NAFL.J&%kNau6nKp;r%E;i5)nCcYU$t3\r0E`f;LEV1R_[tSVDdeGilDXS3%$<,5?drH1.M3u_'B)p:'WP+LF.n=3C^OIb&0$M0^3)?i_@Su8@>KN"_+hBm%7(/=rRbkmm8X29LgqjWkU3f%ZoCiY\AA,qp:E]Ag+:RdEl+_lphFCR9qV/n!W!5Ad-#@NMbrGT)QVqebULG*](c/Af5@NZ_9-tO$%(udsW27=ADL,eGEWB8!/W&2>s,S*;9cGVnb,nPWZ]XB1?JI'b"l#FFpbp+^!7eGHq&7aa7=2lCY/9Z`+6NH(W_=sc@@2pIG`Z\0S%AVjq]MaO#M`j@D=+U3r7a'Ra:(u(n2PE"J0<8nH;<:#B7qF[*))2B%khCEROPXKAnR!BYQAW*H?[2t)_A`l@M&r0"/it-ie8JHqF%l`?!.E<sq<h=(X%bsN;+6f^LG"K\iKeHUOse&?\^F!D)J=>*T]L_GWX36!*GP1.:un2Nf[)2G.maErs\>`(nAD/QBlLH)Ou2e*h:%F@ISoLDY;2JRO@3,/#%P^t@iuGSgK<H&gf&_[r1_8!JPn0Z7Xeqoph5Ro7!B'YT/C\lHl/Ee=bsJ`=.Y(^6j6;op$\It:"U%kZ_T%f$4DKpfV,SKd0D*XXs\aV]m(Sj,r/oH]geEM+P;CkiC[M*<O4gHL]B$E=]I`^;W6c7FY6mX^&A)[u`@+@H%;l&t@I]R#YiPL1c%]%7<0%\?(pg"EeVl/QTla-7$oikL&"\<SmuO.#,\&jXZ0EcF@^.q5U(?p_SW4lQKWO'IlU;g./GVhGdob&TQGl1on_5iS&lJ4FG7`U%U^JWj@'W"&Ti$]R\gs"9\jF9p$E5>^6L(a0P>mD!UcX9N(Z"CCSDahJM06@Lp$U;MqD4i/M.I_SI]M:*jA?[df%tj+M]:PVb^Aa&%=QpX0]N_6$K#qdVj*8G`38Uns@Sjm]_LAclJKBlRKYkO\BJgn77-.RMGIU2OXBCP`^in4\pO_Ib:Q2_I%EVqT]4+c.P\cEEQ?hKB%M@%0EYoM<@g#CG[&OQ]i[Y*pcMT3)+U./BD'AWf6i!>/ACdq)ZhDWDG;=^2U9-dT<ab0sr$\jA`&lYVX#iE4O*;Y>"\R.]0*GH(3%9m?ok>3+8F"VXdgS/<iF>*9%fJ&R"r-s859:?s0Fb(*W^]g.rHEiu1&N>GMd?]@(*U8VY/PuF5E&LT;Q5V7gclEB\T</KS04(WFG%h!873@D;42K#ajfiSNR\'AL/H!$T"=J?(X8E(ugOO*;52r+CK0-J%Rsrm]t>;e'g8Jk_h=#AfG/duRW,m@E6Lb`fZ:*k?Pus)FY'%jbha1+Fj"!FlJ-Yd/*YN4.?:\FVa@[,f?2QiE:"2*-eNSfqr_lJQ_1JLcbU"PlTH3UkQi_"M\_L00I#'_AbZNF+SsfL*G@F'W)Q7%*3s:%f,*Ig@g50!gY]`oRpon&qGa\t<:KFWr,2)UW3e]Vo&[f;Ed3Lth4-5U/_S?1aEcG-r*oI9Ka;M1QAJ;R).iLm5?ae1knH^=%2P84hY'a[n6k%+c2oVUr1gl/_M6*d;>d3?l0@A3aac2\;fVAPQgO&P6$VSHbfei2P)a(H33]Mh*>p`OP[D@-Ehu@kcpam_>Z#Q@W%9;DfrIK+KiLQuB[R@"(?D4]WcAnpq3U[ReWR<t$\"bK"ai>Fm.k"`,)Xi73&08J$=X#pqho7^jJ9OV6-5bi940LRR-!I??`%,KRh%1D,tP-PtiFCYZMBQBoT?jX>c#k21\=9+ILpGo;iNL)kB]@]UR,lXA!ZO-h][Ak$j>.*-Q%BP+c5(_BJ7T->E+E',e3JU^#DK1`hg%oRSjRR)1<qBQ?D_bP'fs2V[X;J=h4!55VuT(O/U0K1^K%@h@aKa!o.P!,5D[gNs"l6R3j/J%3Kif2m#=5KH%Ibhc5)5s\16SF!lT%M.egZ5=C80OY0OneSespmt;Q?59AJV_6gUqNP#A+63HJ$WL27fdcqK(]1;=WB80/Y7K\J8Dd_d6]Q9m@9]959QeZM4#t$\K=XHin%`X0BP#V.812Bk"9:"Y8T)\D9QHc5UpY@YseI?1ls&"su?-V$Q`n_t;_W?@,N#4ULVZh<PO<Tc,94WiST]7&^5Fo0tlMMBAp?[h?"%4pL?+UAjmUN.u^b&`2tKD"GP\'7_+c_lQ+\2S&Oc0=r#(#F8BkZdT'8*22J]=j<_oQT8SY^'].R_1i(e-I/B"gGuJu@PLRSm;Y)3%j@_>qr4iX\@EjIr?@)B*,LVufX!*^:"sO0RP5KdV'`!8S\GLTfCk\>Vm5-F,o1XMO,m6?9@s!19lN-5'1B1-=n\cV&-=2HHfZoW4%rhZQWA9:naf7P9%e[.iLHj/BnYkO&A?HHJ2*I/#fCIDW_Zl&8m725fJQ5_Ni'*']Af1cTjB"\0gptb2F]2,E0p;i1"RK/"BZFOto%cZTh1g03(oRu+;DSadJ+FjJ6\2;OeLL5h[nRm(<;D=0pmm1Zq=W]7F`P$r0M\olgH$,gWWKYu_qn=),!6`sStS[b%2K?BiY'W!,H%"...O)<VR$L&?f&Do0lgOTM-Vh]lhnB15n%l[>XX4@-aYS^3=FL\%-&e758_-a\offN/SOSV/1qi'up3N2sV+WJ)%-X.R#DNKLOd%e@2^j5fA1tc)6hn8<?^:k6>p?jRihH(Oa/IDYC]^M6n67-q\%5Rna:_YiaUMmhfY\:%+$sW+?EL(Z>`\8fAb5QOS5$Z\eHJ\&?hD%&g^(`G=tn$&Q.<"9!9L&&WJCdZ61)1S$KY:VMGl.8U!eg/j!(`c[VA]JDlDDk]K:L!O6+9CNtVZbUsr]STk,>m',^3L]`WrD^h4Z%ndDsajJW6!^1#*+(n4?7G2^'RR([es+-[>]8h`hf#3$;)Sf'PoYH0'V0+Bd&i09d8AM]88Os3j`oB/b;F<W_L"`a=j&6Ygc$6Mi;%17M7@4RQ*o4\.?Ze(G(,24pW*K0dGf^NU717j<k<+<U9#:K[GS4/VN6\^pUOmp\+79=ekaG*[7#%.4eT=*'t.7_I@@V)ItfbC3As%ppWXVJ6J:6:c#GQe6e=_/JlO7"<:LJ(*-9B]p]=nASu:k4'd\;V7Xaq0I!MOiCnn4afu0#nC<U;V!\R/8Q7I7KVq(Q;NnZ<5GY^N%CHO2Ffa0]/bZCFQSbJ>k1e//B[9$r'H>%g9P=Q0f&61A&U3`iOe7$`M72Odc"d3R<$qu@pGln:MB^O@BoI3F^d6%kf]-g;iFF(K"%3?`)D"j()V*O1EK<CW.GA2gJ_Okf$kH5G]1rLA:na](-AjOB$CEob`,aeVu\b*9eHpLUnE7k?46XN;t<74h&FTSB6llE2PbObsuj%2c:5n2)W%@_#'q]d.(!"aOLdWL0a\QZ[Ij+>pAN$NcA4g'@GGF+p5+o1.f/*-V9HQ9q!Aj2n;M(o3YC@ch>4]j%KIkH_!hl_\m%.%m9"hTY5#rjFbc9(2j#)e+DO2#6qpO&WD+X0)CMP]Ppt"Q]7]FQFSB0c-L'sDj4^jS43r"[:3N6+b2`iMaXTj$9+=I>fj!!5dZiHY%\l0r"ah8akH.Uq:VGkn"'BAG9ajN%n@QO1$LWYkI9XiWdg`ihjF&toT>*-*V%7sLN>>_:N*=S4fV1YJ+**CbHK=5#lWTp2rimtm<%(;&%kB^f:g;(X&K-:m004(==5.uY`Fa_d33!kCrU[9*B+[.ahj?PA.T(fPe%:N$p7R$]/DBmECr60$Hh7"\6j8rsKRGJ1>W\YLTQ%2b6]gPrM]`GE5"RO-FO[FuFPGZ`D(RG+tk=Y.UiqOHcRafe#',gZEoaqaYsqcTuT/i\%FdK+*7UjAt$s,P;KhTc.Vfp'2Y38CB(T%O]6i'0U<WMW*fP4!/3r17U0g&!6)[fi?nh?Z(d/$)BP1K[@"(,ckq),g?Pe!Hd^.LGu%i>#PEBG))eCm/"j0#qe't,ks(6mGNiW!%gTsHVF!d)O`a*XR$]@4N)pM]>doT2\5dI44@N_L/]QA'+OJZlSK$L/QJK.a#*-sM2hILQH^n`EhS7G8(GB)0#K`0)'7k/A8R"XkK%KGbqhErtkeX=*!t.O,ucp[Ee'MT9/E%*u]%#/*/q\5],[=r9'fZ^E\2CU:?9ms1*B@!7&EZL)p7o0@BLJbWJha'W1251Zj%g'HT8%o]NV1$;iArO:p@Nb#BZ$$rA1oT^4%o888L4KAn)8]?jjpJh/&O&&4)P>2pb4Ik-6*8&Z<ZLnEN&/AHGM0#7gO//88<\&@">5[^dF%<!.+A*cik']?_(1P8898Ud\)SG;>a\W*;/GNQdEY[RgmM3she`CK,!nloh;*O[,V_j^KM%dC-*<3$EdZ/P0\S_d$.K-j(-[_5e`a%8%fWaMC*@IA4mauM:Fiorh5bdP`T0'-3@`E(DD@%_/u1&Sb3:V"8WdgE7BsPb*[l[eZp'-@s4.f99N2X8TlSu#+ZO(cZ(m-5FTL-%b_E!n;I@%oLS3(3%3JMP2?Lkq&`WT=8FT.J'HRH9L!r>-OiC++YBMG0`unh0'nmYgBk!*]S2EKi:?Qu9ca>"mQ8=]c_/e*6.<61n%"].S7&TsFt,a+s?,+BL=K1insp>0rsq:4gD+>pOPnKP8"gNbM@'^\!_-d`7]a:dP.ZQ\m1SL#LL:bXt&VEE_2<[/1L03)f6htnp5%RO94fX&B<gW4gSV-JZoCFtkGl^\tET:>,inOG.]JB/<MKln#Om-q[JadA`-dkb>F/;@-99R4Xn#b85`0dd@]a:.qn5M`YWiKTs"s%N/FZj6?C[[dG,kDBPro;,]]7+lTphAgT_E\=trBOD"Hj+-(p;+iNIZf-Z@l@e.;8Tp]oq5+aaj0bd/W./$OX=Y_b,J2&tBV@q\-M%i-00a5-Qb&Z\j:d;t3";2EM8\1nS0I+H*/m/11En3chn`!Ec=[?#JFp_?iWS2i=4>ZVh%\2VT1uK121>:C+(\(I2da/R`+3@U/?/%ndUC<joGKq8*ec&m"qYq,)m?=(`L^k*WfsJR)ZA3'T;?\,i]"ialGkNbX^rWYf2bB%LUVCI5]h2AS$p]"<d^9A;#I5=N&%T2@0KW%lbkuI1.C4@Q-0m7=@;m4pq#Zed2jWLiDh.aFG+[q:d;l^NYntsCl(QVT88R?F(#0=__L^^"Do5hVBX@3i[?D@OlmZ)dnfcT\l\Sg%an.O%i^T>3)O(#R]HeHO)ACrq&RYslYma_E;+/Qe=M>K"nTsT#?A/EpC[gXUX+0$F$@DXe\Sibo+m]_$DG`qpgnIXDe\bK]gu@nd%O2ih!GCk.*)Y^I)]RJ)qj/gFZ2hHHJd,OR/+HatXbiYh:8^-'drmIpF=mGI82\LhOaS!Y5eqe0S:Q+u7^C#9&n%I(17jW-a/-+Q>%`cKN'BQhFp1pm$YTlu3hc"sd";;:*"N[-`L**cr`5dj&rAUhhCUl+M6asiLcgbO<js*tYDEq[7MHbME^Aou\^V"=91/Y:6QT6<fW%,7:lYYQq#LE,8DDhHi"HAMB6%DIG+H11X$NV!M]C$f@=#<6`WH+lt[4\%&BV*IuH?GP:],MZ@u[KEpQ*h'#5HBSE>G.oqfbTM/HS%A:Ri,O0YhIA.h:ZMs-DI9lR:[=dB>J5F1#u*goMP/AYWE8&_2thFIP3'39SZNkH`><3*hdKq+m]AB8K/I"sc9R2(i6iHZ*92#KFh%5_R:HD,<O)Vc;]PLWZ2Fdi`=3Bf29N:d0a^L=/no3aB7SKSVro,Y\uiKp9C['*HaI=JYp',=RmM/]oB&S)!G2("I%Q73Q:ldhm*@%1Y8>GF_4%;7PJU%PpVVKDIHMZCl'(!rM:D[<HBLY39;n$)L#?oVC@aj,*eiY2"<a*@\c+:U0+]lS1)r`8?n#gA3&>)fVI@21I[L0%::a@T2qbn$`VCbC'c6fhS3EAm#H*V0<9-,GVHm_$PfXf2'4h4Q.H2*iAPc#t)"gt[8lSCX6obu=a-UN\\I.FCcXt7A,3,A?`jCOI%M5_.[Fs8rV`5mOHM/6(6a\.aaL5T`fj@sZ5#o6NpRAu?i-*eD/3\fZg:-.N+jO@`.7*aXWb,C"k'=&p!9D4]%-)0PG4`S'0RlTo2%_3(`o1cWo$M?ZT!_o6"OC.'d,OZlW9O,u,,Kuo:Q-0_Z1.lo5]Ur/ujj`6^ElTq7h/O'(JTCmoOmMFX;L83t?nNZ;O%oE2p6aQ!H%N3*ts7q?E'_eZXcql#n96qE#,h]&rnC0LGp':(7BP5']qho7I.cWIj>p@1>N8*K\2%pr11XP:]TmDXbW@IG]Sl.B&QWkWis9A*BQ%^ALb?p=JtndKiHl-`"u]Fkn8b`;Fm'k,Z0N?%9ij5LYb*q5Z[Q'>)7LE7K*oXrsr+$92Q`9>jr<]3-kg,`7Gg8N38Pb/)?(NPMpq%nkir;Q\H]6rmG(_fdBY@`)"5`al+O8-=fccVsH%(R7*2!U74K[$19BJ+"u6lZ*B8#G='N4a)<O4alIa5Ni<$2dK&c@btPqYfj:!j%OYU0M]SikGU>f)8C\B@QlVl4fA\(-'*61Z3W[[3W.-"Uj6r&-<_Sl9((";K4+K"'Ec&%[1.ZEE6QH5ifO),M%A@-$I,];%V]aO>D%S&Au:#GGr\$%5cd@_J#sb9nijq?FY#,`A)KVG&e/qmN$$gtgMKbrq_s^Ma``5PTH.Sd>!?S"MBG8#`ab%eVk3VXA5!Bcji&.j)`b%XY^aH\k@7Pq("kP#-e^lU^U"c(nd29+a$l=.&+Xr&PdUV7<[QU(Akn,Qt@Z=C7;Wed,iL6VCuRH2hn:TM3RN;UUF`,eB$u.oeoC9%Fskh6ru.7u"?0cb8aOnu.haL80h8t>.lJo$KuL,".E5/N9I(PiO49Zo.#Q)\d7dtRjn3q`i/d4CX0)rX(=%nlP=<qJp2H?i(-B4"%M6RpLP>t-cYqSn"2'h9[G=@4G<4u,8OfITeR"J%sNSR\3aS0?#:@-qSBAD\s8_a_$fnneJ&gIdiV;RM_92:?gZ<K/@5jgscgFj=b%jgIf<,W98'6JT68/E6pfB-K9c3E["EUD:e*T.No#ZFA=+;)DjI5gUL>R,^eU*F*'QXg'*$g)BjsMe._#?*PKV""Z?"8=??lA?XLG%oMti]?UYY$<E)m82i56)L%q6oD]>pG0:[>,IM`_64kY1nQ\VCnFIL=kC,0tfmAjRRWGqSE8ZQ/ZXN6VTomuXY`GCAab%?-E9uRX;%:pfB[>j.J3C32mUj$^8%'sEg36X\HX[n%5e1_#daTj(&*?,;*tC8mKIo60;oLa(#2\"n&2SMV,f[-J\fAb`u(Z/)lG^9%k\Sk[nk%4?(tPlh]Rqd`>l_;\Ao3"$-;HaUC/K?AS+-5kARinK[VmA(4S'"5g]`\51GRiOQtErXp9A-_V]ih03&#jt(*H2LE+UHnp:`7emf(%-0L`CT>i=nopF1$?CNC-PA$0])G=T_Csl8ND>1i+OGg(0ebJC;X@%u"q-en6?_HBu?\W"Y>/T!?Y!D(@DpG9!QJa"An`fC3)1+I[%"OhK5Z/e;Z"u*g?!NBp?g#h@3P#^;LT0VKsrU(!ZRq:bh%.NCa-tYMt#T$DlU_nJfHk1Jr65>k!IQ8$$2QcCA_sE>LCn@8JNl9A%%dO[jc5rFRUCLd<Tlq?!Q.2!E5,U9oP/lm4OaVmL#@\R5Q0mQ^/f7P:HImfC"=P@a("UY(DNZ](b@9<of?Tj@E7$'$.rhg@(2XR*P%;aO$l'Wu.NdA$ng:clmCVSnRt6J,1'7]>Y7jrff:G,ZdBKOS1*)ioa94NNNM_@n@Q,h-4C[8"N9aI(*.9hJTH=A8O(@@\]%'LA9_%G7jXBU)4nC_@t>\&g@^h+gNQ/94fMJA@^oi<:7&=M^"kKd*f*D++u@dK:dMP)[:M:=Pc;tP,s]$>Y@7_Kt^DW51EF;MS)P='=V2P%X,/>A_an9JeqSsB"tM2Q\3ctqP4TL,2JS&1S^JCn59bmq,#Ojqc;[(LH8\.aA7*Hr+K-tTBJ-U#9C2<o`I#-#X$50&Bs"mt&=%SB%(G'4'P]:rb0#)eS0!V39h^h6XALckT&%=3iDia"^:3&aOQA`^A&PICCF\+uA8;N.i%F'0M)r7=t-W*k8,b2jsLR/dOj6>rG1&C/i%XO>H626(D8/`-"lU71sUKlA1q3^I5+)A8Oh?"'Ud'$EkUUiMf-%4fE4UrDPulVGf(*;-D`@eAeXDk69O&ae+Xi7^T2=H#Xge:L$e%e4_9(FsSFEE`1:VES:JSX'1H'min""-G*bk)OansWd,MaQ:V`J=B(>>:-dN!5r+a@7dNuZKniE"@<Bk$A9!sglTpCm&mW$3DFA3]%/;ZnmR7IqY\P0Jg$C+1#OeX[OKqt4B8HmV*e3r+-AJ.j<3>##obi,Dd7]<23jPn@+,2cB]@o+RF@c/ZV:./SbL^_@Za<^GES.nD&%[qMX,hW4AG@&eOrBMHd;#jC>k@aq=$3Q?eoAhnh"ZT"!d[%L6JCaToC4-MES_Bah6KLn5(W(YZG7VbnC):1t*NM'(T'+l*S>8"cI%1c>DUU'd(6;DV3Voi4sM-n;eikVbsQGH&7s,l&\8*ipD8Xrp-?#:l68bkC+UIq3[<Y\SGaHM-EK]-iG\m2uN3I/.$W\(u'j4m'Rd%WA(ATSIJ;5G:gGE6TPTB$%&bFb8s_ES7nmtL0!q)$58`/:m`qck7*DMp[)?r`GTl:733'Z>k:O/!AlQ?)S[1'Ns>RG_TB\Se&h$1%;dBI8M_.r<Zd\(2XhSBm%P*3K'n:D.Mt*&Io>-t*?S7dceg"Kda#(ZLVZg7Z]+"ZmF@DGb0<@\AA4Le3a\@Ir63RC3/*n$;7#0P_%+24qf3/:G/3Ndq"3?D>8jf:\<;G3-q?Md(u?k5DAWYkP'aqMne<Qr!m,3s5"Ki?%QWdE^fLn,-'*k+b!=:XU_#VRAi^-o(`q6V79%E`Eq_bI9:]""JZA^;Ej?&>=.$nHN>E3GT:t,1)-m-@:t,%hg!q$"+iJ`=<:\O?ZhPZ&J'ZHp`//pd1&/!&hUW(<4RAi]XBs=j(A<%-u*t+'.FjQmMsk`Y/&=/>TmVAoFa1=QB6Z=**-hce#k+`<Uj2Zguc$A:RfE'^0EB#amuT6;7>mIk@QC+$soknHtV(K0&=u>C+O`G%K+'$l?FtZ/p_dRUWD($8_P0`<W8asYF=0n:RO`UVNV_k`a<IQ=</=h*!"^FCn]Z$:/Y>IaPL!-/TWc9\[3T@MrlB'k-)$.a]BEQ3%i[ge@5PolGLZS?FLR?s@FSIO]\+!h7rRCuN21/N@r6N99=SQ)7Sn&Oq=@VQuOA!RF#(:@2-$.rE2WI[W(5Rja#-rJaU;d^`Du!9d%[[fUISK26bP>5%E<$/3@9#=BB/jjAq!L2N95%0g2>@B4hp;N+8#uX`!1aeG29<;]!fk@>?Wmb!DMCA"aA>_udJpWP!i[bZ7ZGmB2%.<^L\6p#'Y5gKq1-C0t&THE`9mG=SSJg^@pTd51EC121NI^Kj`ca'kupXV*IB[:-_,mb$2QXig1##_1Nq%\O)Ce"N>d[.h"U.CtD%&Y2I\Wkr6Cfaq;^mKt%-;DO_@V`aBFHTapj/Ul>F)'t=c')>'$:H`!XJe(EJeN<JjLK:M\e%0R71A*/10,):h*+p0mC4[h%V69=V%A3U[k>db5ZR2r-lMB$??8>[!WYgQ3!SLZp]N3CZ%jFpn9MWD#f..YOgbsKR_KXE?X)\'2Z=kX5o8Q9`!FJgs5,.f4s<AVI]Y+1g%%qoYn]m'&OcR7!9D^cXD%8ciSV_PhP/&G8rW($u`5<,p;;,9Vi?V-mn:q'_E@ZCT&I]9jm?+tL)Po#uu:'2jd^0Nq)W,8RPjb",Ep%lmC73P+165n"QVK5^6cfQHu=[p+Df<O+M?iI<_HC5.Sg*JndX.F0FT$/JaYk5MIR#/b&t/:>qf:A,[(!(.ofr!t+jBd');Y0#_9g%\]Rm6W+M,p'La[UWbGrrKk0l#<8'`\*[F2WO=c0G:iC&<8<Ji?Br3o=\C+om;It:j`@OY4EP_@sQ.NuKC8,`\+]q8QQEZZT1VB9%%/*;-9,"YC-PNnCP?"@mH264iV!YVIR9J&jOnrf>>bub`;Q'%n!V61-cTG*f9=5UOE7'sop.gABEdE7P]fqB*l>,s&P=[(gi.V`SU%K!1c?/7tS&8nTKiM%jA*Mns$njA0kuGURm$cTuT/i\%FdK+)Zqd^=A3dt3Ml`$.qoY>I,HfLNd3jH6,D2FeWhUf#h$W]%n%gruMo%Z:D_?A6*,>SpZR`*\.k<\cMg,1"&c.$Pn>dD=5?.YF=p)91/59g82E[_-`#XTTa=<0tc*?CNLY8of)IXjH8EGX"OcZp(1-2W5%NV%>D_(4o`i4o_hHZ!$;Vhm%P\bBT)Y%f$,ft]Z/5'%*]J,GV;4KDQi7IJ\X>i+^8EJ\$Rr/#<b=m,hZ"#`I(ZfP&^nlkq^@H7^i?"5%75A8g8o>4;-s2CB`P@5k"r_(cP*9iH%L1oqPATki+!?>',r[c0h!g!l-t%t"fmn>/Yse::]hgD0lcTjhfYLn5MU&T^G99(2bEC'`%lehr9aWnYfi^1t%2,aP.96C.hWsC!;__<V?OM?^_j\"9c^U@nlpp4\M/EmS1NPH*,SinPF<MV3qAN@$@S_NK7+W?uL9V*A5*gBIM%bSC`dSV$Df)Qgt_?-$-SS#\q`An3G,;8,*9LY^$hI*Qd"k4o!:_X<se@e\LunnpKu!HF=+'dXX"o*sB)*DmM51,f4R:36/G6Elc`%WZi&37,e`DlqnaW1\H/[.tWZ.<'1P$ZAK%<YcDUOq:W_o=Ac]JgfS;%Sbam%4Cmo6Qp=?>PCI*jE>YLdC0Hbh@hS'(%4p8u?7Ser%h#,E,(Q2EkA$Gb@TR$oTYm7OSC`=ISHlqgt,A*7WD/G>\o\8NsCjd`7h;\*"6d2uUnb/?p$*2(PD,jJWM?7V&\$UZf/Wpe;pS\bI%JnYs@<Cs4A\.k!,Brf^kWZE#jlg9!]lH7bIgrc,=#Z]R,A`quGBnX.SG4Ns5V5QC1>i4/XYNS2:q'/^Lf93>)SJ`;.<WE-A_AfI4%Y<m:O5pS+mDC[@I2dlF0;3Y_2EkACf3B=]e]bVrc)bWf!!\MV!e#.cm/*]CdU3[09NW>uqlX?604CZ'GbAd6aDI\dS-TfWdk!.^g%.'PJ9E)J5+*]NtmKKe_u<0]/;gJ%6;W*neSe/p]Q83B:G0U=+SJ+t#)C'>qqq6p6dkse,6qCsA[O#J7[H!ME[(cp-1KtM5io^V1H%dmDfcLhs%b;<57ZB.d,V8[_rI-^(7*R.C=!Eo@[t8M^I&Rk<Ji9qJh=.5p;9r"2F*c[U\o<L%2qnI,:J6tmC.QdC[47JL>c>651&%JkM^^-!:DLK#f/JG51U!(.cqmp/eG0cd;r+@u^`@]%c5SbrckFTI:(J"<!"k!+/k"WugpcZDHt:OL7;$\p<F=;0o@&,R@b;Md"0U%Or(MIiUBB*F38EMC4&ke>D\:/SGfc6MXg",1LKUnb#j93<7He-4H2kV+L12SU82a-=HJ/kUd1sd:B(ko,1`.VmN8/]0dj2NLE.G\%[Zt"@=r[_1EN/=,GpQu^LWGdd)B3],ql[5]EXj[.AgtG;bHf2Jm"b.$j;S^^^1%#$^7h!mCY3^W.+]"f7A0B8V`WbTh"E6Ra."<1%D/joS1ER4\*klT4AG)do\qV5L:5WP;RQ'q*]c9B`eM5:OBHGQ]cei[Md@%UPEXX,W4m&cjB8G-*A0IEi"4UK2H^VXW:a/ZdMJJ$R%/)/(7XuT7=Lcs!4f8t(GI3u_@L(G*:$e7*;k"Z[t6OO^M3Yh75[ro0+L(L;sBWC1V7/Y/i6oNUE^0k:"2-XfmYt/A@DD\A7(faYc%2h]?LCFgCZWoBgm"9*P`MJm2&_\NBaU>?mP#lb=ZamK@Y-%()Y2,c$6HalT`#38e</;'ZY8%k)?*oVgqdM&sBDV!H!!\jEdAG'EC%i>ste6l8F3`P/ja1lg9p3tY\AS>EqZ,A5Gq!SVr)%S-<Kk"ZKo:Qg3j+-X<6`GL!Snji6rY?99]RcDNLFn9WF4,`Vr5AXfs93"/_%(GL0-#Lof<8)`MC`8UhuqbT]$'a].9-8_25ZX)LpU/IHrn0FO-d=[A%BSnfjT0f`j8``-G#]N*/#H#G+_Pr%mo8_M+]edgR2Et[D%Vm1NKfP)-bRRYM+S]*fkL`d$_%MrQT*aW2h6n08/(b>TA4+V:_$Y"#bqsOSZ;DDVJJ&X-$SOVBhD,J\"a>BV)S']?-ke/(KICQLq%elL?DU$9+CrHDQNnu=f6ps+9'?s[:q8Z=g;jd2.n'3:q"NoaE!N8kLgC4E58&PoXSMa&EGa-J1@VN*ekhen;HJ@t;4I!B/`n`I_2%=!-;sKVSD5fP"G]/nrZ)"CSj\FQ#O4E`?*E6m$1RFE)!EQT=.)H95VGS1D/h3)poVqD^Vck+76>*nj\8A42q2[do`fJjn?hYd*gI%?AkU/,:E=^C-(dEOf@ms2C<9hh.m38D5nbEPLOjN4<rWkM$r4Ff'q9fjo1'Y5=QZLb>UXsYNY,J*Cuk-Ze-4f/<M2BN)U1`ne@rp%NbAZ=a,@sCZQgMf%qc=c*ShG]M*Bd>.E?Rt&jOQ6$@`g#8M\tgfI`Oi8gO:.DQa:Jnq_IKLO0h:W#qTG^94`t')SV0a0t)aG]!D%%%=`G8I)N6liFp`kVje56mXb30KR4[$T?SC]\>CM3Pno9S0k+YeSQn%%O')Cg/an0IY=*X2`=o\WGpED$;#)Ec=7:q]ZR9@DZmFWu%,/ghaecQ1&h7S4IdN_d=dFf--"mNag]H.4RnVEH!rNm9A$+ZuBqC%F1_$YN1U%6*'`[\tS>o8oM!8+;b70d31Am*M_bDG\/Y2;MB%[Eq=1Ac%et^!MUXjP+&@3WE8-pQ_fT3lT9(>g*4N^p5NR^au(N`>hDsM7=,<X)]_p$O:=RI?jI9;#-sKpk0B-]OMOI@%1Fnb^t!a%C)MA9Is.^2^9rNu6I!,8bJLP:kQn>_5!c$'HY^r0fJsFbSio&3#">JP4g1GF>QsYRQ(LsY"k3)jVWeQJ30l>7kP5bPZh]#YrWn4T%mYP$GV]^mnd5o)OWK>=%chI\DS/L2E*1nJ4P*:9br,%3Ma\U-QOOb\LVg-$.GqgbS5'[prAWk)>]K1,jU&%F(o*HpFH,kA6VTIUU%Q)IHr=ioOGT%fl3a[^9O4CctKh7B\6S<_J]@3n7Lc;E#c7-G'698)`?0aoU%KFWeJ<)FB@p(A6`=4`.EM'Oi\<20/pJGcsILsH++%U+_DMS^Se?$]Ol_b[)8tHk$7:KPbps!0gW(nMt"qT.@[7pfo]tnN#pM`?m(oF%57p_K.UFT?.8)=k$:c[Xh(tHsiDXj<KDLSF:NF%Hp6AIN6SI\heuq>:.U5dQ*2Ai#=NQm`@QX+[[<aK:h.+ZH#Z+980a7.qWXA#nS!k<*YXRT**BX\?k,lmeY<CRR4+@0b@tG":Z&Xc%S4RD*L?3s]KaWXsN!:fZ_lt,BL$9Bc6o*JWLp*3[%)d`6"e#:OCl-=9o6VWqC$*#e*9*J9'9(*PLNss*<J+nS3cTDk]m^F7BuhBW%=:*3*!F&0<Se.JrE\iLL@V7F4G-QEC;[5Ihd-C7.I^kfSeuoXW?7nl+[N=b972qA`=mce5L)QfnIIY1DO[^5-1Qa!0^FUQ)j*cH=%d!M^!%=S7sL%7nT]@Rd5k279efBeWFP=Nc=KqB<"71)jHa9#kVq22p[P^m-1Vq-SE9)-E^qUs<YF<mI/TjclNn:G%AeXX(%eW$>l%`FYB!XaWd<KF!,(HZ:8)7/V`b%>m[_&X9K?)`:%_AT,\$P*CP@d<B<<70on1"[t&G[]DqfD6-/\1[]XAq#.SP*!80(%1WXm_1DNA%CQ-u@CpG]4Gc*t<J;?oFKd_aYK%7pVG$4dFj0D:ak*<!-&f*_M._Bb'B',dkGT;!X7-:Egnuq\N/=u8[Ko!IdlLcbnq9"gIYi<?n%Z.'0q5lTInch`2\fZ3PUf&dH48M:,*0:t`e^oFl%/(0`!G0,X&T"/I"!*NON/cig-E6KppGL^k-WoOcmEKUmT,sqN#5_"MkCJh+7%=Ks5%J&KG)%C7:$@$]Kig_-C8O.j*<[sTAPE_?C(ImQbI[ISq5oWMXVd**f039oC2kQKU[92(#Q3K96g,3HruiEUW@:QLPa.%K-8%<="_f13mS,H-!q(f=]d0*0eA.YP_]:k7t=67UW[hZE+:u3?WVFlMWP(4`gRF3T3Qu;4YaE%G.[*>L]lNN,P2$qo"t6\Q.?qqK,CS%!Ta"*f/T#qmr!l28/MP0qtu<mA@<0nAG/J';A<i6M!@BKC_[o5K!JNN*bjaP7V[C1h,",n"!s,>#uTO"(ps20?ck^KdB*rNB&gF4%j8`m3bt#.jL1gf#&-Gl<_hl<sK'WgS"k4_8.iUOiGYDo?D9M[q6kaXlPO',r)4O*tXJGF;mPioo9+l7<a5bRC$7g^FrBtoT)IA,0%*Q31ipO%P/bbU(8:V&nAGJUuLAU/?NXWl'E99c^Y<=`N#De?BWnG\>-!Bj%Gp2VkR[>4Xr$kqoV?Gk@0;7qfnO:^2]Y2$hs-tN\;%g=<)`VM_?7I#%.)Z[*>$4Hi>E'/G5'5eff8<$KUg0_k4$Q`*?5fH/`1=>Kt+m;hr9Q[!?$(#Fs_nTXR=N5OPD?2YdhQ\9]4]Z9+q%'fVA%D5YF?eLG,1d3dEOH`WMo''nk>FW&feI%J<r/Kg2/2&T$j\:XK*S0-!a?;P"1a%8otMPZo'H9H6&0!fu-9J26+'kFW:SSFM-%'bB+ihO<t/l/+YBerPGi!:J'*6&t?S<oibtD\(TGA6rJbG_CGhk&HFqPHPfR'ag4"CC-Z,o6uUsJOIL@g`5E0$=[mM2-LQpQOh$)%%Y8CuEXGQp.t<JgI&8l-`$O6HJ_OZoJj?gGT)i9o=!)/H6:8Z.gTD-U>Z&m^AKCNj]$6U78'l+(L,j"ag>F;<pb!ku+JNA>3.!UE%GArN`cAJ.K&Dk7jqVm+4(n'X>ikc+fYfAO.6nZ'!'Z70YZ:=u"LO.7kNU(RbAUtJMGOFQTY*]hFZUt6uX>(I.SMAbPT'Y,[Clb9$%GAFB?d1SahC.>Z$e_Ik[9Q7LW/-E/)rl`V9"^shBIeP$%mklSDm*":[\Ad2m\&oJ9lO1jBT?b?X5A_h>18b&]/a(9!N7A84`$SR<%8&8"RE3e)Xo!_Csrq6Zq5G,0l3]A)Fk6^#Aajn^9r;Z]j++F3'6`>F*p<O2Iii<Z7MWqKSdn%\P_[79_aRPUh;(Y/#1,br1gRV$M%+?sf`%rBp=,G!Jqc$gAZ[`oU;+=jbSJ=J\PS-a'P,%n5\E2qme)9@h3<?QA;[u0+XeD0&-JXmgRl]llU-<,_Pc["5bmr+d_!>6%s%n]7YtEM%.W:#=MfZ]2s[5*tdCK&7_!dTY7(aLL-ig/@O<l:ZVrh\.G<U"%CD.cj">pk0g\FZDXPQGb6F=845E`-"p0akZ!u-qa<%%e(JJZXV<?^a!_c93t&sp7isnr0@lLBDO0m1FDUOQ3_h?nQtN2oo^:=gP]7'm%J7;]<\koTdM:@-I>^BQ6-V$Lp<Q;em]?n-+,<>(%-c<3J\UHD]%WQ1hq'sR:l*"O+4@Z$eb$*`K0?Hs3a-IQ&O:@%>lE5)h6m]T>Gfo)"\^uHj_ti+b>@=`@Rhl;,;Qpqn_.dPDR6@*Y%hBV/%ZK$h9eC?"(bu0@1T:3sNG!f"L^DbNZF-(oHG#&ka5-6?L3Xq8&PhbVOXX!"XYpG"ZSVl7d[=/9LUkQ&kVca2Ok1LIm%`O!%%W_Tm;i=8=$'\8iG2O4`&>_ipkZ,-_s`A>`X'8BckF&Qh@g3^^+>/AXHLQa)C@SA:q.Q.@<KL#7u*!).0.i9VM&S$ETZerT=3;jU8%FqlPU#CN>ljIMJ:%WACONGRKppdaHQCoH46mb2@1IYOn)o9uJAab65Dl-m@BYLg[V_d(uY=c1-2oPeViRC$?M(Pq^V%4S:Rim?(J%*We@$=GshSgj8D1HnLBrhSj(5\]lje<!"ep5E2@:/0+o1mgqNporB,E@AI$hOa3R(F\e@P'HHkpk?(L"4FoMJVh1<S5ODK?dP)r$%%,L>Y78'NdG'7!b6`mo]1)*_nJs(.,;`VQsb`W@qX5MLg8^N0`W-6ekGN(ZJ$VPP5B(AmS,!Ju7[NJ=S#dtet<MigUC:Hs`I8/*E%UB/tR%%.T_FEK)kYLXe)D:R"*//SUSO^dOd7D/Bc'iOl_iR6*5*lc;rB>HF:Tg8moo@Hu_pF0ulhR,gD&Z7<$'t&[oJog=[,>cTU%E:bk$.hAZ3<`BcuATqoLobc^ZdcKSkO<s=e9c$reNO[&MpHp!caK[f^bolmX4^S^L>7T+?'[o.7f8F9TDkq2j<OoV7PKJR!?`#_6%SdYsU9X.d4^U(8<RlnSVP5C*`^HrgPPI8@76_O]dNU!L:$H'*E8'82cdUl>iNNX`DXrHgGANJpr[&TE?Q"bq;97J=4MRsV'nGMZU%HD*H`*+*1I%'q7#.f1ao'NO/(.$nK4nrm^Rs,rrsP1]X[Qr2:@&bA#1bYdiBR+DujbLha)F3"TaB9Yq)\Zg%YZ6B'Qfj/o>,"ejf%_UE1;Gf=>=:OP8VVBrC&Q'QBu@;2)-:t;up]hjF[.os9IKI9UYXYB;g)^:o[]<YQ3oY$gY,!8T:?$`[ZM-eAdCrbJJ@C8u]?Rg`r%ief0Hr3WHN"U@BM5&%K;fFmV)C/]0rVmdH5$t6USC%>Jt'>a.K(CDTu`>+rl&un@do<gdc,*&c<KkntTV43!rc%"f1(Q^,+bar<C%]#&;d9*['PiL\>^58U&h(4I-)+O6-XJA)Y[e.OcE\eD\EPXIjLDdnn7,6`MUqR65!?W][Wp%7a(\DuGip^KTf%d*t;$2.lBd"0%:%ldUmkXdQIs+FLS*qei$^Zce]4r!LJeh3#)sN_Jt7"T,u[]12kFM?99Sf(dq,Rh:<`\i@!B%U$Vk=,i8:jd3TOC0Krplj2$5!/(Sc%.6&n-[l[F2b&,d4W9_kO=Za&O#?K81!W3@ahbh-KiY;X(4gr>K]N@6T5MjB:2ETL`[>ItE:C8#j5E@%<-`hOL=IbbL<QMAK*nS<=%]njncgfn@qqQarm6^MM0m+`@m2EVM@a?RRmf=gO%S5H1N/G1OK/=ZQ]p+?R1&e!j5]2s!ZLk]?DT0)f=S(4j:0X:"*]7Qj,$Gm6B%>8#F^\6A5L*A,[&M\KmNKo@6,##jR.YK.s`<QceL7+:2K670upCu]o[8Ks^H8TM]PcZrc,R2a2ri?p2KqAH&Fn#0R+]#2*:]1S:6%JtTW_g.iQqrJoQ+a$bM=5*11rg`ER*k4a]&*U#M(e:@5[(9sFbr:?[^RFZ()0%3)-jL)L$pt>(:T#t,is+_&!4`(gn^;f5?S)*Eo%Xm*B$\*1#b#s5U:IJCOqcI=Q-Bq<g[UL0W+_`U(_Mn\JC=RhGN,I;OV`Nh*k_\?=3e$Rb4!N#B'lFOes@Pht6kY5I/e2mFG-`aU+%M6FGJQHq9^<46.:F_\j^*AcjiLg5u#JA"JVcgH&Y-F$LVMm3Uj)tpS>7<_Z@T5L(.c05h$o@Z6]Et?,t_b0#MKmYjSWBp^LE3C?(%G$$)>frP1#B[H!)*u)r3\K>@_9hng7^[_,::@fmkUp]W.1WF/+^,WJNmN(r=GSMNX/:rGj$m<861"th8S[R?A;]`"YaKQP)B60)Y%9\Xm`cNXl$\#k+5kl,8'-'W"Mb[\'Y0]R0=mb'/\4&#[7m_cJ%g(:dg*8^"0`#hd:cG34::2Xm^GDK('@N!l\h/8:.4^o99/6IQ,%JXfqBkG<k6JLj@_.\XY<$L&dYM8g2OVhYq56]eKI)`O]&"Thng)@GhUqnUcoL5(5[lSTC/Vq#_?.hpY'\We!>/;QWDM,cat'#QR@%QrmPWdbYY7:a"tmQJl>Z/ZF`f38>1U:`tjeZO-jS0.u",+E7T!$4!`R3K:BYnsF3[(r3Bcs2[NXI6,"r=:#-4gQ*6[/<_MLJa_(R%oe>JOK$`]@D.O?U<N+6egWBZc\hX;sY"Y`&I9W+i>umgd\(f'TkO!+t!d7k;:)e1WR=O'oVEXIXPmPNKANE?Z[PA04Ppq4)Ppor#%b%*?a<[OU6Z81*H/h<-Fq6i&0<S*KB/AA8\5]/)Na'G%Taope:1)32-;o)pSZBd*n'=tfZ9IBMWaooSb.hdS`?^WV/bK9rO>ui;V%pMFJn@'2#D->]bWpGpK`aeX&bR1-[.9H`?+1'+qh9Yde]'1R%KR5!e#aoq(B17:=2<[Q:agWF%h^8t#*J!ZGBOR(']2WBcF81Tm8%!;uIKpBU;&,V,rP/rb?M7f$erpHRV^LhT=9O9t+)n!O6&if35p_ihn.`1*./H1@Y"h<4.Z@6d]U'?<pu+Gq!;TQuIe:k(e;M%b^-%f^[u)Er]bBJ1HMcR:u\Vjj-\6mBFd^.ie%q?N>P0k<n/T9*>_qOI^''0].+-I*=_*>W8aT\Do\q5;A\5b[B)EVFgi47e[\512&[q%kP\gZQH'K0T.ml4f*tYo&($%M9m].'%QL5b+H6t_^`'=p[EX`lB:R?m`FV6SK\eC7O`uS:fOe.S(@TW<?Pn-0q,rN[r,_qiqNV0c%4gLj4k1p<"6ZdZa`"MGq5MC=Lp[FAf@`3oJYD:6jnVGk-LGLqt0eaiW<W@*YCeOfea6:^th_9,En3jqn"0A"0!9E#pbXk"o[L=/k%U3PIHRBd6^CZ*!KmPl1I&U59TR@NVHbQ.S1dlu>A3(:gV!.]3]ihR2a$6ZHh8"?tj7*.L-M*B32gGHQ[h[!FuUs5],TatSAX>?8r%Q<t\^-;[l1@[ghpLG3\7WLKM]+[+86*_pP)Z!TmN\8Cr*/AD6;YT:1aB2fsiX^C&,<rC8'9t!t2As-(i?.4O<#:Kl!,P;_%RO5u=%&m9TpmdhbZ//!"LK^>D\n:@]#irJG]iYrNOHjnU-4%;.0DpqSH]0.updu'@fUQ=u2e_6XRc@P!k%CHnU37Y=8-I%A#2_[%clg!^?%mupoo0ma)R9sIk!0+M-,%TNbfib.tu@u3XVAYe/`=cVpkm^IE-oR-"028FIqmVm6Zp<e<D[R:^Qg$-0HSb^eGQ!\9!3;UKib!@d/%"_S1CPt>q31EdUs40qo_d;s]=pE>#K6!E_r6GAiqJt!nhhg_V-g/YdH\qP-Ma#9jUU]0rnRlg`CL.*EhgtUL^pN5*d7,OP"W9tFX%#MjOR'YNK(WZs%*]4$4!6:E]!J2jb[SW6[lb6!mB.i9=Dm,^;O(==q'4KoGJ2dn]\7I/_b02WI/ZPSFW=4GZU6s=?A$MW+2O*S[$%2"]NM/>W15+Rs(QGnRXQE3tNBZD2`d3m-MPFYcVEr/_r2gm]Ckj7SYrKqJL9mBc%d=Lg)h0te,<(,*W7g#73pKcV3pp\j6.lq"9c%>Ob%!JF0@)2^FOX6\JJ8%h%F3,DF1kee=?e#[RLE_'aFon:p6Ck/,pce9A5!E,e7,TO:tV\KN?$k%WM+.0Xq_GbGsZ<(gFJDFhp(%D?scc;<$Silo<o4"7L+ub+*oOcA_B_hIasO,Bc)UDc:#l1A\9S5.@:hb<<]FBOP$.KtX5E`mP?Hr%p/U%m6uIcfcsg+#71ai`M$g%*glKT"ZC^LhHI3QK6?a;9'^D:]cCUC,MI5(LCMrg7ptLH*Su[nQKtnX6/2/)%1X`%]Ql;',eqsVnA9nT%O)0+bF8g(6mn-b9?aF$%qcD/XR?[Xb<g'In3!iBKga-#4m,MG^deSIm[Z!6Z6-0htY9cm%"Pr@ieWgeZk)SETM2i9[*5t\]%L#qH9aLo`8/\rlm,g5kT9#;T%j3.F0TVl(c2QGhTM/mlP.G+4HnB?op_YI4+kCBk3c$bT**@_e-lCEaJ1E^0VF:0KQQ4Q'<c&bT`XRMAeM;]X>Xi"FdY6T&&Qh.H!%YUtjk(HY@W.%j`Q+\oDuieqgNPG;VUGc6"%2;FMP:QH&sZ+`3m[U\`_h+;n3I/c!gLlW:^`u=anPosP4,Q7<BbMW:f7>K;lZBrDG%LP!?kpq^\Dp'E7aIE,#<*OV#K?sZlN@.P:KeQ-OW?!,W>XkH%#.@/^j[=Ld%,1^TR*qP=Z)8O\_V68Q4^7)oNgVQ*KccC9$>.=h&%htDM%\8ch+AlT3t%W6*lUP1dl>e#Jf\`!F`0qPX"B=7Jejl/E5mYA>t@g$&rIIY=.`uI^k`>]%Tmd"ra*[?h^W)CWG9;P5!"6P0q%qGi>!Q>.(ACnG2(L7IX&%'A>So!*A)q4Y4nIEm4&@_]2^#+KH`;VO=e7?b[.7%>rQH4fVuq:fcBYLqpXP'/a'6r[UJln#&'!oefB%ZINFJ31I.r#V;S:=R?5<pA#IP`A,;W/4Un5i%scdjXWaC>D+A3,B44P:/M3MJ45E5ne2c]&Om.DI6im=NLpAR\8XjUo+RG=21PLZ%%1ejfk1daaq!BUoeZoF`c<p"OS]LHEP?Eo.MaA/K.9$ErA&'ckn'OH+`#"bFm_J!sWkjX37Hc'WQF?/]1:?(7Sc%_,b`[&?E]PcW%V9GFNDM,Z!Y1LREZY>4O#,Ed&K%B;-V1LT!Hp8$Dg?+cnoH?aGd@\\$r]ofu_i1*e'*'rX8*o:Q4"e>67aL^_JA09(+`Xl!U$V\l%NE6<q6?.TC6TZ;E%hO-+#hj8qg^]j?@nmDW5qE&TIhrrRNg'Jq%.m-65']u;mqZ%Q@B['=ZVn-FFATC=brlFb/<01R:U^*'"qTR/%iBu?Sd>,!,g%3cFK#X:P+1T%fM^N>qq*CVs`9>b9m?D%%0?nAEB39WUP$8*WI-T4#rXossm)Ytk0G3PqGq+PN*qK#1Su;OJ.6=qU%UYAH>bmnQMA[tKWn78#7rG$>A]>P@S`pW4b-1XF!1%l6n#%DjEVLGkr_E$2)jbO;S$.0jm0[,Ob'YLfmmEuRKS9a7Z@8NG&\1+QT%6Q+$cZYi9Ko=QC/ibe;K,9C$^Tmc^Hh6KEged)QLg;+<@";?@]MfoqrSRWDMU:1%W@E1K25=%?I"6Q#E?XCU>n6E.Z-X?0cg$Vh2%-HG:I5OFq5e"_o/Vb^?-Y-Za)nfqDGLR=J#2#0G2-S`I%hElO;iJeN+Kk:!\TGlRt\j6!d+3U];8Fs`_O>4":o3'*pQJ2]'fG<@o%fl;7Mq*)jP#=9WRWmEt\[PBI.0*9jB-9&]n\2U-D!;6$TL54b.^7Ma"*G,#l:7^5nnE[n?_cHg9Vk<nIc[Pll%tF;Bf+5Xlmb=q[%s,YM+o7Sg`J+bhYI/WU2O+.(dnbEu.rqX1pJ,&rlGQ7O,0E:/*hu)Wgs7F2NJ,UPQGOrApr9/?Sp!']"1JErRrTs!eqe,roPi@aQ%o[S.Mr:&MYs6bqeAIJP4a.IkT[m,9?Rr<fTq2`8dlK>A&^OH!Jmsb$Mj7!TZo_b=fPQ0=^Ikf9!pW^JQE"6j`r3O05rgRj*rnCe/%GCF4TIJr8s?[VaoDuSSmrnAO/qu/hTpRcp*_aE4KrJ+a/lG%Oqo2C:.[f5qugi%qT4AGV8FImC$3no-XO=a6,j(*5jl/oa/>-.eM%WEcBte@V!W(PWso?h#Q9GAd3AP?]r'B3.qO*)XBAfWARemm*#mIJkU(qlA9)0E;S)mcU>N`&;lQs*3&oe_uMpO$XETpp=53HX7/f%Et'8hl-P^8&K]a9"_apT""D,@`aGn>M"`lFo4auok=Bd2.J,BUSEmt6rQ8JKba.Z!I[PN?WjMfp+9(:Q2?)q6pocpXa!^*ceE-:c%J,EY$a8bAdhdY19(T'Md%=uu.`?"J%p(qb*rdX%eQH`2plnK8D4hhhG[D27GLg;lDOF:\*GPS_EUUj,XmYC]ZC*OpO+RI"M55*O'%AER.+\),k:)IN:59i-A;i$A+#6WS@5J0jX9@n%Me3.7o;O!bCZs(',F&TB-?+eNORC.%acrn#,=Q&,J-1:bU+YJ0l*PFqkaqo:r$%p6U:%om_A\rLa#0Vk<nJIt.F_DuT2%YCH06c1diZr@_OXhet].rU%(uDr:Kaq(J@irV\\TEZ13]56&ejIJ7YFcCaUtTD[crs8"B4%rBK785Yq~>%AI9_PrivateDataEnd