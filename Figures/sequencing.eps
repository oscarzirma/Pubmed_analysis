%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: sequencing.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Jason Schwarz
%%CreationDate: 8/7/14
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 10988 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD18FFA8FFFF7DA8A8A8FD79FF27A8%7D52527D527D7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA87DA8%7DA8A8A87DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA8A8A87DA87DA87DA87DA87DA8A8A8%7DA87DA87DA8A8A87DA87DA87DA87DA8FD14FFA8A8A87D7D7DA87DA8A8FF%A8A8A8FFA8A8A8FF7DA8A8FFA8A8A8FFFD04A87DFFA8FFA8A8A8FFFD05A8%FFA8FFA8FFA8FFA8FFA8A8FFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8%FFFFFFA8FFA8FFA8FFA8FFA8FFFFA8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8A8A8FD1BFFA8A8A87DA8A8A87DA8A8A87DFD13A87DA8A8A87DFD0BFF%A8FD33FFA8A8FD1BFFA8FFA8FD0DFFA8FD12FFA8FD2DFF7D277D7D52A8A8%7D7D7DA8FD08FFA8FD1BFFFD04A8FFA9A97FA9A9FFFFFFFD0552A8527D7D%52527D527D277D52FD05FF7DFD0BFFA8FD10FFA87DFFA8FFA8FFA8FD09FF%7D27F8F8277D5227F82752FFA8FD05FFA8A8FD1BFFA8FFA8FD05FFA9FFFF%FFA8A8A87D527DA8A8527D527DA8FF7D52527DFD05FFA8FD1CFF7DF82727%2752F8277DFD0EFFA852FD0BFFA8FD1BFFFD04A8FD0DFFA8FFFFFFA8FD06%FFA8A8FD05FF7DFD07FFA8A87DFFA8FFA8FFFD04A87DA8FFFFA8FD04FFA8%7D7D52A87D527DA8FD08FFA8FD05FFA8A8FFFFA8FFA8FD05FFA8A8FD1BFF%A8FFA8FD20FFA8FD07FF7DF8275252275252FD0827A8FD15FF7D27275252%272727527D275252A8FD05FF84FD1BFFFD04A8FFA8FFAEFFAEFFFFFF7DA8%7DA87DFD11FF7DFD07FFFD0A7D52A87D7D527DA8FD04FFA8275227527DFD%0BFF7D7D7D52527D7DA87DA87DA827FD05FF8484FD1BFFA8FFA8FFFFAEA8%AEA8FD04FF52527D52527DFD0FFFA8A8FD1CFFA8522752A852FD0EFFA8FD%07FFA87D7DFFFFFFA88484FD1BFFFD04A8FD09FF7D7DA87D52A8FD10FF7D%FD07FF7D527D7D52A8527DA8527D7D7DA87D7D527DFD04FFA8FD0DFFA8FF%7D2727522752F827F827522752F82727F82759A8FD1BFFA8FFA8FD1FFFA8%A8FD07FF7D2727277D7D5227A85227277D2752F85252FFFFFFA85252A87D%A87DA87D7D527D7D7D527DFFA87DA8A8A87DA87D7D7DA87DA8FD057D8BA8%FD1BFFFD04A8FD0BFFA8A8FD06FFA8FFA8FFFFFF7DA8A8FFFFFF7DFD17FF%A8FD04FF7D2752FD04275252F8522752F8277DFD13FF84A8FD1BFFA8FFA8%FFFFFFCAFFCAFD04FF7D52FD067DA87DA8FD077D527D7DA8A8FD07FF7D52%FF27FD077DA8A8FD0EFFA8FD0BFF7DA8FD0EFFAFAFA8FD1BFFFD04A8FFFD%05CAFFFFFF52A8525252A87DFD06527D277D7D7D525227A8A8FD07FF5227%7D522752F8522727277D52FD0FFFA8FD0AFF7DA8FD09FFA8FD04FFAFA8A8%FD1BFFA8FFA8FD0FFFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8A8FD22FF%A87DFD0AFF7DFD0FFFAFFFA8FD1BFFFD04A8FD1FFF7DFD22FFA87DFD0AFF%7DA8FD09FFA8FFFFFFA8AFCAA8FD1BFFA8FFA8FD0BFFA8FFFFFFA8FFFFFF%A8FFFFFFA8A8A8FFA8FFFFFFA8A8FD0AFFA8A8FD16FF7D52FD0AFF52FD0E%FFAFAFFFA8FD14FFA8FFFD04A87DFD04A8FF84AF84AFAFFFFFFF27522752%52527D52275252527D7DFD0452A8FFFFFF7DFD0AFFA852FD0BFFA8FD0AFF%7D52FD0AFF7DA8FD0DFF84FFA8A8FD14FF527DA852FD047DA8A8FD0AFFFD%0A7DA87DA87DA87D7D27FD04FFA8FD0AFF7D7DFD16FFA8FD0BFF7DFD0EFF%AFAFA8A8FD14FF7DA8FD067DA8A8A8FD0DFFA8FD0BFFA8A8FD04FF7DFD0A%FFA87DFD07FFA8FD0BFFA8FD0EFF527DFD09FFA8FFFFFF84FFA8A8FD1BFF%A8FFFD22A8FD0AFFA87DFD07FF7D52FD047DA87D7D7DFF5252FD0EFF52A8%FD0CFFAFAFFFFFA8FD1BFFA8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FD0AFFA87DFD07FF7D7D275227%7D272727527D277DFFA8FD0BFFA8A8A8FD09FFA8FFFFAFA8FFA8A8FD1BFF%A8FD2DFFA87DFD30FF8BFFFFFFA8FD12FFA8FD08FFA8A8FD21FFA8FD0AFF%A87DFD07FFA87D7D7DA8A8FFFFA8FFA8FFFFFFA8FFFFFFA8FD07FFA8FD0B%FFA8FFFFAFAFFFA8A8FD11FF527DFD08FFA8A8FD2CFF7D52FD07FF7D5227%F85227522727525227522752275227FD17FF8BFFFFFFA8FD10FFA85252FD%08FFA8A8FD15FFA8FD0BFFA8FD0AFF7D52FD07FF7D7DA8A87DA87DA8FD07%7DA85252FD06FFA8FFA8FFA9FD09FFA8FFA8AFFFFFA8A8FD11FF52A8FD08%FFA8A8FD38FFA8FD13FFFD07A9FD0AFFAFAFFFFFFFA8FD11FF7D7DFD08FF%A8A8FD21FFA8FD0BFFA8FD0AFF7DA8FD12FFA9A9FFCFFFA9A9FD08FFA8FF%84FFFFFFA8A8FD11FF527DFD08FFA8A8FD38FF7DFD13FFA9FD05FF7FFD0A%FFAFAFFFFFFFA8FD10FFA87D7DFD08FFA8A8FD0BFFA8FD15FFA8FD0BFFA8%FD0AFF7DA8FD09FFA8FD08FFA9A9FFA8FFFFA9A8FD07FFA8FF84FFFFFFA8%A8FD11FF2752FD08FFA8FD39FF7DFD13FFA9FD06FFA9FD09FFAFFD04FFA8%FD11FFA8A8FD08FFA8A8FD21FFA8FD0BFFA8FD0AFF52A8FD11FFA9A9FFFF%A8FFFFFF7FFD07FFA8FFA8FFFFFFA8A8FD11FFA8FD09FFA8A8FD38FF27A8%FD11FFA9A9FD06FFA9A9FD07FFAFFD05FFA8FD11FF5252FD08FFA8A8FD15%FFA8FD04FF7D27527D52A87D52FD057DA87D527D527D7D52527D52CAAF8B%FFFFFFA8A8FD11FF7FFFFFFFA8FFFFFFA9A9FD07FFAFA8FFFFFFA8A8FD11%FF52A8FD08FFA8A8FD1AFF7D7D277D27A82727277D277D27522752272752%27F8272752CAAF84AFFD15FFA9FD08FFA9FD07FFAFFD05FFA8FD10FFA852%7DFD08FFA8A8FD27FFA8FFA8FFFFFFA8FFFFFFA8FF84FFA88BAFFD13FF7F%FFFFFFA8FD05FF7FFD05FFA8AFFD04FFA8A8FD11FF527DFD04FFA8FFFFFF%A8FD1BFFA8FD047DA87D7D7DA87D7DFD0CFFAFAFFFFFAF8BAFAF84AFFD0E%FFA9FD0AFFA9A9FD05FFAFFD05FFA8FD10FFA87DA8FF52A87D7D52A8527D%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FD04FFA8F8FD04%27F8272752F827FD05FFA8FFA8FFA8FFFFAFA8FFFFFFA88B84AF84FFFFFF%A8FFFFFFA8FFFFFFA8FFFFA9A8FFFFFFA8FFFFFFA8FFA97FCFFFFFFFA8AF%FFFFA8FFA8A8FD10FFA87DFFFF7DA8A8FD057DA8FD0AFFA8FD0BFFA8FFFF%FFA8FFFFA87DFFFFFFA8FFA8FD0DFF84FD08FFAFAFFD07FFA8FD05FF7FFD%0BFF7FA9FFFFFFAFAFFD04FFA87DFD10FFA8527DFFA8FFA8FFA8FFFFA8A8%FD31FFAFAFFD08FFA8AFFD0CFFA9A9FD04FFA8FD07FF7FFFFFFF84FD05FF%A8A8FD11FF527DFD08FFA8A8FD23FFA8FD0EFFAFFD09FF84FD0DFFA9FD0C%FFA9A9FFFFAFAFFD05FFA8FD12FFA8FD08FFA8A8FD15FFA8FD0BFFA8FF52%FD09FFA8FFFFFF84FD07FFA8FFFF8BA8FD0BFF7EFD05FFA8FD08FFA9CBFF%84FD05FFA8A8FD11FF52A8FD08FFA8A8FD23FF7DFD0CFFAFAFFD0AFFAFAF%FD06FFC3FD04FFA9FD0EFFA9CBFFAFFD06FFA8FD10FFA8527DFD08FFA8A8%FD21FFA8FF52FD09FFA8FFFF8BFD0CFF84AFFD04FFC3C3FD04FF7FFD05FF%A8FD09FF7FAFA8FD05FFA8A8FD11FF52A8FD08FFA8A8FD22FFA87DFD0BFF%AFAFFD0DFFAFAFFFFFFFCAC3FFFFFFA9A9FD0FFFA95AFD07FFA8FD10FFA8%527DFD08FFA8A8FD0BFFA8FD15FFA8FF52FD09FFCAAF84FD0FFF84AFFFFF%A1CACAFFFFA9A9FD05FFA8FD09FFAF5BA8FD05FFA8A8FD11FF7DA8FD08FF%A8FD24FF7DFD0AFF84FD11FF8BFFCAFFCACAFFFFA9FD11FF7ECBFD06FFA8%FD10FFA87D7DFD08FFA8A8FF5227527D52FFFD067D527D7DFD13FF52FD09%FF84FD12FFAF8BCACAFFCAFFFFA9FD06FFA8FD09FF84FF78FD05FFA8A8FD%11FF52A8FD08FFA8A8FF7D27522752A827F85252272752F827FD12FFA827%A8FD07FFA8AFFD13FFAFA2FFAFA884FFA9FD0FFFAFAFFFFF7FFD05FFA8FD%11FF5252FD08FFA8A8FD07FF52A8FFFFA8FD09FFA8FD0BFFA8FF7DFD08FF%8BA8FD0BFFA8FD07FFA8A8848BA1A884A9FD06FFA8FD08FFAF84FFCFFF7E%FFFFFFA8A8FD11FF52A8FD08FFA8A8FD0CFFA8FD1FFF84FD14FFCAFD04FF%CA8BA9FD0FFF84FD04FFA9A9FFFFFFA8FD10FF7D527DFD08FFA8A8FF5227%27525227F8272752F82752FD13FFA8FD09FF84AFCAFD12FFCACAFFFFFFCA%CA84AFFD06FFA8FD06FFCAA8AFFFFFA8FFFFA9FFFFA8A8FD1BFFA8A8FFA8%7DA8527D7D7DA8A87D7D7DFD1EFFAFFD14FFC3FD05FFCAA284FD0DFFC3A8%A1FD05FFA9A9FFFFA8FD1BFFA8A8FFA8A8FFA8A8FFFFFFA8FFFFFFA8FD04%FFA8A8FD0DFFA8FD08FFAF84FFA8FD11FFC3FFFFFFA8FFFFFF7E84A1CAAF%FFFFFFA8FD05FFCACA8BCAC3FFA8FFFFFF7EFFA8A8FD1BFFA8FFFF7DF852%2752272727522752275227525227F8FD17FF84FD13FFC3FD08FFA9FFAFA8%A88BFD08FFCA84FFFFCAFD06FF7FFFA8FD1BFFA8A8FFFD057DA852A87D7D%277DA87D7D52527DA8FD0DFFA8FD07FF84AFFD12FFC3FD09FF7FFFFFFFCA%C384AFCAFD05FF8484FFFFC3FFA8FD05FF7EA8FD14FF7DA8A8527D7D7DA8%A8FFFFA8FD08FFA8FD04FF7DFD17FFAF8BFD12FFC3CBFD06FFA8FFA9A9FD%04FFCACAA88B84AF8BAF84A8FFFFFFCACAFD06FFA97EFD14FF527D7D5252%7D527D7DFFA87DA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA88BA8FFA8FFA8FFA8FFA8FFA8FFA8FFCA%FFA8FFA1CAAFFFA8FFA8FFA8FFA8A9A8FFA8FFA8FFA8C3A8AFA8AF84A8A1%FFA8FFA8CAA8FFA8FFA8FF7DA8FD15FFA8FFA8FFA8FFA8FFFFFF7DFD24FF%AFAFFD11FFCACAFD0AFFA9FD08FFCAC3CBFFFFCAFD05FFCAFD07FFA8FD1B%FFA8A8FFFF7DA8FD1DFFA8FD05FF84FD05FFA8FD0AFFCAC3CAFD0BFFA9A9%FD07FFA8FFCAC4CACACAFD04FFCAA8FFCAFFFFFFA8A8FD1BFFA8A8FFFF7D%FD23FFAFAFFD10FFC3FD0DFF7FFD0CFFCAC3FD05FFCAFFCACAC3FFFFFFA8%FD1BFFA8A8FFFF7DA8FD07FFA8FD15FFA8FD04FF8BA8FD05FFA8FD09FFC3%CAFD0AFFA8FFA9A9FD08FFA8FD0BFF9ACAFFFFC3FFAFA8FD1BFFA8FFFFFF%7DFD22FFAF8BFD10FFCAFD0EFFA9FD16FFAEA8AEA0AEA8FD1BFFA8A8FFFF%7DA8FD1DFFA8FFFFFF84FD07FFA8FD08FFCACAFD0DFF7FFD09FFA8FD07FF%A8AEA8FFA8A8A8FFAFCA7CA8FD1BFFA8A8FFFF7DFD21FF84FD11FFC3FD0D%FFA9A9FD10FFA8A8A8AF8483AEFD04FFC4A8FD1BFFA8A8FFA852A8FD11FF%A8FD0BFFCAFF84AFFD08FFA8FD07FFC3CAFFFFA8FD0AFFA97EFD09FFA8FD%05FF83AEFD04FFA8FD05FFA8A8FD1BFFA8A8FFFF52A8FD1DFFAF84AFFD11%FFCAFD0EFFA9FD0FFF84AEFD0CFFA8FD1BFFA8A8FD20FF8B84FD0BFFA8FD%06FFCACAFD0EFFA9A9FD09FFA8FFA8AE83AEFD06FFA8FD05FFA8A8FD1BFF%A8A8FD1FFF8BAFFD13FFC3FD0FFF7FFD09FF8484A8AE84FD0FFFA8FD1BFF%A8A8FD0BFFA8FD12FF8BA8FFA8FD0BFFA8FD05FFC3FD0FFFA8A9FD07FFAF%83AEA8FD0BFFA8FD05FFA8A8FD1BFFA8FD1EFFAFAFFD13FFCACAFD0FFFA9%A9FD05FFA8AEA8FD15FFA8FD1BFFA8A8FD15FFA8AFAFFFAFAF84AFA8FFFF%FFA8FD0BFFA8FD04FFC3CAFD0FFF7EFD04FFAE83AEA8FFFFFFA8FD0BFFA8%FD05FFA8A8FD1BFFA8A8FD0EFFAFAFA8AFAFAF84AFAFAF84AFAFFD16FFCA%CAFD0FFFA9A9FFFFAE84A8FD19FFA8FD1BFFA8A8FFFFFF84FD07FFA88B84%AFAFFFA8FFAFFD0DFFA8FD0BFFA8FFFFCAC3FD07FFA8FD07FFA9A9FFFF83%A8FD08FFA8FD0BFFA8FD05FFA8A8FD1BFFA8FFFFFF8BAF8BFD05AF8BAFAF%FD21FFCACACAFD10FFA9A9AE83FD1DFFA8FD14FF7DFFA87D7DA87DA85984%60A8CACA84FD06A8CAA8FFA8CAA8FFA8CAA8A8A8CAA8FFA8CAA8FFA8FF7D%A8A8CAA8FFA8CAA8FFA8A876C3A8AFA8FFA8A8A8FFA8A8A8FFA8A8A8AF7E%5959A883A8CBFFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8FD13FFA852A8A8FD04527D7D7DA17DA17DA17DA17DA17DA17D%A17DA17DA17DA17DA17DA87DA17DA17DA17DA17DA17DA17DA17DA17DA17D%A17D7D7DA87D837D847D837D847D847D837D847D7E7DA8A8A87DFD0DA87D%FD07A87DFD08A8FD14FF7DA8A8A87D7D5252A87D7DA8FD04FFA8A87DA87D%7D7DFD05FF7DA87D845284A8FD04FFAF7DA8FD047DFD05FF84FD057DA8FD%04FFA8A8FD057DFD05FF7D7D7DA87D7D7DFD05FF7D7D7DA87D7DFD05FFA8%7D7D7DA87DA8FD04FFA8FD18FF7DA827A87D7D7DFD05FF7D7D52A87D52A8%FD04FF7D7DFD04527DFD04FFA87D7D52277D52FD05FF7D7D527D27527DFD%05FF7D7D5252527DA8FD04FF7D527D5252527DFD04FFA87D7D52527D52FD%05FF7D7D527D527D52FD1DFFFD04A8FFA8A8FD04FFFD05A8FF7DFD05FF7D%FD06A8FD05FF7DFD05A8FD05FFA87DFD04A8FD05FFFD06A87DFD05FF7DFD%06A8FD04FFA87DFD06A8FD04FFFD07A8FD4FFF7DA8FFFFA8FD7AFFA85227%522752A8FD7BFFA87DA8A8FDFCFFFDBFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-08-07T21:13:13-07:00</xap:CreateDate>
         <xap:ModifyDate>2014-08-07T21:13:14-07:00</xap:ModifyDate>
         <xap:MetadataDate>2014-08-07T21:13:14-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmaeUv&#xA;zMXyzFph1Ot+lys7Xv1+5L/7xmEn1PTDsgvaXfpH4OP7qnEccVWx+X/zJt7qPU5boW9vb3t3dvYn&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:A4AB30840920E4118EC0CEC0D3579FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A5AB30840920E4118EC0CEC0D3579FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
82.3813 388.8 li
92.7627 388.8 li
103.144 388.8 li
113.526 388.8 li
123.907 388.8 li
134.288 388.8 li
144.67 388.8 li
155.051 388.8 li
165.433 388.8 li
175.814 388.8 li
186.195 388.8 li
196.577 388.8 li
206.958 388.8 li
217.34 388.8 li
227.721 388.8 li
238.102 388.8 li
248.484 388.8 li
258.865 388.8 li
269.247 388.8 li
279.628 388.8 li
290.009 388.8 li
300.391 388.44 li
310.772 388.8 li
321.153 388.462 li
331.535 388.146 li
341.916 387.53 li
352.298 388.483 li
362.679 386.677 li
373.06 380.348 li
383.442 359.611 li
393.823 316.84 li
404.205 249.291 li
414.586 205.221 li
424.967 161.296 li
435.349 163.596 li
445.73 164.253 li
456.112 195.953 li
466.493 215.793 li
476.874 235.526 li
487.256 257.407 li
497.637 268.199 li
508.02 287.853 li
518.4 299.035 li
0 0 1 rgb
@
72 388.8 mo
82.3813 388.008 li
92.7627 388.8 li
103.144 388.8 li
113.526 388.8 li
123.907 388.8 li
134.288 388.143 li
144.67 388.164 li
155.051 388.19 li
165.433 388.212 li
175.814 388.8 li
186.195 388.231 li
196.577 388.255 li
206.958 387.762 li
217.34 388.8 li
227.721 388.331 li
238.102 387.459 li
248.484 388.8 li
258.865 388.399 li
269.247 388.8 li
279.628 388.057 li
290.009 388.064 li
300.391 388.44 li
310.772 388.099 li
321.153 388.462 li
331.535 388.146 li
341.916 388.482 li
352.298 388.168 li
362.679 387.587 li
373.06 384.72 li
383.442 381.232 li
393.823 373.938 li
404.205 367.898 li
414.586 363.691 li
424.967 358.612 li
435.349 351.629 li
445.73 352.512 li
456.112 347.216 li
466.493 336.23 li
476.874 332.055 li
487.256 336.413 li
497.637 326.739 li
508.02 326.454 li
518.4 329.909 li
0 0.501961 0 rgb
@
72 388.8 mo
82.3813 388.8 li
92.7627 388.8 li
103.144 388.8 li
113.526 388.8 li
123.907 388.8 li
134.288 388.8 li
144.67 388.8 li
155.051 388.8 li
165.433 388.8 li
175.814 388.8 li
186.195 388.8 li
196.577 388.8 li
206.958 388.8 li
217.34 388.8 li
227.721 388.8 li
238.102 388.8 li
248.484 388.8 li
258.865 388.8 li
269.247 388.037 li
279.628 386.941 li
290.009 380.341 li
300.391 373.684 li
310.772 354.458 li
321.153 337.354 li
331.535 313.657 li
341.916 309.763 li
352.298 296.463 li
362.679 285.377 li
373.06 270.758 li
383.442 235.021 li
393.823 279.817 li
404.205 284.043 li
414.586 290.26 li
424.967 298.892 li
435.349 308.525 li
445.73 310.881 li
456.112 318.627 li
466.493 277.965 li
476.874 283.173 li
487.256 323.602 li
497.637 314.875 li
508.02 321.583 li
518.4 340.315 li
1 0 0 rgb
@
72 387.17 mo
82.3813 384.838 li
92.7627 377.304 li
103.144 382.879 li
113.526 380.203 li
123.907 381.381 li
134.288 375.659 li
144.67 372.278 li
155.051 372.332 li
165.433 372.347 li
175.814 367.904 li
186.195 370.615 li
196.577 368.09 li
206.958 366.477 li
217.34 354.973 li
227.721 345.646 li
238.102 340.525 li
248.484 325.401 li
258.865 303.895 li
269.247 288.499 li
279.628 262.403 li
290.009 247.568 li
300.391 232.234 li
310.772 196.063 li
321.153 204.678 li
331.535 213.684 li
341.916 208.506 li
352.298 239.227 li
362.679 245.645 li
373.06 266.094 li
383.442 267.182 li
393.823 262.088 li
404.205 288.575 li
414.586 288.365 li
424.967 292.767 li
435.349 301.407 li
445.73 300.381 li
456.112 302.166 li
466.493 291.962 li
476.874 268.987 li
487.256 236.196 li
497.637 172.892 li
508.02 122.004 li
518.4 72.9629 li
0 0.74902 0.74902 rgb
@
0.5 lw
0 lc
[1 3 ] 0 dsh
72 388.8 mo
72 43.2002 li
0 0 0 rgb
@
grestore
72 388.8 mo
72 384.8 li
0 0 0 rgb
f
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
72 384.8 li
@
72 43.2002 mo
72 47.2002 li
f
72 43.2002 mo
72 47.2002 li
@
59.3281 400.764 mo
61.2598 400.764 li
61.2598 394.092 li
59.1602 394.512 li
59.1602 393.432 li
61.248 393.012 li
62.436 393.012 li
62.436 400.764 li
64.3682 400.764 li
64.3682 401.76 li
59.3281 401.76 li
59.3281 400.764 li
59.3281 400.764 li
cp
ef
69.1919 397.872 mo
69.7202 397.872 70.1401 397.692 70.4521 397.332 cv
70.7642 396.972 70.9199 396.468 70.9199 395.832 cv
70.9199 395.208 70.7642 394.704 70.4521 394.344 cv
70.1401 393.984 69.7202 393.792 69.1919 393.792 cv
68.6641 393.792 68.2441 393.984 67.9321 394.344 cv
67.6201 394.704 67.4639 395.208 67.4639 395.832 cv
67.4639 396.468 67.6201 396.972 67.9321 397.332 cv
68.2441 397.692 68.6641 397.872 69.1919 397.872 cv
69.1919 397.872 li
cp
66.8398 401.58 mo
66.8398 400.5 li
67.1279 400.644 67.4282 400.752 67.7402 400.824 cv
68.04 400.896 68.3398 400.932 68.6401 400.932 cv
69.4082 400.932 70.0078 400.68 70.416 400.152 cv
70.8242 399.624 71.064 398.832 71.1362 397.752 cv
70.896 398.088 70.6079 398.352 70.272 398.532 cv
69.9238 398.712 69.54 398.796 69.1201 398.796 cv
68.2319 398.796 67.5361 398.532 67.0322 398.004 cv
66.5278 397.476 66.2759 396.756 66.2759 395.832 cv
66.2759 394.944 66.54 394.224 67.0679 393.672 cv
67.5962 393.132 68.3042 392.856 69.1919 392.856 cv
70.2002 392.856 70.98 393.252 71.5078 394.02 cv
72.0361 394.8 72.312 395.928 72.312 397.392 cv
72.312 398.784 71.9761 399.876 71.3281 400.692 cv
70.668 401.508 69.792 401.916 68.688 401.916 cv
68.3882 401.916 68.0879 401.88 67.7881 401.832 cv
67.4761 401.784 67.1641 401.7 66.8398 401.58 cv
ef
73.9438 393.012 mo
79.5718 393.012 li
79.5718 393.516 li
76.3921 401.76 li
75.1558 401.76 li
78.144 394.008 li
73.9438 394.008 li
73.9438 393.012 li
73.9438 393.012 li
cp
ef
84.4561 392.856 mo
85.4282 392.856 86.1719 393.252 86.7002 394.02 cv
87.2158 394.8 87.48 395.928 87.48 397.392 cv
87.48 398.868 87.2158 399.996 86.7002 400.764 cv
86.1719 401.532 85.4282 401.916 84.4561 401.916 cv
83.4722 401.916 82.7158 401.532 82.2002 400.764 cv
81.6841 399.996 81.4321 398.868 81.4321 397.392 cv
81.4321 395.928 81.6841 394.8 82.2002 394.02 cv
82.7158 393.252 83.4722 392.856 84.4561 392.856 cv
84.4561 392.856 li
cp
84.4561 393.792 mo
83.8438 393.792 83.3882 394.092 83.0762 394.692 cv
82.7642 395.292 82.6201 396.192 82.6201 397.392 cv
82.6201 398.592 82.7642 399.492 83.0762 400.092 cv
83.3882 400.692 83.8438 400.992 84.4561 400.992 cv
85.0679 400.992 85.5239 400.692 85.8359 400.092 cv
86.1362 399.492 86.292 398.592 86.292 397.392 cv
86.292 396.192 86.1362 395.292 85.8359 394.692 cv
85.5239 394.092 85.0679 393.792 84.4561 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
123.907 388.8 mo
123.907 43.2002 li
@
grestore
123.907 388.8 mo
123.907 384.8 li
f
123.907 388.8 mo
123.907 384.8 li
@
123.907 43.2002 mo
123.907 47.2002 li
f
123.907 43.2002 mo
123.907 47.2002 li
@
111.408 400.764 mo
113.34 400.764 li
113.34 394.092 li
111.24 394.512 li
111.24 393.432 li
113.328 393.012 li
114.516 393.012 li
114.516 400.764 li
116.448 400.764 li
116.448 401.76 li
111.408 401.76 li
111.408 400.764 li
111.408 400.764 li
cp
ef
121.032 397.872 mo
121.56 397.872 121.98 397.692 122.292 397.332 cv
122.604 396.972 122.76 396.468 122.76 395.832 cv
122.76 395.208 122.604 394.704 122.292 394.344 cv
121.98 393.984 121.56 393.792 121.032 393.792 cv
120.504 393.792 120.084 393.984 119.772 394.344 cv
119.46 394.704 119.304 395.208 119.304 395.832 cv
119.304 396.468 119.46 396.972 119.772 397.332 cv
120.084 397.692 120.504 397.872 121.032 397.872 cv
121.032 397.872 li
cp
118.68 401.58 mo
118.68 400.5 li
118.968 400.644 119.268 400.752 119.58 400.824 cv
119.88 400.896 120.18 400.932 120.48 400.932 cv
121.248 400.932 121.848 400.68 122.256 400.152 cv
122.664 399.624 122.904 398.832 122.976 397.752 cv
122.736 398.088 122.448 398.352 122.112 398.532 cv
121.764 398.712 121.38 398.796 120.96 398.796 cv
120.072 398.796 119.376 398.532 118.872 398.004 cv
118.368 397.476 118.116 396.756 118.116 395.832 cv
118.116 394.944 118.38 394.224 118.908 393.672 cv
119.436 393.132 120.144 392.856 121.032 392.856 cv
122.04 392.856 122.82 393.252 123.348 394.02 cv
123.876 394.8 124.152 395.928 124.152 397.392 cv
124.152 398.784 123.816 399.876 123.168 400.692 cv
122.508 401.508 121.632 401.916 120.528 401.916 cv
120.228 401.916 119.928 401.88 119.628 401.832 cv
119.316 401.784 119.004 401.7 118.68 401.58 cv
ef
126.024 393.012 mo
131.652 393.012 li
131.652 393.516 li
128.472 401.76 li
127.236 401.76 li
130.224 394.008 li
126.024 394.008 li
126.024 393.012 li
126.024 393.012 li
cp
ef
134.016 393.012 mo
138.66 393.012 li
138.66 394.008 li
135.096 394.008 li
135.096 396.156 li
135.264 396.096 135.444 396.048 135.612 396.024 cv
135.78 396 135.96 395.976 136.128 395.976 cv
137.1 395.976 137.868 396.252 138.444 396.78 cv
139.02 397.32 139.308 398.04 139.308 398.952 cv
139.308 399.9 139.008 400.632 138.42 401.148 cv
137.832 401.664 137.004 401.916 135.948 401.916 cv
135.576 401.916 135.204 401.88 134.82 401.832 cv
134.436 401.771 134.052 401.688 133.644 401.556 cv
133.644 400.368 li
133.992 400.56 134.352 400.704 134.736 400.8 cv
135.108 400.896 135.504 400.932 135.924 400.932 cv
136.596 400.932 137.136 400.764 137.532 400.404 cv
137.916 400.044 138.12 399.564 138.12 398.952 cv
138.12 398.352 137.916 397.872 137.532 397.512 cv
137.136 397.152 136.596 396.972 135.924 396.972 cv
135.612 396.972 135.288 397.008 134.976 397.08 cv
134.664 397.152 134.34 397.26 134.016 397.404 cv
134.016 393.012 li
134.016 393.012 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
175.814 388.8 mo
175.814 43.2002 li
@
grestore
175.814 388.8 mo
175.814 384.8 li
f
175.814 388.8 mo
175.814 384.8 li
@
175.814 43.2002 mo
175.814 47.2002 li
f
175.814 43.2002 mo
175.814 47.2002 li
@
163.008 400.764 mo
164.94 400.764 li
164.94 394.092 li
162.84 394.512 li
162.84 393.432 li
164.928 393.012 li
166.116 393.012 li
166.116 400.764 li
168.048 400.764 li
168.048 401.76 li
163.008 401.76 li
163.008 400.764 li
163.008 400.764 li
cp
ef
172.872 397.872 mo
173.4 397.872 173.82 397.692 174.132 397.332 cv
174.444 396.972 174.6 396.468 174.6 395.832 cv
174.6 395.208 174.444 394.704 174.132 394.344 cv
173.82 393.984 173.4 393.792 172.872 393.792 cv
172.344 393.792 171.924 393.984 171.612 394.344 cv
171.3 394.704 171.144 395.208 171.144 395.832 cv
171.144 396.468 171.3 396.972 171.612 397.332 cv
171.924 397.692 172.344 397.872 172.872 397.872 cv
172.872 397.872 li
cp
170.52 401.58 mo
170.52 400.5 li
170.808 400.644 171.108 400.752 171.42 400.824 cv
171.72 400.896 172.02 400.932 172.32 400.932 cv
173.088 400.932 173.688 400.68 174.096 400.152 cv
174.504 399.624 174.744 398.832 174.816 397.752 cv
174.576 398.088 174.288 398.352 173.952 398.532 cv
173.604 398.712 173.22 398.796 172.8 398.796 cv
171.912 398.796 171.216 398.532 170.712 398.004 cv
170.208 397.476 169.956 396.756 169.956 395.832 cv
169.956 394.944 170.22 394.224 170.748 393.672 cv
171.276 393.132 171.984 392.856 172.872 392.856 cv
173.88 392.856 174.66 393.252 175.188 394.02 cv
175.716 394.8 175.992 395.928 175.992 397.392 cv
175.992 398.784 175.656 399.876 175.008 400.692 cv
174.348 401.508 173.472 401.916 172.368 401.916 cv
172.068 401.916 171.768 401.88 171.468 401.832 cv
171.156 401.784 170.844 401.7 170.52 401.58 cv
ef
179.076 395.232 mo
179.076 395.688 179.208 396.048 179.496 396.3 cv
179.784 396.552 180.18 396.672 180.696 396.672 cv
181.2 396.672 181.596 396.552 181.884 396.3 cv
182.172 396.048 182.316 395.688 182.316 395.232 cv
182.316 394.776 182.172 394.428 181.884 394.176 cv
181.596 393.924 181.2 393.792 180.696 393.792 cv
180.18 393.792 179.784 393.924 179.496 394.176 cv
179.208 394.428 179.076 394.776 179.076 395.232 cv
179.076 395.232 li
cp
179.508 397.104 mo
179.004 396.984 178.608 396.744 178.32 396.396 cv
178.032 396.048 177.9 395.628 177.9 395.124 cv
177.9 394.428 178.14 393.876 178.644 393.468 cv
179.136 393.06 179.82 392.856 180.696 392.856 cv
181.56 392.856 182.244 393.06 182.748 393.468 cv
183.24 393.876 183.492 394.428 183.492 395.124 cv
183.492 395.628 183.348 396.048 183.06 396.396 cv
182.772 396.744 182.388 396.984 181.884 397.104 cv
182.448 397.236 182.892 397.5 183.216 397.884 cv
183.528 398.268 183.696 398.748 183.696 399.3 cv
183.696 400.152 183.432 400.8 182.916 401.244 cv
182.388 401.7 181.656 401.916 180.696 401.916 cv
179.724 401.916 178.98 401.7 178.464 401.244 cv
177.948 400.8 177.696 400.152 177.696 399.3 cv
177.696 398.748 177.852 398.268 178.176 397.884 cv
178.488 397.5 178.932 397.236 179.508 397.104 cv
180.696 397.608 mo
180.132 397.608 179.688 397.764 179.364 398.064 cv
179.04 398.364 178.884 398.771 178.884 399.3 cv
178.884 399.828 179.04 400.248 179.364 400.548 cv
179.688 400.848 180.132 400.992 180.696 400.992 cv
181.248 400.992 181.692 400.848 182.016 400.536 cv
182.34 400.236 182.508 399.828 182.508 399.3 cv
182.508 398.771 182.34 398.364 182.028 398.064 cv
181.704 397.764 181.26 397.608 180.696 397.608 cv
ef
188.376 392.856 mo
189.348 392.856 190.092 393.252 190.62 394.02 cv
191.136 394.8 191.4 395.928 191.4 397.392 cv
191.4 398.868 191.136 399.996 190.62 400.764 cv
190.092 401.532 189.348 401.916 188.376 401.916 cv
187.392 401.916 186.636 401.532 186.12 400.764 cv
185.604 399.996 185.352 398.868 185.352 397.392 cv
185.352 395.928 185.604 394.8 186.12 394.02 cv
186.636 393.252 187.392 392.856 188.376 392.856 cv
188.376 392.856 li
cp
188.376 393.792 mo
187.764 393.792 187.308 394.092 186.996 394.692 cv
186.684 395.292 186.54 396.192 186.54 397.392 cv
186.54 398.592 186.684 399.492 186.996 400.092 cv
187.308 400.692 187.764 400.992 188.376 400.992 cv
188.988 400.992 189.444 400.692 189.756 400.092 cv
190.056 399.492 190.212 398.592 190.212 397.392 cv
190.212 396.192 190.056 395.292 189.756 394.692 cv
189.444 394.092 188.988 393.792 188.376 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
227.721 388.8 mo
227.721 43.2002 li
@
grestore
227.721 388.8 mo
227.721 384.8 li
f
227.721 388.8 mo
227.721 384.8 li
@
227.721 43.2002 mo
227.721 47.2002 li
f
227.721 43.2002 mo
227.721 47.2002 li
@
215.088 400.764 mo
217.02 400.764 li
217.02 394.092 li
214.92 394.512 li
214.92 393.432 li
217.008 393.012 li
218.196 393.012 li
218.196 400.764 li
220.128 400.764 li
220.128 401.76 li
215.088 401.76 li
215.088 400.764 li
215.088 400.764 li
cp
ef
224.952 397.872 mo
225.48 397.872 225.9 397.692 226.212 397.332 cv
226.524 396.972 226.68 396.468 226.68 395.832 cv
226.68 395.208 226.524 394.704 226.212 394.344 cv
225.9 393.984 225.48 393.792 224.952 393.792 cv
224.424 393.792 224.004 393.984 223.692 394.344 cv
223.38 394.704 223.224 395.208 223.224 395.832 cv
223.224 396.468 223.38 396.972 223.692 397.332 cv
224.004 397.692 224.424 397.872 224.952 397.872 cv
224.952 397.872 li
cp
222.6 401.58 mo
222.6 400.5 li
222.888 400.644 223.188 400.752 223.5 400.824 cv
223.8 400.896 224.1 400.932 224.4 400.932 cv
225.168 400.932 225.768 400.68 226.176 400.152 cv
226.584 399.624 226.824 398.832 226.896 397.752 cv
226.656 398.088 226.368 398.352 226.032 398.532 cv
225.684 398.712 225.3 398.796 224.88 398.796 cv
223.992 398.796 223.296 398.532 222.792 398.004 cv
222.288 397.476 222.036 396.756 222.036 395.832 cv
222.036 394.944 222.3 394.224 222.828 393.672 cv
223.356 393.132 224.064 392.856 224.952 392.856 cv
225.96 392.856 226.74 393.252 227.268 394.02 cv
227.796 394.8 228.072 395.928 228.072 397.392 cv
228.072 398.784 227.736 399.876 227.088 400.692 cv
226.428 401.508 225.552 401.916 224.448 401.916 cv
224.148 401.916 223.848 401.88 223.548 401.832 cv
223.236 401.784 222.924 401.7 222.6 401.58 cv
ef
231.156 395.232 mo
231.156 395.688 231.288 396.048 231.576 396.3 cv
231.864 396.552 232.26 396.672 232.776 396.672 cv
233.28 396.672 233.676 396.552 233.964 396.3 cv
234.252 396.048 234.396 395.688 234.396 395.232 cv
234.396 394.776 234.252 394.428 233.964 394.176 cv
233.676 393.924 233.28 393.792 232.776 393.792 cv
232.26 393.792 231.864 393.924 231.576 394.176 cv
231.288 394.428 231.156 394.776 231.156 395.232 cv
231.156 395.232 li
cp
231.588 397.104 mo
231.084 396.984 230.688 396.744 230.4 396.396 cv
230.112 396.048 229.98 395.628 229.98 395.124 cv
229.98 394.428 230.22 393.876 230.724 393.468 cv
231.216 393.06 231.9 392.856 232.776 392.856 cv
233.64 392.856 234.324 393.06 234.828 393.468 cv
235.32 393.876 235.572 394.428 235.572 395.124 cv
235.572 395.628 235.428 396.048 235.14 396.396 cv
234.852 396.744 234.468 396.984 233.964 397.104 cv
234.528 397.236 234.972 397.5 235.296 397.884 cv
235.608 398.268 235.776 398.748 235.776 399.3 cv
235.776 400.152 235.512 400.8 234.996 401.244 cv
234.468 401.7 233.736 401.916 232.776 401.916 cv
231.804 401.916 231.06 401.7 230.544 401.244 cv
230.028 400.8 229.776 400.152 229.776 399.3 cv
229.776 398.748 229.932 398.268 230.256 397.884 cv
230.568 397.5 231.012 397.236 231.588 397.104 cv
232.776 397.608 mo
232.212 397.608 231.768 397.764 231.444 398.064 cv
231.12 398.364 230.964 398.771 230.964 399.3 cv
230.964 399.828 231.12 400.248 231.444 400.548 cv
231.768 400.848 232.212 400.992 232.776 400.992 cv
233.328 400.992 233.772 400.848 234.096 400.536 cv
234.42 400.236 234.588 399.828 234.588 399.3 cv
234.588 398.771 234.42 398.364 234.108 398.064 cv
233.784 397.764 233.34 397.608 232.776 397.608 cv
ef
237.936 393.012 mo
242.58 393.012 li
242.58 394.008 li
239.016 394.008 li
239.016 396.156 li
239.184 396.096 239.364 396.048 239.532 396.024 cv
239.7 396 239.88 395.976 240.048 395.976 cv
241.02 395.976 241.788 396.252 242.364 396.78 cv
242.94 397.32 243.228 398.04 243.228 398.952 cv
243.228 399.9 242.928 400.632 242.34 401.148 cv
241.752 401.664 240.924 401.916 239.868 401.916 cv
239.496 401.916 239.124 401.88 238.74 401.832 cv
238.356 401.771 237.972 401.688 237.564 401.556 cv
237.564 400.368 li
237.912 400.56 238.272 400.704 238.656 400.8 cv
239.028 400.896 239.424 400.932 239.844 400.932 cv
240.516 400.932 241.056 400.764 241.452 400.404 cv
241.836 400.044 242.04 399.564 242.04 398.952 cv
242.04 398.352 241.836 397.872 241.452 397.512 cv
241.056 397.152 240.516 396.972 239.844 396.972 cv
239.532 396.972 239.208 397.008 238.896 397.08 cv
238.584 397.152 238.26 397.26 237.936 397.404 cv
237.936 393.012 li
237.936 393.012 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
279.628 388.8 mo
279.628 43.2002 li
@
grestore
279.628 388.8 mo
279.628 384.8 li
f
279.628 388.8 mo
279.628 384.8 li
@
279.628 43.2002 mo
279.628 47.2002 li
f
279.628 43.2002 mo
279.628 47.2002 li
@
266.928 400.764 mo
268.86 400.764 li
268.86 394.092 li
266.76 394.512 li
266.76 393.432 li
268.848 393.012 li
270.036 393.012 li
270.036 400.764 li
271.968 400.764 li
271.968 401.76 li
266.928 401.76 li
266.928 400.764 li
266.928 400.764 li
cp
ef
276.792 397.872 mo
277.32 397.872 277.74 397.692 278.052 397.332 cv
278.364 396.972 278.52 396.468 278.52 395.832 cv
278.52 395.208 278.364 394.704 278.052 394.344 cv
277.74 393.984 277.32 393.792 276.792 393.792 cv
276.264 393.792 275.844 393.984 275.532 394.344 cv
275.22 394.704 275.064 395.208 275.064 395.832 cv
275.064 396.468 275.22 396.972 275.532 397.332 cv
275.844 397.692 276.264 397.872 276.792 397.872 cv
276.792 397.872 li
cp
274.44 401.58 mo
274.44 400.5 li
274.728 400.644 275.028 400.752 275.34 400.824 cv
275.64 400.896 275.94 400.932 276.24 400.932 cv
277.008 400.932 277.608 400.68 278.016 400.152 cv
278.424 399.624 278.664 398.832 278.736 397.752 cv
278.496 398.088 278.208 398.352 277.872 398.532 cv
277.524 398.712 277.14 398.796 276.72 398.796 cv
275.832 398.796 275.136 398.532 274.632 398.004 cv
274.128 397.476 273.876 396.756 273.876 395.832 cv
273.876 394.944 274.14 394.224 274.668 393.672 cv
275.196 393.132 275.904 392.856 276.792 392.856 cv
277.8 392.856 278.58 393.252 279.108 394.02 cv
279.636 394.8 279.912 395.928 279.912 397.392 cv
279.912 398.784 279.576 399.876 278.928 400.692 cv
278.268 401.508 277.392 401.916 276.288 401.916 cv
275.988 401.916 275.688 401.88 275.388 401.832 cv
275.076 401.784 274.764 401.7 274.44 401.58 cv
ef
284.232 397.872 mo
284.76 397.872 285.18 397.692 285.492 397.332 cv
285.804 396.972 285.96 396.468 285.96 395.832 cv
285.96 395.208 285.804 394.704 285.492 394.344 cv
285.18 393.984 284.76 393.792 284.232 393.792 cv
283.704 393.792 283.284 393.984 282.972 394.344 cv
282.66 394.704 282.504 395.208 282.504 395.832 cv
282.504 396.468 282.66 396.972 282.972 397.332 cv
283.284 397.692 283.704 397.872 284.232 397.872 cv
284.232 397.872 li
cp
281.88 401.58 mo
281.88 400.5 li
282.168 400.644 282.468 400.752 282.78 400.824 cv
283.08 400.896 283.38 400.932 283.68 400.932 cv
284.448 400.932 285.048 400.68 285.456 400.152 cv
285.864 399.624 286.104 398.832 286.176 397.752 cv
285.936 398.088 285.648 398.352 285.312 398.532 cv
284.964 398.712 284.58 398.796 284.16 398.796 cv
283.272 398.796 282.576 398.532 282.072 398.004 cv
281.568 397.476 281.316 396.756 281.316 395.832 cv
281.316 394.944 281.58 394.224 282.108 393.672 cv
282.636 393.132 283.344 392.856 284.232 392.856 cv
285.24 392.856 286.02 393.252 286.548 394.02 cv
287.076 394.8 287.352 395.928 287.352 397.392 cv
287.352 398.784 287.016 399.876 286.368 400.692 cv
285.708 401.508 284.832 401.916 283.728 401.916 cv
283.428 401.916 283.128 401.88 282.828 401.832 cv
282.516 401.784 282.204 401.7 281.88 401.58 cv
ef
292.056 392.856 mo
293.028 392.856 293.772 393.252 294.3 394.02 cv
294.816 394.8 295.08 395.928 295.08 397.392 cv
295.08 398.868 294.816 399.996 294.3 400.764 cv
293.772 401.532 293.028 401.916 292.056 401.916 cv
291.072 401.916 290.316 401.532 289.8 400.764 cv
289.284 399.996 289.032 398.868 289.032 397.392 cv
289.032 395.928 289.284 394.8 289.8 394.02 cv
290.316 393.252 291.072 392.856 292.056 392.856 cv
292.056 392.856 li
cp
292.056 393.792 mo
291.444 393.792 290.988 394.092 290.676 394.692 cv
290.364 395.292 290.22 396.192 290.22 397.392 cv
290.22 398.592 290.364 399.492 290.676 400.092 cv
290.988 400.692 291.444 400.992 292.056 400.992 cv
292.668 400.992 293.124 400.692 293.436 400.092 cv
293.736 399.492 293.892 398.592 293.892 397.392 cv
293.892 396.192 293.736 395.292 293.436 394.692 cv
293.124 394.092 292.668 393.792 292.056 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
331.535 388.8 mo
331.535 43.2002 li
@
grestore
331.535 388.8 mo
331.535 384.8 li
f
331.535 388.8 mo
331.535 384.8 li
@
331.535 43.2002 mo
331.535 47.2002 li
f
331.535 43.2002 mo
331.535 47.2002 li
@
319.008 400.764 mo
320.94 400.764 li
320.94 394.092 li
318.84 394.512 li
318.84 393.432 li
320.928 393.012 li
322.116 393.012 li
322.116 400.764 li
324.048 400.764 li
324.048 401.76 li
319.008 401.76 li
319.008 400.764 li
319.008 400.764 li
cp
ef
328.632 397.872 mo
329.16 397.872 329.58 397.692 329.892 397.332 cv
330.204 396.972 330.36 396.468 330.36 395.832 cv
330.36 395.208 330.204 394.704 329.892 394.344 cv
329.58 393.984 329.16 393.792 328.632 393.792 cv
328.104 393.792 327.684 393.984 327.372 394.344 cv
327.06 394.704 326.904 395.208 326.904 395.832 cv
326.904 396.468 327.06 396.972 327.372 397.332 cv
327.684 397.692 328.104 397.872 328.632 397.872 cv
328.632 397.872 li
cp
326.28 401.58 mo
326.28 400.5 li
326.568 400.644 326.868 400.752 327.18 400.824 cv
327.48 400.896 327.78 400.932 328.08 400.932 cv
328.848 400.932 329.448 400.68 329.856 400.152 cv
330.264 399.624 330.504 398.832 330.576 397.752 cv
330.336 398.088 330.048 398.352 329.712 398.532 cv
329.364 398.712 328.98 398.796 328.56 398.796 cv
327.672 398.796 326.976 398.532 326.472 398.004 cv
325.968 397.476 325.716 396.756 325.716 395.832 cv
325.716 394.944 325.98 394.224 326.508 393.672 cv
327.036 393.132 327.744 392.856 328.632 392.856 cv
329.64 392.856 330.42 393.252 330.948 394.02 cv
331.476 394.8 331.752 395.928 331.752 397.392 cv
331.752 398.784 331.416 399.876 330.768 400.692 cv
330.108 401.508 329.232 401.916 328.128 401.916 cv
327.828 401.916 327.528 401.88 327.228 401.832 cv
326.916 401.784 326.604 401.7 326.28 401.58 cv
ef
336.313 397.872 mo
336.84 397.872 337.26 397.692 337.572 397.332 cv
337.884 396.972 338.04 396.468 338.04 395.832 cv
338.04 395.208 337.884 394.704 337.572 394.344 cv
337.26 393.984 336.84 393.792 336.313 393.792 cv
335.784 393.792 335.364 393.984 335.052 394.344 cv
334.74 394.704 334.584 395.208 334.584 395.832 cv
334.584 396.468 334.74 396.972 335.052 397.332 cv
335.364 397.692 335.784 397.872 336.313 397.872 cv
336.313 397.872 li
cp
333.96 401.58 mo
333.96 400.5 li
334.248 400.644 334.548 400.752 334.86 400.824 cv
335.16 400.896 335.46 400.932 335.76 400.932 cv
336.528 400.932 337.128 400.68 337.536 400.152 cv
337.944 399.624 338.184 398.832 338.256 397.752 cv
338.016 398.088 337.728 398.352 337.392 398.532 cv
337.044 398.712 336.66 398.796 336.24 398.796 cv
335.352 398.796 334.656 398.532 334.152 398.004 cv
333.648 397.476 333.396 396.756 333.396 395.832 cv
333.396 394.944 333.66 394.224 334.188 393.672 cv
334.716 393.132 335.424 392.856 336.313 392.856 cv
337.32 392.856 338.1 393.252 338.628 394.02 cv
339.156 394.8 339.432 395.928 339.432 397.392 cv
339.432 398.784 339.096 399.876 338.448 400.692 cv
337.788 401.508 336.912 401.916 335.808 401.916 cv
335.508 401.916 335.208 401.88 334.908 401.832 cv
334.596 401.784 334.284 401.7 333.96 401.58 cv
ef
341.616 393.012 mo
346.26 393.012 li
346.26 394.008 li
342.696 394.008 li
342.696 396.156 li
342.864 396.096 343.044 396.048 343.212 396.024 cv
343.38 396 343.56 395.976 343.728 395.976 cv
344.7 395.976 345.468 396.252 346.044 396.78 cv
346.62 397.32 346.908 398.04 346.908 398.952 cv
346.908 399.9 346.608 400.632 346.02 401.148 cv
345.432 401.664 344.604 401.916 343.548 401.916 cv
343.176 401.916 342.804 401.88 342.42 401.832 cv
342.036 401.771 341.652 401.688 341.244 401.556 cv
341.244 400.368 li
341.592 400.56 341.952 400.704 342.336 400.8 cv
342.708 400.896 343.104 400.932 343.524 400.932 cv
344.196 400.932 344.736 400.764 345.132 400.404 cv
345.516 400.044 345.72 399.564 345.72 398.952 cv
345.72 398.352 345.516 397.872 345.132 397.512 cv
344.736 397.152 344.196 396.972 343.524 396.972 cv
343.212 396.972 342.888 397.008 342.576 397.08 cv
342.264 397.152 341.94 397.26 341.616 397.404 cv
341.616 393.012 li
341.616 393.012 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
383.442 388.8 mo
383.442 43.2002 li
@
grestore
383.442 388.8 mo
383.442 384.8 li
f
383.442 388.8 mo
383.442 384.8 li
@
383.442 43.2002 mo
383.442 47.2002 li
f
383.442 43.2002 mo
383.442 47.2002 li
@
371.184 400.764 mo
375.313 400.764 li
375.313 401.76 li
369.756 401.76 li
369.756 400.764 li
370.2 400.308 370.813 399.684 371.592 398.892 cv
372.36 398.112 372.852 397.608 373.056 397.38 cv
373.44 396.96 373.704 396.6 373.848 396.3 cv
373.992 396.012 374.076 395.712 374.076 395.424 cv
374.076 394.968 373.908 394.584 373.584 394.296 cv
373.26 394.008 372.84 393.852 372.313 393.852 cv
371.94 393.852 371.544 393.924 371.136 394.044 cv
370.728 394.176 370.284 394.368 369.816 394.632 cv
369.816 393.432 li
370.296 393.24 370.74 393.096 371.148 393 cv
371.556 392.904 371.94 392.856 372.288 392.856 cv
373.188 392.856 373.908 393.084 374.448 393.54 cv
374.988 393.996 375.264 394.596 375.264 395.352 cv
375.264 395.712 375.192 396.06 375.06 396.372 cv
374.928 396.696 374.688 397.08 374.328 397.512 cv
374.232 397.632 373.92 397.956 373.392 398.496 cv
372.864 399.036 372.132 399.792 371.184 400.764 cv
371.184 400.764 li
cp
ef
380.376 392.856 mo
381.348 392.856 382.092 393.252 382.62 394.02 cv
383.136 394.8 383.4 395.928 383.4 397.392 cv
383.4 398.868 383.136 399.996 382.62 400.764 cv
382.092 401.532 381.348 401.916 380.376 401.916 cv
379.392 401.916 378.636 401.532 378.12 400.764 cv
377.604 399.996 377.352 398.868 377.352 397.392 cv
377.352 395.928 377.604 394.8 378.12 394.02 cv
378.636 393.252 379.392 392.856 380.376 392.856 cv
380.376 392.856 li
cp
380.376 393.792 mo
379.764 393.792 379.308 394.092 378.996 394.692 cv
378.684 395.292 378.54 396.192 378.54 397.392 cv
378.54 398.592 378.684 399.492 378.996 400.092 cv
379.308 400.692 379.764 400.992 380.376 400.992 cv
380.988 400.992 381.444 400.692 381.756 400.092 cv
382.056 399.492 382.212 398.592 382.212 397.392 cv
382.212 396.192 382.056 395.292 381.756 394.692 cv
381.444 394.092 380.988 393.792 380.376 393.792 cv
ef
388.056 392.856 mo
389.028 392.856 389.772 393.252 390.3 394.02 cv
390.816 394.8 391.08 395.928 391.08 397.392 cv
391.08 398.868 390.816 399.996 390.3 400.764 cv
389.772 401.532 389.028 401.916 388.056 401.916 cv
387.072 401.916 386.316 401.532 385.8 400.764 cv
385.284 399.996 385.032 398.868 385.032 397.392 cv
385.032 395.928 385.284 394.8 385.8 394.02 cv
386.316 393.252 387.072 392.856 388.056 392.856 cv
388.056 392.856 li
cp
388.056 393.792 mo
387.444 393.792 386.988 394.092 386.676 394.692 cv
386.364 395.292 386.22 396.192 386.22 397.392 cv
386.22 398.592 386.364 399.492 386.676 400.092 cv
386.988 400.692 387.444 400.992 388.056 400.992 cv
388.668 400.992 389.124 400.692 389.436 400.092 cv
389.736 399.492 389.892 398.592 389.892 397.392 cv
389.892 396.192 389.736 395.292 389.436 394.692 cv
389.124 394.092 388.668 393.792 388.056 393.792 cv
ef
395.736 392.856 mo
396.708 392.856 397.452 393.252 397.98 394.02 cv
398.496 394.8 398.76 395.928 398.76 397.392 cv
398.76 398.868 398.496 399.996 397.98 400.764 cv
397.452 401.532 396.708 401.916 395.736 401.916 cv
394.752 401.916 393.996 401.532 393.48 400.764 cv
392.964 399.996 392.712 398.868 392.712 397.392 cv
392.712 395.928 392.964 394.8 393.48 394.02 cv
393.996 393.252 394.752 392.856 395.736 392.856 cv
395.736 392.856 li
cp
395.736 393.792 mo
395.124 393.792 394.668 394.092 394.356 394.692 cv
394.044 395.292 393.9 396.192 393.9 397.392 cv
393.9 398.592 394.044 399.492 394.356 400.092 cv
394.668 400.692 395.124 400.992 395.736 400.992 cv
396.348 400.992 396.804 400.692 397.116 400.092 cv
397.416 399.492 397.572 398.592 397.572 397.392 cv
397.572 396.192 397.416 395.292 397.116 394.692 cv
396.804 394.092 396.348 393.792 395.736 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
435.349 388.8 mo
435.349 43.2002 li
@
grestore
435.349 388.8 mo
435.349 384.8 li
f
435.349 388.8 mo
435.349 384.8 li
@
435.349 43.2002 mo
435.349 47.2002 li
f
435.349 43.2002 mo
435.349 47.2002 li
@
423.264 400.764 mo
427.392 400.764 li
427.392 401.76 li
421.836 401.76 li
421.836 400.764 li
422.28 400.308 422.892 399.684 423.672 398.892 cv
424.44 398.112 424.932 397.608 425.136 397.38 cv
425.52 396.96 425.784 396.6 425.928 396.3 cv
426.072 396.012 426.156 395.712 426.156 395.424 cv
426.156 394.968 425.988 394.584 425.664 394.296 cv
425.34 394.008 424.92 393.852 424.392 393.852 cv
424.02 393.852 423.624 393.924 423.216 394.044 cv
422.808 394.176 422.364 394.368 421.896 394.632 cv
421.896 393.432 li
422.376 393.24 422.82 393.096 423.229 393 cv
423.636 392.904 424.02 392.856 424.368 392.856 cv
425.268 392.856 425.988 393.084 426.528 393.54 cv
427.068 393.996 427.344 394.596 427.344 395.352 cv
427.344 395.712 427.271 396.06 427.14 396.372 cv
427.008 396.696 426.768 397.08 426.408 397.512 cv
426.313 397.632 426 397.956 425.472 398.496 cv
424.944 399.036 424.212 399.792 423.264 400.764 cv
423.264 400.764 li
cp
ef
432.456 392.856 mo
433.428 392.856 434.172 393.252 434.7 394.02 cv
435.216 394.8 435.48 395.928 435.48 397.392 cv
435.48 398.868 435.216 399.996 434.7 400.764 cv
434.172 401.532 433.428 401.916 432.456 401.916 cv
431.472 401.916 430.716 401.532 430.2 400.764 cv
429.684 399.996 429.432 398.868 429.432 397.392 cv
429.432 395.928 429.684 394.8 430.2 394.02 cv
430.716 393.252 431.472 392.856 432.456 392.856 cv
432.456 392.856 li
cp
432.456 393.792 mo
431.844 393.792 431.388 394.092 431.076 394.692 cv
430.764 395.292 430.62 396.192 430.62 397.392 cv
430.62 398.592 430.764 399.492 431.076 400.092 cv
431.388 400.692 431.844 400.992 432.456 400.992 cv
433.068 400.992 433.524 400.692 433.836 400.092 cv
434.136 399.492 434.292 398.592 434.292 397.392 cv
434.292 396.192 434.136 395.292 433.836 394.692 cv
433.524 394.092 433.068 393.792 432.456 393.792 cv
ef
440.136 392.856 mo
441.108 392.856 441.852 393.252 442.38 394.02 cv
442.896 394.8 443.16 395.928 443.16 397.392 cv
443.16 398.868 442.896 399.996 442.38 400.764 cv
441.852 401.532 441.108 401.916 440.136 401.916 cv
439.152 401.916 438.396 401.532 437.88 400.764 cv
437.364 399.996 437.112 398.868 437.112 397.392 cv
437.112 395.928 437.364 394.8 437.88 394.02 cv
438.396 393.252 439.152 392.856 440.136 392.856 cv
440.136 392.856 li
cp
440.136 393.792 mo
439.524 393.792 439.068 394.092 438.756 394.692 cv
438.444 395.292 438.3 396.192 438.3 397.392 cv
438.3 398.592 438.444 399.492 438.756 400.092 cv
439.068 400.692 439.524 400.992 440.136 400.992 cv
440.748 400.992 441.204 400.692 441.516 400.092 cv
441.816 399.492 441.972 398.592 441.972 397.392 cv
441.972 396.192 441.816 395.292 441.516 394.692 cv
441.204 394.092 440.748 393.792 440.136 393.792 cv
ef
445.296 393.012 mo
449.94 393.012 li
449.94 394.008 li
446.376 394.008 li
446.376 396.156 li
446.544 396.096 446.724 396.048 446.892 396.024 cv
447.06 396 447.24 395.976 447.408 395.976 cv
448.38 395.976 449.148 396.252 449.724 396.78 cv
450.3 397.32 450.588 398.04 450.588 398.952 cv
450.588 399.9 450.288 400.632 449.7 401.148 cv
449.112 401.664 448.284 401.916 447.229 401.916 cv
446.856 401.916 446.484 401.88 446.1 401.832 cv
445.716 401.771 445.332 401.688 444.924 401.556 cv
444.924 400.368 li
445.271 400.56 445.632 400.704 446.016 400.8 cv
446.388 400.896 446.784 400.932 447.204 400.932 cv
447.876 400.932 448.416 400.764 448.813 400.404 cv
449.196 400.044 449.4 399.564 449.4 398.952 cv
449.4 398.352 449.196 397.872 448.813 397.512 cv
448.416 397.152 447.876 396.972 447.204 396.972 cv
446.892 396.972 446.568 397.008 446.256 397.08 cv
445.944 397.152 445.62 397.26 445.296 397.404 cv
445.296 393.012 li
445.296 393.012 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
487.256 388.8 mo
487.256 43.2002 li
@
grestore
487.256 388.8 mo
487.256 384.8 li
f
487.256 388.8 mo
487.256 384.8 li
@
487.256 43.2002 mo
487.256 47.2002 li
f
487.256 43.2002 mo
487.256 47.2002 li
@
475.104 400.764 mo
479.232 400.764 li
479.232 401.76 li
473.676 401.76 li
473.676 400.764 li
474.12 400.308 474.732 399.684 475.512 398.892 cv
476.28 398.112 476.771 397.608 476.976 397.38 cv
477.36 396.96 477.624 396.6 477.768 396.3 cv
477.912 396.012 477.996 395.712 477.996 395.424 cv
477.996 394.968 477.828 394.584 477.504 394.296 cv
477.18 394.008 476.76 393.852 476.232 393.852 cv
475.86 393.852 475.464 393.924 475.056 394.044 cv
474.648 394.176 474.204 394.368 473.736 394.632 cv
473.736 393.432 li
474.216 393.24 474.66 393.096 475.068 393 cv
475.476 392.904 475.86 392.856 476.208 392.856 cv
477.108 392.856 477.828 393.084 478.368 393.54 cv
478.908 393.996 479.184 394.596 479.184 395.352 cv
479.184 395.712 479.112 396.06 478.98 396.372 cv
478.848 396.696 478.608 397.08 478.248 397.512 cv
478.152 397.632 477.84 397.956 477.313 398.496 cv
476.784 399.036 476.052 399.792 475.104 400.764 cv
475.104 400.764 li
cp
ef
484.296 392.856 mo
485.268 392.856 486.012 393.252 486.54 394.02 cv
487.056 394.8 487.32 395.928 487.32 397.392 cv
487.32 398.868 487.056 399.996 486.54 400.764 cv
486.012 401.532 485.268 401.916 484.296 401.916 cv
483.313 401.916 482.556 401.532 482.04 400.764 cv
481.524 399.996 481.271 398.868 481.271 397.392 cv
481.271 395.928 481.524 394.8 482.04 394.02 cv
482.556 393.252 483.313 392.856 484.296 392.856 cv
484.296 392.856 li
cp
484.296 393.792 mo
483.684 393.792 483.229 394.092 482.916 394.692 cv
482.604 395.292 482.46 396.192 482.46 397.392 cv
482.46 398.592 482.604 399.492 482.916 400.092 cv
483.229 400.692 483.684 400.992 484.296 400.992 cv
484.908 400.992 485.364 400.692 485.676 400.092 cv
485.976 399.492 486.132 398.592 486.132 397.392 cv
486.132 396.192 485.976 395.292 485.676 394.692 cv
485.364 394.092 484.908 393.792 484.296 393.792 cv
ef
489.648 400.764 mo
491.58 400.764 li
491.58 394.092 li
489.48 394.512 li
489.48 393.432 li
491.568 393.012 li
492.756 393.012 li
492.756 400.764 li
494.688 400.764 li
494.688 401.76 li
489.648 401.76 li
489.648 400.764 li
489.648 400.764 li
cp
ef
499.416 392.856 mo
500.388 392.856 501.132 393.252 501.66 394.02 cv
502.176 394.8 502.44 395.928 502.44 397.392 cv
502.44 398.868 502.176 399.996 501.66 400.764 cv
501.132 401.532 500.388 401.916 499.416 401.916 cv
498.432 401.916 497.676 401.532 497.16 400.764 cv
496.644 399.996 496.392 398.868 496.392 397.392 cv
496.392 395.928 496.644 394.8 497.16 394.02 cv
497.676 393.252 498.432 392.856 499.416 392.856 cv
499.416 392.856 li
cp
499.416 393.792 mo
498.804 393.792 498.348 394.092 498.036 394.692 cv
497.724 395.292 497.58 396.192 497.58 397.392 cv
497.58 398.592 497.724 399.492 498.036 400.092 cv
498.348 400.692 498.804 400.992 499.416 400.992 cv
500.028 400.992 500.484 400.692 500.796 400.092 cv
501.096 399.492 501.252 398.592 501.252 397.392 cv
501.252 396.192 501.096 395.292 500.796 394.692 cv
500.484 394.092 500.028 393.792 499.416 393.792 cv
ef
282.468 406.932 mo
283.728 406.932 li
286.152 410.532 li
288.564 406.932 li
289.836 406.932 li
286.74 411.516 li
286.74 415.68 li
285.552 415.68 li
285.552 411.516 li
282.468 406.932 li
282.468 406.932 li
cp
ef
293.904 411.816 mo
293.892 411.228 293.724 410.76 293.412 410.4 cv
293.088 410.052 292.656 409.872 292.128 409.872 cv
291.528 409.872 291.048 410.052 290.688 410.388 cv
290.328 410.724 290.112 411.204 290.064 411.816 cv
293.904 411.816 li
293.904 411.816 li
cp
294.984 412.128 mo
294.984 412.656 li
290.028 412.656 li
290.076 413.4 290.292 413.976 290.7 414.36 cv
291.096 414.744 291.648 414.936 292.368 414.936 cv
292.776 414.936 293.184 414.888 293.568 414.792 cv
293.952 414.696 294.348 414.54 294.732 414.324 cv
294.732 415.344 li
294.348 415.512 293.952 415.644 293.544 415.716 cv
293.136 415.788 292.716 415.836 292.308 415.836 cv
291.252 415.836 290.424 415.536 289.813 414.936 cv
289.2 414.336 288.9 413.508 288.9 412.464 cv
288.9 411.396 289.188 410.544 289.764 409.908 cv
290.34 409.284 291.132 408.96 292.116 408.96 cv
293.004 408.96 293.7 409.248 294.216 409.812 cv
294.72 410.388 294.984 411.156 294.984 412.128 cv
ef
301.944 411.936 mo
301.944 415.68 li
300.864 415.68 li
300.864 414.684 li
300.612 415.092 300.3 415.38 299.94 415.56 cv
299.58 415.74 299.124 415.836 298.596 415.836 cv
297.924 415.836 297.384 415.656 296.988 415.284 cv
296.592 414.912 296.4 414.408 296.4 413.771 cv
296.4 413.04 296.64 412.488 297.144 412.104 cv
297.636 411.732 298.368 411.54 299.352 411.54 cv
300.864 411.54 li
300.864 411.432 li
300.864 410.94 300.696 410.556 300.372 410.28 cv
300.048 410.016 299.592 409.872 299.004 409.872 cv
298.62 409.872 298.26 409.92 297.9 410.016 cv
297.54 410.112 297.204 410.244 296.88 410.412 cv
296.88 409.416 li
297.264 409.271 297.648 409.152 298.02 409.08 cv
298.392 409.008 298.752 408.96 299.112 408.96 cv
300.06 408.96 300.768 409.212 301.236 409.704 cv
301.704 410.196 301.944 410.94 301.944 411.936 cv
301.944 411.936 li
cp
299.796 412.38 mo
298.92 412.38 298.32 412.488 297.984 412.68 cv
297.648 412.884 297.48 413.22 297.48 413.7 cv
297.48 414.084 297.6 414.396 297.852 414.612 cv
298.104 414.84 298.452 414.948 298.884 414.948 cv
299.484 414.948 299.964 414.744 300.324 414.312 cv
300.684 413.892 300.864 413.328 300.864 412.62 cv
300.864 412.38 li
299.796 412.38 li
ef
307.813 410.124 mo
307.692 410.052 307.56 410.004 307.416 409.968 cv
307.272 409.944 307.116 409.92 306.948 409.92 cv
306.336 409.92 305.868 410.124 305.544 410.52 cv
305.208 410.916 305.052 411.48 305.052 412.224 cv
305.052 415.68 li
303.972 415.68 li
303.972 409.116 li
305.052 409.116 li
305.052 410.136 li
305.268 409.74 305.568 409.44 305.928 409.248 cv
306.288 409.056 306.732 408.96 307.26 408.96 cv
307.332 408.96 307.416 408.972 307.512 408.972 cv
307.596 408.984 307.692 408.996 307.813 409.02 cv
307.813 410.124 li
307.813 410.124 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 388.8 mo
518.4 388.8 li
@
grestore
72 388.8 mo
76 388.8 li
f
72 388.8 mo
76 388.8 li
@
518.4 388.8 mo
514.4 388.8 li
f
518.4 388.8 mo
514.4 388.8 li
@
39.0962 384.216 mo
40.0679 384.216 40.812 384.612 41.3398 385.38 cv
41.856 386.16 42.1201 387.288 42.1201 388.752 cv
42.1201 390.228 41.856 391.356 41.3398 392.124 cv
40.812 392.892 40.0679 393.276 39.0962 393.276 cv
38.1118 393.276 37.356 392.892 36.8398 392.124 cv
36.3242 391.356 36.0718 390.228 36.0718 388.752 cv
36.0718 387.288 36.3242 386.16 36.8398 385.38 cv
37.356 384.612 38.1118 384.216 39.0962 384.216 cv
39.0962 384.216 li
cp
39.0962 385.152 mo
38.4839 385.152 38.0278 385.452 37.7158 386.052 cv
37.4038 386.652 37.2598 387.552 37.2598 388.752 cv
37.2598 389.952 37.4038 390.852 37.7158 391.452 cv
38.0278 392.052 38.4839 392.352 39.0962 392.352 cv
39.708 392.352 40.1641 392.052 40.4761 391.452 cv
40.7759 390.852 40.9321 389.952 40.9321 388.752 cv
40.9321 387.552 40.7759 386.652 40.4761 386.052 cv
40.1641 385.452 39.708 385.152 39.0962 385.152 cv
ef
44.2441 391.632 mo
45.48 391.632 li
45.48 393.12 li
44.2441 393.12 li
44.2441 391.632 li
44.2441 391.632 li
cp
ef
50.376 384.216 mo
51.3481 384.216 52.0918 384.612 52.6201 385.38 cv
53.1362 386.16 53.3999 387.288 53.3999 388.752 cv
53.3999 390.228 53.1362 391.356 52.6201 392.124 cv
52.0918 392.892 51.3481 393.276 50.376 393.276 cv
49.3921 393.276 48.6362 392.892 48.1201 392.124 cv
47.604 391.356 47.3521 390.228 47.3521 388.752 cv
47.3521 387.288 47.604 386.16 48.1201 385.38 cv
48.6362 384.612 49.3921 384.216 50.376 384.216 cv
50.376 384.216 li
cp
50.376 385.152 mo
49.7642 385.152 49.3081 385.452 48.9961 386.052 cv
48.6841 386.652 48.54 387.552 48.54 388.752 cv
48.54 389.952 48.6841 390.852 48.9961 391.452 cv
49.3081 392.052 49.7642 392.352 50.376 392.352 cv
50.9878 392.352 51.4438 392.052 51.7559 391.452 cv
52.0562 390.852 52.2119 389.952 52.2119 388.752 cv
52.2119 387.552 52.0562 386.652 51.7559 386.052 cv
51.4438 385.452 50.9878 385.152 50.376 385.152 cv
ef
58.0562 384.216 mo
59.0278 384.216 59.772 384.612 60.2998 385.38 cv
60.8159 386.16 61.0801 387.288 61.0801 388.752 cv
61.0801 390.228 60.8159 391.356 60.2998 392.124 cv
59.772 392.892 59.0278 393.276 58.0562 393.276 cv
57.0718 393.276 56.3159 392.892 55.7998 392.124 cv
55.2842 391.356 55.0322 390.228 55.0322 388.752 cv
55.0322 387.288 55.2842 386.16 55.7998 385.38 cv
56.3159 384.612 57.0718 384.216 58.0562 384.216 cv
58.0562 384.216 li
cp
58.0562 385.152 mo
57.4438 385.152 56.9878 385.452 56.6758 386.052 cv
56.3638 386.652 56.2202 387.552 56.2202 388.752 cv
56.2202 389.952 56.3638 390.852 56.6758 391.452 cv
56.9878 392.052 57.4438 392.352 58.0562 392.352 cv
58.668 392.352 59.124 392.052 59.436 391.452 cv
59.7358 390.852 59.8921 389.952 59.8921 388.752 cv
59.8921 387.552 59.7358 386.652 59.436 386.052 cv
59.124 385.452 58.668 385.152 58.0562 385.152 cv
ef
65.7358 384.216 mo
66.708 384.216 67.4521 384.612 67.98 385.38 cv
68.4961 386.16 68.7598 387.288 68.7598 388.752 cv
68.7598 390.228 68.4961 391.356 67.98 392.124 cv
67.4521 392.892 66.708 393.276 65.7358 393.276 cv
64.752 393.276 63.9961 392.892 63.48 392.124 cv
62.9639 391.356 62.7119 390.228 62.7119 388.752 cv
62.7119 387.288 62.9639 386.16 63.48 385.38 cv
63.9961 384.612 64.752 384.216 65.7358 384.216 cv
65.7358 384.216 li
cp
65.7358 385.152 mo
65.124 385.152 64.668 385.452 64.356 386.052 cv
64.0439 386.652 63.8999 387.552 63.8999 388.752 cv
63.8999 389.952 64.0439 390.852 64.356 391.452 cv
64.668 392.052 65.124 392.352 65.7358 392.352 cv
66.3481 392.352 66.8042 392.052 67.1162 391.452 cv
67.416 390.852 67.5718 389.952 67.5718 388.752 cv
67.5718 387.552 67.416 386.652 67.1162 386.052 cv
66.8042 385.452 66.3481 385.152 65.7358 385.152 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 302.4 mo
518.4 302.4 li
@
grestore
72 302.4 mo
76 302.4 li
f
72 302.4 mo
76 302.4 li
@
518.4 302.4 mo
514.4 302.4 li
f
518.4 302.4 mo
514.4 302.4 li
@
39.3359 297.816 mo
40.3081 297.816 41.0518 298.212 41.5801 298.98 cv
42.0962 299.76 42.3599 300.888 42.3599 302.352 cv
42.3599 303.828 42.0962 304.956 41.5801 305.724 cv
41.0518 306.492 40.3081 306.876 39.3359 306.876 cv
38.3521 306.876 37.5962 306.492 37.0801 305.724 cv
36.564 304.956 36.312 303.828 36.312 302.352 cv
36.312 300.888 36.564 299.76 37.0801 298.98 cv
37.5962 298.212 38.3521 297.816 39.3359 297.816 cv
39.3359 297.816 li
cp
39.3359 298.752 mo
38.7241 298.752 38.2681 299.052 37.9561 299.652 cv
37.644 300.252 37.5 301.152 37.5 302.352 cv
37.5 303.552 37.644 304.452 37.9561 305.052 cv
38.2681 305.652 38.7241 305.952 39.3359 305.952 cv
39.9478 305.952 40.4038 305.652 40.7158 305.052 cv
41.0161 304.452 41.1719 303.552 41.1719 302.352 cv
41.1719 301.152 41.0161 300.252 40.7158 299.652 cv
40.4038 299.052 39.9478 298.752 39.3359 298.752 cv
ef
44.4839 305.232 mo
45.7202 305.232 li
45.7202 306.72 li
44.4839 306.72 li
44.4839 305.232 li
44.4839 305.232 li
cp
ef
50.6162 297.816 mo
51.5879 297.816 52.332 298.212 52.8599 298.98 cv
53.376 299.76 53.6401 300.888 53.6401 302.352 cv
53.6401 303.828 53.376 304.956 52.8599 305.724 cv
52.332 306.492 51.5879 306.876 50.6162 306.876 cv
49.6318 306.876 48.876 306.492 48.3599 305.724 cv
47.8438 304.956 47.5918 303.828 47.5918 302.352 cv
47.5918 300.888 47.8438 299.76 48.3599 298.98 cv
48.876 298.212 49.6318 297.816 50.6162 297.816 cv
50.6162 297.816 li
cp
50.6162 298.752 mo
50.0039 298.752 49.5479 299.052 49.2358 299.652 cv
48.9238 300.252 48.7798 301.152 48.7798 302.352 cv
48.7798 303.552 48.9238 304.452 49.2358 305.052 cv
49.5479 305.652 50.0039 305.952 50.6162 305.952 cv
51.228 305.952 51.6841 305.652 51.9961 305.052 cv
52.2959 304.452 52.4521 303.552 52.4521 302.352 cv
52.4521 301.152 52.2959 300.252 51.9961 299.652 cv
51.6841 299.052 51.228 298.752 50.6162 298.752 cv
ef
58.2959 297.816 mo
59.2681 297.816 60.0122 298.212 60.54 298.98 cv
61.0562 299.76 61.3198 300.888 61.3198 302.352 cv
61.3198 303.828 61.0562 304.956 60.54 305.724 cv
60.0122 306.492 59.2681 306.876 58.2959 306.876 cv
57.312 306.876 56.5562 306.492 56.04 305.724 cv
55.5239 304.956 55.272 303.828 55.272 302.352 cv
55.272 300.888 55.5239 299.76 56.04 298.98 cv
56.5562 298.212 57.312 297.816 58.2959 297.816 cv
58.2959 297.816 li
cp
58.2959 298.752 mo
57.6841 298.752 57.228 299.052 56.916 299.652 cv
56.604 300.252 56.46 301.152 56.46 302.352 cv
56.46 303.552 56.604 304.452 56.916 305.052 cv
57.228 305.652 57.6841 305.952 58.2959 305.952 cv
58.9082 305.952 59.3638 305.652 59.6758 305.052 cv
59.9761 304.452 60.1318 303.552 60.1318 302.352 cv
60.1318 301.152 59.9761 300.252 59.6758 299.652 cv
59.3638 299.052 58.9082 298.752 58.2959 298.752 cv
ef
63.4561 297.972 mo
68.1001 297.972 li
68.1001 298.968 li
64.5361 298.968 li
64.5361 301.116 li
64.7041 301.056 64.8838 301.008 65.0518 300.984 cv
65.2202 300.96 65.3999 300.936 65.5679 300.936 cv
66.54 300.936 67.3081 301.212 67.8838 301.74 cv
68.46 302.28 68.748 303 68.748 303.912 cv
68.748 304.86 68.4482 305.592 67.8599 306.108 cv
67.272 306.624 66.4438 306.876 65.3882 306.876 cv
65.0161 306.876 64.644 306.84 64.2598 306.792 cv
63.876 306.732 63.4922 306.648 63.084 306.516 cv
63.084 305.328 li
63.4321 305.52 63.792 305.664 64.1758 305.76 cv
64.5479 305.855 64.9438 305.892 65.3638 305.892 cv
66.0361 305.892 66.5762 305.724 66.9722 305.364 cv
67.356 305.004 67.5601 304.524 67.5601 303.912 cv
67.5601 303.312 67.356 302.832 66.9722 302.472 cv
66.5762 302.112 66.0361 301.932 65.3638 301.932 cv
65.0518 301.932 64.728 301.968 64.416 302.04 cv
64.104 302.112 63.7798 302.22 63.4561 302.364 cv
63.4561 297.972 li
63.4561 297.972 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 216 mo
518.4 216 li
@
grestore
72 216 mo
76 216 li
f
72 216 mo
76 216 li
@
518.4 216 mo
514.4 216 li
f
518.4 216 mo
514.4 216 li
@
39.0962 211.416 mo
40.0679 211.416 40.812 211.812 41.3398 212.58 cv
41.856 213.36 42.1201 214.488 42.1201 215.952 cv
42.1201 217.428 41.856 218.556 41.3398 219.324 cv
40.812 220.092 40.0679 220.476 39.0962 220.476 cv
38.1118 220.476 37.356 220.092 36.8398 219.324 cv
36.3242 218.556 36.0718 217.428 36.0718 215.952 cv
36.0718 214.488 36.3242 213.36 36.8398 212.58 cv
37.356 211.812 38.1118 211.416 39.0962 211.416 cv
39.0962 211.416 li
cp
39.0962 212.352 mo
38.4839 212.352 38.0278 212.652 37.7158 213.252 cv
37.4038 213.852 37.2598 214.752 37.2598 215.952 cv
37.2598 217.152 37.4038 218.052 37.7158 218.652 cv
38.0278 219.252 38.4839 219.552 39.0962 219.552 cv
39.708 219.552 40.1641 219.252 40.4761 218.652 cv
40.7759 218.052 40.9321 217.152 40.9321 215.952 cv
40.9321 214.752 40.7759 213.852 40.4761 213.252 cv
40.1641 212.652 39.708 212.352 39.0962 212.352 cv
ef
44.2441 218.832 mo
45.48 218.832 li
45.48 220.32 li
44.2441 220.32 li
44.2441 218.832 li
44.2441 218.832 li
cp
ef
50.376 211.416 mo
51.3481 211.416 52.0918 211.812 52.6201 212.58 cv
53.1362 213.36 53.3999 214.488 53.3999 215.952 cv
53.3999 217.428 53.1362 218.556 52.6201 219.324 cv
52.0918 220.092 51.3481 220.476 50.376 220.476 cv
49.3921 220.476 48.6362 220.092 48.1201 219.324 cv
47.604 218.556 47.3521 217.428 47.3521 215.952 cv
47.3521 214.488 47.604 213.36 48.1201 212.58 cv
48.6362 211.812 49.3921 211.416 50.376 211.416 cv
50.376 211.416 li
cp
50.376 212.352 mo
49.7642 212.352 49.3081 212.652 48.9961 213.252 cv
48.6841 213.852 48.54 214.752 48.54 215.952 cv
48.54 217.152 48.6841 218.052 48.9961 218.652 cv
49.3081 219.252 49.7642 219.552 50.376 219.552 cv
50.9878 219.552 51.4438 219.252 51.7559 218.652 cv
52.0562 218.052 52.2119 217.152 52.2119 215.952 cv
52.2119 214.752 52.0562 213.852 51.7559 213.252 cv
51.4438 212.652 50.9878 212.352 50.376 212.352 cv
ef
55.728 219.324 mo
57.6602 219.324 li
57.6602 212.652 li
55.5601 213.072 li
55.5601 211.992 li
57.6479 211.572 li
58.8359 211.572 li
58.8359 219.324 li
60.7681 219.324 li
60.7681 220.32 li
55.728 220.32 li
55.728 219.324 li
55.728 219.324 li
cp
ef
65.7358 211.416 mo
66.708 211.416 67.4521 211.812 67.98 212.58 cv
68.4961 213.36 68.7598 214.488 68.7598 215.952 cv
68.7598 217.428 68.4961 218.556 67.98 219.324 cv
67.4521 220.092 66.708 220.476 65.7358 220.476 cv
64.752 220.476 63.9961 220.092 63.48 219.324 cv
62.9639 218.556 62.7119 217.428 62.7119 215.952 cv
62.7119 214.488 62.9639 213.36 63.48 212.58 cv
63.9961 211.812 64.752 211.416 65.7358 211.416 cv
65.7358 211.416 li
cp
65.7358 212.352 mo
65.124 212.352 64.668 212.652 64.356 213.252 cv
64.0439 213.852 63.8999 214.752 63.8999 215.952 cv
63.8999 217.152 64.0439 218.052 64.356 218.652 cv
64.668 219.252 65.124 219.552 65.7358 219.552 cv
66.3481 219.552 66.8042 219.252 67.1162 218.652 cv
67.416 218.052 67.5718 217.152 67.5718 215.952 cv
67.5718 214.752 67.416 213.852 67.1162 213.252 cv
66.8042 212.652 66.3481 212.352 65.7358 212.352 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 129.6 mo
518.4 129.6 li
@
grestore
72 129.6 mo
76 129.6 li
f
72 129.6 mo
76 129.6 li
@
518.4 129.6 mo
514.4 129.6 li
f
518.4 129.6 mo
514.4 129.6 li
@
39.3359 125.016 mo
40.3081 125.016 41.0518 125.412 41.5801 126.18 cv
42.0962 126.96 42.3599 128.088 42.3599 129.552 cv
42.3599 131.028 42.0962 132.156 41.5801 132.924 cv
41.0518 133.692 40.3081 134.076 39.3359 134.076 cv
38.3521 134.076 37.5962 133.692 37.0801 132.924 cv
36.564 132.156 36.312 131.028 36.312 129.552 cv
36.312 128.088 36.564 126.96 37.0801 126.18 cv
37.5962 125.412 38.3521 125.016 39.3359 125.016 cv
39.3359 125.016 li
cp
39.3359 125.952 mo
38.7241 125.952 38.2681 126.252 37.9561 126.852 cv
37.644 127.452 37.5 128.352 37.5 129.552 cv
37.5 130.752 37.644 131.652 37.9561 132.252 cv
38.2681 132.852 38.7241 133.152 39.3359 133.152 cv
39.9478 133.152 40.4038 132.852 40.7158 132.252 cv
41.0161 131.652 41.1719 130.752 41.1719 129.552 cv
41.1719 128.352 41.0161 127.452 40.7158 126.852 cv
40.4038 126.252 39.9478 125.952 39.3359 125.952 cv
ef
44.4839 132.432 mo
45.7202 132.432 li
45.7202 133.92 li
44.4839 133.92 li
44.4839 132.432 li
44.4839 132.432 li
cp
ef
50.6162 125.016 mo
51.5879 125.016 52.332 125.412 52.8599 126.18 cv
53.376 126.96 53.6401 128.088 53.6401 129.552 cv
53.6401 131.028 53.376 132.156 52.8599 132.924 cv
52.332 133.692 51.5879 134.076 50.6162 134.076 cv
49.6318 134.076 48.876 133.692 48.3599 132.924 cv
47.8438 132.156 47.5918 131.028 47.5918 129.552 cv
47.5918 128.088 47.8438 126.96 48.3599 126.18 cv
48.876 125.412 49.6318 125.016 50.6162 125.016 cv
50.6162 125.016 li
cp
50.6162 125.952 mo
50.0039 125.952 49.5479 126.252 49.2358 126.852 cv
48.9238 127.452 48.7798 128.352 48.7798 129.552 cv
48.7798 130.752 48.9238 131.652 49.2358 132.252 cv
49.5479 132.852 50.0039 133.152 50.6162 133.152 cv
51.228 133.152 51.6841 132.852 51.9961 132.252 cv
52.2959 131.652 52.4521 130.752 52.4521 129.552 cv
52.4521 128.352 52.2959 127.452 51.9961 126.852 cv
51.6841 126.252 51.228 125.952 50.6162 125.952 cv
ef
55.9678 132.924 mo
57.8999 132.924 li
57.8999 126.252 li
55.7998 126.672 li
55.7998 125.592 li
57.8882 125.172 li
59.0762 125.172 li
59.0762 132.924 li
61.0078 132.924 li
61.0078 133.92 li
55.9678 133.92 li
55.9678 132.924 li
55.9678 132.924 li
cp
ef
63.4561 125.172 mo
68.1001 125.172 li
68.1001 126.168 li
64.5361 126.168 li
64.5361 128.316 li
64.7041 128.256 64.8838 128.208 65.0518 128.184 cv
65.2202 128.16 65.3999 128.136 65.5679 128.136 cv
66.54 128.136 67.3081 128.412 67.8838 128.94 cv
68.46 129.48 68.748 130.2 68.748 131.112 cv
68.748 132.06 68.4482 132.792 67.8599 133.308 cv
67.272 133.824 66.4438 134.076 65.3882 134.076 cv
65.0161 134.076 64.644 134.04 64.2598 133.992 cv
63.876 133.932 63.4922 133.848 63.084 133.716 cv
63.084 132.528 li
63.4321 132.72 63.792 132.864 64.1758 132.96 cv
64.5479 133.056 64.9438 133.092 65.3638 133.092 cv
66.0361 133.092 66.5762 132.924 66.9722 132.564 cv
67.356 132.204 67.5601 131.724 67.5601 131.112 cv
67.5601 130.512 67.356 130.032 66.9722 129.672 cv
66.5762 129.312 66.0361 129.132 65.3638 129.132 cv
65.0518 129.132 64.728 129.168 64.416 129.24 cv
64.104 129.312 63.7798 129.42 63.4561 129.564 cv
63.4561 125.172 li
63.4561 125.172 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 43.2002 mo
518.4 43.2002 li
@
grestore
72 43.2002 mo
76 43.2002 li
f
72 43.2002 mo
76 43.2002 li
@
518.4 43.2002 mo
514.4 43.2002 li
f
518.4 43.2002 mo
514.4 43.2002 li
@
39.0962 38.6162 mo
40.0679 38.6162 40.812 39.0117 41.3398 39.7798 cv
41.856 40.5601 42.1201 41.688 42.1201 43.1519 cv
42.1201 44.6279 41.856 45.7559 41.3398 46.5239 cv
40.812 47.292 40.0679 47.6758 39.0962 47.6758 cv
38.1118 47.6758 37.356 47.292 36.8398 46.5239 cv
36.3242 45.7559 36.0718 44.6279 36.0718 43.1519 cv
36.0718 41.688 36.3242 40.5601 36.8398 39.7798 cv
37.356 39.0117 38.1118 38.6162 39.0962 38.6162 cv
39.0962 38.6162 li
cp
39.0962 39.5518 mo
38.4839 39.5518 38.0278 39.8521 37.7158 40.4521 cv
37.4038 41.0518 37.2598 41.9521 37.2598 43.1519 cv
37.2598 44.3521 37.4038 45.252 37.7158 45.8521 cv
38.0278 46.4521 38.4839 46.752 39.0962 46.752 cv
39.708 46.752 40.1641 46.4521 40.4761 45.8521 cv
40.7759 45.252 40.9321 44.3521 40.9321 43.1519 cv
40.9321 41.9521 40.7759 41.0518 40.4761 40.4521 cv
40.1641 39.8521 39.708 39.5518 39.0962 39.5518 cv
ef
44.2441 46.0322 mo
45.48 46.0322 li
45.48 47.52 li
44.2441 47.52 li
44.2441 46.0322 li
44.2441 46.0322 li
cp
ef
50.376 38.6162 mo
51.3481 38.6162 52.0918 39.0117 52.6201 39.7798 cv
53.1362 40.5601 53.3999 41.688 53.3999 43.1519 cv
53.3999 44.6279 53.1362 45.7559 52.6201 46.5239 cv
52.0918 47.292 51.3481 47.6758 50.376 47.6758 cv
49.3921 47.6758 48.6362 47.292 48.1201 46.5239 cv
47.604 45.7559 47.3521 44.6279 47.3521 43.1519 cv
47.3521 41.688 47.604 40.5601 48.1201 39.7798 cv
48.6362 39.0117 49.3921 38.6162 50.376 38.6162 cv
50.376 38.6162 li
cp
50.376 39.5518 mo
49.7642 39.5518 49.3081 39.8521 48.9961 40.4521 cv
48.6841 41.0518 48.54 41.9521 48.54 43.1519 cv
48.54 44.3521 48.6841 45.252 48.9961 45.8521 cv
49.3081 46.4521 49.7642 46.752 50.376 46.752 cv
50.9878 46.752 51.4438 46.4521 51.7559 45.8521 cv
52.0562 45.252 52.2119 44.3521 52.2119 43.1519 cv
52.2119 41.9521 52.0562 41.0518 51.7559 40.4521 cv
51.4438 39.8521 50.9878 39.5518 50.376 39.5518 cv
ef
56.5439 46.5239 mo
60.6719 46.5239 li
60.6719 47.52 li
55.1162 47.52 li
55.1162 46.5239 li
55.5601 46.0679 56.1719 45.4438 56.9521 44.6519 cv
57.7202 43.8721 58.2119 43.3682 58.416 43.1401 cv
58.7998 42.7197 59.064 42.3599 59.208 42.0601 cv
59.3521 41.772 59.436 41.4717 59.436 41.1841 cv
59.436 40.728 59.2681 40.3438 58.9438 40.0562 cv
58.6201 39.7681 58.2002 39.6118 57.6719 39.6118 cv
57.2998 39.6118 56.9038 39.6841 56.4961 39.8037 cv
56.0879 39.936 55.644 40.1279 55.1758 40.3921 cv
55.1758 39.1919 li
55.6558 39 56.1001 38.856 56.5078 38.7598 cv
56.916 38.6641 57.2998 38.6162 57.6479 38.6162 cv
58.5479 38.6162 59.2681 38.8438 59.8081 39.2998 cv
60.3481 39.7559 60.624 40.356 60.624 41.1118 cv
60.624 41.4717 60.5518 41.8198 60.4199 42.1318 cv
60.2881 42.4561 60.0479 42.8398 59.688 43.272 cv
59.5918 43.3921 59.2798 43.7158 58.752 44.2559 cv
58.2241 44.7959 57.4922 45.5518 56.5439 46.5239 cv
56.5439 46.5239 li
cp
ef
65.7358 38.6162 mo
66.708 38.6162 67.4521 39.0117 67.98 39.7798 cv
68.4961 40.5601 68.7598 41.688 68.7598 43.1519 cv
68.7598 44.6279 68.4961 45.7559 67.98 46.5239 cv
67.4521 47.292 66.708 47.6758 65.7358 47.6758 cv
64.752 47.6758 63.9961 47.292 63.48 46.5239 cv
62.9639 45.7559 62.7119 44.6279 62.7119 43.1519 cv
62.7119 41.688 62.9639 40.5601 63.48 39.7798 cv
63.9961 39.0117 64.752 38.6162 65.7358 38.6162 cv
65.7358 38.6162 li
cp
65.7358 39.5518 mo
65.124 39.5518 64.668 39.8521 64.356 40.4521 cv
64.0439 41.0518 63.8999 41.9521 63.8999 43.1519 cv
63.8999 44.3521 64.0439 45.252 64.356 45.8521 cv
64.668 46.4521 65.124 46.752 65.7358 46.752 cv
66.3481 46.752 66.8042 46.4521 67.1162 45.8521 cv
67.416 45.252 67.5718 44.3521 67.5718 43.1519 cv
67.5718 41.9521 67.416 41.0518 67.1162 40.4521 cv
66.8042 39.8521 66.3481 39.5518 65.7358 39.5518 cv
ef
21.252 278.184 mo
21.252 275.508 li
21.252 274.536 21.48 273.792 21.9238 273.288 cv
22.3682 272.784 23.0161 272.532 23.8682 272.532 cv
24.7319 272.532 25.3921 272.784 25.8242 273.288 cv
26.2681 273.792 26.4839 274.536 26.4839 275.508 cv
26.4839 276.996 li
30 276.996 li
30 278.184 li
21.252 278.184 li
21.252 278.184 li
cp
22.2241 276.996 mo
25.5122 276.996 li
25.5122 275.508 li
25.5122 274.956 25.3799 274.536 25.0918 274.236 cv
24.8042 273.936 24.396 273.78 23.8682 273.78 cv
23.3398 273.78 22.9438 273.936 22.6563 274.236 cv
22.3682 274.536 22.2241 274.956 22.2241 275.508 cv
22.2241 276.996 li
ef
26.1357 266.976 mo
25.5479 266.988 25.0801 267.156 24.7202 267.468 cv
24.3721 267.792 24.1919 268.224 24.1919 268.752 cv
24.1919 269.352 24.3721 269.832 24.708 270.192 cv
25.0439 270.552 25.5239 270.768 26.1357 270.816 cv
26.1357 266.976 li
26.1357 266.976 li
cp
26.4478 265.896 mo
26.9761 265.896 li
26.9761 270.852 li
27.7202 270.804 28.2959 270.588 28.6802 270.18 cv
29.064 269.784 29.2559 269.232 29.2559 268.512 cv
29.2559 268.104 29.208 267.696 29.1118 267.312 cv
29.0161 266.928 28.8599 266.532 28.644 266.148 cv
29.6641 266.148 li
29.832 266.532 29.9639 266.928 30.0361 267.336 cv
30.1079 267.744 30.1563 268.164 30.1563 268.572 cv
30.1563 269.628 29.856 270.456 29.2559 271.068 cv
28.6563 271.68 27.8281 271.98 26.7842 271.98 cv
25.7158 271.98 24.8638 271.692 24.228 271.116 cv
23.604 270.54 23.2798 269.748 23.2798 268.764 cv
23.2798 267.876 23.5679 267.18 24.1318 266.664 cv
24.708 266.16 25.4761 265.896 26.4478 265.896 cv
ef
24.4438 260.268 mo
24.3721 260.388 24.3242 260.52 24.2881 260.664 cv
24.2642 260.808 24.2402 260.964 24.2402 261.132 cv
24.2402 261.744 24.4438 262.212 24.8398 262.536 cv
25.2358 262.872 25.7998 263.028 26.5439 263.028 cv
30 263.028 li
30 264.108 li
23.436 264.108 li
23.436 263.028 li
24.4561 263.028 li
24.0601 262.812 23.7598 262.512 23.5679 262.152 cv
23.376 261.792 23.2798 261.348 23.2798 260.82 cv
23.2798 260.748 23.292 260.664 23.292 260.568 cv
23.3042 260.484 23.3159 260.388 23.3398 260.268 cv
24.4438 260.268 li
24.4438 260.268 li
cp
ef
23.688 254.544 mo
24.6958 254.544 li
24.5278 254.855 24.4082 255.156 24.3242 255.468 cv
24.2402 255.78 24.1919 256.08 24.1919 256.392 cv
24.1919 257.088 24.4199 257.64 24.8638 258.024 cv
25.3081 258.408 25.9321 258.6 26.7241 258.6 cv
27.5278 258.6 28.1519 258.408 28.5962 258.024 cv
29.04 257.64 29.2559 257.088 29.2559 256.392 cv
29.2559 256.08 29.2202 255.78 29.1357 255.468 cv
29.0518 255.156 28.9199 254.855 28.752 254.544 cv
29.748 254.544 li
29.8921 254.855 30 255.168 30.0601 255.48 cv
30.1201 255.804 30.1563 256.152 30.1563 256.512 cv
30.1563 257.496 29.856 258.288 29.2319 258.864 cv
28.6201 259.452 27.7798 259.74 26.7241 259.74 cv
25.6563 259.74 24.8159 259.452 24.2041 258.864 cv
23.5918 258.276 23.2798 257.472 23.2798 256.44 cv
23.2798 256.104 23.3159 255.78 23.3882 255.468 cv
23.46 255.156 23.5562 254.844 23.688 254.544 cv
23.688 254.544 li
cp
ef
26.1357 248.256 mo
25.5479 248.268 25.0801 248.436 24.7202 248.748 cv
24.3721 249.072 24.1919 249.504 24.1919 250.032 cv
24.1919 250.632 24.3721 251.112 24.708 251.472 cv
25.0439 251.832 25.5239 252.048 26.1357 252.096 cv
26.1357 248.256 li
26.1357 248.256 li
cp
26.4478 247.176 mo
26.9761 247.176 li
26.9761 252.132 li
27.7202 252.084 28.2959 251.868 28.6802 251.46 cv
29.064 251.064 29.2559 250.512 29.2559 249.792 cv
29.2559 249.384 29.208 248.976 29.1118 248.592 cv
29.0161 248.208 28.8599 247.812 28.644 247.428 cv
29.6641 247.428 li
29.832 247.812 29.9639 248.208 30.0361 248.616 cv
30.1079 249.024 30.1563 249.444 30.1563 249.852 cv
30.1563 250.908 29.856 251.736 29.2559 252.348 cv
28.6563 252.96 27.8281 253.26 26.7842 253.26 cv
25.7158 253.26 24.8638 252.972 24.228 252.396 cv
23.604 251.82 23.2798 251.028 23.2798 250.044 cv
23.2798 249.156 23.5679 248.46 24.1318 247.944 cv
24.708 247.44 25.4761 247.176 26.4478 247.176 cv
ef
26.04 239.892 mo
30 239.892 li
30 240.972 li
26.0762 240.972 li
25.4521 240.972 24.9961 241.104 24.6841 241.344 cv
24.3721 241.584 24.2158 241.944 24.2158 242.424 cv
24.2158 243.012 24.4082 243.468 24.7798 243.804 cv
25.1519 244.14 25.6563 244.308 26.292 244.308 cv
30 244.308 li
30 245.388 li
23.436 245.388 li
23.436 244.308 li
24.4561 244.308 li
24.0718 244.056 23.772 243.756 23.5801 243.396 cv
23.3882 243.048 23.2798 242.64 23.2798 242.184 cv
23.2798 241.44 23.52 240.864 23.9878 240.48 cv
24.4561 240.096 25.1401 239.892 26.04 239.892 cv
26.04 239.892 li
cp
ef
21.5762 236.604 mo
23.436 236.604 li
23.436 234.384 li
24.2759 234.384 li
24.2759 236.604 li
27.8398 236.604 li
28.3799 236.604 28.728 236.532 28.8721 236.388 cv
29.0278 236.244 29.1001 235.944 29.1001 235.488 cv
29.1001 234.384 li
30 234.384 li
30 235.488 li
30 236.328 29.8438 236.904 29.5322 237.216 cv
29.2202 237.528 28.6563 237.684 27.8398 237.684 cv
24.2759 237.684 li
24.2759 238.476 li
23.436 238.476 li
23.436 237.684 li
21.5762 237.684 li
21.5762 236.604 li
21.5762 236.604 li
cp
ef
23.2798 226.728 mo
23.2798 225.792 23.5918 225.06 24.1919 224.52 cv
24.8042 223.992 25.644 223.716 26.7241 223.716 cv
27.8042 223.716 28.644 223.992 29.2441 224.52 cv
29.856 225.06 30.1563 225.792 30.1563 226.728 cv
30.1563 227.676 29.856 228.42 29.2441 228.948 cv
28.644 229.476 27.8042 229.74 26.7241 229.74 cv
25.644 229.74 24.8042 229.476 24.1919 228.948 cv
23.5918 228.42 23.2798 227.676 23.2798 226.728 cv
23.2798 226.728 li
cp
24.1919 226.728 mo
24.1919 227.304 24.4199 227.76 24.876 228.096 cv
25.332 228.432 25.9438 228.6 26.7241 228.6 cv
27.5161 228.6 28.1279 228.444 28.584 228.108 cv
29.04 227.771 29.2559 227.316 29.2559 226.728 cv
29.2559 226.152 29.04 225.696 28.584 225.36 cv
28.1279 225.024 27.5161 224.855 26.7241 224.855 cv
25.9561 224.855 25.332 225.024 24.876 225.36 cv
24.4199 225.696 24.1919 226.152 24.1919 226.728 cv
ef
20.8799 218.508 mo
21.7798 218.508 li
21.7798 219.54 li
21.7798 219.924 21.8638 220.2 22.02 220.344 cv
22.1758 220.5 22.4521 220.572 22.8599 220.572 cv
23.436 220.572 li
23.436 218.796 li
24.2759 218.796 li
24.2759 220.572 li
30 220.572 li
30 221.652 li
24.2759 221.652 li
24.2759 222.684 li
23.436 222.684 li
23.436 221.652 li
22.98 221.652 li
22.2598 221.652 21.7202 221.484 21.3838 221.148 cv
21.0479 220.812 20.8799 220.271 20.8799 219.528 cv
20.8799 218.508 li
20.8799 218.508 li
cp
ef
21.5762 212.844 mo
23.436 212.844 li
23.436 210.624 li
24.2759 210.624 li
24.2759 212.844 li
27.8398 212.844 li
28.3799 212.844 28.728 212.772 28.8721 212.628 cv
29.0278 212.484 29.1001 212.184 29.1001 211.728 cv
29.1001 210.624 li
30 210.624 li
30 211.728 li
30 212.568 29.8438 213.144 29.5322 213.456 cv
29.2202 213.768 28.6563 213.924 27.8398 213.924 cv
24.2759 213.924 li
24.2759 214.716 li
23.436 214.716 li
23.436 213.924 li
21.5762 213.924 li
21.5762 212.844 li
21.5762 212.844 li
cp
ef
20.8799 209.112 mo
20.8799 208.032 li
22.248 208.032 li
22.248 209.112 li
20.8799 209.112 li
20.8799 209.112 li
cp
23.436 209.112 mo
23.436 208.032 li
30 208.032 li
30 209.112 li
23.436 209.112 li
ef
21.5762 204.684 mo
23.436 204.684 li
23.436 202.464 li
24.2759 202.464 li
24.2759 204.684 li
27.8398 204.684 li
28.3799 204.684 28.728 204.612 28.8721 204.468 cv
29.0278 204.324 29.1001 204.024 29.1001 203.568 cv
29.1001 202.464 li
30 202.464 li
30 203.568 li
30 204.408 29.8438 204.984 29.5322 205.296 cv
29.2202 205.608 28.6563 205.764 27.8398 205.764 cv
24.2759 205.764 li
24.2759 206.556 li
23.436 206.556 li
23.436 205.764 li
21.5762 205.764 li
21.5762 204.684 li
21.5762 204.684 li
cp
ef
20.8799 201.192 mo
20.8799 200.112 li
30 200.112 li
30 201.192 li
20.8799 201.192 li
20.8799 201.192 li
cp
ef
26.1357 193.296 mo
25.5479 193.308 25.0801 193.476 24.7202 193.788 cv
24.3721 194.112 24.1919 194.544 24.1919 195.072 cv
24.1919 195.672 24.3721 196.152 24.708 196.512 cv
25.0439 196.872 25.5239 197.088 26.1357 197.136 cv
26.1357 193.296 li
26.1357 193.296 li
cp
26.4478 192.216 mo
26.9761 192.216 li
26.9761 197.172 li
27.7202 197.124 28.2959 196.908 28.6802 196.5 cv
29.064 196.104 29.2559 195.552 29.2559 194.832 cv
29.2559 194.424 29.208 194.016 29.1118 193.632 cv
29.0161 193.248 28.8599 192.852 28.644 192.468 cv
29.6641 192.468 li
29.832 192.852 29.9639 193.248 30.0361 193.656 cv
30.1079 194.064 30.1563 194.484 30.1563 194.892 cv
30.1563 195.948 29.856 196.776 29.2559 197.388 cv
28.6563 198 27.8281 198.3 26.7842 198.3 cv
25.7158 198.3 24.8638 198.012 24.228 197.436 cv
23.604 196.86 23.2798 196.068 23.2798 195.084 cv
23.2798 194.196 23.5679 193.5 24.1318 192.984 cv
24.708 192.48 25.4761 192.216 26.4478 192.216 cv
ef
23.436 187.176 mo
23.436 186.096 li
28.5601 184.752 li
23.436 183.408 li
23.436 182.136 li
28.5601 180.792 li
23.436 179.448 li
23.436 178.368 li
30 180.084 li
30 181.356 li
24.624 182.772 li
30 184.188 li
30 185.46 li
23.436 187.176 li
23.436 187.176 li
cp
ef
23.2798 174.168 mo
23.2798 173.232 23.5918 172.5 24.1919 171.96 cv
24.8042 171.432 25.644 171.156 26.7241 171.156 cv
27.8042 171.156 28.644 171.432 29.2441 171.96 cv
29.856 172.5 30.1563 173.232 30.1563 174.168 cv
30.1563 175.116 29.856 175.86 29.2441 176.388 cv
28.644 176.916 27.8042 177.18 26.7241 177.18 cv
25.644 177.18 24.8042 176.916 24.1919 176.388 cv
23.5918 175.86 23.2798 175.116 23.2798 174.168 cv
23.2798 174.168 li
cp
24.1919 174.168 mo
24.1919 174.744 24.4199 175.2 24.876 175.536 cv
25.332 175.872 25.9438 176.04 26.7241 176.04 cv
27.5161 176.04 28.1279 175.884 28.584 175.548 cv
29.04 175.212 29.2559 174.756 29.2559 174.168 cv
29.2559 173.592 29.04 173.136 28.584 172.8 cv
28.1279 172.464 27.5161 172.296 26.7241 172.296 cv
25.9561 172.296 25.332 172.464 24.876 172.8 cv
24.4199 173.136 24.1919 173.592 24.1919 174.168 cv
ef
24.4438 165.708 mo
24.3721 165.828 24.3242 165.96 24.2881 166.104 cv
24.2642 166.248 24.2402 166.404 24.2402 166.572 cv
24.2402 167.184 24.4438 167.652 24.8398 167.976 cv
25.2358 168.312 25.7998 168.468 26.5439 168.468 cv
30 168.468 li
30 169.548 li
23.436 169.548 li
23.436 168.468 li
24.4561 168.468 li
24.0601 168.252 23.7598 167.952 23.5679 167.592 cv
23.376 167.232 23.2798 166.788 23.2798 166.26 cv
23.2798 166.188 23.292 166.104 23.292 166.008 cv
23.3042 165.924 23.3159 165.828 23.3398 165.708 cv
24.4438 165.708 li
24.4438 165.708 li
cp
ef
26.7241 164.064 mo
27.5161 164.064 28.1401 163.908 28.5962 163.584 cv
29.0518 163.26 29.2681 162.804 29.2681 162.228 cv
29.2681 161.664 29.0518 161.22 28.5962 160.884 cv
28.1401 160.56 27.5161 160.392 26.7241 160.392 cv
25.9321 160.392 25.3198 160.56 24.8638 160.884 cv
24.4082 161.22 24.1802 161.664 24.1802 162.228 cv
24.1802 162.804 24.4082 163.26 24.8638 163.584 cv
25.3198 163.908 25.9321 164.064 26.7241 164.064 cv
26.7241 164.064 li
cp
24.4321 160.392 mo
20.8799 160.392 li
20.8799 159.312 li
30 159.312 li
30 160.392 li
29.0161 160.392 li
29.4121 160.62 29.7002 160.908 29.8799 161.256 cv
30.0601 161.604 30.1563 162.012 30.1563 162.492 cv
30.1563 163.284 29.8438 163.932 29.2202 164.436 cv
28.5962 164.94 27.7559 165.18 26.7241 165.18 cv
25.6919 165.18 24.8638 164.94 24.228 164.436 cv
23.604 163.932 23.2798 163.284 23.2798 162.492 cv
23.2798 162.012 23.376 161.604 23.5679 161.256 cv
23.7598 160.908 24.0479 160.62 24.4321 160.392 cv
ef
23.6279 152.844 mo
24.6479 152.844 li
24.5039 153.156 24.3838 153.468 24.2998 153.792 cv
24.228 154.128 24.1802 154.464 24.1802 154.812 cv
24.1802 155.352 24.2642 155.76 24.4321 156.024 cv
24.6001 156.288 24.8398 156.42 25.1641 156.42 cv
25.416 156.42 25.6079 156.324 25.752 156.132 cv
25.896 155.94 26.04 155.556 26.1602 154.98 cv
26.2441 154.608 li
26.4121 153.84 26.6519 153.3 26.9399 152.976 cv
27.2402 152.664 27.6602 152.496 28.188 152.496 cv
28.7998 152.496 29.2798 152.736 29.6279 153.216 cv
29.9878 153.696 30.1563 154.368 30.1563 155.208 cv
30.1563 155.568 30.1201 155.928 30.0601 156.312 cv
30 156.696 29.9038 157.092 29.7598 157.512 cv
28.644 157.512 li
28.8599 157.116 29.0161 156.72 29.1118 156.336 cv
29.2202 155.952 29.2681 155.568 29.2681 155.184 cv
29.2681 154.68 29.1841 154.284 29.0161 154.008 cv
28.8481 153.744 28.5962 153.6 28.272 153.6 cv
27.9839 153.6 27.7559 153.708 27.6001 153.9 cv
27.4438 154.092 27.2881 154.524 27.144 155.196 cv
27.0601 155.568 li
26.916 156.24 26.7002 156.732 26.4121 157.02 cv
26.124 157.32 25.728 157.464 25.2119 157.464 cv
24.6001 157.464 24.1201 157.248 23.7842 156.816 cv
23.4478 156.384 23.2798 155.76 23.2798 154.944 cv
23.2798 154.548 23.3159 154.176 23.376 153.816 cv
23.436 153.468 23.52 153.144 23.6279 152.844 cv
23.6279 152.844 li
cp
ef
1 lw
2 lc
72 388.8 mo
72 43.2002 li
72 388.8 mo
518.4 388.8 li
518.4 388.8 mo
518.4 43.2002 li
72 43.2002 mo
518.4 43.2002 li
@
79.2002 137.707 mo
226.462 137.707 li
226.462 50.3999 li
79.2002 50.3999 li
79.2002 137.707 li
79.2002 137.707 li
cp
1 1 1 rgb
f
79.2002 137.707 mo
226.462 137.707 li
226.462 50.3999 li
79.2002 50.3999 li
79.2002 137.707 li
79.2002 137.707 li
cp
0 0 0 rgb
@
89.2798 61.7607 mo
109.44 61.7607 li
0 0 1 rgb
@
132.768 60.355 mo
133.085 59.7793 133.474 59.3613 133.92 59.0737 cv
134.366 58.7998 134.899 58.6563 135.519 58.6563 cv
136.325 58.6563 136.958 58.9438 137.405 59.52 cv
137.851 60.0957 138.082 60.917 138.082 61.9678 cv
138.082 66.7197 li
136.786 66.7197 li
136.786 62.0112 li
136.786 61.2622 136.642 60.7007 136.382 60.3262 cv
136.109 59.9663 135.706 59.7793 135.158 59.7793 cv
134.481 59.7793 133.949 60.0098 133.56 60.4561 cv
133.171 60.9023 132.984 61.5073 132.984 62.2705 cv
132.984 66.7197 li
131.688 66.7197 li
131.688 62.0112 li
131.688 61.2622 131.544 60.7007 131.285 60.3262 cv
131.011 59.9663 130.594 59.7793 130.046 59.7793 cv
129.384 59.7793 128.851 60.0098 128.462 60.4561 cv
128.074 60.9023 127.886 61.5073 127.886 62.2705 cv
127.886 66.7197 li
126.59 66.7197 li
126.59 58.8433 li
127.886 58.8433 li
127.886 60.0674 li
128.174 59.5918 128.534 59.2319 128.952 59.0015 cv
129.355 58.771 129.845 58.6563 130.421 58.6563 cv
130.997 58.6563 131.472 58.7998 131.875 59.0879 cv
132.278 59.376 132.566 59.8081 132.768 60.355 cv
132.768 60.355 li
cp
0 0 0 rgb
ef
140.554 55.7759 mo
141.85 55.7759 li
141.85 57.4175 li
140.554 57.4175 li
140.554 55.7759 li
140.554 55.7759 li
cp
140.554 58.8433 mo
141.85 58.8433 li
141.85 66.7197 li
140.554 66.7197 li
140.554 58.8433 li
ef
150.307 59.1455 mo
150.307 60.355 li
149.933 60.1533 149.573 60.0098 149.198 59.9087 cv
148.824 59.8081 148.464 59.7505 148.09 59.7505 cv
147.254 59.7505 146.592 60.0239 146.131 60.5566 cv
145.67 61.0894 145.44 61.8384 145.44 62.7886 cv
145.44 63.7534 145.67 64.5024 146.131 65.0352 cv
146.592 65.5679 147.254 65.8271 148.09 65.8271 cv
148.464 65.8271 148.824 65.7842 149.198 65.6831 cv
149.573 65.5825 149.933 65.4238 150.307 65.2222 cv
150.307 66.4175 li
149.933 66.5903 149.559 66.7197 149.184 66.792 cv
148.795 66.8638 148.377 66.9072 147.946 66.9072 cv
146.765 66.9072 145.814 66.5474 145.123 65.7983 cv
144.417 65.064 144.072 64.0562 144.072 62.7886 cv
144.072 61.5073 144.417 60.499 145.123 59.7646 cv
145.829 59.0303 146.793 58.6563 148.032 58.6563 cv
148.435 58.6563 148.824 58.6992 149.198 58.7856 cv
149.573 58.8721 149.947 58.9873 150.307 59.1455 cv
150.307 59.1455 li
cp
ef
157.118 60.0527 mo
156.975 59.9663 156.816 59.9087 156.643 59.8657 cv
156.47 59.8369 156.283 59.8081 156.082 59.8081 cv
155.347 59.8081 154.786 60.0527 154.397 60.5278 cv
153.994 61.0029 153.807 61.6797 153.807 62.5728 cv
153.807 66.7197 li
152.51 66.7197 li
152.51 58.8433 li
153.807 58.8433 li
153.807 60.0674 li
154.065 59.5918 154.426 59.2319 154.857 59.0015 cv
155.29 58.771 155.822 58.6563 156.456 58.6563 cv
156.542 58.6563 156.643 58.6704 156.758 58.6704 cv
156.859 58.6846 156.975 58.6992 157.118 58.728 cv
157.118 60.0527 li
157.118 60.0527 li
cp
ef
161.126 58.6563 mo
162.25 58.6563 163.128 59.0303 163.776 59.7505 cv
164.41 60.4849 164.741 61.4927 164.741 62.7886 cv
164.741 64.085 164.41 65.0928 163.776 65.8125 cv
163.128 66.5474 162.25 66.9072 161.126 66.9072 cv
159.989 66.9072 159.096 66.5474 158.462 65.8125 cv
157.829 65.0928 157.512 64.085 157.512 62.7886 cv
157.512 61.4927 157.829 60.4849 158.462 59.7505 cv
159.096 59.0303 159.989 58.6563 161.126 58.6563 cv
161.126 58.6563 li
cp
161.126 59.7505 mo
160.435 59.7505 159.888 60.0239 159.485 60.5713 cv
159.082 61.1182 158.88 61.8525 158.88 62.7886 cv
158.88 63.7393 159.067 64.4736 159.47 65.0205 cv
159.874 65.5679 160.421 65.8271 161.126 65.8271 cv
161.817 65.8271 162.365 65.5679 162.768 65.0205 cv
163.171 64.4736 163.373 63.7393 163.373 62.7886 cv
163.373 61.8672 163.171 61.1182 162.768 60.5713 cv
162.365 60.0239 161.817 59.7505 161.126 59.7505 cv
ef
173.117 62.2271 mo
173.117 66.7197 li
171.821 66.7197 li
171.821 65.5249 li
171.519 66.0142 171.144 66.3599 170.712 66.5762 cv
170.28 66.792 169.733 66.9072 169.099 66.9072 cv
168.293 66.9072 167.645 66.6914 167.169 66.2446 cv
166.694 65.7983 166.464 65.1934 166.464 64.4302 cv
166.464 63.5518 166.752 62.8896 167.357 62.4287 cv
167.947 61.9824 168.826 61.752 170.006 61.752 cv
171.821 61.752 li
171.821 61.6226 li
171.821 61.0322 171.619 60.5713 171.23 60.2402 cv
170.842 59.9233 170.294 59.7505 169.589 59.7505 cv
169.128 59.7505 168.696 59.8081 168.264 59.9233 cv
167.832 60.0381 167.429 60.1968 167.04 60.3984 cv
167.04 59.2031 li
167.501 59.0303 167.961 58.8862 168.408 58.7998 cv
168.854 58.7134 169.286 58.6563 169.718 58.6563 cv
170.856 58.6563 171.706 58.9585 172.267 59.5488 cv
172.829 60.1392 173.117 61.0322 173.117 62.2271 cv
173.117 62.2271 li
cp
170.539 62.7598 mo
169.488 62.7598 168.768 62.8896 168.365 63.1201 cv
167.961 63.3647 167.76 63.7681 167.76 64.3438 cv
167.76 64.8047 167.904 65.1792 168.207 65.4385 cv
168.509 65.7119 168.926 65.8418 169.445 65.8418 cv
170.165 65.8418 170.741 65.5967 171.173 65.0781 cv
171.605 64.5742 171.821 63.8975 171.821 63.0479 cv
171.821 62.7598 li
170.539 62.7598 li
ef
180.158 60.0527 mo
180.015 59.9663 179.856 59.9087 179.683 59.8657 cv
179.51 59.8369 179.323 59.8081 179.122 59.8081 cv
178.387 59.8081 177.826 60.0527 177.437 60.5278 cv
177.034 61.0029 176.846 61.6797 176.846 62.5728 cv
176.846 66.7197 li
175.55 66.7197 li
175.55 58.8433 li
176.846 58.8433 li
176.846 60.0674 li
177.105 59.5918 177.466 59.2319 177.897 59.0015 cv
178.33 58.771 178.862 58.6563 179.496 58.6563 cv
179.583 58.6563 179.683 58.6704 179.798 58.6704 cv
179.899 58.6846 180.015 58.6992 180.158 58.728 cv
180.158 60.0527 li
180.158 60.0527 li
cp
ef
185.918 60.0527 mo
185.774 59.9663 185.616 59.9087 185.443 59.8657 cv
185.271 59.8369 185.083 59.8081 184.882 59.8081 cv
184.147 59.8081 183.585 60.0527 183.197 60.5278 cv
182.793 61.0029 182.606 61.6797 182.606 62.5728 cv
182.606 66.7197 li
181.311 66.7197 li
181.311 58.8433 li
182.606 58.8433 li
182.606 60.0674 li
182.866 59.5918 183.226 59.2319 183.658 59.0015 cv
184.09 58.771 184.623 58.6563 185.256 58.6563 cv
185.342 58.6563 185.443 58.6704 185.559 58.6704 cv
185.659 58.6846 185.774 58.6992 185.918 58.728 cv
185.918 60.0527 li
185.918 60.0527 li
cp
ef
193.517 62.2271 mo
193.517 66.7197 li
192.221 66.7197 li
192.221 65.5249 li
191.918 66.0142 191.544 66.3599 191.112 66.5762 cv
190.68 66.792 190.133 66.9072 189.499 66.9072 cv
188.693 66.9072 188.045 66.6914 187.569 66.2446 cv
187.094 65.7983 186.864 65.1934 186.864 64.4302 cv
186.864 63.5518 187.152 62.8896 187.757 62.4287 cv
188.347 61.9824 189.226 61.752 190.406 61.752 cv
192.221 61.752 li
192.221 61.6226 li
192.221 61.0322 192.019 60.5713 191.63 60.2402 cv
191.242 59.9233 190.694 59.7505 189.989 59.7505 cv
189.528 59.7505 189.096 59.8081 188.664 59.9233 cv
188.232 60.0381 187.829 60.1968 187.44 60.3984 cv
187.44 59.2031 li
187.901 59.0303 188.362 58.8862 188.808 58.7998 cv
189.254 58.7134 189.687 58.6563 190.118 58.6563 cv
191.256 58.6563 192.105 58.9585 192.667 59.5488 cv
193.229 60.1392 193.517 61.0322 193.517 62.2271 cv
193.517 62.2271 li
cp
190.939 62.7598 mo
189.888 62.7598 189.168 62.8896 188.765 63.1201 cv
188.362 63.3647 188.16 63.7681 188.16 64.3438 cv
188.16 64.8047 188.304 65.1792 188.606 65.4385 cv
188.909 65.7119 189.326 65.8418 189.845 65.8418 cv
190.565 65.8418 191.141 65.5967 191.573 65.0781 cv
192.005 64.5742 192.221 63.8975 192.221 63.0479 cv
192.221 62.7598 li
190.939 62.7598 li
ef
199.277 67.4399 mo
198.902 68.3613 198.542 68.981 198.197 69.2686 cv
197.851 69.5566 197.391 69.7007 196.814 69.7007 cv
195.777 69.7007 li
195.777 68.6206 li
196.541 68.6206 li
196.886 68.6206 197.16 68.5342 197.362 68.3613 cv
197.563 68.189 197.779 67.7998 198.024 67.1665 cv
198.254 66.5903 li
195.072 58.8433 li
196.44 58.8433 li
198.902 65.0063 li
201.365 58.8433 li
202.733 58.8433 li
199.277 67.4399 li
199.277 67.4399 li
cp
ef
89.2798 82.5068 mo
109.44 82.5068 li
0 0.501961 0 rgb
@
131.659 79.9536 mo
131.659 81.1777 li
131.285 81.0049 130.91 80.8608 130.521 80.7598 cv
130.118 80.6738 129.715 80.6162 129.297 80.6162 cv
128.649 80.6162 128.16 80.7168 127.843 80.9185 cv
127.526 81.1201 127.368 81.4082 127.368 81.7969 cv
127.368 82.0991 127.483 82.3296 127.713 82.5024 cv
127.944 82.6753 128.405 82.8481 129.096 82.9922 cv
129.542 83.0928 li
130.464 83.2944 131.112 83.5825 131.501 83.9277 cv
131.875 84.2881 132.077 84.792 132.077 85.4258 cv
132.077 86.1602 131.789 86.7358 131.213 87.1533 cv
130.637 87.5854 129.831 87.7871 128.822 87.7871 cv
128.391 87.7871 127.958 87.7441 127.498 87.6719 cv
127.037 87.6001 126.562 87.4849 126.058 87.312 cv
126.058 85.9727 li
126.533 86.2319 127.008 86.4189 127.469 86.5342 cv
127.93 86.6641 128.391 86.7217 128.851 86.7217 cv
129.456 86.7217 129.931 86.6206 130.262 86.4189 cv
130.579 86.2178 130.752 85.915 130.752 85.5264 cv
130.752 85.1807 130.623 84.9072 130.392 84.7197 cv
130.162 84.5327 129.643 84.3457 128.837 84.1729 cv
128.391 84.0718 li
127.584 83.8994 126.994 83.6401 126.648 83.2944 cv
126.288 82.9487 126.115 82.4736 126.115 81.8545 cv
126.115 81.1201 126.375 80.5439 126.893 80.1406 cv
127.411 79.7373 128.16 79.5361 129.139 79.5361 cv
129.614 79.5361 130.061 79.5791 130.493 79.6514 cv
130.91 79.7231 131.299 79.8242 131.659 79.9536 cv
131.659 79.9536 li
cp
0 0 0 rgb
ef
140.625 82.8481 mo
140.625 87.6001 li
139.33 87.6001 li
139.33 82.8911 li
139.33 82.1426 139.171 81.5952 138.883 81.2207 cv
138.595 80.8462 138.163 80.6592 137.587 80.6592 cv
136.882 80.6592 136.334 80.8896 135.931 81.3359 cv
135.528 81.7822 135.326 82.3872 135.326 83.1504 cv
135.326 87.6001 li
134.03 87.6001 li
134.03 79.7231 li
135.326 79.7231 li
135.326 80.9473 li
135.629 80.4863 135.989 80.1265 136.421 79.896 cv
136.838 79.6655 137.328 79.5361 137.875 79.5361 cv
138.768 79.5361 139.459 79.8242 139.92 80.3857 cv
140.381 80.9473 140.625 81.7681 140.625 82.8481 cv
140.625 82.8481 li
cp
ef
148.853 83.6689 mo
148.853 82.7183 148.651 81.9839 148.262 81.4365 cv
147.859 80.8896 147.326 80.6162 146.649 80.6162 cv
145.958 80.6162 145.426 80.8896 145.037 81.4365 cv
144.634 81.9839 144.446 82.7183 144.446 83.6689 cv
144.446 84.6191 144.634 85.3682 145.037 85.915 cv
145.426 86.4624 145.958 86.7217 146.649 86.7217 cv
147.326 86.7217 147.859 86.4624 148.262 85.915 cv
148.651 85.3682 148.853 84.6191 148.853 83.6689 cv
148.853 83.6689 li
cp
144.446 86.4189 mo
144.446 90.5806 li
143.15 90.5806 li
143.15 79.7231 li
144.446 79.7231 li
144.446 80.9185 li
144.706 80.4575 145.051 80.1118 145.469 79.8818 cv
145.886 79.6514 146.391 79.5361 146.966 79.5361 cv
147.917 79.5361 148.694 79.9248 149.299 80.6738 cv
149.89 81.4365 150.192 82.4302 150.192 83.6689 cv
150.192 84.9072 149.89 85.915 149.299 86.6641 cv
148.694 87.4126 147.917 87.7871 146.966 87.7871 cv
146.391 87.7871 145.886 87.6719 145.469 87.4561 cv
145.051 87.2402 144.706 86.8945 144.446 86.4189 cv
ef
89.2798 103.254 mo
109.44 103.254 li
1 0 0 rgb
@
132.768 101.875 mo
133.085 101.299 133.474 100.881 133.92 100.594 cv
134.366 100.32 134.899 100.176 135.519 100.176 cv
136.325 100.176 136.958 100.464 137.405 101.04 cv
137.851 101.616 138.082 102.437 138.082 103.488 cv
138.082 108.24 li
136.786 108.24 li
136.786 103.531 li
136.786 102.782 136.642 102.221 136.382 101.846 cv
136.109 101.486 135.706 101.299 135.158 101.299 cv
134.481 101.299 133.949 101.53 133.56 101.976 cv
133.171 102.422 132.984 103.027 132.984 103.791 cv
132.984 108.24 li
131.688 108.24 li
131.688 103.531 li
131.688 102.782 131.544 102.221 131.285 101.846 cv
131.011 101.486 130.594 101.299 130.046 101.299 cv
129.384 101.299 128.851 101.53 128.462 101.976 cv
128.074 102.422 127.886 103.027 127.886 103.791 cv
127.886 108.24 li
126.59 108.24 li
126.59 100.363 li
127.886 100.363 li
127.886 101.587 li
128.174 101.112 128.534 100.752 128.952 100.521 cv
129.355 100.291 129.845 100.176 130.421 100.176 cv
130.997 100.176 131.472 100.32 131.875 100.608 cv
132.278 100.896 132.566 101.328 132.768 101.875 cv
132.768 101.875 li
cp
0 0 0 rgb
ef
140.554 97.2959 mo
141.85 97.2959 li
141.85 98.9375 li
140.554 98.9375 li
140.554 97.2959 li
140.554 97.2959 li
cp
140.554 100.363 mo
141.85 100.363 li
141.85 108.24 li
140.554 108.24 li
140.554 100.363 li
ef
150.307 100.666 mo
150.307 101.875 li
149.933 101.674 149.573 101.53 149.198 101.429 cv
148.824 101.328 148.464 101.271 148.09 101.271 cv
147.254 101.271 146.592 101.544 146.131 102.077 cv
145.67 102.609 145.44 103.358 145.44 104.309 cv
145.44 105.273 145.67 106.022 146.131 106.555 cv
146.592 107.088 147.254 107.347 148.09 107.347 cv
148.464 107.347 148.824 107.304 149.198 107.203 cv
149.573 107.103 149.933 106.944 150.307 106.742 cv
150.307 107.938 li
149.933 108.11 149.559 108.24 149.184 108.312 cv
148.795 108.384 148.377 108.427 147.946 108.427 cv
146.765 108.427 145.814 108.067 145.123 107.318 cv
144.417 106.584 144.072 105.576 144.072 104.309 cv
144.072 103.027 144.417 102.019 145.123 101.285 cv
145.829 100.55 146.793 100.176 148.032 100.176 cv
148.435 100.176 148.824 100.219 149.198 100.306 cv
149.573 100.392 149.947 100.507 150.307 100.666 cv
150.307 100.666 li
cp
ef
157.118 101.573 mo
156.975 101.486 156.816 101.429 156.643 101.386 cv
156.47 101.357 156.283 101.328 156.082 101.328 cv
155.347 101.328 154.786 101.573 154.397 102.048 cv
153.994 102.523 153.807 103.2 153.807 104.093 cv
153.807 108.24 li
152.51 108.24 li
152.51 100.363 li
153.807 100.363 li
153.807 101.587 li
154.065 101.112 154.426 100.752 154.857 100.521 cv
155.29 100.291 155.822 100.176 156.456 100.176 cv
156.542 100.176 156.643 100.19 156.758 100.19 cv
156.859 100.205 156.975 100.219 157.118 100.248 cv
157.118 101.573 li
157.118 101.573 li
cp
ef
161.126 100.176 mo
162.25 100.176 163.128 100.55 163.776 101.271 cv
164.41 102.005 164.741 103.013 164.741 104.309 cv
164.741 105.605 164.41 106.613 163.776 107.333 cv
163.128 108.067 162.25 108.427 161.126 108.427 cv
159.989 108.427 159.096 108.067 158.462 107.333 cv
157.829 106.613 157.512 105.605 157.512 104.309 cv
157.512 103.013 157.829 102.005 158.462 101.271 cv
159.096 100.55 159.989 100.176 161.126 100.176 cv
161.126 100.176 li
cp
161.126 101.271 mo
160.435 101.271 159.888 101.544 159.485 102.091 cv
159.082 102.638 158.88 103.373 158.88 104.309 cv
158.88 105.259 159.067 105.994 159.47 106.541 cv
159.874 107.088 160.421 107.347 161.126 107.347 cv
161.817 107.347 162.365 107.088 162.768 106.541 cv
163.171 105.994 163.373 105.259 163.373 104.309 cv
163.373 103.387 163.171 102.638 162.768 102.091 cv
162.365 101.544 161.817 101.271 161.126 101.271 cv
ef
171.979 100.594 mo
171.979 101.817 li
171.605 101.645 171.23 101.501 170.842 101.4 cv
170.438 101.313 170.035 101.256 169.618 101.256 cv
168.97 101.256 168.48 101.357 168.163 101.559 cv
167.846 101.76 167.688 102.048 167.688 102.437 cv
167.688 102.739 167.803 102.97 168.034 103.143 cv
168.264 103.315 168.725 103.488 169.416 103.632 cv
169.862 103.733 li
170.784 103.935 171.432 104.222 171.821 104.568 cv
172.195 104.928 172.397 105.432 172.397 106.065 cv
172.397 106.8 172.109 107.376 171.533 107.793 cv
170.957 108.226 170.15 108.427 169.143 108.427 cv
168.71 108.427 168.278 108.384 167.817 108.312 cv
167.357 108.24 166.882 108.125 166.377 107.952 cv
166.377 106.613 li
166.853 106.872 167.328 107.059 167.789 107.174 cv
168.25 107.304 168.71 107.361 169.171 107.361 cv
169.776 107.361 170.251 107.261 170.583 107.059 cv
170.899 106.857 171.072 106.555 171.072 106.167 cv
171.072 105.821 170.942 105.547 170.712 105.36 cv
170.481 105.173 169.963 104.985 169.157 104.813 cv
168.71 104.712 li
167.904 104.539 167.313 104.28 166.968 103.935 cv
166.608 103.589 166.435 103.114 166.435 102.494 cv
166.435 101.76 166.694 101.184 167.213 100.781 cv
167.731 100.377 168.48 100.176 169.459 100.176 cv
169.935 100.176 170.381 100.219 170.813 100.291 cv
171.23 100.363 171.619 100.464 171.979 100.594 cv
171.979 100.594 li
cp
ef
180.557 103.747 mo
180.557 108.24 li
179.261 108.24 li
179.261 107.045 li
178.958 107.534 178.584 107.88 178.152 108.096 cv
177.72 108.312 177.173 108.427 176.539 108.427 cv
175.733 108.427 175.085 108.211 174.609 107.765 cv
174.134 107.318 173.904 106.713 173.904 105.95 cv
173.904 105.072 174.192 104.41 174.797 103.949 cv
175.387 103.502 176.266 103.272 177.446 103.272 cv
179.261 103.272 li
179.261 103.143 li
179.261 102.552 179.059 102.091 178.67 101.76 cv
178.282 101.443 177.734 101.271 177.029 101.271 cv
176.568 101.271 176.136 101.328 175.704 101.443 cv
175.272 101.559 174.869 101.717 174.48 101.918 cv
174.48 100.723 li
174.941 100.55 175.401 100.406 175.848 100.32 cv
176.294 100.233 176.727 100.176 177.158 100.176 cv
178.296 100.176 179.146 100.479 179.707 101.069 cv
180.269 101.659 180.557 102.552 180.557 103.747 cv
180.557 103.747 li
cp
177.979 104.28 mo
176.928 104.28 176.208 104.41 175.805 104.64 cv
175.401 104.885 175.2 105.288 175.2 105.864 cv
175.2 106.325 175.344 106.699 175.646 106.958 cv
175.949 107.232 176.366 107.361 176.885 107.361 cv
177.605 107.361 178.181 107.117 178.613 106.598 cv
179.045 106.094 179.261 105.417 179.261 104.568 cv
179.261 104.28 li
177.979 104.28 li
ef
184.555 98.1313 mo
184.555 100.363 li
187.219 100.363 li
187.219 101.371 li
184.555 101.371 li
184.555 105.648 li
184.555 106.296 184.642 106.713 184.814 106.886 cv
184.987 107.074 185.347 107.16 185.895 107.16 cv
187.219 107.16 li
187.219 108.24 li
185.895 108.24 li
184.886 108.24 184.195 108.053 183.821 107.678 cv
183.446 107.304 183.259 106.627 183.259 105.648 cv
183.259 101.371 li
182.309 101.371 li
182.309 100.363 li
183.259 100.363 li
183.259 98.1313 li
184.555 98.1313 li
184.555 98.1313 li
cp
ef
194.237 103.603 mo
194.223 102.897 194.021 102.336 193.646 101.904 cv
193.258 101.486 192.739 101.271 192.105 101.271 cv
191.386 101.271 190.81 101.486 190.377 101.89 cv
189.946 102.293 189.687 102.869 189.629 103.603 cv
194.237 103.603 li
194.237 103.603 li
cp
195.533 103.978 mo
195.533 104.611 li
189.585 104.611 li
189.643 105.504 189.902 106.195 190.392 106.656 cv
190.867 107.117 191.53 107.347 192.394 107.347 cv
192.883 107.347 193.373 107.29 193.833 107.174 cv
194.294 107.059 194.77 106.872 195.23 106.613 cv
195.23 107.837 li
194.77 108.039 194.294 108.197 193.805 108.283 cv
193.315 108.37 192.811 108.427 192.322 108.427 cv
191.054 108.427 190.061 108.067 189.326 107.347 cv
188.592 106.627 188.232 105.634 188.232 104.381 cv
188.232 103.099 188.578 102.077 189.269 101.313 cv
189.96 100.565 190.91 100.176 192.091 100.176 cv
193.157 100.176 193.992 100.521 194.611 101.198 cv
195.216 101.89 195.533 102.811 195.533 103.978 cv
ef
197.674 97.2959 mo
198.97 97.2959 li
198.97 108.24 li
197.674 108.24 li
197.674 97.2959 li
197.674 97.2959 li
cp
ef
201.753 97.2959 mo
203.05 97.2959 li
203.05 108.24 li
201.753 108.24 li
201.753 97.2959 li
201.753 97.2959 li
cp
ef
205.594 97.2959 mo
206.89 97.2959 li
206.89 98.9375 li
205.594 98.9375 li
205.594 97.2959 li
205.594 97.2959 li
cp
205.594 100.363 mo
206.89 100.363 li
206.89 108.24 li
205.594 108.24 li
205.594 100.363 li
ef
210.955 98.1313 mo
210.955 100.363 li
213.619 100.363 li
213.619 101.371 li
210.955 101.371 li
210.955 105.648 li
210.955 106.296 211.042 106.713 211.214 106.886 cv
211.387 107.074 211.747 107.16 212.294 107.16 cv
213.619 107.16 li
213.619 108.24 li
212.294 108.24 li
211.286 108.24 210.595 108.053 210.221 107.678 cv
209.846 107.304 209.659 106.627 209.659 105.648 cv
209.659 101.371 li
208.709 101.371 li
208.709 100.363 li
209.659 100.363 li
209.659 98.1313 li
210.955 98.1313 li
210.955 98.1313 li
cp
ef
220.637 103.603 mo
220.623 102.897 220.421 102.336 220.046 101.904 cv
219.658 101.486 219.139 101.271 218.506 101.271 cv
217.786 101.271 217.209 101.486 216.777 101.89 cv
216.346 102.293 216.086 102.869 216.029 103.603 cv
220.637 103.603 li
220.637 103.603 li
cp
221.933 103.978 mo
221.933 104.611 li
215.985 104.611 li
216.043 105.504 216.302 106.195 216.792 106.656 cv
217.267 107.117 217.93 107.347 218.793 107.347 cv
219.283 107.347 219.773 107.29 220.233 107.174 cv
220.694 107.059 221.169 106.872 221.63 106.613 cv
221.63 107.837 li
221.169 108.039 220.694 108.197 220.205 108.283 cv
219.715 108.37 219.211 108.427 218.722 108.427 cv
217.455 108.427 216.461 108.067 215.727 107.347 cv
214.992 106.627 214.632 105.634 214.632 104.381 cv
214.632 103.099 214.978 102.077 215.669 101.313 cv
216.36 100.565 217.311 100.176 218.491 100.176 cv
219.557 100.176 220.392 100.521 221.011 101.198 cv
221.616 101.89 221.933 102.811 221.933 103.978 cv
ef
89.2798 124.001 mo
109.44 124.001 li
0 0.74902 0.74902 rgb
@
131.659 121.474 mo
131.659 122.698 li
131.285 122.525 130.91 122.381 130.521 122.28 cv
130.118 122.193 129.715 122.136 129.297 122.136 cv
128.649 122.136 128.16 122.237 127.843 122.438 cv
127.526 122.64 127.368 122.928 127.368 123.317 cv
127.368 123.619 127.483 123.85 127.713 124.022 cv
127.944 124.195 128.405 124.368 129.096 124.512 cv
129.542 124.613 li
130.464 124.814 131.112 125.103 131.501 125.448 cv
131.875 125.808 132.077 126.312 132.077 126.945 cv
132.077 127.68 131.789 128.256 131.213 128.674 cv
130.637 129.105 129.831 129.307 128.822 129.307 cv
128.391 129.307 127.958 129.264 127.498 129.192 cv
127.037 129.12 126.562 129.005 126.058 128.832 cv
126.058 127.493 li
126.533 127.752 127.008 127.939 127.469 128.054 cv
127.93 128.184 128.391 128.242 128.851 128.242 cv
129.456 128.242 129.931 128.141 130.262 127.939 cv
130.579 127.737 130.752 127.435 130.752 127.046 cv
130.752 126.701 130.623 126.427 130.392 126.24 cv
130.162 126.053 129.643 125.866 128.837 125.693 cv
128.391 125.592 li
127.584 125.419 126.994 125.16 126.648 124.814 cv
126.288 124.469 126.115 123.994 126.115 123.375 cv
126.115 122.64 126.375 122.064 126.893 121.661 cv
127.411 121.258 128.16 121.056 129.139 121.056 cv
129.614 121.056 130.061 121.099 130.493 121.171 cv
130.91 121.243 131.299 121.344 131.659 121.474 cv
131.659 121.474 li
cp
0 0 0 rgb
ef
139.517 124.483 mo
139.502 123.777 139.301 123.216 138.926 122.784 cv
138.538 122.366 138.019 122.15 137.386 122.15 cv
136.666 122.15 136.089 122.366 135.658 122.77 cv
135.226 123.173 134.966 123.749 134.909 124.483 cv
139.517 124.483 li
139.517 124.483 li
cp
140.813 124.857 mo
140.813 125.491 li
134.866 125.491 li
134.923 126.384 135.183 127.075 135.672 127.536 cv
136.147 127.997 136.81 128.227 137.674 128.227 cv
138.163 128.227 138.653 128.169 139.114 128.054 cv
139.574 127.939 140.05 127.752 140.51 127.493 cv
140.51 128.717 li
140.05 128.918 139.574 129.077 139.085 129.163 cv
138.595 129.25 138.091 129.307 137.602 129.307 cv
136.334 129.307 135.341 128.947 134.606 128.227 cv
133.872 127.507 133.512 126.514 133.512 125.261 cv
133.512 123.979 133.857 122.957 134.549 122.193 cv
135.24 121.445 136.19 121.056 137.371 121.056 cv
138.437 121.056 139.272 121.401 139.891 122.078 cv
140.496 122.77 140.813 123.691 140.813 124.857 cv
ef
148.138 127.939 mo
147.864 128.415 147.519 128.76 147.101 128.976 cv
146.683 129.192 146.193 129.307 145.618 129.307 cv
144.667 129.307 143.89 128.933 143.285 128.184 cv
142.68 127.435 142.392 126.427 142.392 125.189 cv
142.392 123.95 142.68 122.957 143.285 122.193 cv
143.89 121.445 144.667 121.056 145.618 121.056 cv
146.193 121.056 146.683 121.171 147.101 121.401 cv
147.519 121.632 147.864 121.978 148.138 122.438 cv
148.138 121.243 li
149.434 121.243 li
149.434 132.101 li
148.138 132.101 li
148.138 127.939 li
148.138 127.939 li
cp
143.731 125.189 mo
143.731 126.139 143.918 126.888 144.307 127.435 cv
144.696 127.982 145.243 128.242 145.935 128.242 cv
146.611 128.242 147.144 127.982 147.547 127.435 cv
147.936 126.888 148.138 126.139 148.138 125.189 cv
148.138 124.238 147.936 123.504 147.547 122.957 cv
147.144 122.41 146.611 122.136 145.935 122.136 cv
145.243 122.136 144.696 122.41 144.307 122.957 cv
143.918 123.504 143.731 124.238 143.731 125.189 cv
ef
151.944 126.01 mo
151.944 121.243 li
153.24 121.243 li
153.24 125.966 li
153.24 126.715 153.384 127.262 153.672 127.637 cv
153.96 128.011 154.392 128.198 154.982 128.198 cv
155.674 128.198 156.235 127.982 156.638 127.536 cv
157.042 127.089 157.243 126.485 157.243 125.707 cv
157.243 121.243 li
158.539 121.243 li
158.539 129.12 li
157.243 129.12 li
157.243 127.91 li
156.926 128.4 156.552 128.746 156.149 128.976 cv
155.731 129.192 155.256 129.307 154.709 129.307 cv
153.802 129.307 153.11 129.034 152.649 128.472 cv
152.174 127.925 151.944 127.104 151.944 126.01 cv
151.944 126.01 li
cp
ef
166.637 124.483 mo
166.623 123.777 166.421 123.216 166.046 122.784 cv
165.658 122.366 165.139 122.15 164.505 122.15 cv
163.786 122.15 163.209 122.366 162.777 122.77 cv
162.346 123.173 162.086 123.749 162.029 124.483 cv
166.637 124.483 li
166.637 124.483 li
cp
167.933 124.857 mo
167.933 125.491 li
161.985 125.491 li
162.043 126.384 162.302 127.075 162.792 127.536 cv
163.267 127.997 163.93 128.227 164.793 128.227 cv
165.283 128.227 165.773 128.169 166.233 128.054 cv
166.694 127.939 167.169 127.752 167.63 127.493 cv
167.63 128.717 li
167.169 128.918 166.694 129.077 166.205 129.163 cv
165.715 129.25 165.211 129.307 164.722 129.307 cv
163.455 129.307 162.461 128.947 161.727 128.227 cv
160.992 127.507 160.632 126.514 160.632 125.261 cv
160.632 123.979 160.978 122.957 161.669 122.193 cv
162.36 121.445 163.311 121.056 164.491 121.056 cv
165.557 121.056 166.392 121.401 167.011 122.078 cv
167.616 122.77 167.933 123.691 167.933 124.857 cv
ef
176.625 124.368 mo
176.625 129.12 li
175.33 129.12 li
175.33 124.411 li
175.33 123.662 175.171 123.115 174.883 122.741 cv
174.595 122.366 174.163 122.179 173.587 122.179 cv
172.882 122.179 172.334 122.41 171.931 122.856 cv
171.528 123.302 171.326 123.907 171.326 124.67 cv
171.326 129.12 li
170.03 129.12 li
170.03 121.243 li
171.326 121.243 li
171.326 122.467 li
171.629 122.006 171.989 121.646 172.421 121.416 cv
172.838 121.186 173.328 121.056 173.875 121.056 cv
174.768 121.056 175.459 121.344 175.92 121.906 cv
176.381 122.467 176.625 123.288 176.625 124.368 cv
176.625 124.368 li
cp
ef
184.867 121.545 mo
184.867 122.755 li
184.493 122.554 184.133 122.41 183.758 122.309 cv
183.384 122.208 183.024 122.15 182.649 122.15 cv
181.814 122.15 181.152 122.424 180.691 122.957 cv
180.23 123.49 180 124.238 180 125.189 cv
180 126.153 180.23 126.902 180.691 127.435 cv
181.152 127.968 181.814 128.227 182.649 128.227 cv
183.024 128.227 183.384 128.184 183.758 128.083 cv
184.133 127.982 184.493 127.824 184.867 127.623 cv
184.867 128.817 li
184.493 128.99 184.118 129.12 183.744 129.192 cv
183.355 129.264 182.938 129.307 182.506 129.307 cv
181.325 129.307 180.375 128.947 179.683 128.198 cv
178.978 127.464 178.632 126.456 178.632 125.189 cv
178.632 123.907 178.978 122.899 179.683 122.165 cv
180.389 121.43 181.354 121.056 182.592 121.056 cv
182.995 121.056 183.384 121.099 183.758 121.186 cv
184.133 121.272 184.507 121.387 184.867 121.545 cv
184.867 121.545 li
cp
ef
187.114 118.176 mo
188.41 118.176 li
188.41 119.817 li
187.114 119.817 li
187.114 118.176 li
187.114 118.176 li
cp
187.114 121.243 mo
188.41 121.243 li
188.41 129.12 li
187.114 129.12 li
187.114 121.243 li
ef
197.506 124.368 mo
197.506 129.12 li
196.209 129.12 li
196.209 124.411 li
196.209 123.662 196.051 123.115 195.763 122.741 cv
195.475 122.366 195.043 122.179 194.467 122.179 cv
193.762 122.179 193.214 122.41 192.811 122.856 cv
192.408 123.302 192.207 123.907 192.207 124.67 cv
192.207 129.12 li
190.91 129.12 li
190.91 121.243 li
192.207 121.243 li
192.207 122.467 li
192.509 122.006 192.869 121.646 193.301 121.416 cv
193.718 121.186 194.208 121.056 194.755 121.056 cv
195.648 121.056 196.339 121.344 196.8 121.906 cv
197.261 122.467 197.506 123.288 197.506 124.368 cv
197.506 124.368 li
cp
ef
206.554 128.141 mo
206.554 129.466 206.251 130.459 205.661 131.122 cv
205.056 131.77 204.149 132.101 202.925 132.101 cv
202.464 132.101 202.046 132.058 201.643 132 cv
201.24 131.928 200.837 131.827 200.462 131.683 cv
200.462 130.43 li
200.837 130.632 201.211 130.776 201.585 130.877 cv
201.96 130.978 202.334 131.035 202.723 131.035 cv
203.559 131.035 204.192 130.805 204.624 130.373 cv
205.042 129.926 205.258 129.264 205.258 128.371 cv
205.258 127.737 li
204.984 128.198 204.638 128.544 204.221 128.774 cv
203.803 129.005 203.313 129.12 202.738 129.12 cv
201.758 129.12 200.981 128.76 200.391 128.025 cv
199.8 127.291 199.512 126.312 199.512 125.088 cv
199.512 123.878 199.8 122.899 200.391 122.165 cv
200.981 121.43 201.758 121.056 202.738 121.056 cv
203.313 121.056 203.803 121.171 204.221 121.401 cv
204.638 121.632 204.984 121.978 205.258 122.438 cv
205.258 121.243 li
206.554 121.243 li
206.554 128.141 li
206.554 128.141 li
cp
205.258 125.088 mo
205.258 124.167 205.056 123.432 204.682 122.914 cv
204.293 122.395 203.746 122.136 203.054 122.136 cv
202.363 122.136 201.816 122.395 201.427 122.914 cv
201.039 123.432 200.851 124.167 200.851 125.088 cv
200.851 126.024 201.039 126.744 201.427 127.262 cv
201.816 127.781 202.363 128.04 203.054 128.04 cv
203.746 128.04 204.293 127.781 204.682 127.262 cv
205.056 126.744 205.258 126.024 205.258 125.088 cv
ef
2 lw
0 lc
0 lj
4 ml
88.5 299.001 mo
88.5 341.5 li
@
89.5254 343.861 mo
90.0244 342.209 90.4844 341.134 91.0166 339.808 cv
85.9722 339.808 li
86.1978 340.282 86.9648 342.209 87.4639 343.861 cv
87.9985 345.631 88.3643 347.236 88.4946 348.276 cv
88.625 347.236 88.9902 345.631 89.5254 343.861 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 70 /F putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings22 dict dup begin/space <1C60D8A8C9B896187A> |-/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12CD842E> |-/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE588EC87D3> |-/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E9CFE2CD6B50437205F942FF37E122B69D17C7AA691A603207160811AFB791> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624097F1B5D47BF4F384727F53BA1763156DBDB0266> |-/d <1C60D8A8C9B7E7C1D82219353B31AE497773900CFE039E7C34F7CEBE101056958EFFC2C789CCBD8768CC683564B6074DAAAE648B50C88AD4C58AC712C8476BA68C74E592EF7E71792F9E5367AB3C80F9D183D28DD5E961AA14DCB5D9206768FB9E099DA642A8BAA73D52C56C9913DC619FDF3F90996DC8D242E6BF94BEBE752CB2F5D6196384CDD6E5AC10AFB49712810FFD82A2782B9B182DA37A23E6043872EFC1C407DD53136E> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F43B727FC67DAAB0A1AC346364003E4FEF79FBAC399EF60BAB44182D20FA0C6402BF1E27F05398DCDDDA14D79F5733F11E560A813FF9D16C42617DFDA23021803BAB86086244EE74B29A5E1F99E79BC6C6C8880FE4C572C55E990D88B7521BD46854B97930948AAC94E7DFE2FF69F2221950186414A7427A5E80E1B04B219E3300404246D87351FD05C6F3EA0B95C636083B47E4D5C2DAA8BBB8D343439CEC8A6CCD7C3BA57C2332F2A02343DC56BF6AA691E1A081F9D254D> |-/h <1C60D8A8C9B790A816BA887E1DA4852044FABD5C80CA3A9E2E9C1F200BD200369E1A531F52CE66B5B19C492F0751A1C2858510B2E2690FB789B214E0E0C6537C1C71B0F5B79BE42FC591254AEEEA9BA5BA2F0A43A49AB11B4C> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/m <1C60D8A8C9B6B7700392E60257FC106462D2DFCBC2A10DB5A615FEAAB80AD406B3832324841574E3D3133104747B3854CDADF52623F13A7F1244387949CA519BF305061F6B288B581C60DA40B94376A357459EBA755901A927650F836941E942CE400E1FF6115974FBE2B4AAC56A74FF06B173793CC52E5CDF6F129032B1749CF571CC87D5D8236938E9D26865B5B2E013E76E7BD1DBAB8AA6F040AACF> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CEF7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFBBE8C69D79181> |-/q <1C60D8A8C9B7E897EED043C74253B54ADD4A83B5A401EE275FD05305D443701C0B5FB5FFB629FD564139466A0D21B941D95638CDD0441A0BA219E67025CA58D717F5105065C6C534C87A1E9460A7EB934679C52896D0325C4745FC1FA2E19A833C7512C47FAFC1F455DA264B132201332D7965A6000B61991E83CF8296E65C72578347B3415411104B5B8018A71A688EDD6AFDB9028F3C25C58A0C2F46C8DD14D67E4428A4> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F89019F8CCCB6FE3AF5C57> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BWBVFQ+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/BWBVFQ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 28{/.notdef}rp /F 26{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 3{/.notdef}rp /m /n /o /p /q /r /s /t /u 138{/.notdef}rp]BWBVFQ+MyriadPro-Regular nfBWBVFQ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf82.5 266 mo(First genome)[5.53223 2.80762 3.92432 4.75195 3.97168 2.54395 6.70801 6.01172 6.66016 6.58789 10.0078 0 ]xsh82.5 280.4 mo(sequenced )[4.75195 6.01172 6.75586 6.6123 6.01172 6.66016 5.30371 6.01172 6.76807 0 ]xsh82.5 294.8 mo(\(bacteriophage\))[3.4082 6.82764 5.78369 5.53223 3.8999 6.01172 3.97217 2.80762 6.58789 6.82813 6.65967 5.78418 6.70752 6.01221 0 ]xsh236.5 227 mo
236.5 263.501 li
@
237.525 265.863 mo
238.024 264.21 238.484 263.135 239.017 261.809 cv
233.972 261.809 li
234.198 262.283 234.965 264.21 235.464 265.863 cv
235.999 267.633 236.364 269.237 236.495 270.277 cv
236.625 269.237 236.991 267.633 237.525 265.863 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBWBVFQ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B8391507657B8D1429650EAD682B1E1FA8FF445B393CF432> |-systemdict /gcheck known {setglobal} if end {end} ifendBWBVFQ+MyriadPro-Regular /Encoding getdup 45 /hyphen putpop%ADOEndSubsetFont
/BWBVFQ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 24{/.notdef}rp /F 26{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 3{/.notdef}rp /m /n /o /p /q /r /s /t /u 138{/.notdef}rp]BWBVFQ+MyriadPro-Regular nfBWBVFQ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf195.721 202.5 mo(First semi-automated)[5.53223 2.80762 3.92432 4.75195 3.97168 2.54395 4.75195 6.01221 10.0078 2.80762 3.68408 5.78418 6.61182 3.8999 6.58789 10.0083 5.73535 3.90039 6.01172 0 ]xsh195.721 216.9 mo(sequencer)[4.75195 6.01172 6.75586 6.6123 6.01172 6.66016 5.30371 6.01172 0 ]xsh440 98 mo
440 135.001 li
@
441.025 137.363 mo
441.524 135.709 441.984 134.635 442.517 133.309 cv
437.473 133.309 li
437.697 133.783 438.465 135.709 438.964 137.363 cv
439.498 139.132 439.864 140.737 439.994 141.777 cv
440.125 140.737 440.49 139.132 441.025 137.363 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBWBVFQ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F8457D1A44289B0DB31B4E1DC1F3487A85D6C086A5A13FB7D7B66A3F61EF4969C1AE080F7AF6D145220EBF9A7BF4151121C2FA015E52FB7E43B5305D938D71B0B61429953BBCCA81012B7A0E4> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/x <1C60D8A8C9B74CDDCE74E25740A68E8EC93756D85AEDEDDC715C2E343856089CBF3B8126FA9B43C70F5E5E660A33AAD5AB29D3CF51EA27446736F5DCED8E976C7B422ADF6C970DBFFC4BB6364510FCD37FB93596C6B594457047595B6C2E545BFDEA968F36> |-/z <1C60D8A8C9B76F05D40D9AF06C62C52F8E7A83C69F6CDC031056F31E455ADB43C89D34E1A28A8E500535BCBC2826CEC41780F6E88D88BBC16CBA809407E19164AA6CDC22FB> |-systemdict /gcheck known {setglobal} if end {end} ifendBWBVFQ+MyriadPro-Regular /Encoding getdup 78 /N putdup 108 /l putdup 120 /x putdup 122 /z putpop%ADOEndSubsetFont
/BWBVFQ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 24{/.notdef}rp /F 7{/.notdef}rp /N 18{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /.notdef /z 133{/.notdef}rp]BWBVFQ+MyriadPro-Regular nfBWBVFQ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf433.5 64 mo(Next-gen)[7.89551 5.97656 5.71191 3.91211 3.85156 6.70801 6.01172 0 ]xsh433.5 78.3999 mo(sequencing)[4.75195 6.01172 6.75586 6.6123 6.01172 6.66016 5.37598 2.80762 6.66016 0 ]xsh433.5 92.7998 mo(commercialized)[5.30371 6.58789 10.0088 10.0078 6.01172 3.80371 5.37598 2.80859 5.7832 2.83203 2.80859 5.05176 6.01172 0 ]xsh279.628 119.601 mo
279.628 157.5 li
@
280.653 159.862 mo
281.152 158.208 281.612 157.134 282.145 155.808 cv
277.1 155.808 li
277.326 156.282 278.093 158.208 278.592 159.862 cv
279.126 161.631 279.492 163.236 279.623 164.276 cv
279.753 163.236 280.119 161.631 280.653 159.862 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBWBVFQ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B6D9EA19A14B847D0E8EB8BF4B471CD6F46D062EB4BE9876711DE846CB52CA29717591BA788944E909A85262E823C4FA12BA37712263FC72E989A6DED74E14903D34D6198FBDC555D5CFE2C4496EBCDE1C8C3752795BF188E4FAAED3EDACC0501E6038041D4A8B4E60EE57E2BABA6257E8> |-/f <1C60D8A8C9B8469EE0EEFD5AEC6CA97A72064EDB5F8138E6D1529C05D71AD800DE9767801FDF34CB86E1E21FD9D405698D46905E6F519DDB7CBC96570BA09B7E74CE45A9784C89ACE8876894AF309C859106C75B1212CD> |-systemdict /gcheck known {setglobal} if end {end} ifendBWBVFQ+MyriadPro-Regular /Encoding getdup 77 /M putdup 102 /f putpop%ADOEndSubsetFont
/BWBVFQ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 24{/.notdef}rp /F 6{/.notdef}rp /M /N 18{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /.notdef /z 133{/.notdef}rp]BWBVFQ+MyriadPro-Regular nfBWBVFQ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf262.5 79 mo(Microsatellites)[9.79199 2.80762 5.37598 3.8042 6.5874 4.75195 5.73633 3.90039 6.01172 2.83203 2.83203 2.80762 3.89941 6.0127 0 ]xsh262.5 93.3999 mo(start to be used)[4.75195 3.97168 5.78418 4.21191 3.97168 2.54395 3.90039 6.58789 2.54395 6.82715 6.0127 2.54297 6.6123 4.75195 6.01172 0 ]xsh262.5 107.8 mo(in forensics)[2.80811 6.65967 2.54395 3.34814 6.58789 3.8042 6.01172 6.66016 4.75195 2.80762 5.37598 0 ]xsh331.535 164 mo
331.535 189.001 li
@
332.561 191.363 mo
333.06 189.709 333.52 188.635 334.052 187.309 cv
329.008 187.309 li
329.232 187.783 330 189.709 330.499 191.363 cv
331.033 193.132 331.399 194.737 331.529 195.777 cv
331.66 194.737 332.025 193.132 332.561 191.363 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBWBVFQ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B7D7E88499B0B4629F6223175CD4E8063229FBCC9F00B932F15865B21E5E7BB034E6AEB00B8493B7416EA5F21E0E31EA4A4AA7B249DD04C2020B54E2FE3571164F33157FAF89CB55ED12EC09CD04764D59017211B80D8BF81FE221E84A40> |-/D <1C60D8A8C9B64FADC8BE4593403BE5D574FAA91D24903C73A9847FBCFF2CCAE7B82F347344B6D75D9DA8CFD564A5192C31CC0F81E85BFE65DA0E98609881F08E27947C3AA06FD0D02C1BFBD8926D8C270B5E2950C4A34E562381A9DCE503FFFA3F4060AB2DBCCA9D5531B6> |-/y <1C60D8A8C9B74451438745C9BFBA6ADBF77C623A74806E5154FE3B1D23AD89884413882DCD456BA075554715051F4B509904A44C98E8994424C1B156D65DBD9989905EF3DE501EC4A81DE7294F3DD868FBAE7BF61D1105CF8B349074D58AEC16A3DDE7732615028813D74148E904C1C87C7D157893B843DFD35C187593AC68163F56BACA6337> |-systemdict /gcheck known {setglobal} if end {end} ifendBWBVFQ+MyriadPro-Regular /Encoding getdup 65 /A putdup 68 /D putdup 121 /y putpop%ADOEndSubsetFont
/BWBVFQ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 19{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F 6{/.notdef}rp /M /N 18{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /y /z 133{/.notdef}rp]BWBVFQ+MyriadPro-Regular nfBWBVFQ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf318 144.5 mo(First use of)[5.53223 2.80762 3.92383 4.75195 3.97266 2.54395 6.61133 4.75195 6.01172 2.54395 6.58789 0 ]xsh318 158.9 mo(DNA microarray)[7.99219 7.89551 7.34375 2.54395 10.0078 2.80859 5.37598 3.80371 6.58789 5.78418 3.97168 3.86426 5.6875 0 ]xsh387.75 107.251 mo
387.75 121.251 li
@
388.775 123.612 mo
389.273 121.96 389.734 120.885 390.266 119.559 cv
385.222 119.559 li
385.447 120.033 386.215 121.96 386.713 123.612 cv
387.248 125.382 387.613 126.987 387.744 128.027 cv
387.875 126.987 388.24 125.382 388.775 123.612 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBWBVFQ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/H <1C60D8A8C9B6415B1C8023DCDB0FF1D084A484AF3579A723AF8D5247ABB5D292AC378AF267DE95E8DC7174E8DD00326C723C8D6F70CCD88C857300A53452> |-/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B4A59D9CFED19B0A38B3CB0F4F897304E6BAD66C826BEE7E4169B0E7C80E2CF9471E5F92DE30A72B04AC0EEA14B3B5B59AE75C5D253EAF073DA7CF16B6D745CDF6FBBE2E5B43C2B5E88E6AFB64C1CBC51F> |-/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D45C854A0BE693CA04DDB35CE9C6FCC12699F3ECF3D1B67F9F5777A6EECDAF3C0F3F32C0B6BC38F752623DB2A9617BDB514ED25F1A310A0C42BE659A27D8F2C06C4BFA42A6084F73A353D30020A89B386DABBAAA17119B17F011D1BF8067CBFE17C2D6AE10C51C95BF00F09A50ED067AF> |-systemdict /gcheck known {setglobal} if end {end} ifendBWBVFQ+MyriadPro-Regular /Encoding getdup 72 /H putdup 80 /P putdup 83 /S putpop%ADOEndSubsetFont
/BWBVFQ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 19{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F /.notdef /H 4{/.notdef}rp /M /N /.notdef /P 2{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /y /z 133{/.notdef}rp]BWBVFQ+MyriadPro-Regular nfBWBVFQ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf357.5 70.5 mo(Human)[7.82422 6.61133 10.0078 5.78418 0 ]xsh357.5 84.8999 mo(SNPs)[5.91602 7.89551 6.12012 0 ]xsh357.5 99.2998 mo(characterized)[5.37598 6.66016 5.78418 3.86328 5.78418 5.53223 3.89941 6.01172 3.97266 2.80762 5.05176 6.01172 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/BWBVFQ+MyriadPro-Regular*1 uf/BWBVFQ+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Jason Schwarz) ()%%Title: (sequencing.eps)%%CreationDate: 8/7/14 9:13 PM%AI9_DataStream%Gb"-6kBcF9Z7($+J9M"JfO0jD#g&M$J90#UJ8L#q@)?/iXrli[DcO8MC'dIfYg1u"IWpasJ>?5$b#R9J*=h8EUJ@T7q94'_h?]"5%'NEOI79+sX;$honqlPe=^q3.B>9Ef#42\CR\)&)5$Jfm75M-5Wri($la0e]f;@D>?g[4FDK)'Slrlr,SmWO=]o_>&-X4Dgq',Sp>%;7kEBMHl0f]lpI0E%dYAaLmgCm:No`s/?H[>#N._U@alr[G$V(dEd0G^Ca-I$Jq(U8cPpucnX`/rhd.83q`3Fd6*%&2B)lcn9BHo%ZEN?`ATKg6!'gcWkhANPcOY1D.$4Ik8*Ele0^RDGX`!;^8h7Vjrq+pP@?U[E/I9Hl:sq2qjF6D@@1WX!',cM>=NRT8W<q_L?`iJ*%!#2heX#')P^?C[(>'111>^q"OqDX@.'ni5(#k[Q(W86fIG?R?pL>7>L?T[[6RVi!=H+2S3iAg(`7.ZTX\>o3dRmWj*DL7&3,d#E`%!9n7cT4Ztsi3_,&>]jsUDabX^7a)(5TU8T@TW1UM8KlVsj^:!A2^FR+o\SO'pbo02$a;htCn13'T<6CnhPojWV;H$T(s2o.dLXdp%UrrXMm#Q<$`]>(t4*l[5A.$@h4b0-a9A723(Jmu,ej;VnC/BQN6W`i/m7soEXPrA"^t!o*mpQ-e+]==#s(!!3'a6fZ%6k4(G#t""%>F+fY/E9Z3VGGBHI%.jH-s0)=n4HQ^PbMP774FR+SXP:E1_%WAn.4F-1b>J;=:0Q:-^H4rYZ.<HD\`]TUeni^jYB"OQPB\]/sl*R%\P1nS4f81SrLkgkVt_Tc0$Af"IUX`G'7OC>*"s8?I>/u`:Fq,C_G;.1K*6T=a+U(0Kd4H1XGOfNer1ij:E2<Bj'<W<[Rm/agW*2O%0)WXCjYG\&pq`P#(fMh\.,cP%PE)1,T(\`KNOFj1B/j?HkW^VPj24ZoM.2R,RQdJ`_f%)[j'rq':nd@;q!\s#E-)fopdogmGOQ8=%iV;o+@ZaOpKe%!^>@]R@4_OE)E(9^pToPrtg_a;[aD(+JkHnU'?!9&%(G3K&@2U%*UJ)XJ^.h*lTAoY8'2)4!`plond!,!nbM_Rc%@7Jq/G:;Nc$^A4?%5V0re:p,aPX9)8nHHfZKfeZBKfX(;_@:k;0Z(h!qi7LTla1j35(-3+d@O:^Usr(X:16M*.$K.FISF^Xmf^Ld%>><CPE&).";E(@tPQ(&gPD0pPRoj9!2Xu;\@Z\O;9k^cFZMq.QBta.5;&%)9r2*@heGi)QI:@ZSJ*Af'2S\Lk5WFt$GKb"%0:Sfi%ju<7:Wq9Ip=kftU0:/G0b]!>2T;U<'2uONu(Q7pGq+^mS9(^j8VZ-eZ+-l#F48bn!V:Y'kI`(rVF<R2((X!([LJLc!QZFXBbnb@M%r\#(o!,!aM"*Kh[Au(B=T@kE8mcPPhn87>9IfAQc?@QiMid^:K:*j?0BcK-]7Rotl,1L^*PhA!B_QM'N+cYS4m'sYFCn'8Bs!WiH%mo)?:fD)e$8_/gig<I)E(<*pH55R9$Q*&Y)SrUEf7#p;C+Fch2NjU9-oNNdh<2;'3/gE*<;`I*Xr@P+%_@!HRS<bInFG'oOI$;to%;C\FuX>M6]F)6L&NRT<5[g@2jB,^I`h^Y[<Q+i0kV//Wi/(W`7,.ssLI1oN255o#>U"H8k@l6P8"k#2?6N[.IZp\)P&g](pHCl:3%!J;T6E"W$Rei.*G=aGiF-_iVQMVsr_S&+"GXT<cYe7IC%%7h%X;eug;o.1gsNgP9)N@57oSIEIt]oV3N^[WB%@4eEl)s6[o7/rXM%@2oV#7<@8RR:G:97RY7RD:$kV5V37I8oGD&4Dt>qomX-:E#_io[dfR4bG\1VDqTY:J`78GeF?\90S6a>PR\9m'Y7mL#,X935Dg=J%]h%;pb-]cZ!uN-,2s=0uEg(AhSMNeZT#rO4V-e"]=r5AH>"fo7gsME!]D.67ZmLBKI;BV(fQ.7*ep"foA\40aZ%7/@(=bO09NLrL%%D#WBZB313qA\;61<G3rd!H&5Fm;rNd8RT1Gdi^*aj`Y;r9<m9=qn-;=^KFB=MhNR7:hH+3[IT@2"':OS'3,,P/2>3+2p*i-aq<r%*M[,_"D\s[W!6in@5oJpB6#,-oKhL_6^^PWS&BBp.ni!k;M)slM8GeT18j^kQ7.g;1f;;W,jEaF]KuAJk`oJ(%cBPuL\'OhTot7H%4DS<WW-(:($s_p+Ar$g=;pE%RXYQ."#,m4Ql,Y;04u+u-V(bLTp_MguK.^j[GY-6$c$H-PTL^=PlS"A\Pi&`@K;NZM[H+ET$INXd%*6;!V6H<rk+Jh>RRZ;[INo%KZ>'<StF53*oUS4-te3Mg!9!loFCiX#@F9tirM'#cb%["+I*N7b)2,d*^$4L\sND6^&QrJ0S@^-S_%IA2mXneeRPZ8NP&WAqq<M(rmW%FMau?kYD9C3X>D#psSI4LOYiB9L`<ZgAaT@>A!S-FK$Q70?b+Rfrm%3^.N<9Qi1Nc8^@R;9<Sk%MnnrcTi;[8)&p9MXKBl)nWK21#Fu&Yq%*1d!Gdo8A_X.3,Yab"B)54Kr1,/&k=dqbT8JSC"N.h6n6kLgJMUc5U5MEg0rkZ<7_6)'%b6i)heMW\pNsP-MZGC&%^'TNG_:;rGNY]\K/fC#M.dO33$Q;M]A[Ak1;R+!J#1[-0CUW(L*$38"V+KRpq_q9p*#*OB7k>V1^+%A7%*3sbQ2Td!!@W8,l-s)np5Op>*pQ/P>U*3Stg=3ZdZQ;euRG'%4H=dp1r=,2&W8I6f$q`:[="]iAIBeh=he#i'gs%S<K7>nHBm"$9%R2h&!2RViBhP>.u@ReBKitjckF=p!'ZX@MVlK1$jj^>!O.32sBS0)LoDarn^SL/1FT/Q#bBoUM.g1hFed_)q?A'8\9])H<3X>(2'%+!^H69Q,L9d(Ja"q3t4cI$7o"bfb_g_<V^aT%,s2,Ih_TZpf4[]P[.n$O/KMFI7.G`UJ'\X&u9$VTjAOM:2[/l'^b3W!u(mJO5N6%&KS?l7oa0XH&gp5+rtd*Z?b=gXWrVDU@B"_hA"-IK?SqhRN+_APVFJiUZRa4pI[IMB_m'ESONsN>%kZl<[o!9]f&Sb-J#ldW\NQJ%C-P`[>;GN@S6*etg48pt`Gp@I&QgI<cqpNTN-i].Ho-8AUi'(.Z19^^)gkkV^=;T$b[/cLFFHhl$`jfWa1=d;&Y'f)i%YSf]$E0*%;oaK`cO.47ClsS8=!hQX)]]/efUhrb(_;mXZmIOHb$uX&PiLJ+GTdtUP91m+)&^ih28e_0UD4u\FJsu9lIOiE(%MbH6k_RplnXJn%&AOXcgrs\%GtQ,0PY,,CW6D"gRB82[lSMqn>/h-[45crOl3n=":oPIJ8h\<hB^M3g!L*))3Jg?aPu1oA`+PCr,hBD([o+lE8HI*\%dCIH-\4f*GH@\qWHqqUubNOeA_B,Ceba-7+YamZYB;sAo-1FWuIXWDEa?_<pUERWkL7D1FAB%*&])U#+@pUN*'L\A0<K=GAY\)C;%^I[*nSrX2ek=j'"a1ODncKAUoZKW+f^/InYAK_qh9X+`.8k^iQA7Fq_3rYL_[+0)Dg@Q$*Jd-%LG-!AK(qe-F]+U'&7#n\0%L<_7%m4r&&3bGDPassfF=KKF*P>FC*IS$!fJ;g+(6A1MacADHtZ!FAr#q[Q)moZ:!oI7*iY\c29A],Z.%'iR(&kpJBIWG4L)(c]qa"i@5%Tkd6\Oa6+PI[TS2dWX=5cG_?"(p%:I+u'r@qE%CpD:g-0*0#V+frROAXH&G]LS3\';%)ZW1V:f0jfRFkqp$u=m#UYMlgmHgGam'?%]`ba5bWhn?'&t*EbDBic,dLsFe31@dG`+VZ&KS[Z(nkRLTj69TY*!0$H%U](qDZl7H%Sc47XL(l18]2Xe#bK*>>CN:J27rIVGJ\:%Z$dt,kZF2tZ-*=e8![[k=q_33kcq)0m=ML#=g,s29TCtTK7*-IOg/5j%1A!@YQ^PrArne3c_+C=<RYMeJbIF,j"s*"gCogG"Wa`l%?0<Dk!gg]p5i_Ka:K^q"jCV:LRuQAYa2*@A,s@8^l7<m:+t0!6N5M"9<m3IpYVdt+h$,#%Oiuik8]P&h=qd/PZjp@DlW/bC(K@_Z%KK@7&]hgn(]uN)f]OeH\ZZ3LhlR`mqL.=]2:`dWf4]UK`V\'N*8-Fjd1iKb'(f2e%(cUJ3-,!ZC;nib,^.bK)bfT7XM'8+KUaFpO%ZbL?ZLltMs]VRon>\7oC?85P'Z9Hm(GD7!aVFJ>a.#D8b[LMP#Vo4N7>,(Eu'?R(<S5H;gO(fWTFPI:c-,#)2`\_0gj7q_J)KKG:%`]*!#C3d$\kh<eIc\cCG3mb`0Lj<8U;X?.hhr8G:ZA%gRendjAFZO`^OBpaBH6Cp&_dWViX'sG<E#R5cE&-N*eXtqYe^RQ.AMiba%,+p8*RNLb@e-c+4rjUd_1=bUqe?1L-_oWA2GE1=T)%C68!2""WRrdY4R9OL]U-m&tA0sAdjVV$Mkkp4eT#25lrJg?V)'i3"rmKR\%pH)TbX;NG7GsS5+rJkIWJ_@,@`f$J6Aas.hK<<lt[!`cCV,]R?`SP(#W*Z<EWRYKJ7T_fcUrhjBUIK=D!oL=>=VF0cOiQcqO[G[,%dmdk.bt#V&]IL[VJZWcCB!@9,S>DWcSd;rDX\ngH/T7s[arP&'cCNKU\;PWB).O.[@9cCmRlkH0OHF<^dX7Br!u"j[*g:AtX;"2]%RmNHU=adF]4Y#Tr_VI>VJbGA38':-U6FbNZi%eF2X3gg]A]b+`5k_;:D0J5/1ZLE>EnMFmH@a+eXJLA9h-kBOl?p%05tsq!p1o.8%EN*e)f4[&=n77X'p#0nj:iA6qm<1']WmsVWB'NpZC,_T\;cYH2\i/EDd3:GG>H1_Bp$8BFO*:-`<6Zs]hli0bl`BY(Gr(OsdT;pn%X%hX)(9P;>bI"c7/Yc!p<$+YRC"Y*jgZ?S$NNujDPn>T/U.%Rad6MGWP\no65F_UN"$5(NVWn0Me6pqq[rE+7AfXrbVqsr2G&s&9%ebTQ&hH('@po/BSmqmSQT<)"Ig)?r:\+`\5p%^I=%K!P&o;C1>:=26Bbp>I-@AEX\b*>l&K6D,$'ejOug7uJ[X"uL=Z1!12S^c!,%IQK5aNdZ-KNK5Dce`o!]pJ5X&+1:Wj'r\rs^%L8[F+AmZFT9l_2?0hgCHpl-:fj](CVpP">9E5b+EtI;T-HUDo;=Zd2a<&Z'no&^%h/;n)jF^d@hG!#Z13,F\l!L8d(MT\oJ1d[e5NI_614Y`kat@@ujN>,2D`1dK[?*W^TG]Gu2h$2ICD<P?;85bM8iXfR2n:-_"]?Eo%(pHaVcuQ,km;s:<+9^:CT=rh\9r!@%!f@K&\t]:f80F2X8@6>6c;D_4)4`9TclCF0#<]O<(kiH5Ti5.YPcKk)qimDVVBrD@C9Hfr%#%D=$BVi5J.3a4UofgfN^Ia@6l@^</92gi\UqT<hcWYhje#n[b^k^`@o/fsU_0^a6'$3&Q*55_g7R,.Wi!DNA3>Y(WPreRjB"r-b%?cTHJ*:crJ;rbhpj"Ji&LT:[6&BI>l9JG)^^,N7pkqrR(U*Akb*Ybr$$=ME^*S&k_Tqkk_&)``359'nPHq48LTZnBa*%qAf.O$*h%+;hP%m7-F%,6\2J+^$:o?GG53eNlm9TZ/,^4K)T:;Pub(cWW"FC7,c,"_=X+W+Ao8*k_!Oh@!%P'q=T!/LZHiSW\O+s5!$h2M4n2%^qsr]mFTO2Ibq^(f+e27;bQ?$1DIj4!:r!3(oCUB:3u\'I6DA,i)-?.*VBn'+5K285UL_V)h%t^D;`#l1oT<,QU1HPgo\$aC=7IN%>,rJ4XRE0MM):j@e+Z'L3T4QJLAC.Ue/C4m=*.TcCm'6$h]E<AJlgcGgZY:&OjQo%2S"b-s(A]Y7UG;KFss0,>LEo3>KZVos5R:6%ddA^&_uIid(M]UsM!Am.SJlHlDR;g(:!m&\KMp9HT3S[?+(Rr&]/B@<WKFf6L6AIkDI3;E-HFHng5=.9DZ>Io)nB2<r7,V-HX%qX%4.rm2\$^\2X(k$98B_9W#iTD0N8:*I-9)2_^M:G/l0e&A9M/Xf+QIXI"6,j+2l]:9"7uulbUSe>4epF6b'dUg,nf&i;56o@_f,;\%8Gb[;VupWB\Hm(<QTADc.WnYdBa3Ur`.u\fH^\CG/[sF^-_PkG$i1O4"mFbjOj,>g8DNI+92MkMhCmu+K3"OmUYl#fHG1SchsJn,%?5>">[YWI4li.XRJ2)2%(X5"nL!9fcUrDu"5tr-r+dl&?JeSo^8le[0,5EBm<0Hr&LmfOQMWZT.@#9k^nIJkE_N-oI.JU)S3d;Wl%Hkq;C\9iE3^f#Aa%08a!2hQZhKPNIQh:N.!?3W=j_%[Nm_q5?)U]S*;%,9f2"G\q#]`80=o>(+:aRu3/qQ&:0D)AK7"NVq>*2"F7%6U@qD_5P9U"s0Pf7:W(nij%D>f2o;5>$SEC$jnl5;o0qZ'k&7Zn^Rq-@XgUbeH4cM&kk(-a@-aNQcK0N):Ef?Er\lP_0TF'=<lZs%lZ\,l<nk:Q"51WRQlTlio)?#[1%A_emY[AsWq:MA:/Z;X"7iU#N'+u5g8I/^k%)SFlN`A/<^[4b"p?/@)#rLD!XmsRLB3S'Jc;T5%21&%#,"PO/*);`tB7P31.S/IChYm3"T%ZnnIJ<3G=N^A@4`H]GqSAVi7]9C^3Z\H7_^#Ctd2o#I+&URIebhZ.D5bO!e"q)uY:LK\%7X\TAll%8SY;d08lau3B8[m)hI(1&Qr;?`sHD?l.F0FJI#PW.ee-e]r_e]9rW`VOb>cIQ9\>B.9LR+'E@D\Vqa7,^-P<Ou-Fp>."%ebXnmi&/k6k_N>ur`*`p=BW:$E%0B>5,H6jSd[/Os%B'WhBEn7Ld$=k5eLnC:C%da6\mB9s6ks[Cc8aToAaV1lefsAT<YYa$UXl`%UDH'`mgH>$g3^HrL[Z[#np_=JDuA^deZn=fR>Q!/p!I1"rV>nSZMtmbD@C8n!hmmAdG^E3s5SJ-IJFu7Q2`LVl/:T/s+@`LJ!g`M%m8j18].=_cF6kg+p[/Rq=ge&[Ug"<(_=I@_s':JOaXYNjFW9JX>)hL-T<[Vas18A*bL30eI5Q![bg2)IaoCdjE20TC6i,Q(K_]Ns%6qpGqa$5$mn^%4@9i"14ATuY-2p'?hs)h<P$L,=]KqIM3ec<m+hL9-Zp1(Y,LDp)P'3@0]Ujt#'FP1L!f7q7^r;c$'%uLJ[e;<IL%P1=H`ej^aE0?Y0A6E:Ar[HS\?\cb7]k&\drYh*e'Rf1!i_<t[TILcN53jf>J06B]O>T"+n2ZK@FFhQVr"m]GN>lP;nU5s34BAEY&%lIH?$!fN;s9)!,2MBq^nZTdaLKC?3kX]'.u2]r;B.Y=cg(Ula?^14C19XBldbi!=*5RSVl#@G:T;KqHa,dnIFpDih,rjr9h08q(L%8S;S<W%;%#5912[:r'\h-'OHI`gF/AXZq4%f(ogUAfF2h6N7p#8mJW0^Xa:pC-_7\J"R1O7W?`NGLL2i374ogT97Qbl<[NNR\*](%RVM^NE%nQ'7S2!ZLbhND=$W7k;PQ+N]sl^tiBIOt(`A/r,A]nOJd&3_cKD/"faOHpHOP%?Ss9b[VH7OiCm=Ef)gpE:2!B(;[SjMV%9;h&+_d&tg9'Sm#IKr?q2u#CW&Bp,g?%ZV+$![l3C->s[60i15Y*i67\jB5[B91*X7VhY6OWOe`Y</jI#W!gcS:FTt=HGdq(d-b&%?](=PYee[Mk?u,u(@6-;+V\a8M!4%4aE4COJ%:S36%G7kkBL_bAIBo[$G(o%i$D@RUd&%I_EW01Kh\-T2AZ*S936)g$3CWKLT*PD%nbD1mLr%NmV:TZ;U4p$[7HoYms4As_!dhO[NklLdJM:F(<#<oJ]R]-Q7>psG(+h]f>1TCq[jI/Y!qBhY_fAG=[U,uclR,oHnSYXN%g?I:LjB\(_?rfS2Qi,<\:H"Yoen:mmd3I[of!3Z,m`3A@3Lj(8?aaF(bn>bWf<*/O"hPkYG1/slg>KY%r2KA%MpaBZEW%mu]&)j&%leN$VJ0>7pO02q`6VtGU[a#q*qi,-qO2P%fco`$?!)E=SpA_8\/!j.%-;?`K[L,06f6YOlTB6&mmp#8Pk;s"4-($9qg51arlEM.=%7+B/PT6C9H6_)HQqi[1!N`;'.)pJm-"e9r-g@ZL@8?;@0SPZE69kR3L9%;L?XZu:T/h%&KCGp]7P.4uOGMuu>kIW8m,^bj=`J!5S%*7mIeXM+=)f]]`(Z<XS]Pb'/U5!$SlUYY6cF?<ffgD_D8VtY0[XXAu28J#WMk]`[JVZFe0rnU6@mD=Qj(oNOhI`)e^e"r/F_=8pD%SJCl;qi1Tjb.XM_`(;]Gg^FDT/_>K8b\=-Xr8T+#b_"[0=0q>rE)7i[>du_NAK#Z!J5/%tX%MH+6<8.Z`Q,e=`T@CrP=G'?T4"q]%q?qZ9.BVNVe)0jqO;@BIVJM_;*ZbP3(*_V#01h%IcdFaB%JBmB:JqZ#ccPGSb5B4=b0Hj)U*E^j`,Zp!L_f9`li22@-n/*`%(nh4%AVR=qiIea7q>jeujACY&f1?mUc_R=7Q`0tkTZ"+Z@._`6,s)L;G4VnLgOkCg?kT/!l7)Zmc-I:\T:@#r_-$#JQYD@+E,2PucA4u1%qc.E>^4_8hl;?eVb,28(JHTH0&r:N@SaD_ui<TUu]t0!05RIo^L/&(47aj?.[b&21QjW.VVs[2#OOCO3LP5h(2fGeI,Uj-Wh5&K?%Fn.:*]PYB8qc4Yfn9g*uhO^<%7>$(]hE<'_J[=tpkGBp`UW#QeQDJk5Fa)SWRKdBo]Z9:Z%,4IL&5/TDW!U8XfC\V\Nr6Q=CEV]l%*T*FQq(oJL'oFp0%8leA(/;,Q;G"d'gGEAE(`g`'Z9^:`/%Bok=(@PT=i;*K*=IuhHMiA!.C5iW^:,m+&Ea[\%BB-N"%cU2nD3A\%n(7*6J$9dPAb?:&CtQZ)_3.?t[:.Mjg5"L.>]q3r7+3a8+ZgN"a%'sK)7?VT`-1@e7KacZ(.dD4rXM7LG?Hmb:c$';dN[6\gW@*>%A%O\g.3TEf?B=K&%;#G`V74`/AE1M:nV]N^P]s<cq;R01q;,JmfWGrRK_leMW>++$:qf7nH%.o?8?H/#_P,W-pJr\gnt:]r?S-Np%p5od&7N7\fq!hWEPRrj$+gl_?+jFXdL$3f.+:X@)F2dV?mciJdS6'9%Gu/r2[M!N?DY@*H)Wjt,s0Yu8K_t_=mIskuGB13;U^_Ls%rN4gb\bhK&.J9;SK]5Apri3W%gTHJ#\SOcS7:&!8'b]gKcsB^l)_N.-;Qaab!3rdqeNpsb3OjZ1iWhe"I7]3&p2$CfLH!XSpNonR%XGWh8;mY3WZS:$`]%'YoV\3/Z""/=BIOA%r[?=R?2ug[)V%%A#(TiZ\oq.;;cCGoVA7%)2#;8Zh7UK1kWe%CV=gLu%F]8Z/2nB`]%oESj8n(d,pplo*J2V-,B"(AOh_-6ariR2E%.oKT`00(t[^:t?(_YUNIUJ'^'&dY[O0;9gh@hm-f[mcWQQ0%MgAM3/skaPCOI^h9T%Ks>UA<YBap#Ofbr7fYdPW@<.gB5;9@nB.6<G(VUY[.mt5iq+9?q,oa@_.KJ&=A:uV[uUnOBJeNc,Gga/Z>65'p?C#PCt,7kg2*nk%Z5UGsBs_,H3bsW>f]XIP/A!dN%hS%jhKPO2]!W4iXCYK1:6"s;Ddk[EfmS6kC/cTsV&cm>BZ5kZQ-5ZrVK8Nsqe)W#]RSm"d\ZMB%1]3fT\TDRC&/Hbcd>?%KQ0#F9kME2]840BUTQdhrNNS=npUn/QS)"Gm6_i=@+D`-824MA4)nf$8ClKp2eaFI2B^+cnC`2KTSkshd%AXjYJKEk0I^OtnIo!q)U[5WEEhJ]q_](c/,aLO/((_nY^RKLtdd[1KZ7u=.=7Pd5MD"R:@GLNtIPGeAs]MkRRq9tB.iF_IPFTh23%Fa8*)q;+pg)ni5.?.VQL/#c.11`?W]N:f`Ol,e9)NUB8S?>eY@NfDo`^99UU$8NKgI=9?LDd<A@PSTidYG0=%St(9/\LVR"4#Zpt%9V.G;;88'Np#dm7HKWjm=a3+0h/[E*F>)?tbRFof7\LRFD!=_^E<3;T+1aTIWjL1-d]d1lRbdu,p+_Pd`l=D.FEo\=1AZ8"Y&(1W%p[)I=>JF:f)u\@=D45':3'PHG7]!M`aM,(0A:O)o\;ZCobXS9@>sMAQTr2Iu%#sZa`^Jca=/1cC7S7Y>GXK%4ko+F2H+7j-!H7Tk%[^j/$#d$@uWGtd[/LIdReN_DoH":j#hqF(TNGb76XWuZ:cA,K18>GbDFgXg[`E)2)QQHI#pW#(+<#>`,M71!;2`s<T7\qj(gs<ZX%Y%(mcbP>jY"dsaf?%"bUHp4Qa[Y0:2f[/aEg5]8SS1Qfc"UpXUTl>IWLejQebl2rZad-!rHp1"X9D`'ZVTPF#G5Bn@kP^A,WIb$H%iD:85*jX(0+0:4j:2`eg/l.7l7gFgm"6ZRP_K-i)NQ!XtQflNWakk<Vc/n3;a4WrU-K4`!4a@U,-C*R#&??-g"tgSL:R0Jrg1+j;%jloh,VQb3TB7"AYXI<M2?0Sih/oU4!?OP$,POm8`>ku]h</s"(4h1QPr+GM&MRbjaqsu$C;Nf5PTAOPG];[hU]mi4E/nt^hXolV6%f,kIe*e4([pP-dWLSqOABmV;#/\=<MH$<.-/tFnkhu41Y^XiB(/3,m'hjucE,,(3+Vl0Lmp?QuH/FT-",5=8\r`mSfS=\nnnEH;O%lK;K'#,14fU>s_MgI>^:]G5`;:WFR^caT\8Hai;uoBi)TFK9&!Hp&[LG-q455=Bf(qep*N__oUu\RrKe&R%EQ'LVEM`GI#Po)aC&%CZ?lYH&RdQf,=FWKi$dm'l9SUmjrm(B=n$M]t)oCm?oQ(Nn)Dn\>+6mip740l!qnMFue+,IZK)7[o<EQ-Y8R4r?Z/pq^eF&4"FTC%"n+"c./ja,W3c*0Eq.E?ID4BVoZ=eoV=I9r[8EWf=&*$><L1HolH#HuB![dmmpA0qXb8ItNE.P-H_XFUXUD:7Fas3g)*P5o.r?ee%TD:t*QRb1CchB'%7N8D/b@[Nrb%CPI`,+!/@&16&F//!sHhU!rb+F9>/$7&/hnc-dn0YtqG^!r1k1V4eitZ"?Ff`M*EGZEWO_ZoF%`m$uPF^Z<V_5[sF@N91ndQI?%,N<7`n5\mu\S:)PQ]b">gE@[#qP2[20IJGkb_EKP45@6K0"`3c`:Da#$)N+G<C$HMJ,k<if&6>G%klnlt33Ibt$=*@\`.u^C9ZJf2IQC[:n[S9pd/.+\a?rHV\i[Srj2rE#K')[(Y@]MJ+3R+UlaAL6*pnOX4;Pp/r1>_[P%bZ.f\>(.%Kt._UN2F:j#I:kVB</eKLd#&gFobka%Q!&tq*8Dn3#[+h:5oi"@ls/M4pO=_mZm)o\6MJI2-MBp&Un`geA0Wa>F/6ijc)7qT^\cI%)H)Jb.Spt0Z1V@E1`>N<j+@$I*QGQ=*`\cN(C9UW,TjG+U([`*r5lQ0=3$No(I-L8"oTU?Z1/DmD`?:]J`Ru'Q-0YrAL_)5<-I:s%m")AOE]8OqI'!;'q5#X+Xpg-VPgpLa.r5#\6/E(=.?fqXLA^qa)t!_[@+droICs&+4f,&CO)MfN]iF\-_@s3E;A)XKK8NN[ljU\P%dAh)K3HA]ql#c.B+!TJ"q!lE1?,p>S64`q68Sl"[A^kj9o#g)lFfM-<[29)?e+.$GY>QE^l\Noh]j@2'ib?UlWotoMQ*V=@O8#_j%@`!Y#,Y[I%R']C$K+0DS/i:n;X&`Gq8(15pl'Hq>LaULQR#d6JK:A/j2i&g+;0'mUZ9n-07qKtG!S:I`YWM;Of?STJV<Y5p^@UJJ%6HQX@;9/p-nPYm+kdV6ec=HGt00,^>/L;o6nO&Xp,`(hQ)muMPd?QUf?esACX^?aE2h#%Y-N-R4#OTl`OR[_:_$[ND`%m[do<%_&%."Sk2qjt+EYNVsY4a+87G#:qsCdnda2C_b,b,M4&GY7m_X/"p]-YM:kcG,.IJVE,W:$e%OjIn*KrqJ23TY7O?[k@(4]^HYhXsT\l%A7%iBSi4=eK9Jtis7kn!W_-lf4ATOJ[9C\a?\,H=asQp)?N%1RM3H*;BR]eDRTA5G+D-nGF$e)#dADYc*nesJ:!2AL-`i?o5-ddp%HL'5M.uEk-Itg#u,R7u/3m4eSI96#$&0<X3SSa(/]-fcI=+9R1c_LEc'TOr>boOjcE&VUM7eaj!LQ6kn%q)0eQ=J:@SGi3l,Ii\D%B4)&M2h(:J-8-1]ee)XG3Hets'_'Q`]59PA9I@#-lNm*E_30[:Wi5jOCO/%6S5*c:+`>IAP.(lU8UeL2[NicMF:G__2%JgYDe0:G%iPH_qL+TrZ.1i)N;_na\K>om:qfAta!<D.aS^u\B*T-;)q6;m""$V9B*1F<fYBYf@P36>'dduBi>RXI16f)nC#-)%CA"@L$q4@cJ%6X74s6(`_M(b?0qZFHsiUO,Q<XNV["lL?(YD0or+E0OkliQ-f+4ZU)qBP2:n#`2V6!USk^n(tS.mpcqBH"@'["d>Hc+!K<)dsbqo%4FNS"WegEZDkQ08<^MROC3bR'`m:@**.6WJ_CdPL^B6M:q2!E%-:I+Z(%!sI(GN""+g&ENVhou7`G5H7DXeVq-$++U&o"S=d^V,:%YaX!1G#R*%r'8ni0s0JDj*Z,AfJ.`3p;_SVC6BlZJR.`cWWm%80/f(>gc/X@^DtpLi!a_AE?6<"l$VTod:dh"3\:.F:r&RKO).F,%-3;ITJlZ^aDDo:T#7CXoWm8SL7He9[dmJjA9C4I7Wf'>Uf(Bt9Wk1oB^@UJJ.j]fZSpPnfKC9-$R)`f-rPknBZBQG[TetmPDoKkP%H"D#IaK`G+S?tnmk+V@U3PNW.=<5L4H=P6WPBuBR5Z5dh4_E$^jD!nI;X\W)^-cJ_)8`A;W+CF>B]R?sh5/&:Mje&so>ihD1NVIX%qs$*(j$(NHAjkE[q#i!VIKmYarja3"ef?$ip%/mA/OBNOYlKV=ppSLLqmYK(.W_6S@CjnM$kcSfc#5$G^dYb<R[<cPSKunt]RN)X%7!"5kOF$&UB\/01HR8?t\k\g`$-hFOMNCWL26q@>6.i'ml9SXO%\7GN_m\(,Z3Cg.cFRjiQf!K-51Wuph7,MorhnfXSPDN&Lqle6%AtcMEKIl)1=##'ZRst$_SXD^nIa`l;g]e*<3JdKp0GEcW)femM#0+OFR<o5CWQ!6t*1qMK=H>Q,\=2K=ZO*G5.AM>u\hL;-0!*dr%FrpP;6DRDl6l4/3nY(^q6%KnoCpGsPb5Ac1Y.E!>=[6P>a'8t%U#sMq>3pG/OHuXW]:I!V\(%/<_R[&+Xcn2%<(e>rYo[9+cs%;A%#ub%hQKHSL2I2,3_W.LGe6<epq_HW@,TQcRP:e\7-,4]I>__3P$UDI5>hr6b-j`t$7kE"iQs`efY]Q:,L<=luU^p*7Wle"m.X9*>%/&XJW^R1hFda]SRo?$0%Z_tSG(`s]EhmuASaiir8?#jOT9$'9LbGLYi%Vk7b<@tc$P?epPqnU*@F'6'9mdK&ff@%9^dKaiE-_A*M%p@aLD/pSs4<PN_-_Vo(+fc.#/kaRAU6Hi4ffkk?:MFjUSbOSl`b$7W!68IZ-p_G7Z=/bC@On-mKYHY59Eu>m!NrbXQ"'lW/clTq\%9B9P.)iB.D\\u_%C+,c&?C`k8!o_,Zd!99NNF`OCQp^&-5tAW?q/bc41[)KW"fKJ9o?O#8AdcnU6g("+(C2Z@LX%u6cB^%AEt4ab%#$i@aQlJ0U$p(]*@f\T3hW7<%dfORR]JJdH.,6pFFP[mW\ihr3LX*IRffd6Sk@AFVY(:fC"PWaDW_75lhQtc3UkRRXmh$Z;;Ol8r%kK;MbeHm`mrC;/7:1r%W-$Q!A4'Qc5Bf6]r`j9L$=.68g9EpFN#bkGapcL$acTOI$_+r:Go09tM,_#7mFPC?Oj=[uU5#)B9H$!a_%AIbK1;^TcbP;W)SNiamKH_sH/RUR]OjaFVW+>9S1bg"PCUQ3GadgaRNF>m7V9MBW9Y(W;t0Z`n0]FeY>m,gEIA+u-5-G.O0'Z;IQ%!AGSd]"Df>d1*plN,/]upSY+:\c`Cgek4.I@oKi3j:7T=5%Rc3l-=X4"6]:\/:/4o+ggU)A3*_JWLh/n2hc7WDdR[VbNA.GHg#9d%i%R&1->?GL&r:.hZ2.MW'Dn?+^rT[_f0$:XTsm$:9cfr$ecie>fek7^.ua9]=(]h%4Z.(h\9mGf,nEr..0:$NEaJoeT["AQ[$=3u%i2=ZVlZhkUYWP>qho)$%G@If;nEQ9EFr!GJk0/U-B$)rq=gcDB&:9l([7g`YpSj7R#H:A'=WqAdr+>h9$_<#6".MG3UBC%s5;@^d%B6Dh9V+87i?!=a<?j[n*bf;5rISA\fiU2R6-RRclfc(=dH8p7(HULF#qk_hgWk^GB8$@X@?;4,*^k>LKRh8$J1F)<OO*cc=ADWpe%%ehDA)qhh)KA0I9&idNTQ[S<S:Q4+)r7R4\oADcG[3H2/A]<)V+jXC8QKckd->YF!.PXT<1I9;PlF:Ip3FQ;BHORJ"p)CFolnMR$%%3p>TeN;#n/MNksIc4h0`NbR+bHUS,!g>D">e=Oi8&fYZW?O)=?';,7@U9pqrZX+]<i>gcMY$%pIIE2%nShloaN,l8Dh:dJ-R,lI%*\GXO9'stq7)kVSS)?4&*6o4[Z(<fq*j*[O1l$mG\[o\.)VXfq)2E#om<@+b_E>!@1/_c.c^Q7*itCNF^e@pGmkZs/@&*LkA:LX*%p-rPKjr<KWam6tF(sBUf7H>`^?AmYj#5gG!1^\H6R%Op,Ra]D^X%)fHL:/+nIZ^-p^\!P6/R=a25%\$1i0GrS.BdX#[>^+r<0-s[%fCR:g1Nf4#VXWXM+sa_EI?Q.PP5Qu_K9hkUCs1Dg?Gq1Z(0,I-M>MWP+s2iJLRA\hT0"-4QMnk$c\HRJ"hj,I\@GY=qTakcYX3Iu%q/A_Kccq$)o&1R4"Edul3,:^JI5M_.r`a2&SAW(9=P8;tiI'u)Y^h*\%PRaC^'3];3V[&9dlJ=;R<=,,Q7l;4-6V2],&LNm]A&X#%ejPP#P*h7'YNJ]b7j6r7-03!j]N,76T&IY7CsMW/]eSk.;U<!9p9^-*^Y*lAr+(Y-m26JAYBSQChieKiVXcEpbrZNX_M#qn5L,['%$d"2c*<tXbkZMIUm[W;]a'@<%oQ3;b3iU@B#C%nP%I\WOfaX=uj2HcP]N8"W*,N^J!_bT:?8o54p\Apoh6^FR=^u$o/S6?sL;m:P%[Tau:0P65OiOt)F[$O/)AYe08+sZdFGC^X2:tah`;P/CSOHD"FAJUDj>$F%JHe771,8KL395\eG@_R"#RFiHKpM&??<<(]<o.I<>%\j!tR*h0$%]>t8%eCfYra4P>U1'&!di`^XXS?!W6BIY"U@hVr9=9giR.\%Ga(7PXi=5;5J.bo,pjfGG#[QTFQqu;dX36.u7_GfFK%iaY1N1XMbC7"K4TA<4YVlN2q-G(d?ZA+pAc:^n)`=SUNqmm/#rA?="d&c!D)bko2eamaD9$eB.d68IY<$HHZ@!bV7f`T[(tHmCZ*%]&]&!\EKlDHI*m%kOd7`7ri4=+#tH"qsjHD/O#D;0)&8]I'qIRfm_bk.Xm;,E$:i7]Ib`p%kijQZ-038mTWA9?^3Dq\Q1-94d?u7%g<NTYg4Ua,bJfZ`*0T,QG55Ao9\:LEM(I=sq<%[8%prI;^ihUCO8!P6DKi6dB6Z2(k`K:DNn&;e<*@4.[@c9<h'Q[bojmednQ9Y[%7e'=B:UaT1W&;K<QL&d\Ogml_.:D58BqnOPZ5XjHflkQC91M-#m$>f%Uhc_lq.T*<V,9@90:Y3T^:>Q%]m;!:XXNUs<mI$RbXTXu%isVKfNb`Nl??h"pjQOUk;35:adWO6#eJ5Z(!W/^cAiEoN:AH@e(Bdr&atNIO_V=oVc:<l!NUF#]W_OE&IG/RpRU4F2K0h/7Xgt(6%jOS4b!a%6UlPrdL`r[W<WBK"E>rCb)oZMS3nZarQm[Yh$=AS4qcGT-X(Ntt3dlDH/H`G;4P2):!\?ScSB$Q.t#/\61IDi8RqE,:N%S$9&66&3OlNmHhB2kOl.-['4`=TcBhmUI]BAM:IEc]@\D0AT4sjZ>&<olgDlUe'tHflXR?@A_5FF7KFW.,:Q&l'ueYSG.f,-_&C1%-Kr5uF(Wl]jjMD9q)H>M[d-Q_RBu-o@'Slq0.<=8WN(e:KM7q2kN(.ie&^!KdlG\%E4U'UflU!"FLIU""_?(B`EB;>_CZt$c7.=^%HEW7LVXrI'C4Y&[::YJt[A/Z$VK5Yh"T&SOVK;$cI:qU9Zg""L(C3fJT)-O*F2FR0C8e\Kl,KcmGc's=flZYjjW_%qVLmIEflZ7S%iEg8WcDI'G@aeo;3I+_XKkJjp<BtT*(Re(]<'apNflTuq-"C`KkK]rGb,)FkYOcDU3Mhd>B1<Z!:$7a6B@eg.B@AjA_fAr36F,j'%A9'7ES'EILcJq%$q&R9,8?kr15hl*DT+am,T*\sM)r)IZk4"`4jBGealXJ9)eN%coe%1q2]K/jS_B59pSnr0c;?KPb4RiLqL4qi)%-k=K)"kThgk>%"\ad4FFFh6@-o]4LJ]"6q;7m=Un3&rRdn<,IHE,,72?:uW3eK]+%Hi?%4WW\)gefKr6:5cY)F>lY6Re&7XepX_!%RH2g=F6>/a%XlP3q`X)e,Ep;X,+Yo#_7eGJlNc7j3M=8%5]#<<(*CTPq2$L@:4M&[CIHS1TK>BK8d2D.mTAo32!]ZtUI+P>F_o`F%bZ!nMeN6r:T#L-;\Zb)Ga\.k+BH*)EF*W(%^=H`nI2ZlkSJ167**4h^5*,@/r!Q&kS%//Ni%)^lI1_7lX>C'=ZB.Lc8$8OM4!jba%@>i4JnU.(;+'1no]Jl)0Hk3*T-"f26_7giQEcJ.R/f2&:lI+j1W!Nj$c[PdIhh94okhK)[U__SL^]WQ[lBtB.=hH"Xcb(5gC9blu%[nPc&/%\>`P7q^p:11OYef%a,F.C]]h=fFJrc\OaapQ%c/3J-G+"NP&XUOB7QRaKa1tQT;oPr`gLCo*g>1C9<)Xc8hBq!t:]<7jA%T#u0L3%8cS-Q&S\>Zf#.:"M7b@2duEI/>s<BQE7qk5)aQ6t(J0igFDZ8NkPaF1RlO27>sDXJ<(nP;qYi4>mE6:1T`4L)4^1os$o>%[GQh/.6cF(XqU6Ir(?-.mUfqGYnQP;5IYs-'CIuaEH9(T+u16uYm$\_2h?C)T9QgH]HjsBm\V%jj4<'sGtEGpR[j5-]*[Z6`lDRk%P>A^[];mqE;HZP"QbH_Bh0\ge=Bf!USWF3un=Nfe>C(K%)>J/;/X_Y-8?@79FinToG+U9gca;(NV`c5sScpCj@P)DiPIE2'\K:Kn%iV96,gn'V1BhZ!7jgR<jFO)uuqA)dbYi4EnE@pV62tr;C/7sEn,c92-c.B79Z&*0g@i8_Sgia/\Y)`D8gl&EsY.X?@VY64lo\-eM%m^)eUR-<cnM9._UG[,1g6uUiao2LGfbt(S*9k3a*(`&8@Rph,T'Ts,OM,2%YhUO;*lRo'ZER!Bh\aIu*\7[t\U"qRNCk>mPGK,A(%b^N%AMudIjatYk9M[_JNIUhBuK'1g=o,m`%4s2?$=4ZtRM0A?u_iub=fdk+njBa!0ISDf0a3r2#KmnMQ%+>p(X53,j+C':Bhd7*?%9)ZHY^2e?ua=$;-69]OFb;_/%9_!ejf'_eM-/1Frf=gmQ;a+G/N6,dp*XCMlDk-?nABBUbD:VM=P4156lf"sBQ^>hFKIurR^VNgY%O`G;<-su)^SJhrjkrER-QC,A52m6`Z&fTB#2+t#8fSC!HfS09s]Cao\FjhZ2D^j\7RarRoM2k/P!&4Q5Xj%sUbW/lGT'^V_lUW,2%1B2eK9+9CCqq&NmEc#p+gAG]q2;3.ePb%]KSt+]K!a$kA4B>]*<VJ)#(YTfk-]N-bH'tn6h?!1?:Vtm(_nL3&:"OF^>&2^_;q4s/%l0'!:VlRq>ia?j``\!8*@qS#O`ejG[[%5gSaV`i>c?>)uC=hqN0e_A\=L?@(83S4CmO:`BI_/!(+?V\BeP[6n`$U^Y$X-a,=EIhN%AW=P&La8OnfpAB-5b6BG/<@d7Q<&8VJD#.<S38B>dL&]s*NUo?lIq&8f!RZ[BpNR1lB7Dh*VdT4d/C/r,4T3I<'^1;nW`t2Ytf(q%p1JbiXArLO]47&VpMoW69]o)%J)]aijELIK,6gg7NEaK,E@&R&K!LMF8dh$JJY>6O+!5hY/R[I*^q%pYop#>WcPTfnY8o2H@M;qh%!VDj72UQ<Vb1p'4q2(0c(6,t"?$k.=D5le`B"nu@>oG<;8+mN)p)+8k]<7QsZO))@YHn5pfR:(VViVpMR+JSuA7l1k!eSSU>o2l$%LoVo[W-B`2kn;+fiT)dnHmb)jf_7B[Yrd)geKj2"&rgI.)UEn9gMXUjF5XqSkIWRZ:2,_f5c_PA9]`YKF6/u#3#DQFGnt2M2i35#%_bJRVpZJP-jeH26lroIm-6E.J%E'Tbn)JnZdNTh]0+q`.f?2+]Ku^;_P@%qD!q_raBOB.M6\:[9f9>U%iE!q9Zt!H'J;F0WZN0Cf%F3=UF<iF<*"mDMp0fC[C@ht_s<*VT1nTD'R(n0VU4USGsZN)R*n]1_NbHZ'ka#ka7EB`q%=b,pGZGoLQo9H[IA#$>4:K&@X2q<b$%1EXbP4Y>taFXWk\<+5<PnkD<1D%VQo;'1(#0lV.rP`O$6:3Qcr%#=C67H##3.%f\ua9t(ocgU[pEu`>8M(2o2Wp(mt:7Y_g8e#r(%eSc%H6fGS)$d%I5f\THrSa0o/RQ[oiL=N_mkPBHoKcG-7AiePi7[:D\rFXk)b'pLcG>uZ6';+i#58OamVu!sk%5mO`I_I4UmW8?>%=,([VX1?OKo9%/&J91[&-C7prf?c0lT'PQ&[.3`<B04_kqc(=u:&o8nf?\e/c7;kl5M+3n:#<LNcZ$%ZpPLbn]qDLSnXG!gRXE%V%I<1tFkH3sh/C+CCp%(AtDos*!>gN*7G'.(k5u2p3T@9eho2NK8cf84pcFa*trOcnhfO)G)Ibk_fgktO1cLpd(S9;nDS`sBDk6VlH%Wh8[#L7-B\)d`fiTBaJJ.F"BSU7^c7/^+8Sh)4N/IZF"VL'^/ZV"r@0o3QBQbt+E(>X(m\f%?sNA,BNUGcmYt!833Fo:G:2a_TL!%abr.1c[0h[MY$W*fYtaS*oHm@&'h*L9qT\hI'0+9'X@OMgZd#Vo=!^ocMRP&qK\^u\!X8(8aA/6iPh>Qk<7^=?UZ[7\UND5qTX"$%h\:u*][#Q,HSZ]&<54-Wa#DD4p9At^ppkk&*5uQS0_:k$2jS8g3RuHs(n1&$5D-Tg:\C2'.rBSga-FZA4P.p&b^'$gIt&X)qCNo[%Fn3(lrpjCY4kJ#Y`TPq<Z^pD@h3ojLF8]]HL,Vm#Z^d*#cRMY[oAk%oT>rQs;k<7;,0+d]?qcL'Gcm\56Dq)UdZ!Ac\Y[?C-UGt+%cI58$+'6a9Y2=>MjfIYA=Tm@/WIFH?*otZ?o;7=ocQM\PF8``\6XqH_c?&rs'4O[q4Q!\uhP^31fOH_.lfVg^;&a*ZkPG"^@HKZ'%c\b<kWICGl[8WU]kH,^NA9%H0f?[Y]k`uiV<@5c96T+8YAZ?Qd=+&ZoQ',4UmhF=L>\KJJ@_/kOpVM8mg7h<%V;iBCfpbtLgIH_f%O;AMQ`do6X9n9'*WI1r)^4HVH_EsC*kU;ZdXW8eNWj]bO<<rK:1rtC%5PsWC7!N3A^-0d&1.lBPFcbmKC2<]@<En@/>^9EY*=S^:%>koSOFT8(OXBaU7(W5.$bN`:&X-X*FQ-8I]C\GA;rS7:!48CpP?>A39e,Jg\V:[m+\GSC+[BD*[j3c+e,oV&W/]=B5mPB>fJ'MMm%+2-=EhQS*9N3)^Lnk*Spg[(fS_TLJBoV#I'M.s6TaNj7s:DJ.>gaVso],PCVp#jJ;8BRR5A"3/`Skp2GGD,P;D-<egG>En7l,d#A%hqCfs7pe>nK=1Kr3t=BKB3Oa$Q=AV6aWmN*7+0qFdS9GC5PR?G7]njj3XR,Q0-n;SB.tl#P]PCGG&Fp0*W\jY&R<NZ?8r%f/Z(29%Y#iD6mdG:_PL/^=;9WaUFJP\@jN@=6q!Mreh/)8lB:"n$[C=>3mBj<JXMg(Y:dEK..?Ua8rW0<\Pm9tDK1)ZqH3R!]"O7BO/Z4"I%58AG:Gmh)5YuNV.oQY0.*1EjTGW>&%f)e2s>q''jc2ZYeV2"<TR$N1sj\+&$*o&h@h#"Uq3m$b>D^R7kZb9So<\>;EkJQD01/]QN%+"L3s-F50`Q.lTDMStDBn>I>[5<'3I0,n,HE1p9)M27ZsWW)js$)tQ*K_2k5L^U39DZY(Z$Ef1Ui7jnY\%CPgme'J@<6JhLneuM&%KN'9=-'nV:]e3Q-`5j7X[HZZeDX<L3etC#pSG\OO[^P&8YL1B8iT"M<F)SB'l9i=Ipl<@JcC=?3SUXHA^Dd]&jY6Gm>&5%:P5KsY%m186.^cb5i*.5!r-W)WsYu4l-)>@U9E$.i4='h&4j&(E/Vpa<2n6S^g$(2G-':+*cIAJFPV*sWuIgI':T>tW-pR[2QFIX^<rNZLC%'#F0JcBGV3>q'/Ek5s<p?EEUfP"WLBqST(!g_:oS?]LtC0>D(CH5.f'V5U\.JE89&=qRJZWZ\]&_kjjYIG*?hDH;"F"Hc7Z.e,45%]iSM16]EOmq?#V9C)"/r`ROHd.sAVZ=*Caq-b8Sb,=8piqJ[;ZKQ[.)J!=t<h<H,,FF3msP*Zk'287bjDrW1]UuMA3>(X5J\u"E(%JOmns=?k'o^Y79Pq$!!f*'M"IAsZ-;g?Y-g6[cu9b&6sj*8;E;l,r^Ql!Z+_gLnr=n8%?/0/_t\'&G:%C1jH)Ci;Bm=/WjO+6nr<%@#gCYJF#=UP*j[<N"rr""X]6W&LA%!HlCql<311_[u[20dap3d`!AA.PFR73Qe?N(n[54:1oVFBRU7'O_!h-Q[:i,oJ3La4;rVVb%A[eVZr4(U.F:="V4F#9\`;%+Q@XRPnL"mV)ObeI_2T//T;9\7p1N_m^qRBHH;C;P&o_#@>mrf1=6K\5[QV)h"m*1"<m5ro"Mm8W#%Mc;U/Ln%sqi%`#:($Q^qMHIELW.<dO;qkQGPM&5r'niK!3/pGXrk-FT-X5N.8F]B(Kc)(oCJpRQHY#[b%u'0?h(D[8,=laLh0fX)%p"WK++<HO-F++E#$%fka_&AY]lY@5\[<8P8SuRG!b#ptP4/Br1/L@TTjF%e*55`eoA@#)aCD;8i^r\+*=G7$?$F8Q_!MEf.E+g]*%r[?i5LM!*,H&IirJMj.sSlV?`@N=HYStt@`D%A\:RMKDjjg`u(4N7$B'N"lpc:3:8T1&&Y7:(;"`D5g[cXJWsJMF!]Qu0C&l1.@D%P']iUg_.8E0uW'1QGe5U7?gcF<tK;8C_akq/%a<?,s+t7p8*Rg0:SgU\[SrQZWkgo_X6bP%lOts?j;m1`1%GVRS0'5Xb+0sZQ-(I%p[6[O74`g_Bi@*H.'(eFAjTh[Hk_-1MfI7Ge6sNp^gFZEdX0;m=./PS\Ki2rnEY418l."Xf(A>XUsF,*g!\T;\If+93D9/*hRY/Q%RPCJ=otB,Q)Vb's)\q[YLHGiqnK;T].Hu_<;[e)l!eQb9aL$dkl+uC01Pa(LinC]pS+cL]D]OuC5]qnEUIU%R])S:*qK#@>:paHS%3&p5a+03Z318H$@%PA2%4RjO24e<8t?n5_WS&[K24SIl\o8n#,#gpLVj+W%,RBV3l,e<Ce@$Jk;@=<h3_J\>AbKCfE#S+8h8Y^*g%(4m/X&Fbf4ib6b0jm;6@%KpJkqP8b.8_A6\DQ6)jd*LUuSW.b77,CutSm:J%)W@>+h?pqVOcjJ`FI":8:DN$'"4ml.msA+Jo>)#F%r"+hm_Xe6^iM1uifX$Ir]Yd9[dW3?9#d-R,X+4^f4'!O$Xhpod3(Hktn4_UX?_9qQJ:nfD@U9?SO4u/2p[+@M)tCl=IB`+6(f1"D%L:h^OM<IshG#,4TUmq^[5g8sVKGg3$bXmbO/s,SG)f^^7TIcSV2-?ju'l4FSXd^VVT;49t-;R)kP<a6'VaHau`3E/OLtOhSRK:1S%$Bd<g:/>@K8,R[7@#(+'mk>_M#-ffY$B:9,@inA_PNLtOaW6qb7eWq#NmR#JZK,m>pu?U5!kWblA.h]=kAu^Nm?Y3a(j2a.oIG9q%QWPiq(6VI)/Q@&>8)$Ofibn,RWjpiC++sg&;@S;#qo\MMq.aPe%ZaNbE2i3C1oYW'F+&3,*/a-2Dh\lbq$^ce(SUWUT:8Y>]!iK5%NA_+hS/k@s'[JpoQZ(h@SJ0'B^neK(b6>Z+$IfT"rb5ubikTlmPZ3aMGRjUdL7q'l\\LD)mJui]oDED:lPXQc3[J_52d<M$mkqpF%kr2gajk=WG("Ri/Vb5]j"4ot%_kfP`4nMn@?5[jujX-Q\<MIB!hoIZ;^o]o<H8$1GArVsWc:Kk5dcc[J&bs!,`;$+%6iscqj3(e4%3;gMI-$cHIL-6iA(&;CWGDS</@Qj6[f%o6\>C&W)P^eehFbn.b<E;&NIpNYr@+<6NYD-JM%;SJW0ff>.B,peZVHX_k?iESonRoN\%I(ZU%E365/Y#iR?h2;_O.D753%V]'P4oW[DG,+#Yo_PeY_.0Eo,,4?P?IG5pH"F=(.)"HFXtVINM=JIUL7E$B+2K)7do&$mZ3a7-%*t[q!n'qN'Ie';,/L]d\D,O7D.tr"=MEW@:,[)<Z56'R?3"8_kQ+%6*87Xqo`lnECWAS`r,[;Zs`4ZGk9)pnT7K]RS7lbnPb^9"D%iJF)TZ!#/jo/`9S1o1@;d=AEP"Q*,iI8[EFHcnA*)XV#C:GWf@lbQ5KA:ih-T=+V<)f5R].!;nlU0(duPJa=:3t1?@qh?4%nY4t,%hCNo!_ZA[A[#ITU.C#F@AsG%_K)a4.r4;HO^t4TC=%]O!)#M#q#gMhe,_1C=,h:%J25H6k4Zm+\)Sjm5?7Iii7:$E0LT/kXFb+?g%/&lL.ML_5_*IY4Q,=[Jg+VJB/%-Q`SE9ca6[OiJUYln5!M$'''W%PQXJ,i'n^E42HJX(!+%HFsY-d$L*Aj9%)R`6srb<<dgn#'Vg%6"[!'5%iFs,e&Sjm%=+7n7]$6`;[8b@m4;'oJW?k^+>PFcY^J@QOMeH/P0m.]+#r9G6D<fBF(Bo)h@!ZJNq1j(qGF"S%Etd;;OG>%7,4'heXIW\DksWc]nI(Fbe[>Vf:Pl2c>0I@_M]`qOL_0*79U49LJmaG26F6c5j-TX@_=bC5d_oVDrX5m1WL%f'fm46;FFV.R;l+H%HFVISIQmuNX<+;5o?p#%C:F%?HmmlWm\PY`Wf`Q0U7K>Io@o*4Fj"l%-K_=Efr7Xf;A=1)!\`$b7U"etiUHpr8fl!(QX%=pcCO^"%SiZ10S@_]_F_,Z$?!/5VXT@6JiT%MSK@/h_oX[6us**^""u6/E$;FO0i1mM*QC\RrS@IC#=C)2\60?+.go)n_.ff36=r4lm]kt@Q%&UBhL+]4(qIf^!r;AQ0^fjnNMj+lqb$$gZAlPKbC\VR<9#/debhg!qrY3_j4-\@"@m6S7R*'s)t;3Se>KgA#+B8&++m3)$tkM51'%DOc_XYNpp]jPlcV%Q=XMCH+,e$ds/)<g/(/"ck"IP%u1nX#p)GCeOhF6j2`%0S:%:Z7p_c3gi]55MbP(9us+VNW!qk&/c*h(4_BX%mVsFe43iNcWJ%N,?L]5EASQ#hN=@\re.r8+"kLh-%uL7=?rC<rXu.YXpPZ!)>XRaLk"R+aqaT/C4UnL*Tn4:f/q=d%hZUUY<bMU.%h#e+&Ts]KBgI`0Y8e`Jk#7JiK#H?;Q91@/!6T`.T[?gtf?9L;57_tX\F)SZ\_I7"C2nHh-raE-al)9S_FFr$pFD"0\4Q(:^`i#d!%"@smSX!b*dM337cf+NS8=$d3NE>hHNL7[r"@46<5KF]!Ocr.$UKmq<Y.":c.J8Pn=jA9)2k<e_!]4rb)FF+[Y4fiL)(ANij#L]Mq%;.&d0S0pIJRWY*\4RNsc8T)g&VaZaQgDeln^sXVaVa7XjX4C.iqO/-='f,nC+D5Hkl2'HH?)D#t+)R-HVoj:+AVX$bg[*"Fg?pl`%ZM3FPZ+Hu7e]9cW]A8[c\2bFnm>aO5aAir<1V>>V3/-%edt+h>2g9/ujZ"sOTIe)IEU-B#cVr^ceIW?C(#WIsb1*jdB"&'.'[C-!%f>,I%*9,3>HfKV`k5DMh#+KA.MOp"_7?tk.0:95Wb#C&:^-D$'^/5[4Yr,u2n$;c:m$^X&UJ(m>r1=VGJ;aFH1-%CJ9\rINid5d<%Y@!]V>Cg[drrVVg$f9qOWKmfkEBh(D-WY[tp//1H;CNk*_'Y3)%@`aF&h1EhB+HQQr#+&jei6dbf/]h;<SrLFPp<69H>%A?k&ta+%`[3`,F1XCcQ3g:r&Xh+d(Z'%jb#7b,33]cAgdYNf(u1utKFnpF;jS>$LbB@\#-\]j@_8,/&3`hK"qMlpBB;ug>#u3$P9S,AEQ)ea%OXl,]),RV=iS5,QadR=E<))6U]%hgeYC<"*n-5=]7Dh'i)bF(+gm&\h1p,@:buuLpG'mKo(MDtb&-i0sk,>@5J"III&(T/,gI^N7%>aP:9nS-ptCDBI!cS8-S!lq5.o=0"?%<g\#Udfa,>l85W)dZ`4JU='un;Wl\j=h0jg:?#9\3<+eKW"<lUst'jj$tu?mA-Dqig*>J%8&%>[RS`5[FL:CQkn#Xm<R?d)G)0A.>r<t@;Ib_$kZ"#r7A=a#o$aP)`KB.\FM#._F$!9#Rt'/5LL6_Tr'J?=CV<db%e&j9@k)`t%5R$ENUlfm,E8X"t0=+%kPK4sUKe4Jn0I42c!^O13hmdu/LSub)`(,nSHQbseQ*hhF?Z"c=ZF"R1CuhOO_(9M7iK[7%<-l2\gD8i/%>m5X.;2R7E3L6!gPL4en[?&o2@,b'1"s:CS-&fBoR9UTMFP%aTQ,G9!ofeC".o?FO!K++..u#[Tr\1Z=ec<,tLZ;?u8[p5LN:_G#%;FM*p0j;,_dM_Bn<VL\r6'SQi?h_rt3@5eGj9Jb/DN\@+oRb)K*#r@-/R4RifC<Tc7neSi;i23\VEIjb;gp_0])9\7Olmgs`&)X"%"7B0-LW([Lb)H1CCaY,)K9AFj278W\%nc\f%g_YC48QIQ':Re`G3^!_)]DSi!:Oro\@k@BGo-"+O_"hq>cadHq#H@Z*0L$sB]Vdd%m7;0drY]SlS&Np844k7PHF&.dcU0^b8i0[]R?NR:kj)sa0R:#+I&qj2SCubre9&(Fb<mB*GB7c#X+GM:KF,Ci=82mrfF.>"?U?83%[77i;q"5J]J\N"Y-m(+9[GFmbIG\OVMQ>qJ=3q>(`4<[)ID+UqGLg0k'Dl+,X+h')d1=oLo8GCGd-N]rr_7SOQWgg(CmaTebuj]\%eUOiC+hp1Y\X2?&hfEpFp"ecnFBnA*&$+_/hmh;]TlAuNj\O:V)=0TQ\E^-DkBC/K`8'O&*-hLqT9,cPlXcsoUdOoS0d_LflB/qN%A6a[u9j&pn<YEd%or]/]"=BC"$G;uH:^B_6K&%e9jGsYU4I`@/X)`(u3`f,".^6T_AGMqrGh0YePBAZVe^5,3^*i5Y6lh-W;',<b%=[u<oY%\(koq+#-&=h`WGM`p>i#tJ5e6o!0-]Q?a;%"e)dScnT5i<DTrQ4k$"uaDEiA>J_VPsEVR[guQaoXJ3$mts6[=fIYZG$Ma%YuNQ3NAr;n/UTr]Ml=VD,+&FC6bb\Y6/GpE+?[7XFO;:f+RZ(\69-S&>Od^':@q>]s);$CY=6O=P`5nBqntcMh<(1CqpKEU#(<)(%(jAC-GY3MNYXnS:n\@MlIV\7s(8ldTPaL3r0dNQ+T3e^$'QgmCX428o)8\HsGcn!TZsa/)`V"VRBThsVj'h[g:FWWhCC\oRkq7Bb%6O#qN^-]1iR+KqoqS&_N0&H<X@#VGK\ePH1II&5pM/D?b+qrp$USIDbW3R)hg-I(CGE_T4X*&:RADTO\BadXOd>;*^P#RA'2;n+T%\nMLX3PTmSO*:(uI2f<F""$C76"D<>i4OGG:NpW`'Tf`GZ)mAe>_Itu-3`m,K11#5hYmhNiLSRfThFPt@?8G=>rD1s3n:5mQGIHu%M7h@:mL2qW.N%C&ZFZ*%U5DoD%/0A))gVGdZ/=B_@>Z#LU\BZ:C4Glka*0Q/YO1:Zblt@oU"n1tS84\^A$m1NPM.H`eq_^8(>]t%%7QIWpiJ*Ha]8jkOZ8q6J88)fob)pK]@IfLDs"Zl#mYk'%G:7!;%IC$M-L`CYf?m$QC-\+#&Xu0l(/s8]@m!EH3-@H(Gp>h-c,t/>%>d!tp*XU9<X!OTM>lk$fp#VC_d@t]m94EfY,A2Pq:@hrnEIS(#Mr<;?QOi4]!oYm2AhJYmPGQVDTF23`HR_lE7NU\"QQKF9q0A\P%R;:ROH@BH)mZjRM-NYj4b/cfsZP3(mA4E4b1?T0/IU1Rl\6KLX7U5[ta^lWP$U=BL`bSg/,OV1?k5"D?,=Y1q_2*n`YQl-5jo^c!%boZ5jbm,@kX#oZ63GCYWcf06BZH""d"nRj.bn*A`j]enS`D"qS/Q^($o77spJ@j?rT&<a3(!pfRaXc)k&2(.4XEtsYGGsb+J5F3/%EVRUui:8#,m$c>50#u8;8Q%rXNFs%/Nb.]4_FF]HgsKk&'R#WRK@,rpPbfBB&6qOP"`[IZo_p\hC!u-:oV:oPPY^mfF]l-=X$Db:%QsEK$jnDu2H7i)ZlLD"\+a/>eR.VlZgDbk%p$1[Di@B9)b?a3j\&;R9nrN)iHM2=VY%8kRb6BE/nX+^-RUf8?]V#+Q],)_q5*"h&%7Hq#0dL?e8#iNmKq?s,4d54*F>6dh\*Ht20%df'0RXhu@;os4);+"N!cFQ%CgjR3[;nW16^6b"^f$`5$V$JcZ#>FY7f:^35Jo!S>%oJ"PU2,a1r]I%]@ESa@*X?;&S(@KY&40R]>U8td`iINbQo0.g(!nm=cfIh-.4huI*iQa+=n6.XH8WI2k&FSdg#/2>(K=^;[iARLX%msKJ];\nE,Jl"Sbl3^AK<&FE)bp61bWbelF&Y?pWaf,5P-]lSf@Sfe:8*XR5DY?m'Xj:#q(_:Ee;Rlm,]^@VfjaOO]ebjbrm++Zk%c-A#Q&PV:=$O6oOVV%to)pKL"K6k^]2E,L/LfLqf0o26[07IT"n,;@+m99$I\DQ6nS0YX6jo'&%<]^l4JB_+CHLd__ia49^o_+Ec%'bH_AOJ*L`#fdRt=<)PTiAfd^q0CUb]Tp+^>?PXl]H0`gf\(`"`HrtfA/[tohmuOJ]+=.q;ZGuI+NM<^XZM>T);f5,WjsdV+9Pes%/rsrP`n-hEN(TA.o=&q;8><PGj#aWL:g\VW79f/M:ni%1K^1ZU>b_o)X,GUg%\DBfDI(0`R\r'4>8II[5.&_m\d2K-XGuAn7E31]%05WPT0&k,?%kWC32786gA%.:u.1i)a7fW;k.![][23iX=Vr6q\b1r<)\s43&]O@1W1><J>8)?2W*e[Z!V;!09YqtJ>rD5VfHf`':%.sAA!'F=8ilH@USNbj3ODC"f5<%'=tqo)sZ4mkt*NhCrp,[RT]0Wu)MKJ%%6\"@Z7'WgGa*fL7mS'5#-CO;afI4LdROrRrCI243G%_F^(>eTn:l7Z<#$Lqi>a>9Iq=9Z+j)$ppUYeiVP5De/.GZa1Z^>s=/3Re'_$Z.QP#8MT%''oX^u7",6-r3&G2[fF[_:<#d+Qr1Hh%!iJ=Hp-%\$Kp:q$Y/Y3=@[U7>jKMO.aV`bPS3(P.OPmT.W2iG^I1elaaM=b4bZ4a9IUB9(e,-Ztf52#orN-4YYh3NZ"D'S-cE@pb%"nbl""XMVN`Dn(Imj]NjXH,+YC1O^B;QZMU'!^GX5^!E]Z?nOFm,!.TeN3*9bY;r1,BIm9Yn;!*HJZEN1Y:4?c\8Q.#`*Ss$2>c%%9i&P8KInYJKW&.!+[?EU`WUZMeSAbHc^*jT;b9"U??d$CD'8l^FR+Pa*XL+7*XLY<Nr`Zb2M"-bp2gkA;^MdS2rEC>IV;Y98p1BT%m`'I+!F\--h1`X?hRe!Kq"A[0h'dG*cA"AgkG(QD@Zm^6UVO+[g/NDZd-W\A<W$Q#VV_l8Y@-i?[8k!Tq>F=p;L[GY,J<i'hi^=`%qg+92cs;"=/$O#iB,-,2@esLmC^rJO0Wm?4-;iGeMM-@)=7NRD\5qR`!d$-J^*</f2gVE"mg;Th\n;c3E.,Ga'Z)T5D543?T@a_8%eQCTs*s,l3?<iDF8_BtYSX:/5O)7bU.sT/_fqp^7&J_Q_r)0B:qdWXu$Go2-HE"Qqb(3)5(bA\\o;8loQ8)nJQR`As<E(VSrZdln%E-^I_?`puIc6,dPSdno'&.KQL!Y"Lc1`)-O519h%`b%P4V75DRAFMEfY@;um0/_?8p(M"GcAe+_Q)a&W%pU;Chi%5qn9c5Uh@hnk%EZ3V\(%mi.@Qoc&ee?f[\N%=+'^Y2O;^7LNoeL!0cA&ZRkKLGLKIiT^HhrHl^rIJ597#\$QuCot[Ah3i_E7MgSqMjeVgF/cT:l2s%,K*[2I4]?c6el$&ZVC0L73D?n&begI,h\+;Pi51(RuN"@H8Pbp;>u,)1j0$cMX_4W0tQ6j_>Y%]j!Y2]VX[E=J']^540%">4H*@4%n=-CXXs:quW[HBB<'_?<]7un&M4]="8J`BjO!.5iLt(bGhn?hKF2%):cPT"B>^&km(,q2&J,HfLkP0V@O=&7OqDP7`#7.bZ^"W>Y%25sWrq5\'>e0-WVHH7Ir7\[HQ^`l3kpGPSk'tpEDiC1JOr*7R=eN^(QUP$piK,\!u#-Da?e)dFiIX0,,"1H`m-GWATj*>e%%/4@g%B.M6Lo7Qn-],[r[8e6n;%(0H!-M:OiQ0r!i7UB/1IS8/GXKaeQD*m.3oXo_6iASZrrYFdJIn#4Z<b-3l>;Aq0,rBcqPMaA<gDPHX%AMpkFd!biUMoQj/i_Q'0'I?64LsQO_6Q"WH6/P')[T(^#=6M2sk\,X(<krT#d8MigRZ`Pb`u&5AK:<L,EX8l-;$(s]-D=<8Qq(OI%gYlDW.<([WJScH"2iM"l+7,dJkeAE\O]O;9Z1QIh,TT?\9Md(3E>IIsguR&E5]]$7(%&V--RET`$a]Y`4DObh5/,0Gbd*f%i;`-H%J9l4HiO.0Ln5BdIE#A"J2M\%K(<F/NS"HfX[J!D&*tX(s^B"<(1TL[J8I\:[$s[?4DY6.(+_?:81g',J_QTqDIopO;LTPHlf)I,-%J[b'-X4ITqi'rfoI>+tr_$K[&G_OT8.#RU8R*bID&:uq;]DGZ;"CJ(RL!P:BG6)U]!uHa^it'rA="kXW%R*&a_$7Vn&J.A[W2>23%!C^#Y8"9FtL^O'sBBCl<n07oo"U:2c8qJ2ECU0$q$NbOUD;IouV.<WU<3/A+]B%iD#lI#5/cn@;<@'XM#DH\h;&(O\Nr_alQO?><%%M?`)"HVpj&[c^Y<^iF[<YEhW&(JJR'/N37D/!:=1<GK>d4G%Q9MuP0P3$"R8P6!4>4,sdUnVPRG87?a1P0APQd$l+Z>=qjbpHH<%g(d=V_FQ5]b(?)+A@%S'APl0:)/Cru9?OPP]dIU;X<^t=+_QJ(-qMqS'Yp(c>=KcK!?4YNqQ;:pV6m?TR[=3p>M`'^;Gn'*94-,A%Pa"$k+nm`0%I#>o!C^OqN2<$q-cM$<&Xe1cnQoCRT6ajDpkAGtE`*RU3]3=+Zn1'3dRd$Z])n3iR`M@i8leA!!;K)?BgU&EJtN>m%?l=\Ij#nuX9W'2P#%1D2<NIhuA<JFV,&1:Z<(QbV>3KZi$qcD?bR,9FP*BKH"o=?MT\HQ*"J1a@Uo#PT:sK%M$>CJK-CmlRBiT_2%&ho,8b%7m#X=Ro?Ss[_GB]5Na6m+h"A4]<!0K-S1Ki)U3'j2*@IF:2W9rclg:f7=>=W%I6JUW3Hd6QIec"I`uTEn_!Od0_o&=6>s%.sMRT(:?h4!oSq"Ckh+V8]7d0Z.pXGA2XmlKgsOs-tcDY,QX-[:#sK.#-(Nse,XiAEMTI's(RKm1YK.+,?6b!ff;qF#jkbS192$K%S&CF;PjBA]^r(5hRZq>_p;<"X+.AH>TjC&8',a[["N:m=C2#\FB1PbBAGe-W-A^oS(_W5iX4S:fV7^I3,>b`qMcP:[iM_?n+(Z]8%;OtpjBc)jSApAb=dsritW%3KD7:7r;QGPGR#TP4mfdtI2,4ngZMB^B.U*9[H#U0_4']DP_9hRT9MHR`nU1H<E'NKYdJ:m#U/='->%0,kl[Wpih.b\V5DhTM]$eXF'L<K_q\kSsn6#M]I"+=`t_q$GjNs6IT&$i3[u,gFJ\)@W)HT?2OMiFl8?#fJ7r"^9PS&V1:jl4=4r%8Q3oGga>D$Eghf0`dO!M8<L56c[Cr^1aNgk@^)I-`2-;Ta1+o;B4*Pa:)huDb!jLR)4p^N?mS[8'T4jPcIF[QT)"J,Z>$<q)=pF/%(4]+Q8V?h(Rt:Q2.m3DhS\T6672q+&]Kc[5n/_khUk"!R[%T$:0<$!MGY^\';sW#]L4T\W/7W*O@%"Bh[;]Ffn>2;^Te=Q@#*^l2%nNehE<i+@r$r_duZ>Y@5TguC2>*oo;,V"sj@7D)eU+%kDN/2S4a<QldJTS19&KiDVJo"C7QqV*c6g)lc=I@;<"9Wb<[4ii\6^7)Q%LprJs3*l`e.T"'P]EiU'X2I7WGnI9[M,mqV"4]t2rKt5'F=g#dM'akWA'%](R(N]Df4i+_71IHMN@J>UMsrpC5a]FH71&XJ+S)T^%!HS6pB6dOBJ?H\`;0Z-+5]CA$N("E&^c\'Uj]PFr75-#:o.X40OVL;/[i$^=8D"j.k9_]k_.q1lSSYMS!<D4tP8Bom6*Y)i$#lSq%P^*[D,]+-F13jH3!9I321P3joV_+bpMuZ8"Ch6'jbm[++)1a7P)`(*\%)e^F0Vaj:AgHMi_2M3m!4%`"7_f7r?j*,,1Wf\d;93K7%2p*%t$uJYoTnIFf'kF6K/(Cn"B#(Tu'SCFfppG96B_=LX4hE*>+7X'[!k3_Ui&mY9,LPH*/b.$gigF/8Y+m47]C+n.i[%bq['I?P%0n!#7NR5-*r2?9'o^&nTUaQcSI3>h,Hn,RAcQF=8HYr2B"<q)I-#ueWrXRf6N?IY\PQX$<ZZh7LQBE.:#!u9i*,kA,Js3#r>L)tn%=fC?<#2sZbH[#DE7pp`Z5cq!uaWmO!#?gi>hZMP(h?N_7W,/seB9Y6Xej-G(rPK5AQ&"be%?O>"YRWWXpPdr@dV-2u\s.h/!^[1]%-ttt(n).CM;F.Ki081T!9A]iD:F:;6,))DQ#$VgL6bSf*f)SKP%\o.8?rp4%U0S/YU9%`'Q#p/Y#L.!<98*N*:]rOM&-lp_D$`'+%gdm&SdQ=CYAgR2M8l<tSU"AMNijC1s@Hhta0Ydt@\5I#1b)0l`NHYL:S?tZ)gNA+,N'ml25>_0l*@Zmb%jWg`&@jkF*,r"O2>n;(%PRJJJ=AbMlB<sW+"bkT;&uCRK5r;,69#E-P28ko5?j0se&h:l:BfHZILB<WX,$,,nS(*Wr;rD9o$B^0E&=WA,b!R/`V"6=tObr`;%KTeigL>@Bb.tUM;lkY+Kbg<At/--u_>nZf_$sElV_`C>Y)l.Lr[;cm`NUi7J-rF!(CPjfK<NS[mPn6Gh7kYLgWcK874"pm+9j7!-%167ULn";WYkIGo3$ppp10OY=k-62bImU[\11@O107*7A:*?a<rN(!+_$DVH'ZUC`[!6%Z0JusmJga,3nG>,U,D\2seocTR-N5d^Z%GJG&Wp"*lD!9&P)s&/T741F:lFl3q'G;qM`8ALm_aa_T@WA$#6_nZ9C)"sLDDn@k.^8&-u(6!P9aVD)?-hkodY4bl)"@;^_PFDsb%a^?h%fQET1f`c/$j`R>KZ?QXjr0r<hg7+MW0&AY$YT`pgP/-`f'@dsk1F%tlhqN,dH#JP#7T(qpW/_10T=3@h</SWmpX_]aH1%n!%Uk8\/n0LKbGs<i8G)7G(;_Hn"mW'->QSs0`^2DT"%dM%+2!\')p'HXp+##i05l2VSoT,@rO:F"hmq!PakMEI"'?J-T7;PojAkVHY%2>LC5$!G.25XGMT2L/2F6^J'T1#q)\>mYb($_g<I"Pl%PoQN2Q6h%]Z5oF$(B^Rsk6sJBI^L[Y1;frE.>r(@CUsU(@/?i`V9@d0V%V,7p8T-<'6:>Y+B6KbjS.#%C+Bi!'!([)uOEr1_b^OUT+#;VDO-!#\jMt@Ah"iqrMs3:]nE\67-V=&2*Cc`-;fN:qH]TBZj%V4e]%UeiA2]T0OER?">b/GYcNjdb*cCo3?cgf_TJpWOo594]Vd-JOY>1rEetel"3CqTE\3Wgq[1G>-'SUqIfrOs9)(s+4.>/d:8$qD;[[%#ja5&Nps+AheigoUWOh[eU%C9Ks%'=h>edRCUR3G",hMYgaLqUhN0G+2ooo+Ka@cbE)f'A04;?Jlb;'?=,2J)q2iVdKVdRT@WE<A%KkqbU?QBcV<sJ_PR-p!8""[klfN%!9g]731-%K&%@$dn$j732^eS-VY[/``jQO3SIf<+i/\qN(A"`\T3[F++O<sN+qd.QZ(?m!nf%Tfi[S>+OIi!6s5!>TSEWah0_93R;d.gB1"+=iK+tOK)gPblB!K[=l!o+NJ"cr8uLEN\q8@Y=Xkpb6'G))0pK-EXf@njWP1:PnM$Y%K/=i1g@[`Y<gH0Z+$c%GD<:I6P9r<r"VShT2k1F`i6lWBVZ!mIFEt[AX>5\W,(V<ShrL^Q?2M0"ecla"3FTQa840:+#e`D%OS`MB%*^Gi/i-'Oa3/36;*[DROYA&14!4k'pq?6O^DE,0k!)Z\)h]HB4Q(2FhSih)\rp[Jgm/@R_NV`g^5)uGA!nf(<>1jRdKa_2@6a#iV%N+KDt@>)dE+DKLS#[4_s@sY`\'["'#@g[^I9/S"I):MfCftnC%VW`"@X^IR2F`]4\O_HiCAo#mC+O.pB9,*/`XTW.d;;rU1$2,:F%GlmE_oQln9FC,S@Ic5g&?RTBB554G,a;F@RQY6o#a5hW]2LiEt(J;ScV.sK-kihaIMgcbPhhfJR\=H_<eK'u(Sp'hn^nMWI7ecZ]%%(^GBp]+^@Y.=FC<G\[0Q21m)4Vc%70mk.NbEflH3H_IH#EZEV*$QYt?0i!9&$B^GELcj*9cM3b<DHi[n=Ih"O5adm#(9buo0Vqj%4Vjmd\Gpt6>mc/!YK<ub![a'FIHb>BP*Unj;A.qV##oS.!8sS=6kBRVP)cW&k^$0bDq$u4@d9CP(!%Pq/kA^&%5P*02b0c2XDf/q%>;dW$+f$a!aKH$;.QtNLP3E/$)T"#-QE&Xo3d9kCn>P_(m$6r/Qru_j5Rq,Co^p1;9>.A3D:-38?Z!EP;83.+"p-2-E:,,m2_C%/%3]8=82En@>pPboI9UP)JhN/%rk\[:oaMhc"9$pNLh'RDVF@;?D^=)s1[8Fg,,Y-J*:"NsbSfY]&Ur!%bBs^MB]<Rj!9,LaeGPKc7%p:K42"aTi^s)@0Ti<&SneDIGOmmB^Br:S7RllcZ$nhI<SXjiV1Bm2+65%^SC0jQsEMou?S>Lm(JcXe$R".&cuPQ0FQJAkq1j*8Gh%3'K(1Hn=Jc\#Y9-]Qh6#J!fLS(QVQ`AB;aM![pFriW0R&0gCE6'ptu,]FY2;^.T3N-.gAHB6DplmG]9D.ccn$4Ou3K`J_b?9Jna!%ij"5PVge0OO&TNA`FG<OgP$%EGeGBSK$pSYS_Z@[T]f5>:2p_;em?(9/36VV=4I^9G4gBFpnUr-=-#eVPM\L\2GnOSh)lY`Ke":X%H(^]pjZm`*MaihNnGl/GmBE&baOUV3]2i0he,*"RHE>D-ApcI&5ES;RVU]g1>QC3O.i/a[`Vf;c8@j0OAs\Pd&bXX,*u>In4`;DY%8UC@*gW+UrA'(/ZpN%@uG0G(%Msl,VEujRrbhK[g4e`)4o`P(^Po@8`]PTgHHoQc-jl<*-&jogr"j>6Hp#?s_Ra=BV^*)%'oGkc]%*&J,*-LOE.4UDadhV3%Ph`FIi""23o%o0Q=0OjSI,m6?V7W2FMV;@Z?4H=JqQ!U++WUc3g7*"2!<a*[V[mks6el?1Rd1`$.P%-E,%kNqjqO1^<7m-aGnOPgk\#sIF+?p9'l'uZ@g"]V8.J3$k6!<HcrlK5r3N^guWhhZ//\#SYVJIFC9j&ZO#"0f8`YKLS#?$19gBicX?%:P:MOP'Od;J[saSlsrl>O"Mc[:WFDhVA+1G0&^FpN.H'".::JOi'\s2LZXs[^fth+i@s7McH*!te;<!&`o&ZD5&Y'3#B/8\Jht'_%N4R,>F!Y10VdnN!<%`jEi5W=U3B=aig=9tE=-?:%@\)u/U4@:jmOhr6&ai&LMs.q?"^cG':?i.WLe8jMLC<')2JMTs:,7=2J\f*9%iH8[(c&W_1Y(rEG8a:CD#M"k0cn_EWhe()Q*l1o8.,(2TNFi?,G;JEI:J%sb^kpO4d0.!hl)i4TgncZqh,N6q`boR,<Xt+ij][MH%W>nIP[E"<T3s,[kmH,bYimkYIG$l3Q^,sQ@Y3-+7Q(9pU;T3,<dqlpkgs5Q:n^Gd=de,Q4]@#0:Y-qQOopjn-1^=X<$]N!D!]>+X%*'.&/]^ZSbGS[9P'UhCFF7Hupr92(RS*&`u0_^ViVDmdg;PirLF"-[L.[<fQW?Kp0A1`VA;fgnuKdea$]*\_0ESS=/ETL_(^>sI'%>'.\C<K/?L+?Uf&4Ka=#?Hc<W%I%<n%;#KDL]mHkqc\f5n0]WnK/e%f+4e^>s2N\*bnr6XBB4;6FG:a(<525blX;j7"@[csf^7LA%I]ZsuK,\Zsp)goZ+gc>1D5J(T(gW!`(C&5d8J&qIruDHF+`oq='BZ!KNl$htjHr[\'\ganUPdM6csCeTO&"0hfFX.tmr!1LMB4pm%c%-S@?3oKrn\HN1%#C4jU$+,](do7JK5f,Vqiod])7]Rgd2H:*`.WqpL,T3b8$DDO;3,I))/g3SWZ@:DUBi-+feL(3UEst]7t9LE%%\h27*J@A,`f,W\h@Y",13fd!iiP`WoNP[6:Yn0)&:iK@mlVb-XW$>'.Vm+D?/AesRlO2dIrhW"7c($0of84cU>u/-DrO8pIfX_n%?`!d7\b[:G*pKl^Y3OQG)bF_T6K!3N[J4bflrLM&$V>EO<PmO/-,2RPDeYuHn7:6Mn:@EBiM\;O]2c`'7[;!_KV_On@UcgHiY">u%n&]U80XY0e=<=FEgJrr+OuF4_8aps(T'TKXZ6+>U&A(qrX7OE;[6Q,lgi?E\FDiNkRV!n>jf6mC\rL!tJG#b.)B/p21\t/,'4@l/%>O>HVW92KF"b]nag9%C9X3a1"]+kV2+[s9`OE*-U@:\]d6<B2#[7.j)6but3UF-/LBX\'(#'2M(!RWl,1L(+C=7cXCE$YtH7:-I)%19D>B6+%(WeXg%.(lEtu]=:0g6GM9W^k"Z>2`/t[+Thu,\@]srRr6]bjH+'\UC-p\E?lP[J^J9[/QF:F\-i?,j_b=h7?bc%aW1Xd%pR[o;(g=P`UL_o`A@;Pl<m,)*=o7UK24'_RJ#8C]bkT"gptU.lI0YPFE!9EL16g_cAZ)`s0%]kb#8stg)&GiMN%B;(^#^RY86S(]%_K(TYbXN;;KdA0=14,2sD0ejV*)g*qj/(VI3R!c67QQMK\Z6e1+!deS\(G@h5aiG$[/&X^SR@QPQFLTR"fmXJR#^niHTb&4d^gCc%e$Pn!D?\63:b\]u;"i;"!e`&(gKPp@a*i9\2/5Lk:8R`:jX)."Xh8(_d7GphnLA\E`iDKAND>=Le#[&(TmsNm@IX2pe#;16-(b=B%=2<T?,1fj<>rT7ASIcm6A'P0pan[d;"-^7JmCqjJn)8TR]Y)R^X5HN%dpCjV"\]"PBINuBebhpI$32-#DK,]#HB8,/?ebAiK3?-5%PQ"VCNWZp6f&j+B2%]jcX$t['5[CYI:,+X-iBB/>mc."c?[V%iC^"_-_L!M3)KEQ;J!5%:-YcgY\^Tq:$nXab4i2!tbl!lpL6/o)%bYmH5*p.#&l0,Pdg^GC-a0Jrtea5p58sdhJG.YQoQtP`@=f+ej#>b+=)p3`=;J0e]d:[!sB1[h%l$Y@2R-(2$&j'!qG&&j4V1n1>%)J3&<M!UUGk!!_GR]UbB>lg^of1A"fa?C[MGJ8.V1c(@PWE9F:@O9N;m\?pASu(N4Gi*1`H8]g^L$e/[M$Z_=rQ8_JBlVS6jO@P\%;WBo7:*T!Tn4^c'iisH+0G.mQ^UgksUkt!]q6JaXBU)mZ;,EBFVE4c]G64KFaBOK1AR1!=.0q\];\3eYEGTtdYC63FNH$A80g=aF%N8$X]c\PNu5&[W[\P,;&'p1",F7G^^hAEhnY#g1"j;*W^0IGi]MeF_NkG#s=d9Jr:XU(Jl$gI(ictG$\%\kAd6U%/AQ]YIM-_h7Z%&^OI(rJ<!?^T!OBV9rNbL\K#+/mo*q?p*%`LbZtL2"LPl6\#5I0UFVjP*EdfdZl,30pkVtkp_u-K5cfN":<(nGPVAU4/G%F6VC(p%F$D3Oe!9*FkS;$F\R_GZ^!'c$.<+;_b8$,ZElmcFgA`Ib$V_FP*3(n@e5%`K*m,c:_*ji#>qq:Bi0K>0h*\`g&.a6Q=4L!"]QF<j%(/2`@-")k9K4"fNT,&o5jRU(7,W_Y9eS)iWdcefj\.Uq5X%G4<!ZWHV0Ws.CpTH-:6M:p,C%lBIE<5>54Cr.q\,g0hI1&ONf>k&n%H@gTm!7tkoWulok-()PuNW-O=lsj"?Uq^dSS'+.7_\BP^)=@/PY/$2\m/$+VHuq0""W$5Sr3kF&81HBolhCW7pKJkXitDgL=,c/G%Mr-^+C(<U]7V*F;RDT*$3=Jb^Kl.!tL*91/Pp=B8$ZMHE=i:kUA%C\N<Y0aZZi-r-7Ak#9.r.W\%_p_pB:;C#Nc#LnAeKanY:q^t%Cgu/j6tm=H!31rp'Z5tiF26<S[L_eJ'/a_m>$d!;`7?h6KA"0qKZ^f-]<8E`>BlM*6mIB`UM9,t1Pm90VUF1.2DG?Z'[mQRZs6;>%E0HXiEVj+*TqMZF[*kliW'O+/Xk(`<#(k',Ws1<&RO$qg`<RXB[i?"h?d55B&ZVOlC*Mh$iWWj.P=Z2;p$R%7&3[qd,j%WQM$7K<%1!.qAf1N2KE<"XT2j5*@G2u1Hd!bMbaGO6E&#1\L,L*rjSu]#L3gRPVe;a@S&n&s.L0ZW>EkHm>51f%Y_oX#*8hFpR:V>d8+3[K4%D:*8f8:[lASrPatQu!>ohm%,%&As[?i3k$%-<[:;(q4!8_599jZ>o7Mbg)e]fcMf$Dun@]3;59T,Z,ul[mu*jjhK8lN"j,DNAtF\%X5KSuj",A:@iF4dlLd/c@0dN8*cCZH-?K?bd+p;%TLA!]bE+TT.krMl65QmXlR$__S,>sM,&h)+$/I`gBoucILa8kESWTE/6?h.;%d=a-PgdTa(q0Titgdrg574puFY5/1;MG0DYh':VJ7-*cEH&F"D018IK,a""@S!c\t_RqFK=%+`n]&oL'PpiJuaLr-sL7-8.,jh-@%;&(R'dEoHr?-MYT0Dkjph52ZF,u3\OG5#AJP9b?*7PQC8^KNj57tcO8]M%(OJgaU`mPecs+Be!tE#_gADEEVJlE7(Tj&1)9hRj6P%CESojF)XFjPc1LDG0;0:i4_IA\_EW7+`fBEB<M21-+Q+hrqP8q/p!Ss8a'L5lo1WMVZl\%d%(S"91!ikc,k[B3fHDhHH+Fu5;=t7%epl9e6Kl]#G;DPK`43=!Jk_uZU2d.?Fs!^KLMRQ``R/99DkOYI(0P)lWEC.4;4W4o-PjkGTj'UpS/.tkj.MMKD!hmHaf0NWYh-c<%L?Q<'`2po;Tg.qCHCm)$e^m2BGD.+Em7&/'!_c<%$uBVjqm+a3/$U`6nbnY*`mI1A(2FT>779l^AXb152W$h0/j']\LA@/.UJ>TX%\'t#iIHq>3eT%AKP4okak]AnL7d$01^fkb:=a-:#Ua[/;>Ue2PH(-_`4f!Ssp`Hl?Q"1::,.(g\9#QGcPi`dZ6j0sDO^_PK0mSkL%6jt?%feJ606q\;5'E(?n:(V!!4$bhP?CF]SMO8Og@c?4K11t@aN%bD'm'OIe,b<oV-eW-C^\Zjs$Pli;_'\J$1Xi:CNZ6e/.IU40%HC2uB0aQuDo9YaFa8Q,k+2:GJc1:BbW]\^:[=#?-IO)/*9)hns%KmQ5O+muHD[C4dF3B@:<Xc'<j_.PLiL[h#=RLB\,d8T=XW2$p%:K[J\-RP.?#*1r?3@?+8@B+t_O?pDm%V0in5V2>L?2WlW=UPJcYSg[R#;WDmdB=L`3`Z_$\pi6@<NOYNBB\HOK`bIipn\b_i),)m%aL#md4EXX5(LZ*WmfBGRSgr.*JK-U3*1_@a)&7.!SkC8b369r;>jBs,UgeOG`5.$[EreJo;B,u!3fl8GR5OL]Yr9,m*tT1sU*^q;%.io"k-8#`6RAPhaoNK0O20"`B-9@Q/R6+,=0_'8p:Mhp[Ho79HE_m>"fdoTfj<+L8RT8IDYXHE\nA%J-UZ91eXoV*N4%)MBRZXpX%ol,"!rhH9E"$>$f:IQ6[QV."j_+!U'2S6Oims;Ei;doR_8L:ArOA][dWjk_S'+^<m`7Q';LF3#2!DO4<p4an(;L,Yp#,L"!XP+)k%L2/*Q(-+#J<&S=@>AXgH8-=^fP9FVJd>fZjd93Eh6'<\F6+1J`Z#i[/&Z,qOll5;U70e?$F!5\_X744tmH+WgP/-_-e5B,6JM](d%]kTTUDoZ#A]`fLKUgUW.*>A!-D6J_o]UM6VG\V.PfFUY_pi]jsK)k+a5fg+>1p180:+:]*)DQ7J0p"<!@%DJI9B(0Kb4`#ZiDgW-%?8OKq?f\aC,=k2PJOL6-LgTZTh9q)[BnaM;^Bikj4cA4"iANXbHd,I3FqB`uDH78j1olE,73"oa8,d6k5cBQI`!>s5DrOjX?Kfs<%nVd/b6m.0XFX6>sLJ7W?+hKt=pdKCBp7(hGXbejgT4R.W2M>I_iYK4ahp'TVrY69_pB^9she0Kh65od.mZn[Z$f>S[8!:WI,QSmP%8RQd?2Zs(K"A:V8].$.FG\$t6`^3>,M;ZLeK->iCZ:6T72^o?%%+*qd5&LR<fdE9`#G)OFmK"Ydhf`?4?t4-k^g8kJp\R]gN[b^N%7QY,]]H^uZV+YH$@Zs%S4-iVA.XH:a+]7l82d,e@#h5O2?(m[dkk/L#U3B'BP(#4SB(+!g%qE("d[!TN_X3VFNka%jXP:!iNPs4$%hp(m]:[iTu]H67pIC<Gm1RJ58;#bt!FRa-mq[3=jINFkHNO7R70n;bF,"[<1,`s'+X`kF`N$JG`)+0?.!QI[^6U"=(d\9-[W/Q[+%P1GBnT@d4$@bu4mYNVI\,f$.].5Z8lgdP\2]D]u>KS2(M7+sZfNZ\rB]ubm9&PaMq<GFprG(XV_Lh'T]'N]-\VOR86^1gc@5.5oY%;2E:OO9`ucU-rV+drHSs!XR!7H:UWE4Jnprb66&=QC&;14lB?_W:aa]#nJM"nuPfJ.?U=fE:%V`GRM\,fb&TdjkM(&_3j%n&M*Ve%YgS`U)+=S-lY4M/&g1,4D2]r98=IhWl'WJBg&?m.4L-50`F+`p\I1G?T1>4&Q9;oKY/sX1Tkl,"ITL#q#r(6*]YA3JFp=;O[Z9R7%c`R3>M#I&BP'H^L=XadV9<b`")Z=k1bK$RP8:TI<Jq=Rb5:LRMFA3Fj@@[ZTX;K-%17tfC>H@R[h7>lc8qgqo6S38MK=dK=g0@9;%C6d.7-S#_Kl;V^jhpc:&3j%!F1G=%MUGXPof]8N9="BiIe]iL#&Y?e*"giEW2&,&TjBP\m1En=k^Dl.,&hBcbFR]"Z8>Mi^V\5`;%h+oR>RqVo$D",tA%1qSHo0mG]IoR@"CiQ%%V\Z<U,3C1m^uL6UT/%p/+r(uQ\T?N2S.DfA#n*dOI^p>E.T[9th0eL6L.WU%)07+W%h+X]?I&;I^)S@Vn.OiQAS)WgBor'4;/&3.AW+7kI,BSnZRZZPq(SQL";>M7m<1L\:h([,5@SDZ^,bZ!0ha%KI)"_GAmhKIVO<J/(%?j+=dM\+.3`hZ'5qBBKi-_j."%;8XHL?cAfb&h"#.pG-\5UcD_C53ncqXq)C;m#bJLRi>)jpcV)api*US$%ilJ08mo/_M*\9`fF5%+@m_'S,;)_75;`.2Vs,aFhFL1rGcl58)tAr)p(R7>YR;jW;'51;6chkO_im_HT@Upp6KNdO>OK@Q>@To3JZliZ?ZurbV$0#F[!rX%Z?bBeCkB!#jIL36&<W1$S(GeYG>@q=Da@0>WZ8\Ckag1b4D)XXCZ@"WB.%Hc`sQs`ge6^]Rp,&4lC'*OJQ_L7PN+7J*6<K4H';(<%g(Qm\"#@K@;B8;ebq\C3[hN)Qr\?-fHb+LL*HP-8e'1+M0M5d*p>bpe'Ve4ubu'Ed%<k;s1>gt0`=`ZC*Q<8/i9i!',gGt-G8,Bk%YtrrKUY(E\4h';g`A+mT]teNGidRDA7koO<7kq6[UDV).;4J1>?,F[8BSgP_mXgd#P;1jlk*16eRr.!R&&*88g>,UW6tAf-LV*Q1%[gDEh..2%lhAjLcj>#7F7rbnH4!j`]r=hZQXp`+W1"1fqk1ss9@P".`UDQ9WmuCi['AX\J#QhV"M??GnFhTqp]qsAoo@$S'<;G\4%DiWi'WI$d%kPOtD[[M%0!n+Jd9>ps>I4YmlXHaUWT[CPV-.`(Co"oMp9snKF$*9iQ.+V\\:;]"6pY>C8aB^gd.dUA`R4.g5QC/#k%TcJS_mqo\SLa9OucH4A_4<'f#c2oob9\N@UhDo9q"i$%5T96TSMp:SfO>cQ*j$G;\D,2A/hVI/VZb:],;.)rh0&FLSK'Bjj*D'`N%bkA3K'RSI.bBqisMS6Va&l,p=:T/,9X9)$VdSG076F)^pc=QIE7;=UbC>l_"^i:VoVdUa]>,9G@^fc.i$lW-kDiu+snigooLT11b%,<XsKjLDf`p(q+`pf70/[YN1+jcTPBm@bcjht2'F*dVs!P$_*"k&uJc4g!uU9>><U-m?#(+?\.fHN5)Sn#,QH9>QI$H]Z93CUQCu%l7!<_HN;XIU+3SVr#J5W%O-@+V!XkNRY_>$d>NO"I\kggD[:1j$)?lR=uU<%O\!3Vk/IX6n_hWWT;="tEc:DE!p1KUp]+"4`UVKt%3Z_@3H]U7q?j>=+K]@5q'\`^$C7DRnaP<1"Nja^r\a;\3a\.\N3b_jTBf%sY$*Y_Vks7kAg%:A\@5=M0K:,:8TQ\Q#\p*/9RN?c4%2lrDgYZ19A8i&WOijGdp:$H`;9b01Ae%L5\oB]n3!-6Z&ks>/-kW]X-")).+"\fLmpahJq*e:fQ77Q.%4!;R.7dAAQZoZ8@C"_bO%KNDBc3dbi/f>Aq2<eoPcq[7BaC!4%h/c^0.5)s17SA2`Kf-QBO`haThrIqb7`3BrBkn;j7lPn\d;G*H-='_>6=)WJ*8I9/*;JCND%HjabiJ%Q?EiIJ*07b,#`&/RSMSO(O&CW<p75@0-RMLseM<jg4EH[[+jrBod6Xg9(%Dko;Z0>mm9Ij#;WaSgfP+?\OU#B1q!g+h&(%]Hu/i]YCgMSLE)sS8_DH@RaW2P,P<8IoG4\M<ca]^V-s09O&hlq<:KEV`-iE@"G^"D"8rS'/Ri1S[b=S-KT[@?4YN\G(Jm(.dM-T%+sXY*ZrR`U0NMLTa=MhIGBJa.8G38g?FX/TD]llW^has76bZL3]<n3#.,T/B\*m!4>hZr`($4JNC11?':e_E`l`S5B]%c\^8QZVn%8/e(0c3.q)q./;mAf=O_nu.5FPO^VO^4G;d@KZAIE'.JXTVA%jZ-qT5[B`T:k27o",@+@t4KIL5fC(uqTR5`hkt^`6I(+?MBhp`d%^@Rk6gRL!p^4@T5-<VIq>So<Y)gFlmRr@4*AhIuZXUi"@%I?X>^kTf4hOt<s"'^8CR7<H_gusbiH(V\"_fTo$j%4Rki@qRsg?@L"%U:W9k*_"KRU(6l'79g"hmSO[mpiPR7=8b`2o0D*H`jgnAVcpIcnK!*5CQ&i=5ZF50\;EKJbrP[d,$Wl!N2ls:I5A%#O-0VQi[TJ'%Br[)EgY[+k-]E$[da#-bLn[QPX"k<-'gg>_OUX9k6+2P/l-e>9>gr7K(.<#s/:F_Fj!oRmpmB*%oKM:HOqrUJHgqE"?gf4sKJ9JO%@3/Gm$Us_bH<#M)Me\>2,SZWe@p"Gd#h+k\Y!T"8=Y8Q?j#,f;\-cWe>W20#3;`r(fmEdc\Yg<.+O%6,%(UN]Tau`P'a[HqR5!%-%;bN(L8H"8AlpNSL+in9&6lMQ8<8<d$^[eUW``.$dARYWd@k,96WnuUg$scmrYHacGVW)Z\Im%8U4f4rl(@0+d!Q4mLll*W.s4sjJ%0rd@a?ajgdCMX#>B%PZV^`Kq@SV#S?L9\B0eIr_5PsPk#BrPA?=o6pAfenj<IT"3?]>jDDG-bs,"^F!rfeo(.4+plADQaX,(&3.&%0s5*tUt$"D!&JCA0Cr[c%3V/5;"^EL&Mn2*AnI$6Z2J:c5[B;#eits+/5'r%Zc5Vf:=N[&n^ir`-XJQ8)ODIO9m[T2ll+mX^W0<(%iu2n'Fq&]g:%;,n`q%?jY\O@WFq+At'm)0HjS+B#r05>(*`F4MC-mXm2I[f+'4A?'r_+s#[CKZtm2F_#K6=fG:2dYB\q;1EG4/8>%7Nc-kaI(9Ip1)J9)V^Hr_QL/)#gcG\L:f$GP#CWbW0,JF_/=e%baDT9A$]QN[;AIBLSFN1ZY_6XR`r3[+cLB:D<#,)^E,:Z[V[/'%f*!\o7T.R*L<CV<9i\'hgH-6DRtmnHrQA19V7o:-'A239AK#$%$ZEoN+9(+d>Z.(/^WJOLIbjN[V*!)uODb*@@tD=iq;DD[7PWpk%/IQ'._H0,^qVW?7#$=ODU&![+%\eR,,8R[^a4ljSXXO/lDFOH?5)=dp,&^1Gk:6m2NJHDqkD0Hf9F%d0JKoHaNnNO2>Oi/X^"Et_%dg>TGN"^'nA5&r&S>bUYTmli4A+3MUe*JA,n#G+7fu^4j3',0AUk'C!_lmKt,)c6_F(1nAjIGXVM&)^^p3N)qhM0$i>3^p9f[kS/%a2Y[#",gD_r78PVbV`+^96g97):>m@f?=luJE;5CT'Qc)9d,MV#tr&3`*@8@o;&#.jOQ:$o85"#J5/u4!Jjf7kDgM%k+.Fb&cc(W%SXU0t&db<ILk\T$7!BeMJgcgD6+9E4+'XQ)E>Ap\n;iH4Z+QdIK'9bW)JM#RWj5*mdHs1-c6;4u2e,PP^(MfaU>WLXm8J%t2%s8H%]B$hIBi-5^,0lXO_#VD@bIZpBY*Up`A;=D1F#6uAH,qRBC!oY]AATPe$]u&iRFhh_.@FX+9mC*h4aTIY3Hch#g'[cWmsQ2m\LlQG%JU$+L;B8;3X+iV>]Hua(pQp-h<&qjUm[03IM0jZr-,iq">WV(tqXMg'eJNs+9oDg$_blH_^V4!b],'RgcVQ&VI00/8C4Pb!SbQH7%_@A`!^80&4(@H[jdVn"lI`=2Fr]iS!<rZ%)^tk&5<gh'NfUd?*`-HG&8!bbD$!pLpF)\;^:h.bd`+TpjOBm]0&p!*G&/CT=CDt8-%3UA1h6aS\'A.5?=3]5iJMD#N(#`dB>]+01A'p%ZO">SnR7$o"cN'.*jgDu)\mV$"0Q2:/*rU/%].(+IW0bjhIAaZ2lMT&<.:^@J)%4W0.48.K0b+aF\&(-erFas`BbnPN^-jM?&kA3J&fSGC+J+iD^b*NX+<"sb<TOK+_MYAX__>"K\cBnSG][H,dV(']_2-A7SgdYD'0%%VBRd_k[YiUM(AUN<[hGPpQ:<J:5g^SS/:ce4WXK+['pMI25Q+\\9+Gh7cdVg."<YZ_oTO6l'lD:p[f2N#I[dD&$>SH5muRBi)t&%a@.%H]=4'+d?cc<BX<"B&hS(,8tueu&krh_)-*SXHrX<d+^-AF4`$?nZ.pNhQ"8,\Ki^E60)8T$F'&H,^=U8i^E,*_Nc^jT+0d&!%S[`od8P]e&0FWaebSUh3i$O"N-8G!ck^2']XucGF<-*[kJ>)%YLq-W;8*n_N"R%CGK>i/fFh-ar^m8;qIXPBHqS?]h+O)gYgc'dt%&ud$-)6t=`n^Yb>-^RUg)l:RS+]"KJ@QY%eD[-Y"!7B9sWSVabN)V[/lgGf,G()TYrQF3FcV!LKlJc2pIq6dLJ^iruG,iq^Z(]?q%7L(&NW/%%pkr#pQUeK89H<O$qK@Pp3S<T'aS1`r=Wc=>4RmuiX@Fo(+&ZN?O/R8*<7"!p:M]#0TPU63;d@tn0nkTQ@HFMJ_3@<q:%@QBI];WW->q4JJpAYlDSDL-r!'s>T<>kTmS%8>BgDpp,Uf,_,4T"qou?=X,U":h\g=d6l_.:4F.;U:N%!`l3mJ9&RRa(`l;-M_\&%%b"K[I2W/+1FR==4C['fJZagkJfSH2#>KM40D`p9"W+#'A"(sG,n1SN+/U<SL):cO=iC8*6A1BXR>kUa$KAmd/W$t/,=@cd/mLJ)%^a&A\fb[]U"C4ZT&afad10O%B0A/J:7OIkr[%2T)hDa9V@3\Zb2I&04"P-2W56MV*EQE6tHRl3,R0:qthF$0+!E:>e)jh=43%^$=%-P$DB8]WXi^KXCENNX\P'9OUAe4LRtM4_&#J=L1F^,\lPPVB_&<7SYR=3$dCg2M$F:\l:o<9AYkh`bIS[u+Y6As1#CRT_Y7O[(bO%Ns^O16!]0LUT&c?M;o5Rnc5qN[^tnd".b_!]Ne.#=Et>&hb_Zo<X4EeT+%-K<A?V_rI(Mi4[Hj=?h>:b5(B`<U,O"O9tb6,k6I_6%6Hf-HoOkM2I/&On.E$e>;ebX5\j?,6_CdMNLmB`u#IEhqRmVT-I(&hC%9V*5f:*S,W&(]G+;r72D3kB.jg&QudtJk!2'q2R/VkmA%S)"B(G#@hh)=iq6><G#4.XL<UL+`FSMBs]o=7!U6,78?oaC@)&GT]2]J;aZZOKg7G$YDFsc>o[AB'"I/bi"Z`Kb"FgO9Uc^B*$N0%cm8ct!&\K_ar<r9bis:C7*?.ie;;SB-'g-;_ZpgLG0"DWH97+p$1Frp^>n8W'oSK"RUMqPlUFPr&R>\=(m]Z*GSYV%[%Smdigle,%LH\7?'X_K_$l[NE`+jG9L*$jBMnHO;7jBIMD,eQ'][,<t@4$8k?LlU;JYreS;p6'NLjTA(<!2s=^O*iG00_0McX(7dL>!oHJT)8O%p$KqDS:$1H=7G]ah,rk#Y_Soh2[iF"p&/?Lq\0lT].TPVSJ`HercN7/QTN;A#tC^OR^<pNhH0E3m+K!aaHL78GKl_#G+pMq2[FUQ%`o`?nh]$S?H$>+)7T;(r#`f:;Rl(uurXU/(7cb$$^,h#q`qg#`Q9Le(q1&oejNTBi]a\ft-BK(Q6alZ^+krUF?0l!taZ$f[mBU+f%MR!Ns/;7AI+!EF`AC31qIl>6ok*+(C_RpGi90#L/'KY=Gdb8[V=^RSZ7T$DEW/`<PS%%#4<8N7=cZsIajdj"nl#<>t=?9\\T!"QK%gp3gfHsnXSC;:Xh,;I^Yq)7_sI&hL9Bg]#TLtm/82PP(`+(![:dh6$d,>4$(Fs[9Za/u[no'mA@Bd+)^G1[&Z@gg?p&.KM@]XQgp%;<7(%RXIXhk0<X<r(Ck_Bl?uH8suS@VWj"QRQ2TE\V]@5E^^f,oQ4AC]7Inn*O8r^%G=MHmUA*m8\X5TC>Y:2SS@P14+D\I/pg%&%pTCF?L8=;Y>8JZYL[-/)O]\[p\a]0EI.pf_H1r4OZ$VJuR$794HTfU8qu3-k:20aRl)TStAbbQLEZ.o4dZX3D?!irS*qo66lU]7-%6bWr@+l=a">M;iipE6s#oKC8iB`lO?GF:#VYEfq"pP(e]2YCZR[SG5YpHb?b7q--Aq=q'4B9@D((hk6![uKaAOS;n9h<Y*(Ft`Gn%A"d">D!^$We(]IYSuukPEd>7!/_r[>ciMfHLk^<GC1h8DHN(-e>tZpGSa4`B4*OlZX+02UZ//5WFZ$c$"C%eDPAjg]3"g;sONT4o%aCUk7Q0"Xc'7;.K0bs0Kom3"C5;?"O\,:8I2;T]RK4BDf#)Yf0$l"Q`T-)(9$l$0(J'C5%<kED;m&GJ#*\'&RJ@ni]&3=H9#)SEE%;K^"\)\(VHbsOd*bj2IP:!,[fr"(8b\^6t@@00jZ8)2gh&dngK@Lk7-pkTE<!=-'f>ktFp2NZE$o;?L)<IIalW'\3)S16gL+NXiI%Qjl8`,($&r?ssUXN"3^A0&G_@gEcP)bP[62:[VbR#oTsgioaMC[56YGLtKVq]HF[md%Ruf8B/L#K-4M1i.7\44'%_^(G21?a.g=9%I>DF?:^%)SjLRD6E0QTQ`_A]7K4t8`%9A^8k09P_nU"msX?9[\8B[2DU)cd_eK>gF[pg>7Y(D^0:iP0&NZ!,7\(AN&-EDf%i%Q39%Y7)A'4RM=a=2Nl$=^h`!h`bKE\"D<t1*P`tPIMG<(\T.9\6!,S%n+7KX``8-MQCr<L^T:\`+%$qP3`@4Q*=W"+krd>?0pVpb4^2/%D)*7=(R!ginD_:@oMJV(88>*g\T[;AWN.BYeaug:KKG?OkEn'A>;ABfGDV__e-MP#dVY3=2K@D0_1)a$1&/J,XO>M75nOKM1jt<>%06^M9Y4WES@dof^fJ\;V0frtdcl98B)SO*R2NiHo44PYgHtXZZ#(uX0)h$g3[;qWC9CdogDb5h'on+S_k=CbkNk*[3QCLJ%?Xb:;%$>pg90d6#7p3N+K:[8.M;Jb3,$cgi?k.:):UlQnY<ne5h9<?2<hfDu,r&[V-OV2gFD;bm*M"["?d.X$NIC<YK*HmM,J7?Dk7MMZ%%::5R>99TBW\[r7(o6/X0U>\I*Fs-#bjd6KA=sAHj]AR*/AW.,93>M#3Q#.03LY/n6Hdn!jKhN0i06tlM88ktk2Ye\B/B:odU!-WE%JYYRnB$3DBZ7TP!`AVaoI'Yi`[N0d0C!1BWH@<h?-Z?bjncO.ZGM+\C8_bRWVS'R/A;gP'PoA`3b+%qWb-'0!20*04P2M^ap\B+u%bb6'IP;-tM#BBG9ODEp&*!uMb(i:[.EWq[U\nA+4[p/9+7oN+!#prs:Jk1aR3DEH=l<`&B=A`(n9=Xuo\!WHBD[H9/;dZPH7'H*n%j_qSAV9Ke<No%`VaW%\r&Il1d<P$:%9`JBT/;H1OV@m&_W%>Z-J7YG-`99W8/`O54Bm4E^El8'rXui!(4C^\J2;PV^_&6,3rL9K^%(QSWh$lBOUlYt#WcP[0A^cZOQ"qBjc)?E\\nuO_J8g"8d@+B_jqPZiZTE_?##g3('G`r,d3AgG5G!nF9+Q`IGfjl!DGUO>A*ge*!%R7mm@*0n[+)^?VbchA@iGqr7<XF68:YYp=2PtO@.5N>T9W]=pI`&)("6JS</W_^u2B+/81$<**;l^%k0N<s_^\7UT=BoW!kqRX0:%@[OfYG&$d+bUb,[fBfMmQE&8G`>5VmO8!Mion`Q\E>S:-Z=sAircoG=P[N,uPh)Jq`$al)rVI[rXJcc>/^K#nJ:_8P`)$tc>Zn!m%4Z"]S"]bUac1W8!\0CX0`XDpBBc'nE$6+cWhiY$Q<Xlb(,;m_`q4t"JI8np%oZ#u'+5>]nM7AH8&ORD0*QC+p3b(!7OCSq:6+.q^%E.O,Reke'B\kAPMP(MMc3mGbC]R<1J<()1,L4]^Z(h=cu<J#s,6ognt4r\"*&0OX6'cnrXZ#hB:#tZ?g#/4bR8N$_&BtYDM%30#6%^/8tmk0,Y=RXo.<>KeFV'N>ZO0nLPeZ7q'hRfu.^9boDpA/fPnX,\&*XJK<gop9qqU4V8J4!s$*dU&R;p`<<6g*+U%U;DGa!4l4s%pr^?t_W$=mcpp&aQ4t+(&F7d((LlW4PXAX3(((YC5_CA1Qe7qPJ07C!2JXKpV"Kq\X\n,*gB`i,cV\6c@5/)Q,K;<'3t-#:FiFuK%6k[B_'%oZj6Z^I@c\<'ZfNmV_8P4pgfkE4uB'_[F,)HS`8FR@.5mtD=/[-D%CC>WJeScTDYsSRa6RES\c!#uFC&R.ACIH/02S)6U%pk4BdYaC+9&`XX)6\idc,a:+g,"XCV8L37aj<apKF$Zc7,rQbj3>42?;fJ7;a.1q_mI`2r-6qI8/P5$N6ijFDZ*1rj%=RK3D]H>I%GL7h>^mZU!o!aTk9&k-ed!W>N/GBNXBWUeAYRjVpN!CbjiWK&5LF5+j/UDPLS'^UC4,L]1[+ifS**^j=be@ip86-F6+TSU;&/+=\%9+hludY8Hk4L/C,WFZRqoG*q2d1/=W\%^@?SEQZ%3RLO]2DW<hptAJP&3J'?,XI:9bJ]E:`qt^CGbL>NU.<foM"uFH$`R2emkXJS%a'LUkEbs>m@_d`;f!gr34D8Y9Jf$csB1R'!U6s+8=S1gSO1H?LhG2ZI54qA-EMA3uk+LChgJg4Gj0t>+8(q20UJV`,<gmMNhPTW3%3J7>>0'J2U@CA9K)L!7?rlf:t6+U=WK'JsM`f_upq9)"fK!(SARs`SC\a-`-mJ^\e%g+fO8d7p^>q;GdrVCSUO7LVY4Tr@Ro(;)s%/rT(kqA%'8W-/\,>4L[=?$^T\L*RRWqMO.de.R2H\NBYIK-p1A44OA-bG&K)oOu<j'>4POK-kWlaklLcF[nW#crJ6ee=BmlNk)J4%LfW1bQS:I+kI(Y?]gOD#7cgda$qLb$"d4W-=Ap_IC'V_)>KOR`k\kK,@raD`g$)fjEsH2QM'NmZHt=qfBZV73\NbD$K.-S_K5LqB%=uFA\i2nDcU8)+kP7u.uP%-i8VsX.2Q1#c-O=ljUjFML@.q;#IqT?R$_U<?eYtkmPQ58W*NC@UM?=1b8'@)Nl4NF]Qbe"kL-BN>o%Eif/?Nt'bhNUD0A#>)A[SST)K5.DjtkfHO@dFk!-U.[K?7^m@]M6>s5g4;(;a.*1eO>G"*9<<6([bilplM^-UrtHFJ?VG:'0/lo\%h7^(TbpT$J3uuAM,L!J6>:,FgB#e`ZGr)llUT`=f7Z_P1VqHbi9P9.iF60:&eD$H23_YDW#t;mSP%/Sd-X#V'P),./h"6oR,k!>T%OX(+:NTumlpK;i+b[e<9m4h\$8FL\Im4dlWA%IVD8_RCjQ/Vl`g[sn&Vf:,c>PnsScZB!cQF_eAo#TnJYRjhiN$g.citM;qR/<GC%jOq]j3[TRJDGIi7B^4/AIQ_(;ZAZr1-cf&#4TH*_T%nXDC%*GiH\+fN\2j7&EQ;D^B%r_6\STKp=/E'.K[L?5UV4/f%mij_]H(ZH%TAeN,2g=(>I!\+(H.ZAKR$b-S]BI)=#=p?WR;Xa%SiQQ9r\X(MqJ&hW4QV-7F7.-ociR/.h%OJkOtGNRl!4Yed$7]":!W7r@2*S,%>>+FVN6Ie`QoG]OP-AEP4]u$5l/Kf_e>;?B4[BQa]Z'j28Fl/EYNSOKL$S.b+gRQ_</_5FCnt<h3UJM5A\KBIMh-"&>8%J)j`^a<%1HqY'I!\j7gg&_MeV!,J0fC5t[?nU*f:Dt"4F?jMNh[rY??F`XnCP5b^5!k@ac?+4rUl!FBqE";P4n-tpZHp.9Vg^WR+hQ8JUhiH%]RBTGrI/VSO@t$ea5"]>`*I[m'khd:A2&L=KAGIO57PPpV29jt(>'K@9=As;m?HEIEOdj!`jRCb&WU6H?FP#u"N'UDT?tWE>+m2/%eed.b:67L.K'#>H/_)QpIl,ZlJ]R82P>7A6gW5uT5#"O2*.L]DEF%8hkEn9`n8g22@bs'eEdi`2YDF7T.<uimj7\^f1ht'+(.%J6%%]8K:B?5t"_jD_a%Ambtc,3GF@lfGlcX2&g-_%STNk!l2\a+hkF6NkUJY].-(rm^-)2l/>`()%$Qu,gCI([eZlX;-tI=E)sW(-4Q%F6"h_<;Xp8]dG*(l4a'arFK\OY-_<"k&$%,CHf;A`m&Q@4$e:AYug;\FEo*O`c[G]*$4dsNahH<3PND%A.o#&X:Q'-7#Ok)B1oAR%)0bD)0"W6^:;''%,ACDCq:NBSp<u0Aqo1uJ.QD9ecSro,Vk!7+#VfaoZriXVBoAg'rj]VTc"e--^cZtX;$';+G0KYb1h?L3]1]cf%M6\`$FLr+R)%B/GDRB$J4`/RVh/PBYUcuC9]BIg=im!T2"<B9iC$dm<XL$,AUF=c3<6(69c.hQ*.fH*_(I`^65K(C8Fj(9kb*YbT%lcu?gh&_[QSN-gA<_2&.lZ9=qJmB#1.C$t>/t;X<jt&2[bN[7rG(mYq1%i?giG%0bN%>lAS$(%0JOBP&T[4%.!9A1ldb%rs#oHMj%V\su"h7a$e--i/9f,bI)"e[.B&R_\eYNpZdJ[%0!a`5EI\T%!hk(,%d%8hS=bqjuZ?!KJ$ZSaZX';;.;k^+7%R9qPA#'](R>[gs@%RbXQH5,MY)K^OIj_m)jY5MQGs\mQFr/luYdVmA*K=C.lEh3K4GN%pYV-ZP;(#[aS'%HjQKR<TWW"`#LCAjg+>*?]_I!DAZOa\$th%V%as9&DrlRSM!J7EMeXp<X!O"HSl(7>Zk/`IbWiQ1r-[k?QVm_[@gJJ)Q6h_Z#k;o@>A/"L<>iSA[bbW[1pJG3dGKg),a)UrLr?+%Yed,=g,pRps1XP$%t"2qhjk9mHB7)sTR/[/&%\G*$"JGL3/>_E*G8@p+oVO)_n43[GVj_bEI8ZnI`<;NFpe,VihSKaEI:.BEb^:\%kZ_,XioP-OGW5S>gp4)$_fEs+Dsap(mQ',_/fI<tl4qM<m`YVmW8h7EUo+#Km36kDj5a#iF?X!S;]TM4H*dI6$6TNnQlUG!O<'5F%/?M\qa:;8rfoP$XbW)E_4\d)%D*;g7S"Aq/d7p11Tdr2Q%O=cG@iTkQAGfkKM2+i%n<kQB<4pQ/lX::\P)8\nXsDlHqkRu7Q^;\(%Rr-eZ_V1\MieCT^#+hka[3Qmk/B``\`)L6Khi"?m(`1W%aK.L43s:Wm^WtP5-ousPFbXbQ=,jKRd1?]KhR[32VF6XX3XBq__g=PN%`p0Lo<D+d-3q\?E*s#sH)!'LR$(5I1pDn`u`hPZlW7K7e[Ba7]m7^Ho4-3?^4*X+\=ZUQjVlqFWcD%/7Dr9@H>KklBU)&BKK5*mh%CCEidUm97jae,b4Q9@RK1=<hs9B3a48>03pRZD%4=2Gl6=9,+V-^YT<D3h!HXS?hRrJf\cXY>,\<U!,^>1&<5H\#i^cp4HkA95Z\%l,0Bu@)3R`hDAmnK7kn2"b3@-S^u$jV(\8oY6@BDR6j`,KTrq4Bfc/cMJtZN,oA2,l$"[=SD#U>UAtI$9c)FgD#p$<WWbdLcX^>W%N5u+%r1.<7$l5`F=?!9]*^"05&iY8_fZn<7pK[N]&J-PQ>5>[h,;0Wa)L<K4_%^,hd44=(hRFu<./34s1dWQEj[8a#BLFVf;QIZc%Bho*^Cp@#7B,VJ#.n]D@RNO.3<E45/]gEsoZ^VB]\!?g#Sun#4r^Eitb?Q4?MXji3I"4f%:e4I*8d?MCKkf6i^XTO2?-*D8)*RVe%F.^$%[FfmsW5f$OO(:[@6^)Y?KO(4ectUle682O6Lh^(9Xn1MS(gH`f\W?904^oTA<7VP65525A=+@#sFquqO6tBM78Qo71d%u;h%R4<hrSPiq)1*[?d5#W(bF1j\GI"9MAW_@lZWg(u3<u%7J,gB^e*04>`.p\_M(0[\N>H(@Znl".TIo;O);j6%OA=;G7p^"j"5bV^7%h(`p,#sFH;<BHr_6+(A@^?/icAW154+ub7+XL*76Nn[Gfde.1\]U^\!pY7AU,8k//'Bn`>'^9DD5]@<0PAQ2-/W&)s1AQ77I]&>0%'j0suA676up#4Od@J]":krnT&.?tV;;AZjnD%l37K7,F3Tro-C)6-ktD6U`Wq`Z6PT-Rj'*e*a:c[k;<IP1HmZq"6[S<jqB$e(R$%(S[<`Yeu@a#]`p%)+._N9^;ENX*1G&1KnMu$X]_/6tJtI\ZC"d",YE:9R-W6h"ZP4;T(i[An)_Wi-F>b!\l?&n$YE*qD1\f:%R%?%F>!NP;[G+O.$3(!khF7/'Lq0$@&Ag7*ISQJ+fSoWEK.c=`Kq,&J<\)\:Cb+%eL+9')f7R2dgn!uN,Bd7Wma?Gc`jO8#A\]Ee=;b,%ibO=[5AYGhbU(90k!Kc7QZ_'6/3/16esd#-n'G2-Sa!S.A&q632G[u*2't`80CM!oosn5Mf&-eu=K9k_"jsQU+:_RXZ@[l<-tM\U%IQ/6Q)KG^pTO(gQ%L4hZhU<qrjp)E-=LrI+,c&GF6^5gDHneP0#N)8ub2Ha<L[0]!OGVmRh/G'R3pVNT-/C8(B=acqD5uQN9;APB%(YSXiT<IK6pmt\Z:+NO.=D,TM>PW4p%-k^j8CaI[X+iu.+[Rn'L$oef@VA;5%-&iOO(_&80,6irVJ;GJL7%;K[ArO1;l`Eo,McZ;%:"W#&<t7h>UK^V*@3"[jDRuQ%8Tb&%S[`EJC\2ZoJ#\6U@6dsQ"K"eWWJ4jqk;gNS4ltJDRNX"W$JkT!F!4`//s*78[sTS5^6bBo%C.t/k0fDhgG3*[".ZgMH@`rJJ4s+%[#@q-O"9*VbP&@40*$jB.'/Hd]lq_@k#gZqV2SPL\o8HCU8/R'^Bs,@\a6]KA8@%-KGp0Nd%_PI0>jh27V^@rI8[0Lad`chPQXalC5P1@BG=_mM)d,J@Z%qjOn<>dL$&&[A'^+JW7!RrC^:ZKKhC/e(MT:ktACQ`m8doB6k7<1Pk%'H.[SeJ<o<+U_5md_>PL>eoQG*SA(m/J9(*6GtL<G977Y\ri)B,*Smb@F`Yn8Q\4ElKEoU,=UObe0qU[o"Kc`+,`a67S[>WX:po<%O2NJ6M0\DdBs3JY=K4kBs-/kjN*UI$X_ENHW`/O72\@THL"i2CP1)cT]*m'pfJmB:aN-EP1c$=O;X!S*"fYTXmsjmE[[cP^&lC=9%p4_^gC_n9']$08I+C4A%(nX?'Qi8[5T7c]AGsUMVH+*)8TnH-7;p+G#!D:-!q0^'-XF+L9lYtgmpsdHIN%Mcfj'"PdGkPVS[jd"$%RcKrA"Dc]6,gbM(RHm4q?[!MsoRrKPG[*)%-(X9f;Omei[1oY1+K2BCb(+.SFV>%9Q?AVWb-/7+2lP9P`NJ\1[(ag%oH9B#1^U(*%qn:-AAr&31X%(*1A5P0O2Q#?$f1o58,:31rf%f*?671$V@<fYX='sLH5t=#B8S+Of)GXDE2hOal>!lZOk)kR!7jKN!^AUa?1,[D4%_(7DubBbrjb=Q_;bc#\-c_k7o^r1CAme8\>B5?3/B24Qlr\j1F+aSRl;V(f4_Ondn`I>g]HtK*3B=H>(ZXdTrbhMGl/hJiPni[4L%;M6o3D>/A5)YTH$TeCHB&.PYAQ29XOW98IIrL,Y/C'#JRPuLBO_"0:M.UlElc]D4!/;')s_m@][4)a-I&W<9io(cqIr7fsZT!0-m%d0OuIdP%)%T\^6G=!8oLPTp0H6`Z'AlI>um=h6,U1'HjK<Vb-eI17_N6P#C4_ZYHP@d-]Z<iPG=37JuF8rst-&pk[noYV]'3"3,<%h(_">!D&<.S`l63XA;UfM-f<&\T,Xb%7H,q#LXl<,TZ**:.]oKs.u@B?W@3[rA7"OY.R;8LH,>h=JitUR"h0a@:&mifAK!c/=>?r%nRRQn:6g6qoaamqV9e08QKI3@UG9U=*#cVTf>7+S6t+ErTDZOWB,g=TqRX;Hlr^WK4X0.8%oDQN]sVL3Em=lI`s/e6d\%"@A=n7Z%2,D.8Q@<Q^RkS4+LACBE+9=sG^<cC_jcf@cZG^3'h31hU'2iq/joq>I`Ork`a^<\mp@t>bnWW[4=QCm!HaNCQaQ6Dfo,c$u8*Mk4%C$rVVOr(Z;[meS43V(>gK^pdE5+f&9/"bJ_dP=,]^dE1/!pdRjKKX7'2NQDbB]U,D>Nfh$?F/OjEK2=Q>s4P;?'p=@YaI%aQ]*Z:%&hS2jgnBTVg/G)9Tu,Ai_+]EM@[0JF/KeJkg#oBJ!)D:NQ:`Vq9d%PA#>?W)RshFTbN5Og"<ageZ-PEGp:9fWg?52Eg?5:3`_.$5%F$aG4juF<7Y2k8+N5#`/f>&";+.+CK%`&^hS:644VosLBD6BU.k)jM%N[3@aqMM^A+E$q8eC%:ET>NJjC?1]K=r\(_o5pcJ5OJ&S%O2a`d`WRl7?s+#X*1/;+(5=i;M@sM]?^RJ/pVSO01N_EsEkir?c-:8q6`E/kE^5M9?dOTSZnL.b6jX&A`f#Ki=qE(7jacSocJB2b%Ij6.)4Mrs`FueNcq'1SSbQ>IQ2E^?>EAu,;OM;jAA=0+l/'0hjd+/1q4Y8LUXD/32,l)1P)4dI9:O8l[G1j"n/(gcCm7>7IURlpJ%_btTfqLa<lB%@+'Cn`#Q9D`pY'&ESN4FjW]!BriBVLlthro4KB:DpXng((_ikS4n!E[aYmZ<aQf;Gc\F]LKM\naC!7YV5@@dY9e/%o\qM%oM@O_;>7L,#.kQ*&<&&rdoKSPeXEb0MnQ$giQ920!3E4/h?\#m]WMdfOCTP+?Q!dp+lcr%(/-WL@NpcppY#DI&EIPIM"RP@%aspr_`Z"G2mH+eP&'gjg(5Q=3ff7n\1(M6(G/ebg2E0$M$$`;c%fdt8OI/Fkm!WqnjIfcOId4Y<&g.B%?n7WKl89@!7o(XVH%rni%4?bO_GWWp[e5rmLGX!XIkkDW6I86F#b)@"4-jm:RN\CL0Kr3,H%tnO:M(bi&'oiu7!_=EO@4X[OqAhMjQ$[UE7<$S@UJ$-eQD7*'%*9A5IEo!`QcddV?!76qFi"AQ0-/a8NXL4c!5"W",."5]mof#QLkeJILfj[U-Ap$Jq_;(@R3Z2-'aS-3XC%IJ-N4AU8@JW*e`fetr%jM1G4&%'9@a;!q$Pb.1tc&=6Z[IF#t*a_\SQ/9?in'8"iXCiK<[H=V@b++6r^Z'TA3:E4;1BNb5QUEu%bQ/%EX7k")mb^>OJ4YT7%hse<W29SO'DL>in2\ajkIt-%Q9)UT;c9b&%8[kGLGOkZ+0Gm-m+PT)o1(?!BU';LKR0FP4pt@KCWWS*_ASbQbPcRL;Og!QY8719"%m`L=6@S/g"6rkNmB[u'kUk?7J>#4Z8j1.V>!,5ldQPB75Idk@q((>tL.g_V]*$WlLN>2m[<ksaP\nVR7Y*C>l<=cAq`\b+prirDt%o[VIC#?"2Y`R1<g7tW:]#]fTZaoh1mAa"5+N&L;L09DP=1`=>dDGJ@O`4\@tnkBi?U>Ci>AK7dW3KeN"BWt;R`KYnH<`("-(m[iC%+H/"Z4YTVX?MVB6W5u=g8!(lc\V%OZNt@J\CE2<1imQY/6eC3)0t?l#81$Qg&0[hRqT7aEL+$9&843AI('+uSpu(X.q*%1]=kKQ=%<!u:QnD]nUhgC<(Bi5X7G$&.`C*o7\W&GG+PbTpfl9Y]Fks5.Z.qs?16:Z:7DP#%mo$heooh&(+80b_V@As@?61bkOO-kq27$oO&%!*p9bHUbDj/s7^G*pY$%b4[+AOQ`5dQbaCoh(ikBpu^PmK@;a01+`L*U'Jf&4'=u\TBYa-D(FW"W8SVi(GW=E>aXi74K8*<<>\QZ%q096F%BD#@i[BPD&Bg(Bm*pG5XY3GZ+%o5BL"OKX3i1%J2GU/U;FMP7/T5dK`\\@%.mT%YnW=o"BP=Gl>B^2cf>6!49:etQ2i:=@%&TMWNG8t-Qb2<b2n9(%U"gj;0j%+;+&N+mSDe2?gDbT#nl[$s8&f[8*XeM"NOYBr/foXtF?:f)M,*N&?C?i>j(Tu4g-&*%+ml?Oq%/r:32:<bE;B<Hp]dC,gm(hB%[p>cnlDc:k&A=4is+<iZ\/USADY6PY5Fj6qYPjeY74"?mom??F6]B-@Ub:e;>)eus3I.UIdjko<R%npb#h_`rO\/k#P=SI#&-R=ZAW)jjMi?NE$K7Q\!&Q2U7[Mk<0us7mUO<nE&#I`I(]lf..&KE$:Is,V[,XW3XLMD4QM<#&N?+BKT4%U,Q,$k21PVAJhTXK*2[p">hM5P4jO`JRe?\O]4;7->4&Ada4<G;FEj'Ja=S%0$,OEfoVaE"g[i>JlKu56iPdXJ`(b3<M'":jH0fR%PP*J&8ds/>Ur&i'9!WH$DMdUCU;q7F/O>D>"8F4boeXXW^ZC7=VUR/B_Gia*GO4<lS]i^LPYf<Qmp.dQl'aA=kO\eHa&6Li[8'F+%3VpfJ7^1PqJLEl=$/4e\Z.k^.kfmon:!<"]I"[[[1$*W+P3:>j+K:ZJ;;QK,+`Il`n5`qb%om\C+/$gqK:F[?VG<(9*e0Z'`kXW_%QHU0_+m[9<7QU6VGK-/QVPUJVZl5/`0]84>B+.Pu3YQ"210LnpNA5te@iS-H^ch]Y_4Rtbl0VD'Dsn"ucub&I&D,lAFbNJ-,0nBc%PWN%r*J+!KB8^')=#XH-h(#77'&f\1hKIAEC6rGfpKU#"jiCf6PZleSGjJPOJCpiDKp9-482.N/*K7>BPbpBbo(j%T4:@5tdsIY%%RS3?F$HsPMFubjjmD"(dij\q;TnD%m\JN/(00"oW`35sP+0b[t:J@o9723qE1UalPf>*=cLp`Rl!,/bp-2P>CJVXJhX2Llg\F)p4%EhUVi/eLP^dr$aAUKu%Za<c47+HV1'_pqre$3QNM#3\i=l/6D<<K^Y!<Kl<GGDM*Np=_.r4>agi:Rau\]HP@J4mdI3&?7e`/%0O?%='IGN]YA6I%i+Y$(%nn$3VH,!H$i#E0B>IrMOZ^E%35:.&72-HF0;8^am@p6bT)R7N9N\a>HqcC#-0!#M>pK!Y0Auo/$3<T6&HR<%Hg[uV2$9,)0'JPo.Ss`!:.:1K1_"!)^&h/4c-]#[$;%s+O1L8>b4N"gLG.1D6n+qV.D,M>HSb^SHR8?clcMbe:rc7I7RNNT4jMOp%lD&H*#-0:<p@\JZ5kV9CaWX>jV&V7)-/*W/mpC&qOc+A;VA"iqeC7:C3>iJjUaW]Eki2g%+$9,fY\UM7b<WIj7B)89Ya=<@D^1f\%K,/%UVEdVOg=f]!DHqkS*o+9W78poMY`Pcb]M*_sK&=[#%_&Wr.4(bs8DSU5M+#D1+@JVXiK;!&8p8$3L?^OW)k<"I^bu"[@S+]d%l/6qNp`)q)45,%uintb0@eZ/u53,4u^='iQ%$3[-mGL@3`SsH4-f;`).Q+DmV)Ir">(V1:o_V^[T*m*HM1GF9IFUUTGLsNt]'S*-%%u>;qCX?/(r5gqn^1b5%1&"lr"TQ.0'VbD,ALLfYlefYRV"6Xc26%L!kEeqj=gGS81<C6glRogqm6Ic%,-Djf>Tg;`"1uMEJ:8f`%Q_oZ+99_:#:KK6EKCr=I<O;BEY,CS,-AZ/Z+g*-Y?tQ*m1*&`h(iRN]Lt&%I\kX!CY;Hu25T61Z83JJl^VFHO9hAi7Ai`N/E[TV>%jaH^DO.$!$bO1.m-m-E+"=9..+X!VCC>ZQjj@RFDdPPB6F":iaFFX#e66M@HE5sR[GkUU*+hXI09C<9j[cq$4UAQ!N_YpS+iM@1o%Gq*U3r08!WN0[^AO8d/-;o5J"Fe;UX";2b@N%QgE5r@YMo'R,LNMtdG&K^Q75'sJg)82A^.1>:$I4C4N$k15CBMu.^0Vil2V-V?f%o9^?2F[hE,qEc$MXAG-Tl]m;RU@g2M1a/cN6Jo"go64AS$r.j8Md0'_\03M6.6Ko5ag(Ig:$H#?hXb<QE)Dn*['g$]ad>lYg\OdP%,mX<?7Hf*K/M=A6oMf&9($qq.6LY'gi\7t8\>8d,fbuQ,0QQdNJa6?&VCZ_+k`2%'i((Z4=luhM@2R#N-S[Ji^tlOl2&))uO.f*F%&$*FcHIjY"^slm^Pn/84[Ht7p(09K[Djq'>ZtnMko&>Pp\9]^NMRq;>m=0<0\0c6*>#P/A$-6(U3K"OPVqtbX*AP:d/I=kZUii[p%W:f*4o<e0[oa6sO,i]*PXK,ku^ep6JhkN5OS&`OAU`1T%mi*T.]<Z>"S]!@H;@h;EVrg8ZH2cc%FlJdu>[\-9mJ:n/]WZGoZPVc@%QsUk;Zll_/9Zu>t9\NMoW$7"m:@:fL:2Y8Ge_I#h9bZOu0:3uNLq\NRL5Yn<a-jo0$NZK)XL`OCA+D^n/eh/c"^=>mj0&F'g,#&M%\WWgX0(j#l5`tViaO),Q;5AS9/\W!YG1T(#Xs*,apR+h+qp'OOlpeTAmp_$Ud'AdkF5F:jI?Ic4Z8ZOj]d_Y31p,8lljKfSVIUq)%WLW!q<jIk1Zu/Jo;OMVAS!&1CXko=Z]F%MS9(kU9(g<8*aUTS\Cr`is5q^i[P3l@LW2%$R/<js53-'+@9N9-R!6.aT`ZV`.I&LS.%'dYB`.*Fel8iEuLp7%3ScEE_#*V3c5p4Zaln?-;3>5(b5Ni=r`3u3W&fcP"llOgbsE-UsA>lDCJ:oT5uJ?*Ic?R7;-WA]jmnj<@H%cc^*]iAn$CTaKmuF\,lSr"65XHV9949,XjS>@"ko:"`S!Kaar:lDlFs=C$r`Pp?Z)7t8P,8rE>6YZP2P+W>d+eTHkE'Q29Bj0?pU%?X:QC2n$;*<\.A\J]Uds3Nk(5kC!g9o_@^?['euFL%Ob<o'5eFpXS@5,Z`OoRe_9Jr!FgtBNEOH?1UEI%52P9J=L,gJVs3te:J?k%+0[fO'oF(EnYj(ZQOm6rDO;i$daCD`QlMkd30UN?!SbY`U%j2_CR.WWF>B*#],;>Ja\WmmkHCNe*@!C*aeU]P)Dsa-?*ruqr?OD'%*&CR/)a`(.@BSa@ZJAJEUgNeYV@BPSJ]/[d<hHTmr@ekTI8g)TClPS2I1ckHQa6(RqoRTMn.(rU-SK,l$L2@HR+q>[Wh7Mac3g;[%jOeY(rAL5QTmg[dho=hkneBnu1VPtn^Hb-[$d<_-X!O`u&B`m"2dF$qra^_^D2QK.,`rg&bVZ^7n\-sD0CdYY^DfT&mtU'76&-/P%$f+Tb&$8g3W;B/D?TVoaB/0^]IMU>r5UEU\Y5?>QR.B0'rlVF$)BF`]Od@"RpB)b316fPE/to<Cm;9l4;#^S)"`WM%FsLQ_Op9D9%JS=l?ciAdcSO-%-5TjRuX/[^5ZW'f'$En?A<o3X7kZe`8&BG\ECOk&.V<h"Ydr+cVHJa4ULHS34&6VtDia*dhoH!GQ+9QC$OSFXD%K``6LRdo*rAH5!AbU.HmS+L,Qi\pFV!)bbO;B+nf]XEl(aber"3#6Im1$gE#;K,VP-#AG$4%*-n0m'Ch(^1q8#`HrA[*^;$&D_lf%H-/'eb(a42$TJY+PA9[R7$V>@bd>YGVc[u(:n$PFcj!KT?@b+4+c]tN#$0"BOM5MCT4[G<Nh3N5BtVK/RU(j54$llK*p.\EkBSKc%fD7Ms#0o)UQi;5#7)MN"8AmK\QKshNJ;A2!m#T(E<$(rM/Lo:\'@tZLXDVkI;'VubGHK9(:J>(`eW[,#>d#r^$c;c(^iVLYHDV*&%5Wd<XfG-gFX:[t1@4X6'rR'5jg%&3fDPM>',?<jQ3Gh?H\a#4kF/RA;=k7_2VAp/lhTs9>*1m'KZ)XN%86\o\/k#VW5V@?=aBGQ*%#u'[B,AS9m)WG%hG`5g/,c@&XXOSBd!iDHo(:E4O$*Vja:lF0`_0%miCSB2dd0$oTetUQ6)CclTk^)fJA)piZkQ9/cY7A?Hf*X[e%MA<11d\M-K&4?n)9!M^(n$:I;WY7Fnr!niqW1bR6$P49o,+hNLJ[cX-d0WhCia77Z'$=*Snl8d%^&m7l>uJVM%V#!T3'mqEP6"P8%,pG'*J#<m4!EFCea^Ylsd35RQ/JWkWQ5)A,:IU_jCD:(V3QG^smj.N\%;)Zm5GB\;d5b5L97-o`-_`ZK&k&Bl3Zb+#"j5gg\,L9J%_A^P#0OZZ9hu8r*,Q3`jl]e?2_@&^oBbtQ=O(_p,XJ=MKKPqd]28`%]qKsc7k/OZ+LbGQrQ$M5`Z_!TjW3I:4Vo%.M%sYl%0.=QB%$^'TpJ`p;D[`!<goUUO_&*?pgl9)[r(j0-f!p<8Gr1.?QlIQZ:9a-X0>!aR^(++.r;<`22'2p2S`arc013<a:WW'C@U=2+tW(6BC%7'^u)i6.67%%f27g6Ttl"m+*@5kYr<:*<`$j$O6i*^m>>drF+k:cqFar(*4B&]@tF1f$5Bpas@chCrpp!`>R#b(DsB+Ymjc&[Y8n%?B#`d]2SY%b%ed\(="53)f$#ZAV.T9(@e6qrqPb&Y]A;oKl3+/"Sn,tUatDDU38k:T2PjSo_J^lI?kgM1gib%Vc_qGK/M\fc^;u*%=8M;/erdC'M2_QM.De;F7^8rPN-,B?+%E6t^8gW&OqgtTbYSd?*Ts`R]Yl^^H`Y,&IM)Sc2oNGZEY<$3<e=l,^1<AUFmL55/Z!%_%5i3C0lX@VTN"Rs;-tXg;IUil+bsh)b,.nq_O!cJuepmRQnVC7?XfpY@cHmc?OJdORV?DaU&MXc]SEbYkLrJ@ib2/AgYq!\^PF'3+%UYbg+,-`qPKJ\BW6#]r2=)M\d3>u>2`!Hsf@pfTcE#@1O&Skm[N*MQF<Vcr4E][I!q"O36fDQ2RE%3Kna/%H#>T[33QCS3LQ*JF@%iF$8#*\Z_.0?\)ggU%Y5<'M1TV&N!b8uMA-j8P/qW1'VbhAr/=L_WGkSsIApSK<bSE:JKQ!o'HL4!OCrVG6=]<;hWV-A*hCV+Kbn%pP2#k\e8#J8<*1*@U9-uFX*cL%aCqCrTR!35"pb6'=I89&ajCf%kf@Rc@ku8)!*=Q42&8a\^;,_@W[+DhWnT>;q@(#[c8i[h%&M+%,QIL.D`&n)Uf%jfDDd1I`lRN\O"fE7[rH%BDNW[$B)<@SI3E'XH)8ULZeH]6(:fFQ,l3+H7;a(88s.luPsoRt8?[DW6#R*Cqh^)n%h9%C(CXRg?;+3sM80C@7qQCUENN;i!$e'RA:kWGnKl3O5%TWtn5-#b!&\8F#p:&E9Zc/W9&g2F8U"b=7;Wr:q#n>_)&.+k`d-\/B%!`XhjK+epAf7UA)'U?FeDP'HkHOJZTHsfeE"-bfUO>FmMRDB`P(2(Whk]SZ"6FUIG(:p%SA"hZIeIfuUN3OdjbSU`DG/eb<[50-S%`Yc`/(HbCg$,[OWDdh@\(i%FKo+nocni<u]h*/Gs]fgBT]5HIM[kDD93H@3)P=8:/4_Ko3nWcO\a6r&#q<WDDHDS]"#_F9kDI5e)%2:2q[o(j%T+-G<tR2f.r\E-iP[/]h+Mr3[<m;lF`Qdj3a)CPp0>Np''g5fA4m3hTC\IBn:\&`E!7n!/>Qke1Q=#Yo<B+I_U?C>_o%gWk8/=iS`8\&`DR?7BpL^[`4Uo[e#DgS[/X<-c>q]JWB1q\H_jm1th;#sm,#\&`ENk:3s^m/oq[Z`!euT%7-,p;&4;62?(2d'D*p%%!e\jmJN5il<o%li9.Ap=T1pd^+d@j>NGKHPpR+=oGo(9/TUabSZS+Nj]%d-,.DF67ca7tbo5W)gBZQT&\3<56<uus)tHU`g[UOt%DBDe+nR-,$@&_>b"0N/_Q7cXPYGi.q;aSoc3bDjM)o?Vu.<6A#$qAHBMVNsaC:D9$QU;h)SYVN@DWe45n<)CKMql>7hi*Wi9uPQS%Lti1<q\H_Z47r3MC[[D?fHThMk/_C(^cZYl[V8,6A!<L&Ok[\*/TNq]Z:/XMnk,&!nWcO\)c[riI9)DKo>p;4;Z7HBI54_U+fCc3%?RaDa8Qh,&I_q8tNqT'K3;5OUgWr$DgpV:M"1QaikCMB2n9Nr8/.r?Gc:c7\\+<[k*Y<N'gc"5Y!k6S5^'/Dp'(c@U`PD7p=>O<F%fL+T*8`h#&mF'\j[p<0ai&53GGRN:BLWh>h)q)=Ujr6j-m_B<l]8XOB\;q-NY1Egc\Y7ViO5"hdm;^l5L4+;<=F1$iHt>Uld?:I?%WB41%SL0)%#MB<WYo-MS#b+Ce-Bh\?8ZXb+K&K1A9Zm7^I>2UnU<@!"^(<Fog81Rb;5^2DUTHi<^4gErns">.gWfnF%-Han[LGad%\qP!2+rH#I2#/$KFSe'3EuLs=#=$71k1PTW9L4a-4P&5#np"sq4+J/P@)`4c.(GME"3sQ7.6)3ea/lr"h<SK5:#0"g=U!^]<r=1.%GX%R(F:;-'ZIaG!nYTDo;KCWG9d/Z,3!$6aGqBgs]EH(%c7>ZUqhEpTc9O4N;uHXZX5bR6V=j%TArT:SNQYlhr9nH\0q[4(Ge;_R%"U*'-P9;2IC^jGG+uWqVa["i)c_<a38_!N:m)mj8i-1Kaa-/\eMEp]1!ESdpUeufTW?J':,IaMt!AHN7^g,"[^k.\B]*JF$:TI$E%#ZQY"![cbj+F8tfHnND=BWSTNrlQA.G""3-e&Rn0g:KDoNhldI3g4f#5n;6j[FGXZ]Y7S]2;H?am4%Pc]RP(n3p+!tpjH%AUdF;X%euj-jo.*'^Q0b&Q)C>i@]tPeO>Ob??[9O_'6Re"Q'crOL*D@Ref-jV^,-U5:SLQEhq2V^2ecJt98hi^]3!>CnKeae)h*b6EM:@k/%;'S@%X(E`@#qf[&<*coD`=65q6stfP6'W4RWE/YMd8Ubi`]jtCdGiGV4Gh#@#K!ZQ2I0&:q-BnQ4TILo]Zhg5*gRMeNPl/Tbs?eb%\"^%Kf,ik3J/DYQ3a8?:MG49r4,LXPV4jii+X(f`GFN/F/\'%Wf)Ogcp7OZVgJGr9?+?gY4@YRI;FUp,PFIJjQ6\B)Q.iOk@@<n0%FXYJi=^A)W=eTf1*Z5"UDB=1l]<>"-S<^1`q/9g.%gdFqhe]NBl!'ZPW_SK5R]-"U;^a9Pf/J,mj4$('%kA3ndfD&]jJrQH81q(E%:9d1/-u%u[/g^BhJk-\M/.UKQ&iZZ%;u>IW/Db^#l5G!PgUjTb:>1$TpdZ9k;MR.U%SM)-j"/t1#G[5RL'U-.*F0no7C%hR`5YG@%8CNM(2nqPEmO:"4`Y2ZI9%T:Ga3l9O)h#Y41=h[.]VZk'A&KmWY"sM&\,BEV(i])c6r?GG.2U>YFID?WBQqQQ$@07N(6kZdA7/>`%2:['a1=t+/1p3s^rEBp+@Ka3u`KA?:>9AWWVHar>%C\&$-"4)eV'U,5`Bn/.T*U7UQ6Ik5a[Uf2OA'r$mm.&bd_4mf+`No@Ktcu:%SDQ9,>-'+:"mr*QbOSQ[;=fSk]Q+'$OPH,5$lO*IAsbnK6s4a*($8rKCuebNC)ltWbR5tAhDTQu0@-BUJ5^71S?@E@CRB!M@8_i%%pU"7_*&XEJL)B,h^(t/)QHCU1V^gAg0Eg>mL<b@;_idFCjou+%\QM<`^66NZB_@WM1<G/.F<D2,n<,qV>uGB9CeT05:@iaWhg;P^%rTHg1nq8-!S'&/])2h_uhKhpZ@nd%*^@H37YY3m*3i7HOS5EV17"i<gK>(EK,GE,[X[0'Bq46:F6o^F)#oID@J^g`J3G.[0"*l1r%%EnBViT%[IfQd!%8>_,TQB3tiR%aB>!RKAsI<KKl=-8UBd'q^rlcama7XmlYZ*7q%pG8,4`..Z;EJhLPVYqBritZR/Wp`:J'_*Ot%9\trZ=ONDt.X-i;Qp['g,cFn@9962f01([V0FM.5!mC/_afnoRQ6];49c,%o'pU52i;o=clGQc2%cDHZCl5CL@FAcX@Y\i2;`TD6%U*8d?(pYVCVEJ]W0X7JKXfl[-QW)B(;X78b:-sTs*EZ59rdbW,R[(AiV+j:*r>:\0Qh+f7#%*DI9)cumZKta9W>_1'LY:X//OkCS%f&De#=WBG%43MX1\<e:m7_=T9c(,1SB5UU>Y-f0p:<T4WVim5e@::J_-#A('ak3LRTo/5EFY+m&G!g4mS0t`!j'4JqB31eQ*#`1g%G]%kXs'4(iSfuQ_LFV>o$N<l#fWR1,A6cmt_b_G<3'(&$S25M:"FQh6L7",Y8@dgV0c-PUE>Zi>6]4GV^FF!,9J$uck%oiaZ8`HS%Tfm"Fmg%\<`!@R'=rc>`F1bjUOG>Vk;/\m/ET`gEN2o7]SRmA+.#m+J@Hk63f^C'krR.b$^#uPEe?*B$;D8%(-S5;k'2p?):@hr,%B2bC5=Ei)'@(@NZm1YdKRgDeVoNi/uNk#r^rUpOj^\u)-_4hWD\<A\0YS^j6EEW1Wr.I\WIDT5,#gAM6Go`]O4d5si;S4A+"2Ik:%2J#,p#\eD7Bdqic6F'N-#[0S586AP_r&.uK3R``)UEU<XC<D&h.T1MDTe[aOMDQ!_RubC!J?&ua#=9;!=CU54pZP*q9o/i?$1fD@%F4-[8h#p7Z:oAK8!eJ=q?P!56V@""SU2&*Z&7KdIOu*2-dhtZS#Y6edc)<#l`T#;DLp%%HNp1eP+R`M)=/Vo/KdKWY-s>;!'<%3#%k*c8O5DPYu6kcMb:R3hg^d8]j?^`;QXd^X;)@lUg9bXIk,N>-l7WTX87Ohn#kIdbq#hnb#?OV[HaXL2?13l#S]IJPHWis@7d;P]c%";7_"@&=:(TkP!H;$F,j`aG0uW</I]DLlDo$m:Z'4Hf4T_e].^h3l%]?=Ng_di;X2W%%SaPQ;)PVVPIAJQT3W#!UVG.g+<75!g-c%Q<N4h5kT(9dfsQEE&)8q1(%^:f/('CS@tQd85VD8m\)+U&/J@p?XZkQ];Lt!F!M&DB`m:7lSGmKm(bJ^dKY5d($GM\F22-YconlN%GsQ],'2adVc3#_se=sWe0a\WKs8Vb:a1>+lHKT6;K77#7=2bi=jds@iOh?.-P&n-`8\V@*-30/sm5\E:`,bL-*%kWf)f%H=JrE_T%LWbf]jD^s!QtRYFO.=)k`(KAu%[YQ!Et/utF^tVQ[!KUTgC;V&<Qj@$S'D;ci=aG]C&R:k7Jg%=loA<91^_fS\>m2`lhN^'FpDX9%"O#a*G-9[HLT@.5`(i<t!9A:$Qfi;gnlh`UPe5HBF9A]3N^aF<[^6%FkA\tj#O4I-$]'M6>7O_gWG"ra!HYc$84L#ME&mKHUn@G)%Ek$Wn4TFD$>gi=ccf#LQjr>urlH6Je/^UJp5_>;fX\(TY<?AANOhq:[(b(*<MHTbH_$*O"s"Tb;E=j7.l,YA1\C+I&i0'CPcJUGZ%?BN#L6u%I=AnT4V:^eHK]AGBR0Ysgu9JHoCXg",-"[mI9=(H7N;cAWdE62jp3J4BT;q1OM/mqSF+u6Z=ASO7G1UpucMJ^Hj\9rkB%,(g8*Y;q69DUpYU+d,XlqNe?(q-fH&"[m*C=ooLN>HRW&/mu#NP3#;GAPPnVEo[rA>j3aW$3WA0!Z)Df[_KO&.G6Pch\3MMk]?89%1ALMbQW&hkr'A1d\FP(oLulT4,=tL_]O@g@/Cq:s&F3><PAC],SSB_\ijiht.]^W/4_g1:DRiNcb*KVjNAjU&1p1(_\bN0H<$nmL%Wru(e9Xmmq%4)[LBBks!&")9AlJ!)jV$O6p^&@enYc4Y'#,1UC;iTD.D=RbL5oCrKr"[n!,*sp16Gqqo>Y,QGCQ3n7KOZW<qJ*%$%=U:+rWA_+C87kieHq+r7f.,ccIJfJ3[Ub43Em:ML5kK9=MHEfQU!@`O\h%sfXuFEX4+1J!E2JmuYd.ZBPR63nlsag!Q/sX'*?ZXQ%BDSR!qTK)rfh5t!D>@3))K[BN+nq6rY@Xfd_BKrf/(ue-qPgk26o<gdIOK@R4dF!b,Y<f2%g%kaLXK=):\m2c;(m2FU9.D<Nke9E%%!._#Y<E'93?=mhr"[^H.ONj\p'`cV+!R,3&fi)e4lFt@A*CEq-NHYuO7)Zpiibkr$6gZ/:;"jr@[TYt&F*"^jY53.3+\(feKtir%.[&SJ'FeH8,&FRP:?Dmh@]6()%,"#;=6F(r0/XlLYP9521pleMBY/Jt77IMV"6[q!M/GgC3/r82F=E>>ZDH4!juSFGC_LJp64riX%E<nVQY$LnNOq-acLp)b/d?:aiG@q<pU3rQ&m^JVUd(&"dMSC7%V)B_J`CD&'4K5>pPQHSa:a`O/%XBp#,V[at#q=cY?sQ/Dm/3CF%-HIm`1%Rn@m:F`@OSlo>l[UEQpfZWE`ic8]Rq#DX(kQTqb\9<Vf?o]'1%-a:0dk-*R*coeap+3OR'@dJ1,dgj*R$@fVJA_*%V9*#%A[tRZDL1\Eb;1arJPcHp8GMN-17g3'@r9J4NOA8/l2#XXQtoQE2h?.]26=^#gi\Yki=f^G>/m4H@QK&'_d;ieapSr/N5ZKe3]'D0%_:H2B,a;-cZ&<?$@V,VG=)!5!4L=>fr//l'+^'OfDj6a&1)LuT8rXP6+56qOB$giR[atK.T+MDWbX98e*\k9fI&5^a@S>0)^,.fU%%OOTL+Gs$jYN;TACh0>]!'/ff[uEMIa`Q:YKD!u.O!<rhfXH8[_<'+TJ&LDId=6lrI5Kfe(N\YE'"fiR=$jL\./QV?5AB9"qpKdR%/2pL1kGJ&+l)]GiJi]sd4`=F9]4^?/#Wt:qAQ#'6iQ:u2#%grKBBZE5ijUnt7M5Y.]4Y0`-C)XD(&oM#<kKYVCV/i4(*hs&WtgV:%SJ?^K@Z3uACLEjB`XbdVNODPo"U.C82l1Xl>#egA`E:Eu,%SWrHKI(?]37AH=&#fgTsW+F<mM__MHW/1Bq7];*MKi$P*FP5W3i:m%3I;D4Z`;P3$[^+/4O<0,*c^MD?,*b8oMDT$QM,C"eMDW]m'ndX'fBIHZeX']alO:QCFn*NKn8^9g(d[_RFk&niX2dVpSt_u<cn\e%FY:(KB#Sm>m8EW%$fUd.FOH!^(ONc.Y)$AM[uTLLY'/.@;H(2?em-&U-<dWfY1S>A[*W%YPdPCtlc5+%*\fU%,18uannofOOg$*$%(CNr$@[m%ED]"YYVZo7T!3M2j8W;u.(Bidc\f`Y"DgTcp`O_h]\\d(4;AR(\NHCJRiUg.1rQg`rKNqQ\/A@[+n7RP[0kG/*?]/bq%G(^X2G3&9>RuV&<'Fc48`6sb_m6+m:a(?0;iPlPSN=92HeJ;o'>-+*L[Y_PMS>](<.LA*:^Ea(GG2;Gj;9%0l/7Fu2RM$b_L(Qu/%PIk.9/o&UtfOpcE[$$:MR(fc+f>Dp`_R2`UA^H(N_&jO^Q,>KshF#aeeZ^<U@R?'rR-i`&![K:QM&=t],T*Ym<cF=&4gsHiajSGY%MuPnD^34B0:m(2,_&QTCkP_--*EitbKpY6giFouJm#i+PXW!<cN9%a,M-/X(o(LP7c)JK=LSVk]e5+;Z1^Z;rI+7\OCQ<",FnWqY%MiHG9ljBB2"6(8r>`I(\@XS/*c/>%^@hQPhNjWB_0@_r=Q=Z.#DltGa1C3C$8<)_7B/]?h.ieMjHYo'j94&F&-iI;XiltWl7BEX3%LPp(P8t;iNX&;5+O>N:o3`\\*GXIiSWMnq7@Eo^4/)H;_[hC>D,NdLEcdg:oGBrdt<q8mjq+<SeB^>uHKfl+A77ARie03N;B?:g%%>OqHk9hi%NN+[+Wp-XG5,`aI4]>0T.o\Vi@n_8PYd:qi[WL%<J:C.uFmejOiR/cjde$p$TYa!ZQ#A%:/HBilHh4Lr3-kjUQ&r8qE%q`uZ23<q,X4=Gc;j3J6..>c_mS:ClmOudRHS4"'X#bU`hf3f;ZS//+@a!;4EinBDaWDndt+^a17nRF>YbQK`<5@JhsG^E5R+-XM$%G2gQ<cp,$uFRpUp;2p`^9F<#i]H&7mlq%"GJff>8[L$M,I4"sD;K%;^P>r7hpWDYEQAC3e46:0"nXTM^>-E_CQ:l1h;a^*uGpEpn%8&e:5%0[r@!TXrX\)u#11&Z,n/b*c[/"<F_%N`Q=\"5-i&rDA$b[co)fi0[VUp$d>+OLb$[,3o3[bVjiUdCDROR:+t0/Eg@piLbf%"=&_-_7`&hJnTX+'^gGVP7GHL]T"a-rVQ7>(gp^46.(@*0m@0@%WZALK&lZ/1LhX2iM9/&HR+)OChU3k+OL!9eDR4kN?P`"'Mm6/%*HX+f''Cr9#)u\lJ_\ludJ6b6GQ(2f5u9b-CBeCN:NG,ndL=[UTeE_t/kTXnb&(E6nVBK1fdh^^l[%-1I7q?Ao`%S#SjO*8EtX:2%?%JNBOp&=YF>a!<jJqODkp)*ahR=oXp?WtM=NXpFYH6qFR[/9jVnN-<5k<=Eg.$S$'^J=h9Vj!X/1:3b)q-pk?aAqg*H4q;UdI#5%:&:nd^A]ToM:-6XC;cD5gjr!7SkE(cBKXahqI2_RWqi\>eM,d!>pV%VQ><HAn<0Nd.aYEJ0c<OD0oq\]kT.a6oaHVC]KQtqQkC+H%KbEGlR19p1]?KrQ-->KnLp)b1Ak<J=L*\i>DO0@N'sf0`/aJ_`KZ3cJS+R)o:&U$-G4G%9rGV`#DuTI&s6tO:j6I6Uq"oR;qg\VF%^Af8k";_$^hu20As8)^rJ,?GDpOE/%^]"/(s7$!MhuCkarKmQSrU9aU+9(.^r:TgarV@"9P@+7Uhu;6bn[%QPs3%&55JR5:qUN!c%J+9;+J,b9gr;MJ#pK&b]JH,H2msjrtrp\86peUqZrNC\Lq/9WDJ,/VY^]24/@iY@(s*=S#\,H9/rqcMAr"%]ajkIOP]G9J,`[/4]%.K=t'.hnDXP1a/LmXJE1ea_+2YJiV<OHo`lc>-=ms'(DbqTTKLrH4M,:Pmp(s(f6Te[C#Oq??^#]a4HIU:oeXT3Oq&&DBHLkZ]aL%E!rgSm*I)/h`5>V.n'm]jS6t<Y=DdbdHoY3-<NR,81[Vqp%/ej+,J/j1t[_\rM-`L6NV?<fR5`b!,%2A6R"<;&8]]P"1>-A%?8[G%kRb6@G_/bD$l"SiaP<FN5(mj#!jHFIO,0ct]uW]Ok;8MEPQ@cA(4`"2b+!/(R'rH7K!P?,g_YV,"WfCe:3\?5KKCS_p&"HQnIO>a%<PN;=g[`m5MhgQ66qU^Qio-[1g$]]'?p]<^]iZ1oh`X+0bffq\p=OLppR?fNKib=Ih/^9pT(Mm&j5KbQYMX!A]?`p16R?prCr:.k%T,AqnB1'e7=K_=c@U]-*HGm8n,m9='n0!2;n/A3Wi:0/%K44-rSFtLfrhu_",UJlb%ppcK:_AXh[Z81?h^%'[_='kf#H(aV`4Q?o%Du@D8,.N)pP+o0tb<"R5;)h"rr'pa_(P;i]opF-K]&s00]I<"o/^&MYR>\mP:Rf0?$qs\Nq$P?"OR*GY(MGi$g9R(ZBYcHgO"ctM%Fb.g%8J.F"+:;cian18+7^#lYEQX`aQCbN09aj$PRK\KK!(ebUi/U/XfE^Fm#VS*AQ9dB6!-Jd'.fKkI3(o-BNj=52'T8\6TZmp(%dU<^<')KV`BKG2F;)GA2INDO$5(`._";+<ik2a"-aJqKt1mFGu09KYO1Y7PU]c+IUkWOU5*bt%+I3c[kdcg*'4iX/pU-ha]G;nZ?%+Bk4I445)Y*OsJ]m`%LLr;m)qrfCH4L,GmL8i84tq9n2SB-^+];HI3'V&H@bFOTW:5#`O#*K@@.qK9_j3p/F59<TnoR+a4AHuuoW%U!"Z\fl<Y#l495i3_N@rQIpkEBml4F*Yiu'9JThO/FgrEA%I/lOpYK-9#fT4ks6V\7qsq<J0So$RWYjN=OrqSDsWjrD@5XrCJM!R%d/0qFf`I&+2/A2o+&8Hj]Ifn?!j,qskqL9S125Z'SaH6GR]O`#OOe#-UAX*a`V*D["Nf[ukR!^$HcFot(3+KD8>57D:nIeb<qLZ(%V9a/+64=?0"HdpK8uqV/n7qYsU-/;;0uP,I4465e[^F2/!M3Hpb;YPBY&!1Qa8<&#2>TpIK`q&Z>(i^Ko\IsR3%\aGiJLfS:?p.B%BT%Ks\!4s$7fUd-%1kC&R7%tEAj2s+Ih?ht+Y+>On8P_kgo[0[j4..1'VAI]mf'`mZ0RG'p9a\PjfA>$#%I="^<*k)mNc&Lr:KsW%#8Hu***s=<T5M!M^N9(G~>%AI9_PrivateDataEnd