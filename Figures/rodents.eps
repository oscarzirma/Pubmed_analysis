%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: rodents.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Jason Schwarz
%%CreationDate: 8/7/14
%%BoundingBox: 0 0 576 476
%%HiResBoundingBox: 0 0 576 475.2002
%%CropBox: 0 0 576 475.2002
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 108 8%%BeginData: 9574 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD1AFFA8FFA8A8A8FD7AFFA827FF7D%52527D7DFD3DA87DFD0FA87DFD0FA87DA8A8A87DA8FD15FFA87DA8FD057D%A8FFA8A8A8FFA8A8A8FFA8A8A8FF7DA8A8FFA8A8A8FFA8A8A8FFFD04A87D%FFA8FFA8A8A8FFA8FFA8FFFD04A8A7FFA8FFA8A8A8FFA8FFA8FFFD05A8FF%A8FFA8A8A8FFA8FFA8FFFD05A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8A8FF%A8A87DFD1BFFA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D%A8A8A87DFD04A8FD10FFA9FFFFA9FD2FFFA8A8FD1BFFA8FFA8FD1BFFA8FD%11FF7FA97FA9A9A97FFD2DFFA8FD1BFFFD04A8FFFD05A9FFFFFF527D5252%A8FD0CFFA8A8FD0FFF7EFFA9FD04FFA97FFFA3FD05FFA8FD0FFFA8FD0FFF%A8FFFFFFA8A8FD1BFFA8FFA8FFFFFFA9A9A9FFFFFFA8A87D5252FD0DFFA8%FD10FFA9A9FD07FF7FA9A9FD29FFA8FD1BFFFD04A8FD09FFA8FFA8A8A8FD%0CFFA8A8FD0FFF7EFD0AFFA9A9FFFFFFA8FD0FFFA8FD0FFFA8FFFFFFA8A8%FD1BFFA8FFA8FD1BFFA8FD0FFFA9A9FD0BFFA9A9FD27FFA8FD1BFFFD04A8%FD09FFFD05A8FFA8FD0AFFA8A8FD0CFFA97E7FA9FD0BFFCB7FA9FFA8FD0F%FFA8FD0FFFA8FFFFFFA8A8FD1BFFA8FFA8FFFFAE84AE84FD04FF7D527D52%7D7D527DFD09FFA8FD0DFF7FFFA9FD0EFFA97FA9A9FD23FFA8FD1BFFFD04%A8FFAFFFA8FD05FF7DA8FD047D27A8FD09FFA8A8FD0BFF7EA9FFFFA8FD0F%FFA8A9A9FD0DFFA8FD0FFFA8FFFFFFA8A8FD1BFFA8FFA8FD1BFFA8FD07FF%7FFFFFFFA9A9FD15FFA9A9FD21FFA8FD16FFA8FFFD07A8FD17FFA8FFFFA8%A8FD05FFA9A97FFFA97FFD14FFA8FFFFA97FA9FD0AFFA8FD0FFFA8FFFFFF%A8A8FD15FFA852A8A87D527DA8A8FD09FFA87DA8A8A8FF7DFD09A87DFFA8%FFA8FFFFFFA8A9FFA97EA9A9FD05FFA8FD0FFFA8FFFFFF7EA9FD0AFFA8FD%12FFA87DFD15FFA852A852A87D7DA8A8A8FFC3FD04CAFFFFA8527D522752%7DFD04522752527D5252A8A8A8FFFFFF7FA9CFFFFFA9CFFFFFFFA8FD07FF%A8FFFFFFA8FFFFFFA8FFA8FD05FF7EA9FFFFA8FFFFFFA8FFA8FD05FFA8FF%FFFFA8FFFFFFA8FFA8FFA8FFA8A8FD1BFFA8FFA8FD0AFFA8A8A87DA8A8A8%7D7D52A87DA8A8A87DFFA8FFFFFFA9A9FD22FF7FFD1DFFA8FD1BFFFD04A8%FD11FFA8FD08FFA8A8FFFFA9A9FD1BFFA8FD07FF7FFD07FFA8FD0FFFA8FF%FFFFA8A8FD1BFFA8FFA8FD11FFA8FD05FFA8FFFFFFA8FFFFFF7FFD24FFA9%A9FD1BFFA8FD1BFFFD04A8FFA8AFA8AFAFFFFFFF527D52A87DA8FD047D52%A8A852A8FFFFA8A8FFA9A9FD0CFFA8FD0FFFA8FD08FFA9FD06FFA8FD0FFF%A8FFFFFFA8A8FD1BFFA8FFA8FFFFFFAFFFAFFD04FF52527D7D7D52A87DFD%04527D52FFFFFFA8FFFFA9FD26FFA9A9FD1AFFA8FD1BFFFD04A8FD09FFA8%A8A8FFFD08A87DA8A8FFFFA8A8FF7FFD1DFFA8FD09FF7FFD05FFA8FD0FFF%A8FFFFFFA8A8FD1BFFA8FFFD17A8FFFD04A87DFFA9FD28FFA9A9FD19FFA8%FD1BFFA8A8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFF7FA9FD1DFFA8FD0AFFA9A9FFFFFFA8FD0FFFA8FFFFFFA8A8FD%1BFFA8FD1FFF7EFD29FFA9A9FD18FFA8FD1BFFA8A8FD1DFF7FA9FD1EFFA8%FD0BFF7FFFFFFFA8FD0FFFA8FFFFFFA8A8FD13FF7DA8FFA8FFA8A8FFA8FD%1DFFA9A9FD2BFFA9A9FD17FFA8FD12FFA8527DA827FF7D52527D7DFFA8FF%A8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFCFA9A8FFFFFF%A8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FF%FFFFA8FFA8FFA8FFFFFFA8A9CFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FF%A8FFFFFF7DA8FD12FFA852A8A87DA8FD047DA8FD1CFF7FFD2DFFA9FD17FF%A8FD12FFA87DA8FFA8FFA8FFFFFFA8FD1BFFA9A9FD20FFA8FD0CFFA9A9FF%A8FD0FFFA8FFFFFFA8A8FD13FF52A8FD06FFA8A8FD1BFFA9A9FD2DFFA9A9%FD16FFA8FD12FFA8527DFD06FFA8A8FD0FFFA8FD0BFF7EFD21FFA8FD0DFF%7EFFA8FD0FFFA8FFFFFFA8A8FD13FF52A8FD06FFA8FD1BFF7FFD30FFA9A9%FD15FFA8FD12FFA8277DFD06FFA8A8FD19FF7FFD23FFA8FD0DFFA9A9CFFD%0FFFA8FFFFFFA8A8FD13FFA8FD07FFA8A8FD18FFA9A9FD32FF7FFD15FFA8%FD12FFA87DA8FD06FFA8A8FD18FFA9A8FFFFFFA8FD0FFFA8FD0FFFA8FD0E%FFA9A8FD0FFFA8FFFFFFA8A8FD13FF27A8FD06FFA8A8FD18FF7FFD33FFA9%A9FD14FFA8FD12FF7D7DA8FD06FFA8A8FD17FFA9A9FD24FFA8FD0FFF7EFD%0FFFA8FFFFFFA8A8FD12FF7D27A8FD06FFA8A8FD14FFFD04A9FD35FFA9A9%FD13FFA8FD12FF7D527DFFA8FFA8FFA8A8A8FD0FFFA8FFFFFF7EA9A9FD27%FFA8FD0FFFA8A9FD0EFFA8FFFFFFA8A8FD13FF7DFFA852A8A87D7D7DA8FD%0EFFCFFFFFFFA9A9FD0AFFA8FD0FFFA8FD1FFF7FFD13FFA8FD12FF7DA8FF%A852A8FD057DFFFFFFA8FFFFFFA8FFFFFFA8FFA9A9A8FF7EA9CFFFFFFFA8%FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFCFA9A8FFFFFFA8%FFFFFFA8FFFFFFA8FFA8FFA8FFA8A8FD12FFA827A8FD06FFA8A8FD0CFFFD%04A97FA9FD3DFFA9FD12FFA8FD12FFA8527DFD06FFA8A8FD0CFFA9A9FFA9%A9FD0CFFA8FD0FFFA8FD0FFFA8FD0FFFA8FF7FA9FD0CFFA8FFFFFFA8A8FD%1BFFA8A8FD0CFFA3FD43FF7FFD11FFA8FD12FF7D7DA8FD06FFA8A8FD0BFF%A9A9FD30FFA8FD0FFFA8FFFFA97FFD0BFFA8FFFFFFA8A8FD12FFA852FD07%FFA8A8FD0BFFCBA9FD44FFA9A9FD0FFFA8FD12FFA852A8FD06FFA8A8FD0B%FF7EFFFFFFA8FD2DFFA8FD0FFFA8FD04FF7FA9FD09FFA8FFFFFFA8A8FD13%FF52A8FD06FFA8FD0BFFA9A9FD46FFA9A9FD0EFFA8FD12FFA87D7DFD06FF%A8A8FD0AFFA9A9FD31FFA8FD0FFFA8FD05FF7FFD09FFA8FFFFFFA8A8FD13%FF52A8FD06FFA8A8FD09FFA9A9FD48FFA9A9FD0DFFA8FD12FFA87DA8FD06%FFA8A8FD09FF7EFD13FFA8FD0FFFA8FD0FFFA8FD0FFFA8FD06FF7FA9FD07%FFA8FFFFFFA8A8FD13FF52A8FD06FFA8FD09FF7FFD4BFFA9A9FD0CFFA8FD%12FF7D52A8A852FF7DA8527D7DFFA8FFA8A9A8FF7EA9CFFFA8FFA8FFFFFF%A8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFCBFD%05FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FF%FFFFA8FFA8FF7EA9FFFFA8FFFFFFA8FFFFFF7DA8FD12FF7D52FFA87DA8A8%7D7D7DA8FFFFFFA9A9A97FFD07FFA8FD0FFFA8FD0BFFAEAEA8AE84FFA8AE%FD24FF7FFD0AFFA87DFD12FFA8A8A8FFA8FFA8FFA8A8A8FFFFA97EFD0BFF%A8FD1AFF8384AFA8A883AE83AEA8AEA8FF83FD05FFA8FD0DFFA8FFA8FD04%FFAEA8FFFFFF7FFD05FFA8FFFFFFA8A8FD1BFFA8FFFFFF7FFD1FFFA8AE84%AE84AEAE8AA8FD07FFA8AEAEAE84AE83FD0FFFA8AE84AEA8A8A8AEA8AEA8%AE84FFAEA97FFD09FFA8FD1BFFA8A8FF7FA9FD1CFFA8AE83AEAEFFFFFFA8%AEAEFD0FFF83AEFD0AFF83A883AEFD04FFA8FFA8FD05FF83AEA8847DAEA8%FFA8AEA8FFCBA8FD1BFFA87E7FFD1AFFAEA8AE83AEFD1AFFA8AE84AFFD04%FFA8AE83FD14FF8584AE84AFAEAE83AEA8FD1BFFA87EFD13FF83A8A8FFA8%AEA88484AEA8FD0FFFA8FD0EFFAF83A883A883AEFD0AFFA8FD0BFFA9A9FF%FFA8FFFFFF83A8FD1BFFA8CFFD12FF83FFAEAE84AEA8AEAEFD25FFAEFD19%FFA9A9FD06FFA8FD1BFFA8A8FD0CFFAE83FFA8A883AEFFFFFFAEFD26FFA8%FD0FFFA8FD0DFFA97FA8FFFFFFA8A8FD1BFFA8A8FD0CFF83AE5FAEFD4CFF%A97FA9FFFFFFA8FD1BFFA8A8FD0AFFAF83AEFFA8A8FD2DFFA8FD0FFFA8FD%0FFFA87FA8FFA8A8FD1BFFA8FD09FFA8AE84FD54FFA97FA9A8FD16FFA8FF%A8FFA8A8A8FD05FFA8A883AEFD34FFA8FD0FFFA8FD0FFFA8FFFFFF7EA8FD%15FFA87DA87D52527DA8FFFFFFAE83AEFD5CFFA8FD15FFA852A8527D527D%7DFFA88383FFCBFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFFFFF7DA8FD1BFFA8A8A8AEFD60FFA8FD1BFFA87DAEFD3CFF%A8FD0FFFA8FD0FFFA8FFFFFFA8A8FD1BFFA8FD63FFA8FD1BFFA8A8FD0FFF%A8FD2DFFA8FD0FFFA8FD0FFFA8FFFFFFA8A8FD1BFFA8FD63FFA8FD1BFFA8%A8FD3DFFA8FD0FFFAFFD0FFFA8FFFFFFA8A8FD1BFFA8A8FD46FFCACACAFF%FFFFCAFFCACACAFD11FFA8FD1BFFA8A8FD1DFFA8FD0FFFA8FD0FFFA8FD05%FFC4CAC3CACACAC3CAC3CAA1CBCACAC4CAC3CAC3FFCAFFCAFFFFFFA8FFFF%FFA8A8FD1BFFA8A8FD40FFCACAC3FFCAFD11FFFD09CAFFFFFFA8FD1BFFA8%A8FD3CFFCAA1CAC3CACAFD0DFFAFFFAFFFAFFFAFFD05FFCAFFCACAC4CAA1%A8FD1BFFA8FD3BFFCACACAFD0DFFFD04AF8BFD13AFA8FD15FFA852FF527D%527D52A87D847DA87D847DA87D847DA87D7D7DA87D847DA87D847DA87D84%7DA87D7D7DA87D847DA87D847DA87D847DA87D7D7DA87D847DA87D7D76A1%767D7DA859847DA87D847D847D8459847D847DA859FD05A8A1A8A8A87DA8%7DA87D8459A87DA859A8FD15FFA852A87D52527DFD04A8FFA8A8A8FFFD0B%A8FFA8A8A8FFFD0BA8FFA8A8A8FFA8AFFD09A8FFA8A8A8FFA8AFFD06A884%A8A8AFA8AFA8FFCAFFFD05A8FFA8FFA8FFA8FFA8FFA8FFA8CAA8A8A8FFA8%FD18FFA8FFA87D7D527D7D52A8FD08FFA8A87D52527D52A8FD08FFA8A8FD%047D52FD09FF7DA8527D277D7DFD07FFA87D7DA8527D527D7DFD09FF527D%527D527DA8FD05FFA87DFFA8527D7DA87D7DFD1BFF7DA8527D527D7DFD09%FF7DA8527D527DA8FD08FFA8527D7DA87D7DFD09FFA87D7D5252527DFD07%FFA827FD047D5252A8FD08FFA87D7D7D527D52FD07FF27FF7D7D7DA87D7D%52FD1BFFA8A8FFA8FFA8FD09FFA8A8A8FFA8FFA8FD09FFA8A8A8FFA8FFA8%FD09FFA8A8A8FFA8FFA8FD07FFA87DA8A8A8FFA8FFA8FD09FFA8FFA8FFA8%FD07FFA87DA8FFA8FFA8A8A8FD4EFF527DA8A87DA8FD06FF7DFD1DFF7DFD%55FF7D27522752A8FD05FFA87DFD1DFF7DA8FD56FFA8A8A8FD07FF7DFD1D%FF7DFD5CFF52FD04A8527DA8A87DA8FD11FFA8527DA87DA87D7DA8A87DA8%A8FD56FFA8FD04275227522752F8A8FD12FFF8275227F8277D5227522727%52FD56FFFD0BA8FD13FFA8FFFD04A852FFA8A8A8FD76FFA8FFFFA87DA8A8%A87DFD57FFA8275252272752277D525252FD11FF7D27F82727522727F827%52272752A8FD54FFA85227527DFD05522752FD12FFFD09A8FFA8A8A8FD5D%FF7DA8FD13FFA8A8A8FFFFFFA8A8A8FFA8FD58FFA85252FD047D277D7D52%7DFD12FFF852F8525252F8522727A8FD57FFA827272752527D2752275252%FD11FFA87D7DA87DA8FD057DFDF5FFA852527D277D52527D7D527DFD75FF%2727277D27522752522727FD78FFA8FFFFFF52A8FD13FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-08-07T23:03:38-07:00</xap:CreateDate>
         <xap:ModifyDate>2014-08-07T23:04:05-07:00</xap:ModifyDate>
         <xap:MetadataDate>2014-08-07T23:04:05-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>212</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWKeYdL&#xA;84yea9M1TSplfTLSJ/rFk9zLAruUlBVo1R45PUZ4qM/93xJHWhVY2vln8x7LUTqP6Rpp0F9dXqWs&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:ADAB30840920E4118EC0CEC0D3579FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:C8F2D2641620E4118EC0CEC0D3579FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -475.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 475.2 li
576 475.2 li
576 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 297.877 mo
79.0859 291.636 li
86.1714 290.584 li
93.2573 274.24 li
100.343 273.956 li
107.429 275.855 li
114.514 268.239 li
121.6 259.274 li
128.686 247.09 li
135.771 221.833 li
142.857 221.893 li
149.943 225.396 li
157.029 219.427 li
164.114 212.18 li
171.2 206.845 li
178.286 206.953 li
185.371 202.88 li
192.457 180.276 li
199.543 176.449 li
206.629 155.154 li
213.714 141.07 li
220.8 118.881 li
227.886 105.227 li
234.971 99.6479 li
242.057 90.5249 li
249.143 101.798 li
256.229 97.6079 li
263.314 88.8179 li
270.4 74.563 li
277.486 79.9878 li
284.571 51.563 li
291.657 57.1982 li
298.743 52.8989 li
305.829 55.0269 li
312.914 55.6367 li
320 63.8027 li
327.086 60.8589 li
334.171 71.4932 li
341.257 78.8169 li
348.343 82.2012 li
355.429 80.8618 li
362.514 91.5752 li
369.6 93.1348 li
376.686 97.1479 li
383.771 105.012 li
390.857 115.061 li
397.943 130.696 li
405.029 141.177 li
412.114 159.53 li
419.2 182.911 li
426.286 205.616 li
433.371 222.528 li
440.457 235.861 li
447.543 243.895 li
454.629 259.983 li
461.714 269.337 li
468.8 278.768 li
475.886 288.039 li
482.971 297.528 li
490.057 306.015 li
497.143 311.805 li
504.229 317.569 li
511.314 320.366 li
518.4 326.464 li
0 0 1 rgb
@
72 341.805 mo
79.0859 340.019 li
86.1714 334.877 li
93.2573 331.149 li
100.343 327.125 li
107.429 324.766 li
114.514 322.164 li
121.6 319.751 li
128.686 317.247 li
135.771 306.709 li
142.857 314.326 li
149.943 307.391 li
157.029 307.358 li
164.114 297.666 li
171.2 300.441 li
178.286 305.389 li
185.371 299.574 li
192.457 302.163 li
199.543 296.102 li
206.629 295.781 li
213.714 293.686 li
220.8 290.321 li
227.886 288.298 li
234.971 285.771 li
242.057 284.296 li
249.143 285.204 li
256.229 286.48 li
263.314 286.109 li
270.4 278.158 li
277.486 277.506 li
284.571 278.361 li
291.657 279.314 li
298.743 277.911 li
305.829 285.145 li
312.914 282.61 li
320 284.575 li
327.086 282.387 li
334.171 289.108 li
341.257 292.815 li
348.343 294.804 li
355.429 297.621 li
362.514 298.666 li
369.6 299.419 li
376.686 294.768 li
383.771 293.58 li
390.857 289.611 li
397.943 289.998 li
405.029 284.932 li
412.114 285.134 li
419.2 283.194 li
426.286 286.064 li
433.371 285.519 li
440.457 286.41 li
447.543 282.964 li
454.629 285.213 li
461.714 289.083 li
468.8 287.032 li
475.886 289.194 li
482.971 291.224 li
490.057 293.124 li
497.143 291.676 li
504.229 292.406 li
511.314 294.258 li
518.4 298.021 li
0 0.501961 0 rgb
@
72 388.8 mo
79.0859 388.8 li
86.1714 388.8 li
93.2573 388.8 li
100.343 388.8 li
107.429 388.8 li
114.514 388.8 li
121.6 388.8 li
128.686 388.8 li
135.771 388.8 li
142.857 388.8 li
149.943 388.8 li
157.029 388.8 li
164.114 388.8 li
171.2 388.8 li
178.286 388.8 li
185.371 388.8 li
192.457 388.8 li
199.543 388.8 li
206.629 388.8 li
213.714 388.8 li
220.8 388.8 li
227.886 388.8 li
234.971 388.8 li
242.057 388.8 li
249.143 388.8 li
256.229 388.8 li
263.314 388.8 li
270.4 388.8 li
277.486 388.8 li
284.571 388.8 li
291.657 388.8 li
298.743 388.691 li
305.829 388.488 li
312.914 388.436 li
320 387.393 li
327.086 386.893 li
334.171 385.024 li
341.257 383.54 li
348.343 379.927 li
355.429 378.961 li
362.514 376.589 li
369.6 375.339 li
376.686 371.723 li
383.771 369.823 li
390.857 368.871 li
397.943 366.518 li
405.029 367.36 li
412.114 367.407 li
419.2 368.223 li
426.286 366.729 li
433.371 366.187 li
440.457 366.673 li
447.543 367.528 li
454.629 367.844 li
461.714 370.794 li
468.8 372.676 li
475.886 372.709 li
482.971 374.044 li
490.057 374.531 li
497.143 375.409 li
504.229 376.205 li
511.314 376.883 li
518.4 377.479 li
1 0 0 rgb
@
72 388.8 mo
79.0859 388.8 li
86.1714 388.8 li
93.2573 388.8 li
100.343 388.8 li
107.429 388.8 li
114.514 388.8 li
121.6 388.8 li
128.686 388.8 li
135.771 388.8 li
142.857 388.8 li
149.943 388.8 li
157.029 388.8 li
164.114 388.8 li
171.2 388.8 li
178.286 388.8 li
185.371 388.8 li
192.457 388.8 li
199.543 388.8 li
206.629 388.8 li
213.714 388.8 li
220.8 388.8 li
227.886 388.8 li
234.971 388.8 li
242.057 388.8 li
249.143 388.755 li
256.229 388.8 li
263.314 388.8 li
270.4 388.8 li
277.486 388.8 li
284.571 388.8 li
291.657 388.8 li
298.743 388.8 li
305.829 388.8 li
312.914 388.8 li
320 388.706 li
327.086 388.681 li
334.171 388.743 li
341.257 388.666 li
348.343 388.724 li
355.429 388.75 li
362.514 388.751 li
369.6 388.608 li
376.686 388.66 li
383.771 388.19 li
390.857 387.449 li
397.943 386.747 li
405.029 384.963 li
412.114 384.251 li
419.2 383.204 li
426.286 383.017 li
433.371 381.326 li
440.457 381.38 li
447.543 381.125 li
454.629 381.712 li
461.714 382.183 li
468.8 382.169 li
475.886 382.897 li
482.971 382.604 li
490.057 383.279 li
497.143 383.419 li
504.229 383.445 li
511.314 383.881 li
518.4 383.723 li
0 0.74902 0.74902 rgb
@
0.5 lw
0 lc
[1 3 ] 0 dsh
72 388.8 mo
72 43.2002 li
0 0 0 rgb
@
grestore
72 388.8 mo
72 384.8 li
0 0 0 rgb
f
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
72 384.8 li
@
72 43.2002 mo
72 47.2002 li
f
72 43.2002 mo
72 47.2002 li
@
59.3281 400.764 mo
61.2598 400.764 li
61.2598 394.092 li
59.1602 394.512 li
59.1602 393.432 li
61.248 393.012 li
62.436 393.012 li
62.436 400.764 li
64.3682 400.764 li
64.3682 401.76 li
59.3281 401.76 li
59.3281 400.764 li
59.3281 400.764 li
cp
ef
69.1919 397.872 mo
69.7202 397.872 70.1401 397.692 70.4521 397.332 cv
70.7642 396.972 70.9199 396.468 70.9199 395.832 cv
70.9199 395.208 70.7642 394.704 70.4521 394.344 cv
70.1401 393.984 69.7202 393.792 69.1919 393.792 cv
68.6641 393.792 68.2441 393.984 67.9321 394.344 cv
67.6201 394.704 67.4639 395.208 67.4639 395.832 cv
67.4639 396.468 67.6201 396.972 67.9321 397.332 cv
68.2441 397.692 68.6641 397.872 69.1919 397.872 cv
69.1919 397.872 li
cp
66.8398 401.58 mo
66.8398 400.5 li
67.1279 400.644 67.4282 400.752 67.7402 400.824 cv
68.04 400.896 68.3398 400.932 68.6401 400.932 cv
69.4082 400.932 70.0078 400.68 70.416 400.152 cv
70.8242 399.624 71.064 398.832 71.1362 397.752 cv
70.896 398.088 70.6079 398.352 70.272 398.532 cv
69.9238 398.712 69.54 398.796 69.1201 398.796 cv
68.2319 398.796 67.5361 398.532 67.0322 398.004 cv
66.5278 397.476 66.2759 396.756 66.2759 395.832 cv
66.2759 394.944 66.54 394.224 67.0679 393.672 cv
67.5962 393.132 68.3042 392.856 69.1919 392.856 cv
70.2002 392.856 70.98 393.252 71.5078 394.02 cv
72.0361 394.8 72.312 395.928 72.312 397.392 cv
72.312 398.784 71.9761 399.876 71.3281 400.692 cv
70.668 401.508 69.792 401.916 68.688 401.916 cv
68.3882 401.916 68.0879 401.88 67.7881 401.832 cv
67.4761 401.784 67.1641 401.7 66.8398 401.58 cv
ef
74.2559 393.012 mo
78.8999 393.012 li
78.8999 394.008 li
75.3359 394.008 li
75.3359 396.156 li
75.5039 396.096 75.6841 396.048 75.8521 396.024 cv
76.02 396 76.2002 395.976 76.3682 395.976 cv
77.3398 395.976 78.1079 396.252 78.6841 396.78 cv
79.2598 397.32 79.5479 398.04 79.5479 398.952 cv
79.5479 399.9 79.248 400.632 78.6602 401.148 cv
78.0718 401.664 77.2441 401.916 76.188 401.916 cv
75.8159 401.916 75.4438 401.88 75.0601 401.832 cv
74.6758 401.771 74.292 401.688 73.8838 401.556 cv
73.8838 400.368 li
74.2319 400.56 74.5918 400.704 74.9761 400.8 cv
75.3481 400.896 75.7441 400.932 76.1641 400.932 cv
76.8359 400.932 77.376 400.764 77.772 400.404 cv
78.1558 400.044 78.3599 399.564 78.3599 398.952 cv
78.3599 398.352 78.1558 397.872 77.772 397.512 cv
77.376 397.152 76.8359 396.972 76.1641 396.972 cv
75.8521 396.972 75.5278 397.008 75.2158 397.08 cv
74.9038 397.152 74.5801 397.26 74.2559 397.404 cv
74.2559 393.012 li
74.2559 393.012 li
cp
ef
84.4561 392.856 mo
85.4282 392.856 86.1719 393.252 86.7002 394.02 cv
87.2158 394.8 87.48 395.928 87.48 397.392 cv
87.48 398.868 87.2158 399.996 86.7002 400.764 cv
86.1719 401.532 85.4282 401.916 84.4561 401.916 cv
83.4722 401.916 82.7158 401.532 82.2002 400.764 cv
81.6841 399.996 81.4321 398.868 81.4321 397.392 cv
81.4321 395.928 81.6841 394.8 82.2002 394.02 cv
82.7158 393.252 83.4722 392.856 84.4561 392.856 cv
84.4561 392.856 li
cp
84.4561 393.792 mo
83.8438 393.792 83.3882 394.092 83.0762 394.692 cv
82.7642 395.292 82.6201 396.192 82.6201 397.392 cv
82.6201 398.592 82.7642 399.492 83.0762 400.092 cv
83.3882 400.692 83.8438 400.992 84.4561 400.992 cv
85.0679 400.992 85.5239 400.692 85.8359 400.092 cv
86.1362 399.492 86.292 398.592 86.292 397.392 cv
86.292 396.192 86.1362 395.292 85.8359 394.692 cv
85.5239 394.092 85.0679 393.792 84.4561 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
142.857 388.8 mo
142.857 43.2002 li
@
grestore
142.857 388.8 mo
142.857 384.8 li
f
142.857 388.8 mo
142.857 384.8 li
@
142.857 43.2002 mo
142.857 47.2002 li
f
142.857 43.2002 mo
142.857 47.2002 li
@
130.128 400.764 mo
132.06 400.764 li
132.06 394.092 li
129.96 394.512 li
129.96 393.432 li
132.048 393.012 li
133.236 393.012 li
133.236 400.764 li
135.168 400.764 li
135.168 401.76 li
130.128 401.76 li
130.128 400.764 li
130.128 400.764 li
cp
ef
139.992 397.872 mo
140.52 397.872 140.94 397.692 141.252 397.332 cv
141.564 396.972 141.72 396.468 141.72 395.832 cv
141.72 395.208 141.564 394.704 141.252 394.344 cv
140.94 393.984 140.52 393.792 139.992 393.792 cv
139.464 393.792 139.044 393.984 138.732 394.344 cv
138.42 394.704 138.264 395.208 138.264 395.832 cv
138.264 396.468 138.42 396.972 138.732 397.332 cv
139.044 397.692 139.464 397.872 139.992 397.872 cv
139.992 397.872 li
cp
137.64 401.58 mo
137.64 400.5 li
137.928 400.644 138.228 400.752 138.54 400.824 cv
138.84 400.896 139.14 400.932 139.44 400.932 cv
140.208 400.932 140.808 400.68 141.216 400.152 cv
141.624 399.624 141.864 398.832 141.936 397.752 cv
141.696 398.088 141.408 398.352 141.072 398.532 cv
140.724 398.712 140.34 398.796 139.92 398.796 cv
139.032 398.796 138.336 398.532 137.832 398.004 cv
137.328 397.476 137.076 396.756 137.076 395.832 cv
137.076 394.944 137.34 394.224 137.868 393.672 cv
138.396 393.132 139.104 392.856 139.992 392.856 cv
141 392.856 141.78 393.252 142.308 394.02 cv
142.836 394.8 143.112 395.928 143.112 397.392 cv
143.112 398.784 142.776 399.876 142.128 400.692 cv
141.468 401.508 140.592 401.916 139.488 401.916 cv
139.188 401.916 138.888 401.88 138.588 401.832 cv
138.276 401.784 137.964 401.7 137.64 401.58 cv
ef
150.312 393.204 mo
150.312 394.284 li
150.012 394.14 149.712 394.032 149.412 393.96 cv
149.1 393.888 148.8 393.852 148.512 393.852 cv
147.72 393.852 147.12 394.116 146.712 394.644 cv
146.304 395.172 146.064 395.976 146.016 397.032 cv
146.244 396.696 146.532 396.432 146.88 396.252 cv
147.228 396.072 147.612 395.976 148.032 395.976 cv
148.908 395.976 149.604 396.252 150.108 396.78 cv
150.612 397.308 150.876 398.04 150.876 398.952 cv
150.876 399.852 150.6 400.572 150.072 401.112 cv
149.544 401.652 148.836 401.916 147.96 401.916 cv
146.952 401.916 146.172 401.532 145.644 400.764 cv
145.104 399.996 144.84 398.868 144.84 397.392 cv
144.84 396.012 145.164 394.908 145.824 394.092 cv
146.472 393.276 147.36 392.856 148.464 392.856 cv
148.752 392.856 149.052 392.892 149.364 392.94 cv
149.664 393 149.976 393.084 150.312 393.204 cv
150.312 393.204 li
cp
147.96 396.912 mo
147.432 396.912 147.012 397.104 146.7 397.464 cv
146.388 397.824 146.232 398.328 146.232 398.952 cv
146.232 399.588 146.388 400.092 146.7 400.452 cv
147.012 400.812 147.432 400.992 147.96 400.992 cv
148.488 400.992 148.908 400.812 149.22 400.452 cv
149.532 400.092 149.688 399.588 149.688 398.952 cv
149.688 398.328 149.532 397.824 149.22 397.464 cv
148.908 397.104 148.488 396.912 147.96 396.912 cv
ef
155.256 392.856 mo
156.228 392.856 156.972 393.252 157.5 394.02 cv
158.016 394.8 158.28 395.928 158.28 397.392 cv
158.28 398.868 158.016 399.996 157.5 400.764 cv
156.972 401.532 156.228 401.916 155.256 401.916 cv
154.272 401.916 153.516 401.532 153 400.764 cv
152.484 399.996 152.232 398.868 152.232 397.392 cv
152.232 395.928 152.484 394.8 153 394.02 cv
153.516 393.252 154.272 392.856 155.256 392.856 cv
155.256 392.856 li
cp
155.256 393.792 mo
154.644 393.792 154.188 394.092 153.876 394.692 cv
153.564 395.292 153.42 396.192 153.42 397.392 cv
153.42 398.592 153.564 399.492 153.876 400.092 cv
154.188 400.692 154.644 400.992 155.256 400.992 cv
155.868 400.992 156.324 400.692 156.636 400.092 cv
156.936 399.492 157.092 398.592 157.092 397.392 cv
157.092 396.192 156.936 395.292 156.636 394.692 cv
156.324 394.092 155.868 393.792 155.256 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
213.714 388.8 mo
213.714 43.2002 li
@
grestore
213.714 388.8 mo
213.714 384.8 li
f
213.714 388.8 mo
213.714 384.8 li
@
213.714 43.2002 mo
213.714 47.2002 li
f
213.714 43.2002 mo
213.714 47.2002 li
@
200.928 400.764 mo
202.86 400.764 li
202.86 394.092 li
200.76 394.512 li
200.76 393.432 li
202.848 393.012 li
204.036 393.012 li
204.036 400.764 li
205.968 400.764 li
205.968 401.76 li
200.928 401.76 li
200.928 400.764 li
200.928 400.764 li
cp
ef
210.792 397.872 mo
211.32 397.872 211.74 397.692 212.052 397.332 cv
212.364 396.972 212.52 396.468 212.52 395.832 cv
212.52 395.208 212.364 394.704 212.052 394.344 cv
211.74 393.984 211.32 393.792 210.792 393.792 cv
210.264 393.792 209.844 393.984 209.532 394.344 cv
209.22 394.704 209.064 395.208 209.064 395.832 cv
209.064 396.468 209.22 396.972 209.532 397.332 cv
209.844 397.692 210.264 397.872 210.792 397.872 cv
210.792 397.872 li
cp
208.44 401.58 mo
208.44 400.5 li
208.728 400.644 209.028 400.752 209.34 400.824 cv
209.64 400.896 209.94 400.932 210.24 400.932 cv
211.008 400.932 211.608 400.68 212.016 400.152 cv
212.424 399.624 212.664 398.832 212.736 397.752 cv
212.496 398.088 212.208 398.352 211.872 398.532 cv
211.524 398.712 211.14 398.796 210.72 398.796 cv
209.832 398.796 209.136 398.532 208.632 398.004 cv
208.128 397.476 207.876 396.756 207.876 395.832 cv
207.876 394.944 208.14 394.224 208.668 393.672 cv
209.196 393.132 209.904 392.856 210.792 392.856 cv
211.8 392.856 212.58 393.252 213.108 394.02 cv
213.636 394.8 213.912 395.928 213.912 397.392 cv
213.912 398.784 213.576 399.876 212.928 400.692 cv
212.268 401.508 211.392 401.916 210.288 401.916 cv
209.988 401.916 209.688 401.88 209.388 401.832 cv
209.076 401.784 208.764 401.7 208.44 401.58 cv
ef
215.784 393.012 mo
221.412 393.012 li
221.412 393.516 li
218.232 401.76 li
216.996 401.76 li
219.984 394.008 li
215.784 394.008 li
215.784 393.012 li
215.784 393.012 li
cp
ef
226.296 392.856 mo
227.268 392.856 228.012 393.252 228.54 394.02 cv
229.056 394.8 229.32 395.928 229.32 397.392 cv
229.32 398.868 229.056 399.996 228.54 400.764 cv
228.012 401.532 227.268 401.916 226.296 401.916 cv
225.312 401.916 224.556 401.532 224.04 400.764 cv
223.524 399.996 223.272 398.868 223.272 397.392 cv
223.272 395.928 223.524 394.8 224.04 394.02 cv
224.556 393.252 225.312 392.856 226.296 392.856 cv
226.296 392.856 li
cp
226.296 393.792 mo
225.684 393.792 225.228 394.092 224.916 394.692 cv
224.604 395.292 224.46 396.192 224.46 397.392 cv
224.46 398.592 224.604 399.492 224.916 400.092 cv
225.228 400.692 225.684 400.992 226.296 400.992 cv
226.908 400.992 227.364 400.692 227.676 400.092 cv
227.976 399.492 228.132 398.592 228.132 397.392 cv
228.132 396.192 227.976 395.292 227.676 394.692 cv
227.364 394.092 226.908 393.792 226.296 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
284.571 388.8 mo
284.571 43.2002 li
@
grestore
284.571 388.8 mo
284.571 384.8 li
f
284.571 388.8 mo
284.571 384.8 li
@
284.571 43.2002 mo
284.571 47.2002 li
f
284.571 43.2002 mo
284.571 47.2002 li
@
271.728 400.764 mo
273.66 400.764 li
273.66 394.092 li
271.56 394.512 li
271.56 393.432 li
273.648 393.012 li
274.836 393.012 li
274.836 400.764 li
276.768 400.764 li
276.768 401.76 li
271.728 401.76 li
271.728 400.764 li
271.728 400.764 li
cp
ef
281.592 397.872 mo
282.12 397.872 282.54 397.692 282.852 397.332 cv
283.164 396.972 283.32 396.468 283.32 395.832 cv
283.32 395.208 283.164 394.704 282.852 394.344 cv
282.54 393.984 282.12 393.792 281.592 393.792 cv
281.064 393.792 280.644 393.984 280.332 394.344 cv
280.02 394.704 279.864 395.208 279.864 395.832 cv
279.864 396.468 280.02 396.972 280.332 397.332 cv
280.644 397.692 281.064 397.872 281.592 397.872 cv
281.592 397.872 li
cp
279.24 401.58 mo
279.24 400.5 li
279.528 400.644 279.828 400.752 280.14 400.824 cv
280.44 400.896 280.74 400.932 281.04 400.932 cv
281.808 400.932 282.408 400.68 282.816 400.152 cv
283.224 399.624 283.464 398.832 283.536 397.752 cv
283.296 398.088 283.008 398.352 282.672 398.532 cv
282.324 398.712 281.94 398.796 281.52 398.796 cv
280.632 398.796 279.936 398.532 279.432 398.004 cv
278.928 397.476 278.676 396.756 278.676 395.832 cv
278.676 394.944 278.94 394.224 279.468 393.672 cv
279.996 393.132 280.704 392.856 281.592 392.856 cv
282.6 392.856 283.38 393.252 283.908 394.02 cv
284.436 394.8 284.712 395.928 284.712 397.392 cv
284.712 398.784 284.376 399.876 283.728 400.692 cv
283.068 401.508 282.192 401.916 281.088 401.916 cv
280.788 401.916 280.488 401.88 280.188 401.832 cv
279.876 401.784 279.564 401.7 279.24 401.58 cv
ef
287.796 395.232 mo
287.796 395.688 287.928 396.048 288.216 396.3 cv
288.504 396.552 288.9 396.672 289.416 396.672 cv
289.92 396.672 290.316 396.552 290.604 396.3 cv
290.892 396.048 291.036 395.688 291.036 395.232 cv
291.036 394.776 290.892 394.428 290.604 394.176 cv
290.316 393.924 289.92 393.792 289.416 393.792 cv
288.9 393.792 288.504 393.924 288.216 394.176 cv
287.928 394.428 287.796 394.776 287.796 395.232 cv
287.796 395.232 li
cp
288.228 397.104 mo
287.724 396.984 287.328 396.744 287.04 396.396 cv
286.752 396.048 286.62 395.628 286.62 395.124 cv
286.62 394.428 286.86 393.876 287.364 393.468 cv
287.856 393.06 288.54 392.856 289.416 392.856 cv
290.28 392.856 290.964 393.06 291.468 393.468 cv
291.96 393.876 292.212 394.428 292.212 395.124 cv
292.212 395.628 292.068 396.048 291.78 396.396 cv
291.492 396.744 291.108 396.984 290.604 397.104 cv
291.168 397.236 291.612 397.5 291.936 397.884 cv
292.248 398.268 292.416 398.748 292.416 399.3 cv
292.416 400.152 292.152 400.8 291.636 401.244 cv
291.108 401.7 290.376 401.916 289.416 401.916 cv
288.444 401.916 287.7 401.7 287.184 401.244 cv
286.668 400.8 286.416 400.152 286.416 399.3 cv
286.416 398.748 286.572 398.268 286.896 397.884 cv
287.208 397.5 287.652 397.236 288.228 397.104 cv
289.416 397.608 mo
288.852 397.608 288.408 397.764 288.084 398.064 cv
287.76 398.364 287.604 398.771 287.604 399.3 cv
287.604 399.828 287.76 400.248 288.084 400.548 cv
288.408 400.848 288.852 400.992 289.416 400.992 cv
289.968 400.992 290.412 400.848 290.736 400.536 cv
291.06 400.236 291.228 399.828 291.228 399.3 cv
291.228 398.771 291.06 398.364 290.748 398.064 cv
290.424 397.764 289.98 397.608 289.416 397.608 cv
ef
297.096 392.856 mo
298.068 392.856 298.813 393.252 299.34 394.02 cv
299.856 394.8 300.12 395.928 300.12 397.392 cv
300.12 398.868 299.856 399.996 299.34 400.764 cv
298.813 401.532 298.068 401.916 297.096 401.916 cv
296.112 401.916 295.356 401.532 294.84 400.764 cv
294.324 399.996 294.072 398.868 294.072 397.392 cv
294.072 395.928 294.324 394.8 294.84 394.02 cv
295.356 393.252 296.112 392.856 297.096 392.856 cv
297.096 392.856 li
cp
297.096 393.792 mo
296.484 393.792 296.028 394.092 295.716 394.692 cv
295.404 395.292 295.26 396.192 295.26 397.392 cv
295.26 398.592 295.404 399.492 295.716 400.092 cv
296.028 400.692 296.484 400.992 297.096 400.992 cv
297.708 400.992 298.164 400.692 298.476 400.092 cv
298.776 399.492 298.932 398.592 298.932 397.392 cv
298.932 396.192 298.776 395.292 298.476 394.692 cv
298.164 394.092 297.708 393.792 297.096 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
355.429 388.8 mo
355.429 43.2002 li
@
grestore
355.429 388.8 mo
355.429 384.8 li
f
355.429 388.8 mo
355.429 384.8 li
@
355.429 43.2002 mo
355.429 47.2002 li
f
355.429 43.2002 mo
355.429 47.2002 li
@
342.768 400.764 mo
344.7 400.764 li
344.7 394.092 li
342.6 394.512 li
342.6 393.432 li
344.688 393.012 li
345.876 393.012 li
345.876 400.764 li
347.808 400.764 li
347.808 401.76 li
342.768 401.76 li
342.768 400.764 li
342.768 400.764 li
cp
ef
352.392 397.872 mo
352.92 397.872 353.34 397.692 353.652 397.332 cv
353.964 396.972 354.12 396.468 354.12 395.832 cv
354.12 395.208 353.964 394.704 353.652 394.344 cv
353.34 393.984 352.92 393.792 352.392 393.792 cv
351.864 393.792 351.444 393.984 351.132 394.344 cv
350.82 394.704 350.664 395.208 350.664 395.832 cv
350.664 396.468 350.82 396.972 351.132 397.332 cv
351.444 397.692 351.864 397.872 352.392 397.872 cv
352.392 397.872 li
cp
350.04 401.58 mo
350.04 400.5 li
350.328 400.644 350.628 400.752 350.94 400.824 cv
351.24 400.896 351.54 400.932 351.84 400.932 cv
352.608 400.932 353.208 400.68 353.616 400.152 cv
354.024 399.624 354.264 398.832 354.336 397.752 cv
354.096 398.088 353.808 398.352 353.472 398.532 cv
353.124 398.712 352.74 398.796 352.32 398.796 cv
351.432 398.796 350.736 398.532 350.232 398.004 cv
349.728 397.476 349.476 396.756 349.476 395.832 cv
349.476 394.944 349.74 394.224 350.268 393.672 cv
350.796 393.132 351.504 392.856 352.392 392.856 cv
353.4 392.856 354.18 393.252 354.708 394.02 cv
355.236 394.8 355.512 395.928 355.512 397.392 cv
355.512 398.784 355.176 399.876 354.528 400.692 cv
353.868 401.508 352.992 401.916 351.888 401.916 cv
351.588 401.916 351.288 401.88 350.988 401.832 cv
350.676 401.784 350.364 401.7 350.04 401.58 cv
ef
360.072 397.872 mo
360.6 397.872 361.02 397.692 361.332 397.332 cv
361.644 396.972 361.8 396.468 361.8 395.832 cv
361.8 395.208 361.644 394.704 361.332 394.344 cv
361.02 393.984 360.6 393.792 360.072 393.792 cv
359.544 393.792 359.124 393.984 358.813 394.344 cv
358.5 394.704 358.344 395.208 358.344 395.832 cv
358.344 396.468 358.5 396.972 358.813 397.332 cv
359.124 397.692 359.544 397.872 360.072 397.872 cv
360.072 397.872 li
cp
357.72 401.58 mo
357.72 400.5 li
358.008 400.644 358.308 400.752 358.62 400.824 cv
358.92 400.896 359.22 400.932 359.52 400.932 cv
360.288 400.932 360.888 400.68 361.296 400.152 cv
361.704 399.624 361.944 398.832 362.016 397.752 cv
361.776 398.088 361.488 398.352 361.152 398.532 cv
360.804 398.712 360.42 398.796 360 398.796 cv
359.112 398.796 358.416 398.532 357.912 398.004 cv
357.408 397.476 357.156 396.756 357.156 395.832 cv
357.156 394.944 357.42 394.224 357.948 393.672 cv
358.476 393.132 359.184 392.856 360.072 392.856 cv
361.08 392.856 361.86 393.252 362.388 394.02 cv
362.916 394.8 363.192 395.928 363.192 397.392 cv
363.192 398.784 362.856 399.876 362.208 400.692 cv
361.548 401.508 360.672 401.916 359.568 401.916 cv
359.268 401.916 358.968 401.88 358.668 401.832 cv
358.356 401.784 358.044 401.7 357.72 401.58 cv
ef
367.896 392.856 mo
368.868 392.856 369.612 393.252 370.14 394.02 cv
370.656 394.8 370.92 395.928 370.92 397.392 cv
370.92 398.868 370.656 399.996 370.14 400.764 cv
369.612 401.532 368.868 401.916 367.896 401.916 cv
366.912 401.916 366.156 401.532 365.64 400.764 cv
365.124 399.996 364.872 398.868 364.872 397.392 cv
364.872 395.928 365.124 394.8 365.64 394.02 cv
366.156 393.252 366.912 392.856 367.896 392.856 cv
367.896 392.856 li
cp
367.896 393.792 mo
367.284 393.792 366.828 394.092 366.516 394.692 cv
366.204 395.292 366.06 396.192 366.06 397.392 cv
366.06 398.592 366.204 399.492 366.516 400.092 cv
366.828 400.692 367.284 400.992 367.896 400.992 cv
368.508 400.992 368.964 400.692 369.276 400.092 cv
369.576 399.492 369.732 398.592 369.732 397.392 cv
369.732 396.192 369.576 395.292 369.276 394.692 cv
368.964 394.092 368.508 393.792 367.896 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
426.286 388.8 mo
426.286 43.2002 li
@
grestore
426.286 388.8 mo
426.286 384.8 li
f
426.286 388.8 mo
426.286 384.8 li
@
426.286 43.2002 mo
426.286 47.2002 li
f
426.286 43.2002 mo
426.286 47.2002 li
@
414.144 400.764 mo
418.271 400.764 li
418.271 401.76 li
412.716 401.76 li
412.716 400.764 li
413.16 400.308 413.771 399.684 414.552 398.892 cv
415.32 398.112 415.813 397.608 416.016 397.38 cv
416.4 396.96 416.664 396.6 416.808 396.3 cv
416.952 396.012 417.036 395.712 417.036 395.424 cv
417.036 394.968 416.868 394.584 416.544 394.296 cv
416.22 394.008 415.8 393.852 415.271 393.852 cv
414.9 393.852 414.504 393.924 414.096 394.044 cv
413.688 394.176 413.244 394.368 412.776 394.632 cv
412.776 393.432 li
413.256 393.24 413.7 393.096 414.108 393 cv
414.516 392.904 414.9 392.856 415.248 392.856 cv
416.148 392.856 416.868 393.084 417.408 393.54 cv
417.948 393.996 418.224 394.596 418.224 395.352 cv
418.224 395.712 418.152 396.06 418.02 396.372 cv
417.888 396.696 417.648 397.08 417.288 397.512 cv
417.192 397.632 416.88 397.956 416.352 398.496 cv
415.824 399.036 415.092 399.792 414.144 400.764 cv
414.144 400.764 li
cp
ef
423.336 392.856 mo
424.308 392.856 425.052 393.252 425.58 394.02 cv
426.096 394.8 426.36 395.928 426.36 397.392 cv
426.36 398.868 426.096 399.996 425.58 400.764 cv
425.052 401.532 424.308 401.916 423.336 401.916 cv
422.352 401.916 421.596 401.532 421.08 400.764 cv
420.564 399.996 420.313 398.868 420.313 397.392 cv
420.313 395.928 420.564 394.8 421.08 394.02 cv
421.596 393.252 422.352 392.856 423.336 392.856 cv
423.336 392.856 li
cp
423.336 393.792 mo
422.724 393.792 422.268 394.092 421.956 394.692 cv
421.644 395.292 421.5 396.192 421.5 397.392 cv
421.5 398.592 421.644 399.492 421.956 400.092 cv
422.268 400.692 422.724 400.992 423.336 400.992 cv
423.948 400.992 424.404 400.692 424.716 400.092 cv
425.016 399.492 425.172 398.592 425.172 397.392 cv
425.172 396.192 425.016 395.292 424.716 394.692 cv
424.404 394.092 423.948 393.792 423.336 393.792 cv
ef
431.016 392.856 mo
431.988 392.856 432.732 393.252 433.26 394.02 cv
433.776 394.8 434.04 395.928 434.04 397.392 cv
434.04 398.868 433.776 399.996 433.26 400.764 cv
432.732 401.532 431.988 401.916 431.016 401.916 cv
430.032 401.916 429.276 401.532 428.76 400.764 cv
428.244 399.996 427.992 398.868 427.992 397.392 cv
427.992 395.928 428.244 394.8 428.76 394.02 cv
429.276 393.252 430.032 392.856 431.016 392.856 cv
431.016 392.856 li
cp
431.016 393.792 mo
430.404 393.792 429.948 394.092 429.636 394.692 cv
429.324 395.292 429.18 396.192 429.18 397.392 cv
429.18 398.592 429.324 399.492 429.636 400.092 cv
429.948 400.692 430.404 400.992 431.016 400.992 cv
431.628 400.992 432.084 400.692 432.396 400.092 cv
432.696 399.492 432.852 398.592 432.852 397.392 cv
432.852 396.192 432.696 395.292 432.396 394.692 cv
432.084 394.092 431.628 393.792 431.016 393.792 cv
ef
438.456 392.856 mo
439.428 392.856 440.172 393.252 440.7 394.02 cv
441.216 394.8 441.48 395.928 441.48 397.392 cv
441.48 398.868 441.216 399.996 440.7 400.764 cv
440.172 401.532 439.428 401.916 438.456 401.916 cv
437.472 401.916 436.716 401.532 436.2 400.764 cv
435.684 399.996 435.432 398.868 435.432 397.392 cv
435.432 395.928 435.684 394.8 436.2 394.02 cv
436.716 393.252 437.472 392.856 438.456 392.856 cv
438.456 392.856 li
cp
438.456 393.792 mo
437.844 393.792 437.388 394.092 437.076 394.692 cv
436.764 395.292 436.62 396.192 436.62 397.392 cv
436.62 398.592 436.764 399.492 437.076 400.092 cv
437.388 400.692 437.844 400.992 438.456 400.992 cv
439.068 400.992 439.524 400.692 439.836 400.092 cv
440.136 399.492 440.292 398.592 440.292 397.392 cv
440.292 396.192 440.136 395.292 439.836 394.692 cv
439.524 394.092 439.068 393.792 438.456 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
497.143 388.8 mo
497.143 43.2002 li
@
grestore
497.143 388.8 mo
497.143 384.8 li
f
497.143 388.8 mo
497.143 384.8 li
@
497.143 43.2002 mo
497.143 47.2002 li
f
497.143 43.2002 mo
497.143 47.2002 li
@
484.944 400.764 mo
489.072 400.764 li
489.072 401.76 li
483.516 401.76 li
483.516 400.764 li
483.96 400.308 484.572 399.684 485.352 398.892 cv
486.12 398.112 486.612 397.608 486.816 397.38 cv
487.2 396.96 487.464 396.6 487.608 396.3 cv
487.752 396.012 487.836 395.712 487.836 395.424 cv
487.836 394.968 487.668 394.584 487.344 394.296 cv
487.02 394.008 486.6 393.852 486.072 393.852 cv
485.7 393.852 485.304 393.924 484.896 394.044 cv
484.488 394.176 484.044 394.368 483.576 394.632 cv
483.576 393.432 li
484.056 393.24 484.5 393.096 484.908 393 cv
485.316 392.904 485.7 392.856 486.048 392.856 cv
486.948 392.856 487.668 393.084 488.208 393.54 cv
488.748 393.996 489.024 394.596 489.024 395.352 cv
489.024 395.712 488.952 396.06 488.82 396.372 cv
488.688 396.696 488.448 397.08 488.088 397.512 cv
487.992 397.632 487.68 397.956 487.152 398.496 cv
486.624 399.036 485.892 399.792 484.944 400.764 cv
484.944 400.764 li
cp
ef
494.136 392.856 mo
495.108 392.856 495.852 393.252 496.38 394.02 cv
496.896 394.8 497.16 395.928 497.16 397.392 cv
497.16 398.868 496.896 399.996 496.38 400.764 cv
495.852 401.532 495.108 401.916 494.136 401.916 cv
493.152 401.916 492.396 401.532 491.88 400.764 cv
491.364 399.996 491.112 398.868 491.112 397.392 cv
491.112 395.928 491.364 394.8 491.88 394.02 cv
492.396 393.252 493.152 392.856 494.136 392.856 cv
494.136 392.856 li
cp
494.136 393.792 mo
493.524 393.792 493.068 394.092 492.756 394.692 cv
492.444 395.292 492.3 396.192 492.3 397.392 cv
492.3 398.592 492.444 399.492 492.756 400.092 cv
493.068 400.692 493.524 400.992 494.136 400.992 cv
494.748 400.992 495.204 400.692 495.516 400.092 cv
495.816 399.492 495.972 398.592 495.972 397.392 cv
495.972 396.192 495.816 395.292 495.516 394.692 cv
495.204 394.092 494.748 393.792 494.136 393.792 cv
ef
499.488 400.764 mo
501.42 400.764 li
501.42 394.092 li
499.32 394.512 li
499.32 393.432 li
501.408 393.012 li
502.596 393.012 li
502.596 400.764 li
504.528 400.764 li
504.528 401.76 li
499.488 401.76 li
499.488 400.764 li
499.488 400.764 li
cp
ef
509.496 392.856 mo
510.468 392.856 511.212 393.252 511.74 394.02 cv
512.256 394.8 512.52 395.928 512.52 397.392 cv
512.52 398.868 512.256 399.996 511.74 400.764 cv
511.212 401.532 510.468 401.916 509.496 401.916 cv
508.512 401.916 507.756 401.532 507.24 400.764 cv
506.724 399.996 506.472 398.868 506.472 397.392 cv
506.472 395.928 506.724 394.8 507.24 394.02 cv
507.756 393.252 508.512 392.856 509.496 392.856 cv
509.496 392.856 li
cp
509.496 393.792 mo
508.884 393.792 508.428 394.092 508.116 394.692 cv
507.804 395.292 507.66 396.192 507.66 397.392 cv
507.66 398.592 507.804 399.492 508.116 400.092 cv
508.428 400.692 508.884 400.992 509.496 400.992 cv
510.108 400.992 510.564 400.692 510.876 400.092 cv
511.176 399.492 511.332 398.592 511.332 397.392 cv
511.332 396.192 511.176 395.292 510.876 394.692 cv
510.564 394.092 510.108 393.792 509.496 393.792 cv
ef
282.468 406.932 mo
283.728 406.932 li
286.152 410.532 li
288.564 406.932 li
289.836 406.932 li
286.74 411.516 li
286.74 415.68 li
285.552 415.68 li
285.552 411.516 li
282.468 406.932 li
282.468 406.932 li
cp
ef
293.904 411.816 mo
293.892 411.228 293.724 410.76 293.412 410.4 cv
293.088 410.052 292.656 409.872 292.128 409.872 cv
291.528 409.872 291.048 410.052 290.688 410.388 cv
290.328 410.724 290.112 411.204 290.064 411.816 cv
293.904 411.816 li
293.904 411.816 li
cp
294.984 412.128 mo
294.984 412.656 li
290.028 412.656 li
290.076 413.4 290.292 413.976 290.7 414.36 cv
291.096 414.744 291.648 414.936 292.368 414.936 cv
292.776 414.936 293.184 414.888 293.568 414.792 cv
293.952 414.696 294.348 414.54 294.732 414.324 cv
294.732 415.344 li
294.348 415.512 293.952 415.644 293.544 415.716 cv
293.136 415.788 292.716 415.836 292.308 415.836 cv
291.252 415.836 290.424 415.536 289.813 414.936 cv
289.2 414.336 288.9 413.508 288.9 412.464 cv
288.9 411.396 289.188 410.544 289.764 409.908 cv
290.34 409.284 291.132 408.96 292.116 408.96 cv
293.004 408.96 293.7 409.248 294.216 409.812 cv
294.72 410.388 294.984 411.156 294.984 412.128 cv
ef
301.944 411.936 mo
301.944 415.68 li
300.864 415.68 li
300.864 414.684 li
300.612 415.092 300.3 415.38 299.94 415.56 cv
299.58 415.74 299.124 415.836 298.596 415.836 cv
297.924 415.836 297.384 415.656 296.988 415.284 cv
296.592 414.912 296.4 414.408 296.4 413.771 cv
296.4 413.04 296.64 412.488 297.144 412.104 cv
297.636 411.732 298.368 411.54 299.352 411.54 cv
300.864 411.54 li
300.864 411.432 li
300.864 410.94 300.696 410.556 300.372 410.28 cv
300.048 410.016 299.592 409.872 299.004 409.872 cv
298.62 409.872 298.26 409.92 297.9 410.016 cv
297.54 410.112 297.204 410.244 296.88 410.412 cv
296.88 409.416 li
297.264 409.271 297.648 409.152 298.02 409.08 cv
298.392 409.008 298.752 408.96 299.112 408.96 cv
300.06 408.96 300.768 409.212 301.236 409.704 cv
301.704 410.196 301.944 410.94 301.944 411.936 cv
301.944 411.936 li
cp
299.796 412.38 mo
298.92 412.38 298.32 412.488 297.984 412.68 cv
297.648 412.884 297.48 413.22 297.48 413.7 cv
297.48 414.084 297.6 414.396 297.852 414.612 cv
298.104 414.84 298.452 414.948 298.884 414.948 cv
299.484 414.948 299.964 414.744 300.324 414.312 cv
300.684 413.892 300.864 413.328 300.864 412.62 cv
300.864 412.38 li
299.796 412.38 li
ef
307.813 410.124 mo
307.692 410.052 307.56 410.004 307.416 409.968 cv
307.272 409.944 307.116 409.92 306.948 409.92 cv
306.336 409.92 305.868 410.124 305.544 410.52 cv
305.208 410.916 305.052 411.48 305.052 412.224 cv
305.052 415.68 li
303.972 415.68 li
303.972 409.116 li
305.052 409.116 li
305.052 410.136 li
305.268 409.74 305.568 409.44 305.928 409.248 cv
306.288 409.056 306.732 408.96 307.26 408.96 cv
307.332 408.96 307.416 408.972 307.512 408.972 cv
307.596 408.984 307.692 408.996 307.813 409.02 cv
307.813 410.124 li
307.813 410.124 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 388.8 mo
518.4 388.8 li
@
grestore
72 388.8 mo
76 388.8 li
f
72 388.8 mo
76 388.8 li
@
518.4 388.8 mo
514.4 388.8 li
f
518.4 388.8 mo
514.4 388.8 li
@
46.7759 384.216 mo
47.748 384.216 48.4922 384.612 49.02 385.38 cv
49.5361 386.16 49.7998 387.288 49.7998 388.752 cv
49.7998 390.228 49.5361 391.356 49.02 392.124 cv
48.4922 392.892 47.748 393.276 46.7759 393.276 cv
45.792 393.276 45.0361 392.892 44.52 392.124 cv
44.0039 391.356 43.752 390.228 43.752 388.752 cv
43.752 387.288 44.0039 386.16 44.52 385.38 cv
45.0361 384.612 45.792 384.216 46.7759 384.216 cv
46.7759 384.216 li
cp
46.7759 385.152 mo
46.1641 385.152 45.708 385.452 45.396 386.052 cv
45.084 386.652 44.9399 387.552 44.9399 388.752 cv
44.9399 389.952 45.084 390.852 45.396 391.452 cv
45.708 392.052 46.1641 392.352 46.7759 392.352 cv
47.3882 392.352 47.8438 392.052 48.1558 391.452 cv
48.4561 390.852 48.6118 389.952 48.6118 388.752 cv
48.6118 387.552 48.4561 386.652 48.1558 386.052 cv
47.8438 385.452 47.3882 385.152 46.7759 385.152 cv
ef
51.6841 391.632 mo
52.9199 391.632 li
52.9199 393.12 li
51.6841 393.12 li
51.6841 391.632 li
51.6841 391.632 li
cp
ef
58.0562 384.216 mo
59.0278 384.216 59.772 384.612 60.2998 385.38 cv
60.8159 386.16 61.0801 387.288 61.0801 388.752 cv
61.0801 390.228 60.8159 391.356 60.2998 392.124 cv
59.772 392.892 59.0278 393.276 58.0562 393.276 cv
57.0718 393.276 56.3159 392.892 55.7998 392.124 cv
55.2842 391.356 55.0322 390.228 55.0322 388.752 cv
55.0322 387.288 55.2842 386.16 55.7998 385.38 cv
56.3159 384.612 57.0718 384.216 58.0562 384.216 cv
58.0562 384.216 li
cp
58.0562 385.152 mo
57.4438 385.152 56.9878 385.452 56.6758 386.052 cv
56.3638 386.652 56.2202 387.552 56.2202 388.752 cv
56.2202 389.952 56.3638 390.852 56.6758 391.452 cv
56.9878 392.052 57.4438 392.352 58.0562 392.352 cv
58.668 392.352 59.124 392.052 59.436 391.452 cv
59.7358 390.852 59.8921 389.952 59.8921 388.752 cv
59.8921 387.552 59.7358 386.652 59.436 386.052 cv
59.124 385.452 58.668 385.152 58.0562 385.152 cv
ef
65.7358 384.216 mo
66.708 384.216 67.4521 384.612 67.98 385.38 cv
68.4961 386.16 68.7598 387.288 68.7598 388.752 cv
68.7598 390.228 68.4961 391.356 67.98 392.124 cv
67.4521 392.892 66.708 393.276 65.7358 393.276 cv
64.752 393.276 63.9961 392.892 63.48 392.124 cv
62.9639 391.356 62.7119 390.228 62.7119 388.752 cv
62.7119 387.288 62.9639 386.16 63.48 385.38 cv
63.9961 384.612 64.752 384.216 65.7358 384.216 cv
65.7358 384.216 li
cp
65.7358 385.152 mo
65.124 385.152 64.668 385.452 64.356 386.052 cv
64.0439 386.652 63.8999 387.552 63.8999 388.752 cv
63.8999 389.952 64.0439 390.852 64.356 391.452 cv
64.668 392.052 65.124 392.352 65.7358 392.352 cv
66.3481 392.352 66.8042 392.052 67.1162 391.452 cv
67.416 390.852 67.5718 389.952 67.5718 388.752 cv
67.5718 387.552 67.416 386.652 67.1162 386.052 cv
66.8042 385.452 66.3481 385.152 65.7358 385.152 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 331.2 mo
518.4 331.2 li
@
grestore
72 331.2 mo
76 331.2 li
f
72 331.2 mo
76 331.2 li
@
518.4 331.2 mo
514.4 331.2 li
f
518.4 331.2 mo
514.4 331.2 li
@
47.0161 326.616 mo
47.9878 326.616 48.7319 327.012 49.2598 327.78 cv
49.7759 328.56 50.04 329.688 50.04 331.152 cv
50.04 332.628 49.7759 333.756 49.2598 334.524 cv
48.7319 335.292 47.9878 335.676 47.0161 335.676 cv
46.0322 335.676 45.2759 335.292 44.7598 334.524 cv
44.2441 333.756 43.9922 332.628 43.9922 331.152 cv
43.9922 329.688 44.2441 328.56 44.7598 327.78 cv
45.2759 327.012 46.0322 326.616 47.0161 326.616 cv
47.0161 326.616 li
cp
47.0161 327.552 mo
46.4038 327.552 45.9482 327.852 45.6362 328.452 cv
45.3242 329.052 45.1802 329.952 45.1802 331.152 cv
45.1802 332.352 45.3242 333.252 45.6362 333.852 cv
45.9482 334.452 46.4038 334.752 47.0161 334.752 cv
47.6279 334.752 48.084 334.452 48.396 333.852 cv
48.6958 333.252 48.8521 332.352 48.8521 331.152 cv
48.8521 329.952 48.6958 329.052 48.396 328.452 cv
48.084 327.852 47.6279 327.552 47.0161 327.552 cv
ef
51.9238 334.032 mo
53.1602 334.032 li
53.1602 335.52 li
51.9238 335.52 li
51.9238 334.032 li
51.9238 334.032 li
cp
ef
58.2959 326.616 mo
59.2681 326.616 60.0122 327.012 60.54 327.78 cv
61.0562 328.56 61.3198 329.688 61.3198 331.152 cv
61.3198 332.628 61.0562 333.756 60.54 334.524 cv
60.0122 335.292 59.2681 335.676 58.2959 335.676 cv
57.312 335.676 56.5562 335.292 56.04 334.524 cv
55.5239 333.756 55.272 332.628 55.272 331.152 cv
55.272 329.688 55.5239 328.56 56.04 327.78 cv
56.5562 327.012 57.312 326.616 58.2959 326.616 cv
58.2959 326.616 li
cp
58.2959 327.552 mo
57.6841 327.552 57.228 327.852 56.916 328.452 cv
56.604 329.052 56.46 329.952 56.46 331.152 cv
56.46 332.352 56.604 333.252 56.916 333.852 cv
57.228 334.452 57.6841 334.752 58.2959 334.752 cv
58.9082 334.752 59.3638 334.452 59.6758 333.852 cv
59.9761 333.252 60.1318 332.352 60.1318 331.152 cv
60.1318 329.952 59.9761 329.052 59.6758 328.452 cv
59.3638 327.852 58.9082 327.552 58.2959 327.552 cv
ef
63.4561 326.771 mo
68.1001 326.771 li
68.1001 327.768 li
64.5361 327.768 li
64.5361 329.916 li
64.7041 329.855 64.8838 329.808 65.0518 329.784 cv
65.2202 329.76 65.3999 329.736 65.5679 329.736 cv
66.54 329.736 67.3081 330.012 67.8838 330.54 cv
68.46 331.08 68.748 331.8 68.748 332.712 cv
68.748 333.66 68.4482 334.392 67.8599 334.908 cv
67.272 335.424 66.4438 335.676 65.3882 335.676 cv
65.0161 335.676 64.644 335.64 64.2598 335.592 cv
63.876 335.532 63.4922 335.448 63.084 335.316 cv
63.084 334.128 li
63.4321 334.32 63.792 334.464 64.1758 334.56 cv
64.5479 334.656 64.9438 334.692 65.3638 334.692 cv
66.0361 334.692 66.5762 334.524 66.9722 334.164 cv
67.356 333.804 67.5601 333.324 67.5601 332.712 cv
67.5601 332.112 67.356 331.632 66.9722 331.271 cv
66.5762 330.912 66.0361 330.732 65.3638 330.732 cv
65.0518 330.732 64.728 330.768 64.416 330.84 cv
64.104 330.912 63.7798 331.02 63.4561 331.164 cv
63.4561 326.771 li
63.4561 326.771 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 273.6 mo
518.4 273.6 li
@
grestore
72 273.6 mo
76 273.6 li
f
72 273.6 mo
76 273.6 li
@
518.4 273.6 mo
514.4 273.6 li
f
518.4 273.6 mo
514.4 273.6 li
@
46.7759 269.016 mo
47.748 269.016 48.4922 269.412 49.02 270.18 cv
49.5361 270.96 49.7998 272.088 49.7998 273.552 cv
49.7998 275.028 49.5361 276.156 49.02 276.924 cv
48.4922 277.692 47.748 278.076 46.7759 278.076 cv
45.792 278.076 45.0361 277.692 44.52 276.924 cv
44.0039 276.156 43.752 275.028 43.752 273.552 cv
43.752 272.088 44.0039 270.96 44.52 270.18 cv
45.0361 269.412 45.792 269.016 46.7759 269.016 cv
46.7759 269.016 li
cp
46.7759 269.952 mo
46.1641 269.952 45.708 270.252 45.396 270.852 cv
45.084 271.452 44.9399 272.352 44.9399 273.552 cv
44.9399 274.752 45.084 275.652 45.396 276.252 cv
45.708 276.852 46.1641 277.152 46.7759 277.152 cv
47.3882 277.152 47.8438 276.852 48.1558 276.252 cv
48.4561 275.652 48.6118 274.752 48.6118 273.552 cv
48.6118 272.352 48.4561 271.452 48.1558 270.852 cv
47.8438 270.252 47.3882 269.952 46.7759 269.952 cv
ef
51.6841 276.432 mo
52.9199 276.432 li
52.9199 277.92 li
51.6841 277.92 li
51.6841 276.432 li
51.6841 276.432 li
cp
ef
55.728 276.924 mo
57.6602 276.924 li
57.6602 270.252 li
55.5601 270.672 li
55.5601 269.592 li
57.6479 269.172 li
58.8359 269.172 li
58.8359 276.924 li
60.7681 276.924 li
60.7681 277.92 li
55.728 277.92 li
55.728 276.924 li
55.728 276.924 li
cp
ef
65.7358 269.016 mo
66.708 269.016 67.4521 269.412 67.98 270.18 cv
68.4961 270.96 68.7598 272.088 68.7598 273.552 cv
68.7598 275.028 68.4961 276.156 67.98 276.924 cv
67.4521 277.692 66.708 278.076 65.7358 278.076 cv
64.752 278.076 63.9961 277.692 63.48 276.924 cv
62.9639 276.156 62.7119 275.028 62.7119 273.552 cv
62.7119 272.088 62.9639 270.96 63.48 270.18 cv
63.9961 269.412 64.752 269.016 65.7358 269.016 cv
65.7358 269.016 li
cp
65.7358 269.952 mo
65.124 269.952 64.668 270.252 64.356 270.852 cv
64.0439 271.452 63.8999 272.352 63.8999 273.552 cv
63.8999 274.752 64.0439 275.652 64.356 276.252 cv
64.668 276.852 65.124 277.152 65.7358 277.152 cv
66.3481 277.152 66.8042 276.852 67.1162 276.252 cv
67.416 275.652 67.5718 274.752 67.5718 273.552 cv
67.5718 272.352 67.416 271.452 67.1162 270.852 cv
66.8042 270.252 66.3481 269.952 65.7358 269.952 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 216 mo
518.4 216 li
@
grestore
72 216 mo
76 216 li
f
72 216 mo
76 216 li
@
518.4 216 mo
514.4 216 li
f
518.4 216 mo
514.4 216 li
@
47.0161 211.416 mo
47.9878 211.416 48.7319 211.812 49.2598 212.58 cv
49.7759 213.36 50.04 214.488 50.04 215.952 cv
50.04 217.428 49.7759 218.556 49.2598 219.324 cv
48.7319 220.092 47.9878 220.476 47.0161 220.476 cv
46.0322 220.476 45.2759 220.092 44.7598 219.324 cv
44.2441 218.556 43.9922 217.428 43.9922 215.952 cv
43.9922 214.488 44.2441 213.36 44.7598 212.58 cv
45.2759 211.812 46.0322 211.416 47.0161 211.416 cv
47.0161 211.416 li
cp
47.0161 212.352 mo
46.4038 212.352 45.9482 212.652 45.6362 213.252 cv
45.3242 213.852 45.1802 214.752 45.1802 215.952 cv
45.1802 217.152 45.3242 218.052 45.6362 218.652 cv
45.9482 219.252 46.4038 219.552 47.0161 219.552 cv
47.6279 219.552 48.084 219.252 48.396 218.652 cv
48.6958 218.052 48.8521 217.152 48.8521 215.952 cv
48.8521 214.752 48.6958 213.852 48.396 213.252 cv
48.084 212.652 47.6279 212.352 47.0161 212.352 cv
ef
51.9238 218.832 mo
53.1602 218.832 li
53.1602 220.32 li
51.9238 220.32 li
51.9238 218.832 li
51.9238 218.832 li
cp
ef
55.9678 219.324 mo
57.8999 219.324 li
57.8999 212.652 li
55.7998 213.072 li
55.7998 211.992 li
57.8882 211.572 li
59.0762 211.572 li
59.0762 219.324 li
61.0078 219.324 li
61.0078 220.32 li
55.9678 220.32 li
55.9678 219.324 li
55.9678 219.324 li
cp
ef
63.4561 211.572 mo
68.1001 211.572 li
68.1001 212.568 li
64.5361 212.568 li
64.5361 214.716 li
64.7041 214.656 64.8838 214.608 65.0518 214.584 cv
65.2202 214.56 65.3999 214.536 65.5679 214.536 cv
66.54 214.536 67.3081 214.812 67.8838 215.34 cv
68.46 215.88 68.748 216.6 68.748 217.512 cv
68.748 218.46 68.4482 219.192 67.8599 219.708 cv
67.272 220.224 66.4438 220.476 65.3882 220.476 cv
65.0161 220.476 64.644 220.44 64.2598 220.392 cv
63.876 220.332 63.4922 220.248 63.084 220.116 cv
63.084 218.928 li
63.4321 219.12 63.792 219.264 64.1758 219.36 cv
64.5479 219.456 64.9438 219.492 65.3638 219.492 cv
66.0361 219.492 66.5762 219.324 66.9722 218.964 cv
67.356 218.604 67.5601 218.124 67.5601 217.512 cv
67.5601 216.912 67.356 216.432 66.9722 216.072 cv
66.5762 215.712 66.0361 215.532 65.3638 215.532 cv
65.0518 215.532 64.728 215.568 64.416 215.64 cv
64.104 215.712 63.7798 215.82 63.4561 215.964 cv
63.4561 211.572 li
63.4561 211.572 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 158.4 mo
518.4 158.4 li
@
grestore
72 158.4 mo
76 158.4 li
f
72 158.4 mo
76 158.4 li
@
518.4 158.4 mo
514.4 158.4 li
f
518.4 158.4 mo
514.4 158.4 li
@
46.7759 153.816 mo
47.748 153.816 48.4922 154.212 49.02 154.98 cv
49.5361 155.76 49.7998 156.888 49.7998 158.352 cv
49.7998 159.828 49.5361 160.956 49.02 161.724 cv
48.4922 162.492 47.748 162.876 46.7759 162.876 cv
45.792 162.876 45.0361 162.492 44.52 161.724 cv
44.0039 160.956 43.752 159.828 43.752 158.352 cv
43.752 156.888 44.0039 155.76 44.52 154.98 cv
45.0361 154.212 45.792 153.816 46.7759 153.816 cv
46.7759 153.816 li
cp
46.7759 154.752 mo
46.1641 154.752 45.708 155.052 45.396 155.652 cv
45.084 156.252 44.9399 157.152 44.9399 158.352 cv
44.9399 159.552 45.084 160.452 45.396 161.052 cv
45.708 161.652 46.1641 161.952 46.7759 161.952 cv
47.3882 161.952 47.8438 161.652 48.1558 161.052 cv
48.4561 160.452 48.6118 159.552 48.6118 158.352 cv
48.6118 157.152 48.4561 156.252 48.1558 155.652 cv
47.8438 155.052 47.3882 154.752 46.7759 154.752 cv
ef
51.6841 161.232 mo
52.9199 161.232 li
52.9199 162.72 li
51.6841 162.72 li
51.6841 161.232 li
51.6841 161.232 li
cp
ef
56.5439 161.724 mo
60.6719 161.724 li
60.6719 162.72 li
55.1162 162.72 li
55.1162 161.724 li
55.5601 161.268 56.1719 160.644 56.9521 159.852 cv
57.7202 159.072 58.2119 158.568 58.416 158.34 cv
58.7998 157.92 59.064 157.56 59.208 157.26 cv
59.3521 156.972 59.436 156.672 59.436 156.384 cv
59.436 155.928 59.2681 155.544 58.9438 155.256 cv
58.6201 154.968 58.2002 154.812 57.6719 154.812 cv
57.2998 154.812 56.9038 154.884 56.4961 155.004 cv
56.0879 155.136 55.644 155.328 55.1758 155.592 cv
55.1758 154.392 li
55.6558 154.2 56.1001 154.056 56.5078 153.96 cv
56.916 153.864 57.2998 153.816 57.6479 153.816 cv
58.5479 153.816 59.2681 154.044 59.8081 154.5 cv
60.3481 154.956 60.624 155.556 60.624 156.312 cv
60.624 156.672 60.5518 157.02 60.4199 157.332 cv
60.2881 157.656 60.0479 158.04 59.688 158.472 cv
59.5918 158.592 59.2798 158.916 58.752 159.456 cv
58.2241 159.996 57.4922 160.752 56.5439 161.724 cv
56.5439 161.724 li
cp
ef
65.7358 153.816 mo
66.708 153.816 67.4521 154.212 67.98 154.98 cv
68.4961 155.76 68.7598 156.888 68.7598 158.352 cv
68.7598 159.828 68.4961 160.956 67.98 161.724 cv
67.4521 162.492 66.708 162.876 65.7358 162.876 cv
64.752 162.876 63.9961 162.492 63.48 161.724 cv
62.9639 160.956 62.7119 159.828 62.7119 158.352 cv
62.7119 156.888 62.9639 155.76 63.48 154.98 cv
63.9961 154.212 64.752 153.816 65.7358 153.816 cv
65.7358 153.816 li
cp
65.7358 154.752 mo
65.124 154.752 64.668 155.052 64.356 155.652 cv
64.0439 156.252 63.8999 157.152 63.8999 158.352 cv
63.8999 159.552 64.0439 160.452 64.356 161.052 cv
64.668 161.652 65.124 161.952 65.7358 161.952 cv
66.3481 161.952 66.8042 161.652 67.1162 161.052 cv
67.416 160.452 67.5718 159.552 67.5718 158.352 cv
67.5718 157.152 67.416 156.252 67.1162 155.652 cv
66.8042 155.052 66.3481 154.752 65.7358 154.752 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 100.8 mo
518.4 100.8 li
@
grestore
72 100.8 mo
76 100.8 li
f
72 100.8 mo
76 100.8 li
@
518.4 100.8 mo
514.4 100.8 li
f
518.4 100.8 mo
514.4 100.8 li
@
47.0161 96.2158 mo
47.9878 96.2158 48.7319 96.6118 49.2598 97.3799 cv
49.7759 98.1602 50.04 99.2881 50.04 100.752 cv
50.04 102.228 49.7759 103.356 49.2598 104.124 cv
48.7319 104.892 47.9878 105.276 47.0161 105.276 cv
46.0322 105.276 45.2759 104.892 44.7598 104.124 cv
44.2441 103.356 43.9922 102.228 43.9922 100.752 cv
43.9922 99.2881 44.2441 98.1602 44.7598 97.3799 cv
45.2759 96.6118 46.0322 96.2158 47.0161 96.2158 cv
47.0161 96.2158 li
cp
47.0161 97.1519 mo
46.4038 97.1519 45.9482 97.4521 45.6362 98.0518 cv
45.3242 98.6519 45.1802 99.5518 45.1802 100.752 cv
45.1802 101.952 45.3242 102.852 45.6362 103.452 cv
45.9482 104.052 46.4038 104.352 47.0161 104.352 cv
47.6279 104.352 48.084 104.052 48.396 103.452 cv
48.6958 102.852 48.8521 101.952 48.8521 100.752 cv
48.8521 99.5518 48.6958 98.6519 48.396 98.0518 cv
48.084 97.4521 47.6279 97.1519 47.0161 97.1519 cv
ef
51.9238 103.632 mo
53.1602 103.632 li
53.1602 105.12 li
51.9238 105.12 li
51.9238 103.632 li
51.9238 103.632 li
cp
ef
56.7842 104.124 mo
60.9121 104.124 li
60.9121 105.12 li
55.356 105.12 li
55.356 104.124 li
55.7998 103.668 56.4121 103.044 57.1919 102.252 cv
57.96 101.472 58.4521 100.968 58.6558 100.74 cv
59.04 100.32 59.3042 99.96 59.4482 99.6602 cv
59.5918 99.3721 59.6758 99.0718 59.6758 98.7842 cv
59.6758 98.3281 59.5078 97.9438 59.1841 97.6558 cv
58.8599 97.3682 58.4399 97.2119 57.9121 97.2119 cv
57.54 97.2119 57.144 97.2842 56.7358 97.4038 cv
56.3281 97.5361 55.8838 97.728 55.416 97.9922 cv
55.416 96.792 li
55.896 96.6001 56.3398 96.4561 56.748 96.3599 cv
57.1558 96.2642 57.54 96.2158 57.8882 96.2158 cv
58.7881 96.2158 59.5078 96.4438 60.0479 96.8999 cv
60.5879 97.356 60.8638 97.9561 60.8638 98.7119 cv
60.8638 99.0718 60.792 99.4199 60.6602 99.7319 cv
60.5278 100.056 60.2881 100.44 59.9282 100.872 cv
59.832 100.992 59.52 101.316 58.9922 101.856 cv
58.4639 102.396 57.7319 103.152 56.7842 104.124 cv
56.7842 104.124 li
cp
ef
63.4561 96.3721 mo
68.1001 96.3721 li
68.1001 97.3682 li
64.5361 97.3682 li
64.5361 99.5161 li
64.7041 99.4561 64.8838 99.4082 65.0518 99.3838 cv
65.2202 99.3599 65.3999 99.3359 65.5679 99.3359 cv
66.54 99.3359 67.3081 99.6118 67.8838 100.14 cv
68.46 100.68 68.748 101.4 68.748 102.312 cv
68.748 103.26 68.4482 103.992 67.8599 104.508 cv
67.272 105.024 66.4438 105.276 65.3882 105.276 cv
65.0161 105.276 64.644 105.24 64.2598 105.192 cv
63.876 105.132 63.4922 105.048 63.084 104.916 cv
63.084 103.728 li
63.4321 103.92 63.792 104.064 64.1758 104.16 cv
64.5479 104.256 64.9438 104.292 65.3638 104.292 cv
66.0361 104.292 66.5762 104.124 66.9722 103.764 cv
67.356 103.404 67.5601 102.924 67.5601 102.312 cv
67.5601 101.712 67.356 101.232 66.9722 100.872 cv
66.5762 100.512 66.0361 100.332 65.3638 100.332 cv
65.0518 100.332 64.728 100.368 64.416 100.44 cv
64.104 100.512 63.7798 100.62 63.4561 100.764 cv
63.4561 96.3721 li
63.4561 96.3721 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 43.2002 mo
518.4 43.2002 li
@
grestore
72 43.2002 mo
76 43.2002 li
f
72 43.2002 mo
76 43.2002 li
@
518.4 43.2002 mo
514.4 43.2002 li
f
518.4 43.2002 mo
514.4 43.2002 li
@
46.7759 38.6162 mo
47.748 38.6162 48.4922 39.0117 49.02 39.7798 cv
49.5361 40.5601 49.7998 41.688 49.7998 43.1519 cv
49.7998 44.6279 49.5361 45.7559 49.02 46.5239 cv
48.4922 47.292 47.748 47.6758 46.7759 47.6758 cv
45.792 47.6758 45.0361 47.292 44.52 46.5239 cv
44.0039 45.7559 43.752 44.6279 43.752 43.1519 cv
43.752 41.688 44.0039 40.5601 44.52 39.7798 cv
45.0361 39.0117 45.792 38.6162 46.7759 38.6162 cv
46.7759 38.6162 li
cp
46.7759 39.5518 mo
46.1641 39.5518 45.708 39.8521 45.396 40.4521 cv
45.084 41.0518 44.9399 41.9521 44.9399 43.1519 cv
44.9399 44.3521 45.084 45.252 45.396 45.8521 cv
45.708 46.4521 46.1641 46.752 46.7759 46.752 cv
47.3882 46.752 47.8438 46.4521 48.1558 45.8521 cv
48.4561 45.252 48.6118 44.3521 48.6118 43.1519 cv
48.6118 41.9521 48.4561 41.0518 48.1558 40.4521 cv
47.8438 39.8521 47.3882 39.5518 46.7759 39.5518 cv
ef
51.6841 46.0322 mo
52.9199 46.0322 li
52.9199 47.52 li
51.6841 47.52 li
51.6841 46.0322 li
51.6841 46.0322 li
cp
ef
59.1118 42.8037 mo
59.6758 42.9238 60.1201 43.1758 60.4321 43.5601 cv
60.7441 43.9438 60.9121 44.4238 60.9121 44.9761 cv
60.9121 45.8398 60.6118 46.5117 60.0239 46.98 cv
59.4238 47.4482 58.584 47.6758 57.4922 47.6758 cv
57.1201 47.6758 56.7358 47.6401 56.3521 47.5679 cv
55.9678 47.5078 55.5601 47.3999 55.1519 47.2559 cv
55.1519 46.1162 li
55.4761 46.3081 55.8359 46.4521 56.2319 46.5479 cv
56.6162 46.644 57.0239 46.6919 57.4561 46.6919 cv
58.2002 46.6919 58.7642 46.5479 59.1479 46.2598 cv
59.5322 45.9717 59.7358 45.54 59.7358 44.9761 cv
59.7358 44.4717 59.5562 44.064 59.1958 43.7759 cv
58.8359 43.4878 58.332 43.332 57.6841 43.332 cv
56.6641 43.332 li
56.6641 42.3599 li
57.7319 42.3599 li
58.3081 42.3599 58.752 42.252 59.064 42.0117 cv
59.376 41.7842 59.5322 41.4482 59.5322 41.0039 cv
59.5322 40.5601 59.3638 40.2119 59.0518 39.9717 cv
58.728 39.7319 58.272 39.6118 57.6841 39.6118 cv
57.3599 39.6118 57.0122 39.6479 56.6401 39.7197 cv
56.2681 39.792 55.8599 39.8999 55.416 40.0439 cv
55.416 38.9878 li
55.8599 38.8682 56.2798 38.772 56.6758 38.7119 cv
57.0601 38.6519 57.4321 38.6162 57.792 38.6162 cv
58.6802 38.6162 59.3882 38.8198 59.916 39.228 cv
60.4438 39.6357 60.708 40.188 60.708 40.8838 cv
60.708 41.3638 60.564 41.772 60.2881 42.1079 cv
60.0122 42.4438 59.6162 42.6841 59.1118 42.8037 cv
59.1118 42.8037 li
cp
ef
65.7358 38.6162 mo
66.708 38.6162 67.4521 39.0117 67.98 39.7798 cv
68.4961 40.5601 68.7598 41.688 68.7598 43.1519 cv
68.7598 44.6279 68.4961 45.7559 67.98 46.5239 cv
67.4521 47.292 66.708 47.6758 65.7358 47.6758 cv
64.752 47.6758 63.9961 47.292 63.48 46.5239 cv
62.9639 45.7559 62.7119 44.6279 62.7119 43.1519 cv
62.7119 41.688 62.9639 40.5601 63.48 39.7798 cv
63.9961 39.0117 64.752 38.6162 65.7358 38.6162 cv
65.7358 38.6162 li
cp
65.7358 39.5518 mo
65.124 39.5518 64.668 39.8521 64.356 40.4521 cv
64.0439 41.0518 63.8999 41.9521 63.8999 43.1519 cv
63.8999 44.3521 64.0439 45.252 64.356 45.8521 cv
64.668 46.4521 65.124 46.752 65.7358 46.752 cv
66.3481 46.752 66.8042 46.4521 67.1162 45.8521 cv
67.416 45.252 67.5718 44.3521 67.5718 43.1519 cv
67.5718 41.9521 67.416 41.0518 67.1162 40.4521 cv
66.8042 39.8521 66.3481 39.5518 65.7358 39.5518 cv
ef
28.9321 278.184 mo
28.9321 275.508 li
28.9321 274.536 29.1602 273.792 29.604 273.288 cv
30.0479 272.784 30.6958 272.532 31.5479 272.532 cv
32.4121 272.532 33.0718 272.784 33.5039 273.288 cv
33.9478 273.792 34.1641 274.536 34.1641 275.508 cv
34.1641 276.996 li
37.6802 276.996 li
37.6802 278.184 li
28.9321 278.184 li
28.9321 278.184 li
cp
29.9038 276.996 mo
33.1919 276.996 li
33.1919 275.508 li
33.1919 274.956 33.0601 274.536 32.772 274.236 cv
32.4839 273.936 32.0762 273.78 31.5479 273.78 cv
31.02 273.78 30.624 273.936 30.3359 274.236 cv
30.0479 274.536 29.9038 274.956 29.9038 275.508 cv
29.9038 276.996 li
ef
33.8159 266.976 mo
33.228 266.988 32.7598 267.156 32.3999 267.468 cv
32.0518 267.792 31.8721 268.224 31.8721 268.752 cv
31.8721 269.352 32.0518 269.832 32.3882 270.192 cv
32.7241 270.552 33.2041 270.768 33.8159 270.816 cv
33.8159 266.976 li
33.8159 266.976 li
cp
34.1279 265.896 mo
34.6558 265.896 li
34.6558 270.852 li
35.3999 270.804 35.9761 270.588 36.3599 270.18 cv
36.7441 269.784 36.936 269.232 36.936 268.512 cv
36.936 268.104 36.8882 267.696 36.792 267.312 cv
36.6958 266.928 36.54 266.532 36.3242 266.148 cv
37.3438 266.148 li
37.5122 266.532 37.644 266.928 37.7158 267.336 cv
37.7881 267.744 37.8359 268.164 37.8359 268.572 cv
37.8359 269.628 37.5361 270.456 36.936 271.068 cv
36.3359 271.68 35.5078 271.98 34.4639 271.98 cv
33.396 271.98 32.5439 271.692 31.9082 271.116 cv
31.2842 270.54 30.96 269.748 30.96 268.764 cv
30.96 267.876 31.248 267.18 31.812 266.664 cv
32.3882 266.16 33.1558 265.896 34.1279 265.896 cv
ef
32.124 260.268 mo
32.0518 260.388 32.0039 260.52 31.9678 260.664 cv
31.9438 260.808 31.9199 260.964 31.9199 261.132 cv
31.9199 261.744 32.124 262.212 32.52 262.536 cv
32.916 262.872 33.48 263.028 34.2241 263.028 cv
37.6802 263.028 li
37.6802 264.108 li
31.1162 264.108 li
31.1162 263.028 li
32.1362 263.028 li
31.7402 262.812 31.4399 262.512 31.248 262.152 cv
31.0562 261.792 30.96 261.348 30.96 260.82 cv
30.96 260.748 30.9722 260.664 30.9722 260.568 cv
30.9839 260.484 30.9961 260.388 31.02 260.268 cv
32.124 260.268 li
32.124 260.268 li
cp
ef
31.3682 254.544 mo
32.376 254.544 li
32.208 254.855 32.0879 255.156 32.0039 255.468 cv
31.9199 255.78 31.8721 256.08 31.8721 256.392 cv
31.8721 257.088 32.1001 257.64 32.5439 258.024 cv
32.9878 258.408 33.6118 258.6 34.4038 258.6 cv
35.208 258.6 35.832 258.408 36.2759 258.024 cv
36.7202 257.64 36.936 257.088 36.936 256.392 cv
36.936 256.08 36.8999 255.78 36.8159 255.468 cv
36.7319 255.156 36.6001 254.855 36.4321 254.544 cv
37.4277 254.544 li
37.5718 254.855 37.6802 255.168 37.7402 255.48 cv
37.7998 255.804 37.8359 256.152 37.8359 256.512 cv
37.8359 257.496 37.5361 258.288 36.9121 258.864 cv
36.2998 259.452 35.46 259.74 34.4038 259.74 cv
33.3359 259.74 32.4961 259.452 31.8838 258.864 cv
31.272 258.276 30.96 257.472 30.96 256.44 cv
30.96 256.104 30.9961 255.78 31.0679 255.468 cv
31.1401 255.156 31.2358 254.844 31.3682 254.544 cv
31.3682 254.544 li
cp
ef
33.8159 248.256 mo
33.228 248.268 32.7598 248.436 32.3999 248.748 cv
32.0518 249.072 31.8721 249.504 31.8721 250.032 cv
31.8721 250.632 32.0518 251.112 32.3882 251.472 cv
32.7241 251.832 33.2041 252.048 33.8159 252.096 cv
33.8159 248.256 li
33.8159 248.256 li
cp
34.1279 247.176 mo
34.6558 247.176 li
34.6558 252.132 li
35.3999 252.084 35.9761 251.868 36.3599 251.46 cv
36.7441 251.064 36.936 250.512 36.936 249.792 cv
36.936 249.384 36.8882 248.976 36.792 248.592 cv
36.6958 248.208 36.54 247.812 36.3242 247.428 cv
37.3438 247.428 li
37.5122 247.812 37.644 248.208 37.7158 248.616 cv
37.7881 249.024 37.8359 249.444 37.8359 249.852 cv
37.8359 250.908 37.5361 251.736 36.936 252.348 cv
36.3359 252.96 35.5078 253.26 34.4639 253.26 cv
33.396 253.26 32.5439 252.972 31.9082 252.396 cv
31.2842 251.82 30.96 251.028 30.96 250.044 cv
30.96 249.156 31.248 248.46 31.812 247.944 cv
32.3882 247.44 33.1558 247.176 34.1279 247.176 cv
ef
33.7202 239.892 mo
37.6802 239.892 li
37.6802 240.972 li
33.7559 240.972 li
33.1318 240.972 32.6758 241.104 32.3638 241.344 cv
32.0518 241.584 31.896 241.944 31.896 242.424 cv
31.896 243.012 32.0879 243.468 32.46 243.804 cv
32.832 244.14 33.3359 244.308 33.9722 244.308 cv
37.6802 244.308 li
37.6802 245.388 li
31.1162 245.388 li
31.1162 244.308 li
32.1362 244.308 li
31.752 244.056 31.4521 243.756 31.2598 243.396 cv
31.0679 243.048 30.96 242.64 30.96 242.184 cv
30.96 241.44 31.2002 240.864 31.668 240.48 cv
32.1362 240.096 32.8198 239.892 33.7202 239.892 cv
33.7202 239.892 li
cp
ef
29.2559 236.604 mo
31.1162 236.604 li
31.1162 234.384 li
31.9561 234.384 li
31.9561 236.604 li
35.52 236.604 li
36.0601 236.604 36.4082 236.532 36.5518 236.388 cv
36.708 236.244 36.7798 235.944 36.7798 235.488 cv
36.7798 234.384 li
37.6802 234.384 li
37.6802 235.488 li
37.6802 236.328 37.5239 236.904 37.2119 237.216 cv
36.8999 237.528 36.3359 237.684 35.52 237.684 cv
31.9561 237.684 li
31.9561 238.476 li
31.1162 238.476 li
31.1162 237.684 li
29.2559 237.684 li
29.2559 236.604 li
29.2559 236.604 li
cp
ef
30.96 226.728 mo
30.96 225.792 31.272 225.06 31.8721 224.52 cv
32.4839 223.992 33.3242 223.716 34.4038 223.716 cv
35.4839 223.716 36.3242 223.992 36.9238 224.52 cv
37.5361 225.06 37.8359 225.792 37.8359 226.728 cv
37.8359 227.676 37.5361 228.42 36.9238 228.948 cv
36.3242 229.476 35.4839 229.74 34.4038 229.74 cv
33.3242 229.74 32.4839 229.476 31.8721 228.948 cv
31.272 228.42 30.96 227.676 30.96 226.728 cv
30.96 226.728 li
cp
31.8721 226.728 mo
31.8721 227.304 32.1001 227.76 32.5562 228.096 cv
33.0122 228.432 33.624 228.6 34.4038 228.6 cv
35.1958 228.6 35.8081 228.444 36.2642 228.108 cv
36.7202 227.771 36.936 227.316 36.936 226.728 cv
36.936 226.152 36.7202 225.696 36.2642 225.36 cv
35.8081 225.024 35.1958 224.855 34.4038 224.855 cv
33.6362 224.855 33.0122 225.024 32.5562 225.36 cv
32.1001 225.696 31.8721 226.152 31.8721 226.728 cv
ef
28.5601 218.508 mo
29.46 218.508 li
29.46 219.54 li
29.46 219.924 29.5439 220.2 29.7002 220.344 cv
29.856 220.5 30.1318 220.572 30.54 220.572 cv
31.1162 220.572 li
31.1162 218.796 li
31.9561 218.796 li
31.9561 220.572 li
37.6802 220.572 li
37.6802 221.652 li
31.9561 221.652 li
31.9561 222.684 li
31.1162 222.684 li
31.1162 221.652 li
30.6602 221.652 li
29.9399 221.652 29.3999 221.484 29.064 221.148 cv
28.728 220.812 28.5601 220.271 28.5601 219.528 cv
28.5601 218.508 li
28.5601 218.508 li
cp
ef
29.2559 212.844 mo
31.1162 212.844 li
31.1162 210.624 li
31.9561 210.624 li
31.9561 212.844 li
35.52 212.844 li
36.0601 212.844 36.4082 212.772 36.5518 212.628 cv
36.708 212.484 36.7798 212.184 36.7798 211.728 cv
36.7798 210.624 li
37.6802 210.624 li
37.6802 211.728 li
37.6802 212.568 37.5239 213.144 37.2119 213.456 cv
36.8999 213.768 36.3359 213.924 35.52 213.924 cv
31.9561 213.924 li
31.9561 214.716 li
31.1162 214.716 li
31.1162 213.924 li
29.2559 213.924 li
29.2559 212.844 li
29.2559 212.844 li
cp
ef
28.5601 209.112 mo
28.5601 208.032 li
29.9277 208.032 li
29.9277 209.112 li
28.5601 209.112 li
28.5601 209.112 li
cp
31.1162 209.112 mo
31.1162 208.032 li
37.6802 208.032 li
37.6802 209.112 li
31.1162 209.112 li
ef
29.2559 204.684 mo
31.1162 204.684 li
31.1162 202.464 li
31.9561 202.464 li
31.9561 204.684 li
35.52 204.684 li
36.0601 204.684 36.4082 204.612 36.5518 204.468 cv
36.708 204.324 36.7798 204.024 36.7798 203.568 cv
36.7798 202.464 li
37.6802 202.464 li
37.6802 203.568 li
37.6802 204.408 37.5239 204.984 37.2119 205.296 cv
36.8999 205.608 36.3359 205.764 35.52 205.764 cv
31.9561 205.764 li
31.9561 206.556 li
31.1162 206.556 li
31.1162 205.764 li
29.2559 205.764 li
29.2559 204.684 li
29.2559 204.684 li
cp
ef
28.5601 201.192 mo
28.5601 200.112 li
37.6802 200.112 li
37.6802 201.192 li
28.5601 201.192 li
28.5601 201.192 li
cp
ef
33.8159 193.296 mo
33.228 193.308 32.7598 193.476 32.3999 193.788 cv
32.0518 194.112 31.8721 194.544 31.8721 195.072 cv
31.8721 195.672 32.0518 196.152 32.3882 196.512 cv
32.7241 196.872 33.2041 197.088 33.8159 197.136 cv
33.8159 193.296 li
33.8159 193.296 li
cp
34.1279 192.216 mo
34.6558 192.216 li
34.6558 197.172 li
35.3999 197.124 35.9761 196.908 36.3599 196.5 cv
36.7441 196.104 36.936 195.552 36.936 194.832 cv
36.936 194.424 36.8882 194.016 36.792 193.632 cv
36.6958 193.248 36.54 192.852 36.3242 192.468 cv
37.3438 192.468 li
37.5122 192.852 37.644 193.248 37.7158 193.656 cv
37.7881 194.064 37.8359 194.484 37.8359 194.892 cv
37.8359 195.948 37.5361 196.776 36.936 197.388 cv
36.3359 198 35.5078 198.3 34.4639 198.3 cv
33.396 198.3 32.5439 198.012 31.9082 197.436 cv
31.2842 196.86 30.96 196.068 30.96 195.084 cv
30.96 194.196 31.248 193.5 31.812 192.984 cv
32.3882 192.48 33.1558 192.216 34.1279 192.216 cv
ef
31.1162 187.176 mo
31.1162 186.096 li
36.2402 184.752 li
31.1162 183.408 li
31.1162 182.136 li
36.2402 180.792 li
31.1162 179.448 li
31.1162 178.368 li
37.6802 180.084 li
37.6802 181.356 li
32.3042 182.772 li
37.6802 184.188 li
37.6802 185.46 li
31.1162 187.176 li
31.1162 187.176 li
cp
ef
30.96 174.168 mo
30.96 173.232 31.272 172.5 31.8721 171.96 cv
32.4839 171.432 33.3242 171.156 34.4038 171.156 cv
35.4839 171.156 36.3242 171.432 36.9238 171.96 cv
37.5361 172.5 37.8359 173.232 37.8359 174.168 cv
37.8359 175.116 37.5361 175.86 36.9238 176.388 cv
36.3242 176.916 35.4839 177.18 34.4038 177.18 cv
33.3242 177.18 32.4839 176.916 31.8721 176.388 cv
31.272 175.86 30.96 175.116 30.96 174.168 cv
30.96 174.168 li
cp
31.8721 174.168 mo
31.8721 174.744 32.1001 175.2 32.5562 175.536 cv
33.0122 175.872 33.624 176.04 34.4038 176.04 cv
35.1958 176.04 35.8081 175.884 36.2642 175.548 cv
36.7202 175.212 36.936 174.756 36.936 174.168 cv
36.936 173.592 36.7202 173.136 36.2642 172.8 cv
35.8081 172.464 35.1958 172.296 34.4038 172.296 cv
33.6362 172.296 33.0122 172.464 32.5562 172.8 cv
32.1001 173.136 31.8721 173.592 31.8721 174.168 cv
ef
32.124 165.708 mo
32.0518 165.828 32.0039 165.96 31.9678 166.104 cv
31.9438 166.248 31.9199 166.404 31.9199 166.572 cv
31.9199 167.184 32.124 167.652 32.52 167.976 cv
32.916 168.312 33.48 168.468 34.2241 168.468 cv
37.6802 168.468 li
37.6802 169.548 li
31.1162 169.548 li
31.1162 168.468 li
32.1362 168.468 li
31.7402 168.252 31.4399 167.952 31.248 167.592 cv
31.0562 167.232 30.96 166.788 30.96 166.26 cv
30.96 166.188 30.9722 166.104 30.9722 166.008 cv
30.9839 165.924 30.9961 165.828 31.02 165.708 cv
32.124 165.708 li
32.124 165.708 li
cp
ef
34.4038 164.064 mo
35.1958 164.064 35.8198 163.908 36.2759 163.584 cv
36.7319 163.26 36.9478 162.804 36.9478 162.228 cv
36.9478 161.664 36.7319 161.22 36.2759 160.884 cv
35.8198 160.56 35.1958 160.392 34.4038 160.392 cv
33.6118 160.392 33 160.56 32.5439 160.884 cv
32.0879 161.22 31.8599 161.664 31.8599 162.228 cv
31.8599 162.804 32.0879 163.26 32.5439 163.584 cv
33 163.908 33.6118 164.064 34.4038 164.064 cv
34.4038 164.064 li
cp
32.1118 160.392 mo
28.5601 160.392 li
28.5601 159.312 li
37.6802 159.312 li
37.6802 160.392 li
36.6958 160.392 li
37.0918 160.62 37.3799 160.908 37.5601 161.256 cv
37.7402 161.604 37.8359 162.012 37.8359 162.492 cv
37.8359 163.284 37.5239 163.932 36.8999 164.436 cv
36.2759 164.94 35.436 165.18 34.4038 165.18 cv
33.3721 165.18 32.5439 164.94 31.9082 164.436 cv
31.2842 163.932 30.96 163.284 30.96 162.492 cv
30.96 162.012 31.0562 161.604 31.248 161.256 cv
31.4399 160.908 31.728 160.62 32.1118 160.392 cv
ef
31.3081 152.844 mo
32.3281 152.844 li
32.1841 153.156 32.064 153.468 31.98 153.792 cv
31.9082 154.128 31.8599 154.464 31.8599 154.812 cv
31.8599 155.352 31.9438 155.76 32.1118 156.024 cv
32.2798 156.288 32.52 156.42 32.8438 156.42 cv
33.0962 156.42 33.2881 156.324 33.4321 156.132 cv
33.5762 155.94 33.7202 155.556 33.8398 154.98 cv
33.9238 154.608 li
34.0918 153.84 34.332 153.3 34.6201 152.976 cv
34.9199 152.664 35.3398 152.496 35.8682 152.496 cv
36.48 152.496 36.96 152.736 37.3081 153.216 cv
37.668 153.696 37.8359 154.368 37.8359 155.208 cv
37.8359 155.568 37.7998 155.928 37.7402 156.312 cv
37.6802 156.696 37.584 157.092 37.4399 157.512 cv
36.3242 157.512 li
36.54 157.116 36.6958 156.72 36.792 156.336 cv
36.8999 155.952 36.9478 155.568 36.9478 155.184 cv
36.9478 154.68 36.8638 154.284 36.6958 154.008 cv
36.5278 153.744 36.2759 153.6 35.9521 153.6 cv
35.6641 153.6 35.436 153.708 35.2798 153.9 cv
35.124 154.092 34.9678 154.524 34.8242 155.196 cv
34.7402 155.568 li
34.5962 156.24 34.3799 156.732 34.0918 157.02 cv
33.8042 157.32 33.4082 157.464 32.8921 157.464 cv
32.2798 157.464 31.7998 157.248 31.4639 156.816 cv
31.1279 156.384 30.96 155.76 30.96 154.944 cv
30.96 154.548 30.9961 154.176 31.0562 153.816 cv
31.1162 153.468 31.2002 153.144 31.3081 152.844 cv
31.3081 152.844 li
cp
ef
1 lw
2 lc
72 388.8 mo
72 43.2002 li
72 388.8 mo
518.4 388.8 li
518.4 388.8 mo
518.4 43.2002 li
72 43.2002 mo
518.4 43.2002 li
@
79.2002 135.004 mo
205.696 135.004 li
205.696 50.3999 li
79.2002 50.3999 li
79.2002 135.004 li
79.2002 135.004 li
cp
1 1 1 rgb
f
79.2002 135.004 mo
205.696 135.004 li
205.696 50.3999 li
79.2002 50.3999 li
79.2002 135.004 li
79.2002 135.004 li
cp
0 0 0 rgb
@
89.2798 61.7607 mo
109.44 61.7607 li
0 0 1 rgb
@
131.198 60.0527 mo
131.054 59.9663 130.896 59.9087 130.723 59.8657 cv
130.55 59.8369 130.363 59.8081 130.162 59.8081 cv
129.427 59.8081 128.866 60.0527 128.477 60.5278 cv
128.074 61.0029 127.886 61.6797 127.886 62.5728 cv
127.886 66.7197 li
126.59 66.7197 li
126.59 58.8433 li
127.886 58.8433 li
127.886 60.0674 li
128.146 59.5918 128.505 59.2319 128.938 59.0015 cv
129.37 58.771 129.902 58.6563 130.536 58.6563 cv
130.623 58.6563 130.723 58.6704 130.838 58.6704 cv
130.939 58.6846 131.054 58.6992 131.198 58.728 cv
131.198 60.0527 li
131.198 60.0527 li
cp
0 0 0 rgb
ef
138.797 62.2271 mo
138.797 66.7197 li
137.501 66.7197 li
137.501 65.5249 li
137.198 66.0142 136.824 66.3599 136.392 66.5762 cv
135.96 66.792 135.413 66.9072 134.779 66.9072 cv
133.973 66.9072 133.325 66.6914 132.85 66.2446 cv
132.375 65.7983 132.144 65.1934 132.144 64.4302 cv
132.144 63.5518 132.432 62.8896 133.037 62.4287 cv
133.627 61.9824 134.505 61.752 135.687 61.752 cv
137.501 61.752 li
137.501 61.6226 li
137.501 61.0322 137.299 60.5713 136.91 60.2402 cv
136.521 59.9233 135.975 59.7505 135.269 59.7505 cv
134.808 59.7505 134.376 59.8081 133.944 59.9233 cv
133.512 60.0381 133.109 60.1968 132.72 60.3984 cv
132.72 59.2031 li
133.181 59.0303 133.642 58.8862 134.088 58.7998 cv
134.534 58.7134 134.966 58.6563 135.398 58.6563 cv
136.536 58.6563 137.386 58.9585 137.947 59.5488 cv
138.509 60.1392 138.797 61.0322 138.797 62.2271 cv
138.797 62.2271 li
cp
136.219 62.7598 mo
135.168 62.7598 134.448 62.8896 134.045 63.1201 cv
133.642 63.3647 133.44 63.7681 133.44 64.3438 cv
133.44 64.8047 133.584 65.1792 133.886 65.4385 cv
134.189 65.7119 134.606 65.8418 135.125 65.8418 cv
135.845 65.8418 136.421 65.5967 136.853 65.0781 cv
137.285 64.5742 137.501 63.8975 137.501 63.0479 cv
137.501 62.7598 li
136.219 62.7598 li
ef
142.555 56.6113 mo
142.555 58.8433 li
145.219 58.8433 li
145.219 59.8511 li
142.555 59.8511 li
142.555 64.1279 li
142.555 64.7759 142.642 65.1934 142.814 65.3662 cv
142.987 65.5537 143.347 65.6401 143.895 65.6401 cv
145.219 65.6401 li
145.219 66.7197 li
143.895 66.7197 li
142.886 66.7197 142.195 66.5327 141.821 66.1582 cv
141.446 65.7842 141.259 65.1074 141.259 64.1279 cv
141.259 59.8511 li
140.309 59.8511 li
140.309 58.8433 li
141.259 58.8433 li
141.259 56.6113 li
142.555 56.6113 li
142.555 56.6113 li
cp
ef
89.2798 82.5068 mo
109.44 82.5068 li
0 0.501961 0 rgb
@
132.768 81.2354 mo
133.085 80.6592 133.474 80.2417 133.92 79.9536 cv
134.366 79.6797 134.899 79.5361 135.519 79.5361 cv
136.325 79.5361 136.958 79.8242 137.405 80.3999 cv
137.851 80.9761 138.082 81.7969 138.082 82.8481 cv
138.082 87.6001 li
136.786 87.6001 li
136.786 82.8911 li
136.786 82.1426 136.642 81.5806 136.382 81.2065 cv
136.109 80.8462 135.706 80.6592 135.158 80.6592 cv
134.481 80.6592 133.949 80.8896 133.56 81.3359 cv
133.171 81.7822 132.984 82.3872 132.984 83.1504 cv
132.984 87.6001 li
131.688 87.6001 li
131.688 82.8911 li
131.688 82.1426 131.544 81.5806 131.285 81.2065 cv
131.011 80.8462 130.594 80.6592 130.046 80.6592 cv
129.384 80.6592 128.851 80.8896 128.462 81.3359 cv
128.074 81.7822 127.886 82.3872 127.886 83.1504 cv
127.886 87.6001 li
126.59 87.6001 li
126.59 79.7231 li
127.886 79.7231 li
127.886 80.9473 li
128.174 80.4717 128.534 80.1118 128.952 79.8818 cv
129.355 79.6514 129.845 79.5361 130.421 79.5361 cv
130.997 79.5361 131.472 79.6797 131.875 79.9678 cv
132.278 80.2559 132.566 80.688 132.768 81.2354 cv
132.768 81.2354 li
cp
0 0 0 rgb
ef
140.554 76.6563 mo
141.85 76.6563 li
141.85 78.2974 li
140.554 78.2974 li
140.554 76.6563 li
140.554 76.6563 li
cp
140.554 79.7231 mo
141.85 79.7231 li
141.85 87.6001 li
140.554 87.6001 li
140.554 79.7231 li
ef
150.307 80.0254 mo
150.307 81.2354 li
149.933 81.0337 149.573 80.8896 149.198 80.7886 cv
148.824 80.688 148.464 80.6304 148.09 80.6304 cv
147.254 80.6304 146.592 80.9038 146.131 81.4365 cv
145.67 81.9697 145.44 82.7183 145.44 83.6689 cv
145.44 84.6338 145.67 85.3823 146.131 85.915 cv
146.592 86.4482 147.254 86.707 148.09 86.707 cv
148.464 86.707 148.824 86.6641 149.198 86.563 cv
149.573 86.4624 149.933 86.3037 150.307 86.1025 cv
150.307 87.2974 li
149.933 87.4702 149.559 87.6001 149.184 87.6719 cv
148.795 87.7441 148.377 87.7871 147.946 87.7871 cv
146.765 87.7871 145.814 87.4272 145.123 86.6782 cv
144.417 85.9438 144.072 84.936 144.072 83.6689 cv
144.072 82.3872 144.417 81.3789 145.123 80.6445 cv
145.829 79.9102 146.793 79.5361 148.032 79.5361 cv
148.435 79.5361 148.824 79.5791 149.198 79.6655 cv
149.573 79.752 149.947 79.8672 150.307 80.0254 cv
150.307 80.0254 li
cp
ef
157.997 82.9629 mo
157.982 82.2578 157.781 81.6958 157.406 81.2642 cv
157.018 80.8462 156.499 80.6304 155.866 80.6304 cv
155.146 80.6304 154.569 80.8462 154.138 81.2495 cv
153.706 81.6528 153.446 82.2285 153.389 82.9629 cv
157.997 82.9629 li
157.997 82.9629 li
cp
159.293 83.3374 mo
159.293 83.9712 li
153.346 83.9712 li
153.403 84.8638 153.663 85.5552 154.152 86.0161 cv
154.627 86.4766 155.29 86.707 156.154 86.707 cv
156.643 86.707 157.133 86.6494 157.594 86.5342 cv
158.054 86.4189 158.53 86.2319 158.99 85.9727 cv
158.99 87.1968 li
158.53 87.3984 158.054 87.5566 157.565 87.6431 cv
157.075 87.7295 156.571 87.7871 156.082 87.7871 cv
154.814 87.7871 153.821 87.4272 153.086 86.707 cv
152.352 85.9873 151.992 84.9937 151.992 83.7407 cv
151.992 82.459 152.337 81.4365 153.029 80.6738 cv
153.72 79.9248 154.67 79.5361 155.851 79.5361 cv
156.917 79.5361 157.752 79.8818 158.371 80.5586 cv
158.976 81.2495 159.293 82.1709 159.293 83.3374 cv
ef
89.2798 103.254 mo
109.44 103.254 li
1 0 0 rgb
@
127.915 98.1313 mo
127.915 100.363 li
130.579 100.363 li
130.579 101.371 li
127.915 101.371 li
127.915 105.648 li
127.915 106.296 128.001 106.713 128.174 106.886 cv
128.347 107.074 128.707 107.16 129.254 107.16 cv
130.579 107.16 li
130.579 108.24 li
129.254 108.24 li
128.247 108.24 127.555 108.053 127.181 107.678 cv
126.807 107.304 126.619 106.627 126.619 105.648 cv
126.619 101.371 li
125.669 101.371 li
125.669 100.363 li
126.619 100.363 li
126.619 98.1313 li
127.915 98.1313 li
127.915 98.1313 li
cp
0 0 0 rgb
ef
136.718 101.573 mo
136.574 101.486 136.416 101.429 136.243 101.386 cv
136.07 101.357 135.883 101.328 135.682 101.328 cv
134.947 101.328 134.386 101.573 133.997 102.048 cv
133.594 102.523 133.406 103.2 133.406 104.093 cv
133.406 108.24 li
132.11 108.24 li
132.11 100.363 li
133.406 100.363 li
133.406 101.587 li
133.666 101.112 134.025 100.752 134.458 100.521 cv
134.89 100.291 135.422 100.176 136.056 100.176 cv
136.143 100.176 136.243 100.19 136.358 100.19 cv
136.459 100.205 136.574 100.219 136.718 100.248 cv
136.718 101.573 li
136.718 101.573 li
cp
ef
144.317 103.747 mo
144.317 108.24 li
143.021 108.24 li
143.021 107.045 li
142.718 107.534 142.344 107.88 141.912 108.096 cv
141.48 108.312 140.933 108.427 140.299 108.427 cv
139.493 108.427 138.845 108.211 138.37 107.765 cv
137.895 107.318 137.664 106.713 137.664 105.95 cv
137.664 105.072 137.952 104.41 138.557 103.949 cv
139.147 103.502 140.025 103.272 141.207 103.272 cv
143.021 103.272 li
143.021 103.143 li
143.021 102.552 142.819 102.091 142.43 101.76 cv
142.042 101.443 141.495 101.271 140.789 101.271 cv
140.328 101.271 139.896 101.328 139.464 101.443 cv
139.032 101.559 138.629 101.717 138.24 101.918 cv
138.24 100.723 li
138.701 100.55 139.162 100.406 139.608 100.32 cv
140.054 100.233 140.486 100.176 140.918 100.176 cv
142.056 100.176 142.906 100.479 143.467 101.069 cv
144.029 101.659 144.317 102.552 144.317 103.747 cv
144.317 103.747 li
cp
141.739 104.28 mo
140.688 104.28 139.968 104.41 139.565 104.64 cv
139.162 104.885 138.96 105.288 138.96 105.864 cv
138.96 106.325 139.104 106.699 139.406 106.958 cv
139.709 107.232 140.126 107.361 140.645 107.361 cv
141.365 107.361 141.941 107.117 142.373 106.598 cv
142.805 106.094 143.021 105.417 143.021 104.568 cv
143.021 104.28 li
141.739 104.28 li
ef
153.585 103.488 mo
153.585 108.24 li
152.29 108.24 li
152.29 103.531 li
152.29 102.782 152.131 102.235 151.843 101.861 cv
151.555 101.486 151.123 101.299 150.547 101.299 cv
149.842 101.299 149.294 101.53 148.891 101.976 cv
148.488 102.422 148.286 103.027 148.286 103.791 cv
148.286 108.24 li
146.99 108.24 li
146.99 100.363 li
148.286 100.363 li
148.286 101.587 li
148.589 101.126 148.949 100.767 149.381 100.536 cv
149.798 100.306 150.288 100.176 150.835 100.176 cv
151.728 100.176 152.419 100.464 152.88 101.025 cv
153.341 101.587 153.585 102.408 153.585 103.488 cv
153.585 103.488 li
cp
ef
161.179 100.594 mo
161.179 101.817 li
160.805 101.645 160.43 101.501 160.042 101.4 cv
159.638 101.313 159.235 101.256 158.817 101.256 cv
158.169 101.256 157.68 101.357 157.363 101.559 cv
157.046 101.76 156.888 102.048 156.888 102.437 cv
156.888 102.739 157.003 102.97 157.233 103.143 cv
157.464 103.315 157.925 103.488 158.616 103.632 cv
159.063 103.733 li
159.984 103.935 160.632 104.222 161.021 104.568 cv
161.395 104.928 161.597 105.432 161.597 106.065 cv
161.597 106.8 161.309 107.376 160.733 107.793 cv
160.157 108.226 159.351 108.427 158.342 108.427 cv
157.91 108.427 157.479 108.384 157.018 108.312 cv
156.557 108.24 156.082 108.125 155.578 107.952 cv
155.578 106.613 li
156.053 106.872 156.528 107.059 156.989 107.174 cv
157.45 107.304 157.91 107.361 158.371 107.361 cv
158.976 107.361 159.451 107.261 159.782 107.059 cv
160.099 106.857 160.272 106.555 160.272 106.167 cv
160.272 105.821 160.143 105.547 159.912 105.36 cv
159.682 105.173 159.163 104.985 158.357 104.813 cv
157.91 104.712 li
157.104 104.539 156.514 104.28 156.168 103.935 cv
155.808 103.589 155.635 103.114 155.635 102.494 cv
155.635 101.76 155.895 101.184 156.413 100.781 cv
156.931 100.377 157.68 100.176 158.659 100.176 cv
159.134 100.176 159.581 100.219 160.013 100.291 cv
160.43 100.363 160.819 100.464 161.179 100.594 cv
161.179 100.594 li
cp
ef
170.074 107.261 mo
170.074 108.585 169.771 109.579 169.181 110.242 cv
168.576 110.89 167.669 111.221 166.445 111.221 cv
165.984 111.221 165.566 111.178 165.163 111.12 cv
164.76 111.048 164.357 110.947 163.982 110.803 cv
163.982 109.55 li
164.357 109.752 164.731 109.896 165.105 109.997 cv
165.48 110.098 165.854 110.155 166.243 110.155 cv
167.079 110.155 167.712 109.925 168.144 109.493 cv
168.562 109.046 168.777 108.384 168.777 107.491 cv
168.777 106.857 li
168.504 107.318 168.158 107.664 167.741 107.895 cv
167.323 108.125 166.833 108.24 166.258 108.24 cv
165.278 108.24 164.501 107.88 163.91 107.146 cv
163.32 106.411 163.032 105.432 163.032 104.208 cv
163.032 102.999 163.32 102.019 163.91 101.285 cv
164.501 100.55 165.278 100.176 166.258 100.176 cv
166.833 100.176 167.323 100.291 167.741 100.521 cv
168.158 100.752 168.504 101.098 168.777 101.559 cv
168.777 100.363 li
170.074 100.363 li
170.074 107.261 li
170.074 107.261 li
cp
168.777 104.208 mo
168.777 103.286 168.576 102.552 168.202 102.034 cv
167.813 101.515 167.266 101.256 166.574 101.256 cv
165.883 101.256 165.336 101.515 164.947 102.034 cv
164.559 102.552 164.371 103.286 164.371 104.208 cv
164.371 105.144 164.559 105.864 164.947 106.382 cv
165.336 106.901 165.883 107.16 166.574 107.16 cv
167.266 107.16 167.813 106.901 168.202 106.382 cv
168.576 105.864 168.777 105.144 168.777 104.208 cv
ef
178.157 103.603 mo
178.143 102.897 177.941 102.336 177.566 101.904 cv
177.178 101.486 176.659 101.271 176.025 101.271 cv
175.306 101.271 174.729 101.486 174.298 101.89 cv
173.866 102.293 173.606 102.869 173.549 103.603 cv
178.157 103.603 li
178.157 103.603 li
cp
179.453 103.978 mo
179.453 104.611 li
173.505 104.611 li
173.563 105.504 173.822 106.195 174.312 106.656 cv
174.787 107.117 175.45 107.347 176.313 107.347 cv
176.803 107.347 177.293 107.29 177.753 107.174 cv
178.214 107.059 178.689 106.872 179.15 106.613 cv
179.15 107.837 li
178.689 108.039 178.214 108.197 177.725 108.283 cv
177.235 108.37 176.731 108.427 176.242 108.427 cv
174.975 108.427 173.981 108.067 173.247 107.347 cv
172.512 106.627 172.152 105.634 172.152 104.381 cv
172.152 103.099 172.498 102.077 173.189 101.313 cv
173.88 100.565 174.831 100.176 176.011 100.176 cv
177.077 100.176 177.912 100.521 178.531 101.198 cv
179.136 101.89 179.453 102.811 179.453 103.978 cv
ef
188.146 103.488 mo
188.146 108.24 li
186.85 108.24 li
186.85 103.531 li
186.85 102.782 186.691 102.235 186.403 101.861 cv
186.115 101.486 185.683 101.299 185.107 101.299 cv
184.401 101.299 183.854 101.53 183.451 101.976 cv
183.048 102.422 182.846 103.027 182.846 103.791 cv
182.846 108.24 li
181.55 108.24 li
181.55 100.363 li
182.846 100.363 li
182.846 101.587 li
183.149 101.126 183.509 100.767 183.941 100.536 cv
184.358 100.306 184.848 100.176 185.395 100.176 cv
186.288 100.176 186.979 100.464 187.44 101.025 cv
187.901 101.587 188.146 102.408 188.146 103.488 cv
188.146 103.488 li
cp
ef
190.713 97.2959 mo
192.01 97.2959 li
192.01 98.9375 li
190.713 98.9375 li
190.713 97.2959 li
190.713 97.2959 li
cp
190.713 100.363 mo
192.01 100.363 li
192.01 108.24 li
190.713 108.24 li
190.713 100.363 li
ef
200.227 100.666 mo
200.227 101.875 li
199.853 101.674 199.493 101.53 199.118 101.429 cv
198.744 101.328 198.384 101.271 198.01 101.271 cv
197.174 101.271 196.512 101.544 196.051 102.077 cv
195.59 102.609 195.36 103.358 195.36 104.309 cv
195.36 105.273 195.59 106.022 196.051 106.555 cv
196.512 107.088 197.174 107.347 198.01 107.347 cv
198.384 107.347 198.744 107.304 199.118 107.203 cv
199.493 107.103 199.853 106.944 200.227 106.742 cv
200.227 107.938 li
199.853 108.11 199.479 108.24 199.104 108.312 cv
198.715 108.384 198.298 108.427 197.866 108.427 cv
196.685 108.427 195.734 108.067 195.043 107.318 cv
194.337 106.584 193.992 105.576 193.992 104.309 cv
193.992 103.027 194.337 102.019 195.043 101.285 cv
195.749 100.55 196.713 100.176 197.952 100.176 cv
198.355 100.176 198.744 100.219 199.118 100.306 cv
199.493 100.392 199.867 100.507 200.227 100.666 cv
200.227 100.666 li
cp
ef
89.2798 124.001 mo
109.44 124.001 li
0 0.74902 0.74902 rgb
@
126.59 118.176 mo
127.886 118.176 li
127.886 124.642 li
131.746 121.243 li
133.401 121.243 li
129.226 124.93 li
133.574 129.12 li
131.89 129.12 li
127.886 125.275 li
127.886 129.12 li
126.59 129.12 li
126.59 118.176 li
126.59 118.176 li
cp
0 0 0 rgb
ef
141.585 124.368 mo
141.585 129.12 li
140.29 129.12 li
140.29 124.411 li
140.29 123.662 140.131 123.115 139.843 122.741 cv
139.555 122.366 139.123 122.179 138.547 122.179 cv
137.842 122.179 137.294 122.41 136.891 122.856 cv
136.488 123.302 136.287 123.907 136.287 124.67 cv
136.287 129.12 li
134.99 129.12 li
134.99 121.243 li
136.287 121.243 li
136.287 122.467 li
136.589 122.006 136.949 121.646 137.381 121.416 cv
137.798 121.186 138.288 121.056 138.835 121.056 cv
139.728 121.056 140.419 121.344 140.88 121.906 cv
141.341 122.467 141.585 123.288 141.585 124.368 cv
141.585 124.368 li
cp
ef
147.207 121.056 mo
148.33 121.056 149.208 121.43 149.856 122.15 cv
150.49 122.885 150.821 123.893 150.821 125.189 cv
150.821 126.485 150.49 127.493 149.856 128.213 cv
149.208 128.947 148.33 129.307 147.207 129.307 cv
146.069 129.307 145.176 128.947 144.542 128.213 cv
143.909 127.493 143.592 126.485 143.592 125.189 cv
143.592 123.893 143.909 122.885 144.542 122.15 cv
145.176 121.43 146.069 121.056 147.207 121.056 cv
147.207 121.056 li
cp
147.207 122.15 mo
146.515 122.15 145.968 122.424 145.565 122.971 cv
145.162 123.519 144.96 124.253 144.96 125.189 cv
144.96 126.139 145.147 126.874 145.55 127.421 cv
145.954 127.968 146.501 128.227 147.207 128.227 cv
147.897 128.227 148.445 127.968 148.848 127.421 cv
149.251 126.874 149.453 126.139 149.453 125.189 cv
149.453 124.267 149.251 123.519 148.848 122.971 cv
148.445 122.424 147.897 122.15 147.207 122.15 cv
ef
158.467 121.545 mo
158.467 122.755 li
158.093 122.554 157.733 122.41 157.358 122.309 cv
156.984 122.208 156.624 122.15 156.25 122.15 cv
155.415 122.15 154.752 122.424 154.291 122.957 cv
153.831 123.49 153.6 124.238 153.6 125.189 cv
153.6 126.153 153.831 126.902 154.291 127.435 cv
154.752 127.968 155.415 128.227 156.25 128.227 cv
156.624 128.227 156.984 128.184 157.358 128.083 cv
157.733 127.982 158.093 127.824 158.467 127.623 cv
158.467 128.817 li
158.093 128.99 157.718 129.12 157.344 129.192 cv
156.955 129.264 156.538 129.307 156.105 129.307 cv
154.925 129.307 153.975 128.947 153.283 128.198 cv
152.578 127.464 152.232 126.456 152.232 125.189 cv
152.232 123.907 152.578 122.899 153.283 122.165 cv
153.989 121.43 154.954 121.056 156.192 121.056 cv
156.595 121.056 156.984 121.099 157.358 121.186 cv
157.733 121.272 158.107 121.387 158.467 121.545 cv
158.467 121.545 li
cp
ef
160.67 118.176 mo
161.966 118.176 li
161.966 124.642 li
165.826 121.243 li
167.481 121.243 li
163.306 124.93 li
167.654 129.12 li
165.97 129.12 li
161.966 125.275 li
161.966 129.12 li
160.67 129.12 li
160.67 118.176 li
160.67 118.176 li
cp
ef
171.687 121.056 mo
172.81 121.056 173.688 121.43 174.336 122.15 cv
174.97 122.885 175.301 123.893 175.301 125.189 cv
175.301 126.485 174.97 127.493 174.336 128.213 cv
173.688 128.947 172.81 129.307 171.687 129.307 cv
170.549 129.307 169.656 128.947 169.022 128.213 cv
168.389 127.493 168.072 126.485 168.072 125.189 cv
168.072 123.893 168.389 122.885 169.022 122.15 cv
169.656 121.43 170.549 121.056 171.687 121.056 cv
171.687 121.056 li
cp
171.687 122.15 mo
170.995 122.15 170.448 122.424 170.045 122.971 cv
169.642 123.519 169.44 124.253 169.44 125.189 cv
169.44 126.139 169.627 126.874 170.03 127.421 cv
170.434 127.968 170.981 128.227 171.687 128.227 cv
172.377 128.227 172.925 127.968 173.328 127.421 cv
173.731 126.874 173.933 126.139 173.933 125.189 cv
173.933 124.267 173.731 123.519 173.328 122.971 cv
172.925 122.424 172.377 122.15 171.687 122.15 cv
ef
177.144 126.01 mo
177.144 121.243 li
178.44 121.243 li
178.44 125.966 li
178.44 126.715 178.584 127.262 178.872 127.637 cv
179.16 128.011 179.592 128.198 180.183 128.198 cv
180.874 128.198 181.435 127.982 181.838 127.536 cv
182.242 127.089 182.443 126.485 182.443 125.707 cv
182.443 121.243 li
183.739 121.243 li
183.739 129.12 li
182.443 129.12 li
182.443 127.91 li
182.126 128.4 181.752 128.746 181.349 128.976 cv
180.931 129.192 180.456 129.307 179.909 129.307 cv
179.001 129.307 178.311 129.034 177.85 128.472 cv
177.375 127.925 177.144 127.104 177.144 126.01 cv
177.144 126.01 li
cp
ef
187.675 119.011 mo
187.675 121.243 li
190.339 121.243 li
190.339 122.251 li
187.675 122.251 li
187.675 126.528 li
187.675 127.176 187.762 127.594 187.935 127.767 cv
188.107 127.954 188.467 128.04 189.015 128.04 cv
190.339 128.04 li
190.339 129.12 li
189.015 129.12 li
188.006 129.12 187.315 128.933 186.941 128.559 cv
186.566 128.184 186.379 127.507 186.379 126.528 cv
186.379 122.251 li
185.429 122.251 li
185.429 121.243 li
186.379 121.243 li
186.379 119.011 li
187.675 119.011 li
187.675 119.011 li
cp
ef
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 75 /K putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 104 /h putdup 105 /i putdup 107 /k putdup 110 /n putdup 111 /o putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/K <1C60D8A8C9B79D2DFFE43841A70974C488289A3FDB0CBC62C7FBB8CDC8C30C59CB3585B4E609BAE0DA114BF5A7F3C4AE09FD4E66CCEB1583EF9D5A7360C1994188D5C7242A> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624097F1B5D47BF4F384727F53BA1763156DBDB0266> |-/d <1C60D8A8C9B7E7C1D82219353B31AE497773900CFE039E7C34F7CEBE101056958EFFC2C789CCBD8768CC683564B6074DAAAE648B50C88AD4C58AC712C8476BA68C74E592EF7E71792F9E5367AB3C80F9D183D28DD5E961AA14DCB5D9206768FB9E099DA642A8BAA73D52C56C9913DC619FDF3F90996DC8D242E6BF94BEBE752CB2F5D6196384CDD6E5AC10AFB49712810FFD82A2782B9B182DA37A23E6043872EFC1C407DD53136E> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/h <1C60D8A8C9B790A816BA887E1DA4852044FABD5C80CA3A9E2E9C1F200BD200369E1A531F52CE66B5B19C492F0751A1C2858510B2E2690FB789B214E0E0C6537C1C71B0F5B79BE42FC591254AEEEA9BA5BA2F0A43A49AB11B4C> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/k <1C60D8A8C9B746F4FCFA28E242EA979943B301877051CD8A73D26CF9327FF61FDBFBD8D5E47777F54E7AF76DDD4C35288F1FDE6342A197F7E1746F9F08E1E2F6A013F2F56A027205F5576546> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/q <1C60D8A8C9B7E897EED043C74253B54ADD4A83B5A401EE275FD05305D443701C0B5FB5FFB629FD564139466A0D21B941D95638CDD0441A0BA219E67025CA58D717F5105065C6C534C87A1E9460A7EB934679C52896D0325C4745FC1FA2E19A833C7512C47FAFC1F455DA264B132201332D7965A6000B61991E83CF8296E65C72578347B3415411104B5B8018A71A688EDD6AFDB9028F3C25C58A0C2F46C8DD14D67E4428A4> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F89019F8CCCB6FE3AF5C57> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BWBVFW+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/BWBVFW+MyriadPro-Regular*1 [75{/.notdef}rp /K 22{/.notdef}rp /b /c /d /e 2{/.notdef}rp /h /i /.notdef /k 2{/.notdef}rp /n /o /.notdef /q /r /s /t /u 138{/.notdef}rp]BWBVFW+MyriadPro-Regular nfBWBVFW+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf314 430 mo(Knockout)[6.62402 6.66016 6.58789 5.37598 5.62793 6.58789 6.61133 0 ]xsh314 444.4 mo(technique)[3.90039 6.01172 5.37598 6.65918 6.66016 2.80859 6.75586 6.61133 0 ]xsh314 458.8 mo(described)[6.76758 6.0127 4.75195 5.37598 3.97168 2.80762 6.82813 6.01172 0 ]xsh2 lw
0 lc
0 lj
4 ml
474.5 420.137 mo
474.5 399 li
@
473.475 396.639 mo
472.976 398.291 472.516 399.366 471.983 400.692 cv
477.027 400.692 li
476.803 400.218 476.035 398.291 475.536 396.639 cv
475.002 394.869 474.636 393.264 474.506 392.224 cv
474.375 393.264 474.01 394.869 473.475 396.639 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBWBVFW+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B896187A> |-/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F8457D1A44289B0DB31B4E1DC1F3487A85D6C086A5A13FB7D7B66A3F61EF4969C1AE080F7AF6D145220EBF9A7BF4151121C2FA015E52FB7E43B5305D938D71B0B61429953BBCCA81012B7A0E4> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/f <1C60D8A8C9B8469EE0EEFD5AEC6CA97A72064EDB5F8138E6D1529C05D71AD800DE9767801FDF34CB86E1E21FD9D405698D46905E6F519DDB7CBC96570BA09B7E74CE45A9784C89ACE8876894AF309C859106C75B1212CD> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CEF7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFBBE8C69D79181> |-/w <1C60D8A8C9B615D1D39C3ADF830FB08A1A35A87DCFD157E58FABDD21BA80846DED508D58D627D5468CDEA878B4EBB2BC39F9E17357A3B538845D213A53BE481E0D6B92FA11EAB84DAA099CD1E52DEE6734C0A900F3A37F8B6CBD74174B2BAF5100CBE402299FC69ADD471E1494375657D0074EB17A39D5C9C17257D613AB99E3> |-/z <1C60D8A8C9B76F05D40D9AF06C62C52F8E7A83C69F6CDC031056F31E455ADB43C89D34E1A28A8E500535BCBC2826CEC41780F6E88D88BBC16CBA809407E19164AA6CDC22FB> |-systemdict /gcheck known {setglobal} if end {end} ifendBWBVFW+MyriadPro-Regular /Encoding getdup 32 /space putdup 78 /N putdup 97 /a putdup 102 /f putdup 108 /l putdup 112 /p putdup 119 /w putdup 122 /z putpop%ADOEndSubsetFont
/BWBVFW+MyriadPro-Regular*1 [32{/.notdef}rp /space 42{/.notdef}rp /K 2{/.notdef}rp /N 18{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i /.notdef /k /l /.notdef /n /o /p /q /r /s /t /u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]BWBVFW+MyriadPro-Regular nfBWBVFW+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf444.5 429 mo(Nobel prize)[7.89551 6.58789 6.82813 6.01172 2.83203 2.54395 6.82813 3.97168 2.80762 5.05273 0 ]xsh444.5 443.4 mo(awarded for)[5.6875 8.78418 5.78418 3.80371 6.76855 6.01172 6.76758 2.54395 3.34863 6.58789 0 ]xsh444.5 457.8 mo(knockout)[5.83203 6.66016 6.58789 5.37598 5.62793 6.58789 6.61133 0 ]xsh444.5 472.2 mo(technique)[3.90039 6.01172 5.37598 6.65918 6.66016 2.80859 6.75586 6.61133 0 ]xsh339 420.437 mo
339 399.3 li
@
337.975 396.938 mo
337.476 398.591 337.016 399.666 336.483 400.992 cv
341.527 400.992 li
341.303 400.518 340.535 398.591 340.036 396.938 cv
339.502 395.169 339.136 393.563 339.006 392.523 cv
338.875 393.563 338.51 395.169 337.975 396.938 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/BWBVFW+MyriadPro-Regular*1 uf/BWBVFW+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Jason Schwarz) ()%%Title: (rodents.eps)%%CreationDate: 8/7/14 11:04 PM%AI9_DataStream%Gb"-6GCLg[c7lb8JFA!j2E3tbi(S7<j#$IgN=E<6A&*b=n%!q\T7*OCh:55DdhpBekLn[ZT5CO0TMe?28L8MU;MFh;<GStu$LN>H%-"U4NC/WKaXJ@HfM,\5nEDc0.<6:T;D$fl-m?bY%^"#@5[U8=5?Er=&GC+,Iinr9eo!nN#:TDOKHF)<(=0g2S^3g2\.d^7YWZM2r%D,b;tIeBH72J?.'6C#_[VpfJ3CZ/:bqtag!dB$F'h9Th#BkJ_CPEj2*T[Bj3$pL<Lh)0`;^gcu!^j"<2^]6k%9T/XL0?lebIKgA7%C\san\;(U=8+QJ]hX:O^!!!mE]@\]kP?ggRjF@"I?u#?1h.j^PDZ.`)NdoPC43_NT:,&V<;H?RC[LL!*c`AHe_SPiDD@dd,VF@,g%BWhBcW;d6%;13/cqX*-$S^L[$L#O<6m9_dN"1,<Z=ADG^V&+br]mJ:Eo][@dq_i;7gof1sXGF6c1oiT33[NJX9e6.?G2MS5+H1Jb%J?pMrcprWNU[$b0XujF5Vr%9t^*_2VR[-rR25s.=YF:\u_amssP#MiFJuL(kSW,"\&dB%nK:VMg9j!!'=Hq9Pj/p^4A$DA^]A5s$%>prWC>4`U35ALQi2ZKIi_NarrHAfTKPZ'\fqgha.^8(l/GR%\m<?$`I"o=Lc,V2]j!3=s+<Vt=SUog+iEj,K2ADuu@&s*7r<#'m%%#6)&Jr*:lE;S[sC^[\;'i_rjR:Fd/r9j8J>ehR[3Af+Xn0X-jO<%>OVgVu:_NHK(4LTPD4CY:Vs_GBqGCDDb0X'!<+`?IJp(9pW2%Jkmm3_naig$9kXmBH%:5KpTYD8#/qc-%E(tM%os/=u[o-NO<_#I&?NRc3So0*Lm`@`d)W!d'bn]r/KTQ7edpLU3NCqj,EIdc5Zdm%.F&7?UtDL'@kF2erl.!a$C:5T6-(L8.2F@un2G2UB25.uYZ'3<kQj1U,@6$%_cf#ar/Eke'r815cfg8F?`\tQj"!g.6JLMtn2Gg6%g!TK5h\:)^_;A?&kD-h:.T.aiGbsH\Ln"Y\E_\iHbp[rRlWB))NT5`<S3i9u;n2&$ZtI*ZZj-PcF`;Mo13%KiRa.?c`VJJ2X@;@m%k=9MYgZ!.QK<n4H3+[0fTpVT";!R1"b\;c0)a[:KL!g%c$biJPmh@g?FZM.o)a_hOK[5XpNj\ZG[!15q5,\E/jHMGL2:FF\\=l&b%a?N;30"9:fM%o,RQa8ZC>hZ+*c0=)]5A]`8&Ee.ZPrY/dF[1aB-F't:%1XnDQ]Ff:V(H7],6.-cQ&7?oV^V1oqj7<22#?&,9E-;9%\kYoR^\".4ddQU2qTlJ2GK\uU>O5]\:S5.Hl+]Q9IWth?Iu..(6qc=MoO#.&^Uo![5KW^kjZ0Iarhf!R^[lC90?d5>MOIj#<=kc'%^ZBj>P.0ocs&Vf>q6$*MMHRgI\mguL;Pg1TneV4i.cOgh$NEFgHDSJC900KsqAoE*gCBQ;>7GpFWpi3M5P06X%"5/9?iSd8Va8YI%12KZt.2R6.37mB/Zo,aa7PFqFOXILD^Iq1Qp;qY/5Q!=EQ=[iAeANI,%oY&/-+=ZUQ-RCHl\qltCIRAkP)=Vi,QkAHa-F"=knSZJ%fTu4Z<SY>'CR$%;BISMQX[1!\[KJWn0fDrcRRq-XAo%uD?]o4Yh#T\9Te8o^ef,RU$`s[b)*7hf;T43b^cs9F*u\sTn-JYPa0lt(%g1K$>n:$5unsPKQ.!5eB5Q:4b9>_j_&r8XI8YhH_n?[`\JkqS-Mc?i=ZiI>2?J$-dF0+SiYOIATo5sLr4r"X0N"-$4)1G14B&Vb"%6u"G,/mU11VbkO;[c-]rJOMI;>Zcq_=W9D+Ui]a\lIZO*q-h>mO)^S_/"@NG<+3,q4Gd1V1;]6>;T1ZMFF>#Jo\n1'ef6Z"6^8"B%K'rF/K.G&6/0^-h`B5/nY-h`eou8BO)s:EqqGerq'H(58*5`93?+A_*cJ#n247nKS[=G.b(OB/Oe%^f0:8stho?%8>H%f(48KO$r%KL6V_8:3glFp,B3/+g$T$68U[HBc*!'^&!I-BWS(2.6njL-gsnLZ+Z(LU2nQPXBFq/9P@Y18X2u8f$Gi@gnbtIu$eV].Jeh84ANT%,gMBWg2M"t&!O/T9<coK7s>I&3amGgGC;=/aN&R7Ve5EX=HRH52^l3%m&.<H3ooVoet>pVJM_1=&0M,dj_J.q3sjSk.!-M%7R!*-%1!1JV+tG0@A&p-`[4_JuktlE1_:`m?^?6nL)K6_?dBJAf*K1m9o-02;8B#Q'Nr&09#B(&$Kgtan;@CqX'eU@mDB_l6N&MX9aBYm5%\6KI[K<?$0Wl3Jaa=2]--%Ti"pm,oqY912JKMi9ZqM8u.r[om>i_l[BG/825NJQWDd;eTS,`Jj`@k4F#Cmf8iht\Q&2,#'f6f=>:%P-P^U1K?&uFb`=iN/M2o('=1Us5,Tb6gaAg1[W*/-^d!3a!J%RcCF<nSee30;OT[.i]hD=UlV3H2(#5?p:>cq<?.F.[m8W<<MqZZ%k.7<hgN,3Y!8/LC5G&r]?ER7t?/6";DlCm[pgN5G`op"7r[T$@#lJAbeO-9@%>+.p0F&-]0_F/$1QCgrkb0,=Cjuu`qB>NYf2!SK%.dhmn)cXAt:a.pNOU[i3LA#BN?a^'@>/FJ6]u9.MoK#]X.jV_\%+?k%$QPX$/U9je0Psl@prDFd5n7N'\](Z\lq,YG\uBp/i#`tD%UMSpPXH\)gf:6!u_\A'3]s>hhTJT15@'oCD&\\TW5Bh;:Ot->uf9sVjA*c>0B^"Z_r`/NL:0S!+Z`1TVA7G&^P>N/D9V6/5.)ia*%UcB:Ne4"3VWkXZr,b-CQnAO/rGZ3[un*T$-Y?2oPU6"3#s*/bf+A2e9\U-Eg8\%knD$)8a.!9UWKhmo1<)eVP(9rQ*+1RXK),KP\%Bs2narE^DoDBL!PJtkCm4%f_bS(+]BkZt$[@!t]?Gdt&N=O70l5!N*R(+DN,;Sr2#$,@']'<<1'kO\,E>:(Y0mAnN-60f-X3F&pK%);c3S6-u*h?<Ul&i/AY9`n'r@m2qrsgqb@rIFEjplEh$`6S5C`D.#DGO=\\UkiZ>37@B4YD%&1TMM!dEc4BYO9;fL`4BYlLP1q5C%+bYfk6QcV)-q6V,!rha.=RM\Ad`8[-@6HdaC.(TKQ:`TbiLAar_)4Y@Co4ZI<glguQUuNn6O_RXAoCQ$J4!P8;ETb9G]25i:>0JP%\f7"Od<6+:kLnY6]YlJ,\^k8J]-b"VD8&3!P0WuQ<'0,((lq1Od5]1OWd.,*Bg,M!3Sn%ZZT.Pg1nlcD./H?1DFJpo'c[[&>8/XH%3'U`A8(^VioC4E4i7:'ukkKjOk(Y.a-Lqu2[-4hh_EDZ\6P\AI]!V.WXrXhbg0,4q=2J2%-f!71H2Q!4"8p)0>[>B[2[;SPZpd`3%1h`f8f&SL^jQ0j%I-8gT5)-Sj\GN`8S&?GC/I41(og2=?]^Z+2a($eWDQS/4#T#IAe?D-k9,L.KJieHu:Fq?[<BthqpWtto*8u/L%pY?B@)t93^P!REV9;62)5DT7C6>d_6M/J5'kRT8?jZ;pP!a]Hi^W4C7R^>Jl]tDS"^>aIa\8SA)4`/"JnN6U!.`D3F<+b&@^s5S&%oS6:rkG6,t""WL*6``<2$2::F<N%mK7Lm,@PZehjPG(#Xe()eL-SmW*T<9a*IX6"Iq3`&$9ejXhM4Yt$pHeFmU""e?gRA#FkoA=o%0KiDj/'LX8cA_W3g!!-s`i4[/HUZ"E4X8;G"C#-+YVLZ61/u``HUL[@T%6Y2?HW&U9JJ&BN=>*c-XJjn&_2#=ku/,(#P5#4QKa.Y%/+G*QV\J<9Y9LL(\2V\n`K^0*nD2B<8u70cXT4?uJ3OdhHE1/TX?q:p]EWZlE("Ne3/$$4'b6!,Z,od:*.6bu"EK^/40CR:MSD/_%;!8KM3&Vip5NCD'KZl]VF2[O#RWLFm$GVp/96uFn.YjDWi#W4Rl&9d7?9&hl'+]s<`"RdRU(EHQCeb[2b(9J<`'$';e4Wj_qlK"/%6ol7\V:&M73pn<$=0Y8IPEIB]knGYR8p?n,\Q-QB/,H6trkpe,*fnN+laE;M2u:bo9V,M?qh%Z'5,$]@Y<fd-mkn9ec$IerEc9e!%?ZceJb2mDuH5E1FEqq=Mc4s^O[77K*c'>=_K75t-dVgsXp"V""QH3>l/ZQ0MQ1UBC^,3DSK?r.]rSP/c>DKYjP0REZkB53.OfQs.%FeNO*C"f692e\b::oE:%Bp%fs\MgSEVKLW[h6p7k9gKZDWWQFIi)WS5##<uXp$Jm<c.)g0H9M!(ps/R/okkFUdAt#iBOL7Rctq;1%\PBPj)!JWqTZ(QO<I8TbQF\>@&pgV??J:sb]8a;oI]hS1f'8mXmRN;Si!brh[JRB.CG&u>SbAN&hL!*gl8/aZcUM^.<oSW/Y.&GD%"+P<"W#kunmab_1crHi@a3UC.hTMRK?[.8SPdAcP#5'$4ZI]"V.p)cF9=+Id4p#ja?E-_5i3[fI[UF02_0?p7;V+.frFZ#9ms_%!%W&L3*%aM`=WP6l'H+Fi<7VqEe3S-_=C"33Z>lBla+bU7P-Cs]\Zqp8;/Z4<1`a90#&-lnZcL79!YMC[6dINsb-BJj8ESr2$89]pG%CBGp-a9+oWF^U__%1.]h[EE4/eR%&4OF2VZrV-#Y#:,JRjTQ8K$_R$T1<L)GAVuq)>.uYQlb6;3T2n"LPtm&4pq0C:N@S2m9'k\t%5-!R6om2Ufd$cT*BD&*Zo\Q_!C=O-;&<s"?7ji?GK@X8748<Vm#CYOJG,tV)H`9?D`/c[1F4CdBJ+Nr;osNie4JY9X6qikM05ZZa%?;!HlKg,eF7,R0^X6#'TdQlP/5NtEU)u220I'*?Ps7(<2T"(*rRIPN"2Urf*Wr=lS2W9RVCU@E!=8ICS*/OA5'gR<#X170a,p?JJ%1*R!UI\YVu2-sX20[WZ/-CsIEgU4j*Lku?.fLLJth-5'joX"Nt9dXCTc[f%\VFo">RB(M(_7pj%[ZrAnS,I)"OYoVM^k)Nb\)-CA%7?arr'57:5o'aofG4RFYs0C9h3d%"Qp^qIo"q-/O^PS-a5-Z0TRKIfAgMIH^qlSIn,#'bT4KJ25PD(@Q>q_CPAb9c$[Xcf$`a<jl%QE<&+RE5AVF>8sU/U@3j#:(ZRAd.V#b<_n1+5P?+$cXoFPD/FtpR_<1DDrU2]T4$d=YVAEqYr@k3$Sl9V_*ejiK74Gs%)s's*rfP%:cj%-GkaM6pL4k\+gQ5L?@i@eGj^MYT8bR-"b]e0D,7n:^G3fmE-A#Nku+9QEe]b?V-1S2)cVjDdCkh1YO1bUJ2U;/DZ*RR[Q=PP%:'k`>ad[%S'@erm'1g=cE!YE8(QIh.%]7o)0Aih$3WZ_i?6M0Z@ut]:g&c7hb+1.^quH\I4S+FU>39q,UYHYShs+s`9XO$t9JPf3%%FRG&4)BK%6bXht!2NX7L<?&d5O6E+gr0(D."@]G'<O*[-mt[:nK$OZdL*?<6Y(7u<ETWCF9roQ7s(Lm[F]X8>BJUAouJHeq:n+"%ZF\CSWBmn_CA72X)U,2:^Snnt?<FDi6X#ID%=5TV86Jlt,pb!O%F`a)R=(*<M^4f`Z>I[!j13D^G\.D4q&@$f^kY-G-2Fa?Q97q!%s,rO&.)!;b@'*Y[L4CD1lcDOM/I\*L0\2Ejb2djmR6r//R!TF0<$8Z3Bh(!JF@9V!$:.Ln!.:D4?hN^G^ZqrM=q(KZ89V6RJ-C38%$^)S>:+%2ELmSnjNO9[\a):c]n+A0uij*3+:oQpU&k7GT#Rb($)'eLT^O>N?"-g]#372/rM`N7=koQcZ"F)?J#:</T5EAh2&PFu^%g93E'DJ>'K-7[(1(G//2O1ROB]"$!P(FG7ps1A7sElZ6'dag'@m\.!KB_Ho^ZK/=]$-F6k+sg"uP*;\rs)4rpWGl:]"A/>QIoN)P%:_SBc'%@YO,A$-XX?1)1"ST1bpsAkY$d#bos-";B3BVX[S/!#'pi,7!ocrZq>_8Y`Op^+"4_0C5U0BEso7+#Skf?gBdQ)rF-UUe8%cXVub#Kji#!f>t3gZ,&mG-)h\E'9WgpF"VZ[JDAOHel[tR"%8p?Dn2N?N#ANM^e9Oe9ZBFZa<qTd5hUJ-N#=llMo\>e#2Ga<q#R^%C:CY^]EYtU)BtcQIoVs??5Le3+n]$SVmI@pV!%RI^D&cU%?g]Aa$:+WnZq"9+_V^P+gLa`Is6pGZ\<r]cEGoMq5Dp)b`15Eddg0n%HT?-?Z.?<[I;[Wr&H9b9r85HVCOa<8FfbFHVIH(PbFmI*J,XX<ffqu^CV;3t5e-!.k_Mlls#=?c/H:>fq0rL5p0Rdl5Bo-d0=*sJ%fm*>M/rO:Y*/@8Z\_RKVG#WtYe!F=X=lnU#s':I4)lf`TK/[V@s(^'[mr;s[.fOXiUmZO0Ohb9B0rt%0*eqY%(9dPkS_'lUg@D16%rB$=Dq/9&_^Ro2XAH%TFRD8blm/'3/?+(!oQTBC2dslf+L[F?@%Dlbk?`el#1asF<KQ,/cR,]>"3=1s6RfIb"P-=Ku7.kH'e#iB0%h7r6sp0[K1#JD4<fVFT5m6Mi3'U&Fk^INDEdVO#g05]2_s..(6N-6^`h`]tCAsHqa].JH=]2]:(=T,<"dVj>ncdcX8ohlkQ5Yc>n%,TFET^)S[!N1NCWk",br4f.t&4*b*"]dGI(hi7XI7p",e"'&n++"]08@1LC<H9?dZ<QW_cl(Hpb$IRZK\ut>DSF'jpgOF*B]/;ic%'4r]rr1#)JTj#38D=oqi+Ld]P!JEoofk^M`*j\L%F_AVXMPaM7FVS?[O]BHd[`bfJOha"8A^<]5EE`>B[$`Js)ZArBUY4l2mAq3R%,<>#`n46Y^nu18g)cY_[ag6/G0:dS?;%:7&SSG:hUP-s.n&#B/YLDq:C/p`47b&hm\QYnnAX`uVJQ[.:2U:b=o7MMHTpT6i\!*@t%#M>a%p`),k/euL%(hDXerjZ9M$pFjc6P&rlX767sKZf])A5sTb,T,tt:B\Lt'0Q1V*;U0G4R6W->A[FI,o\E[3nc`;Fr:=a!2u%`%Cde=O;@BI.6jZk(''_fJ:o6m8Zms%Em[=KPJgbFtnq5NM`?5d](`q4*J`>_[dBet!jg3./l$,T(*VTi9-_A9:\:b7fj*E]i7gMW%%E8=G>TJ&_7/`MXgMiB8kI5JCF;l-TccZKB\l*eSnc+0iTY1)WI)u(>kCtI4'9jNUY9C3n+TFku=Bg66Goj6[\<V>]'_gT7,Vsj$)%f3Z-TWnP48eH1LP%/%i/\WIW]YDm-W7_NR*\^CGYG+u%c3o/cnF/\e*Z^ZAW[m0rc;/f!TMDZD?nVf-sN2YL5A_UK9Y3Li%U#ISA%_L&ol+1>O1e06Y^`"M(.!+E4fahGfspK'=jS[Zq+/807#[]jTr4Y3Oe)Gp1(]:*`n^lnB\Cmi,&<V/PVa/ZQD.uFDE;@WlD!t<Uk%]s^F1lO%9_,H?oDm((j;73Ipr"I.GP^a*%k+,sR:hsSFc.gUtK[7)fYKN?-djIR1Q(mQ,?A(26dN_t.fE-lHpZaFDCqq>pV0lEnU%`BCnmENP?rgrk:G6Ue`n<J;H$W91iVfre\lO<#[Hk$&f["SJ,rnea=uor,,.hIF%Gm<Q6D%`13)`f6Ho07;iIcR_$/?9\CLP'q5e%G5o84NBfI>,ue-&%uYRFoTYrpN?#MU$:;S96YhP8W-#$<$IY`9I/Z31l8JW.BHs>g[!0dNL^hcWT#*D?\qc&r&W)d/FVRQ4ikFT,%/T:slK[up,L@3g[m/uYO,oFe@[7CE3mqZIILolJ6l82lINZ_.rkG?^e67LFK2k#a9*\-E$4ME2;%[!ohG)S&?N^4dd!TmOJ^cK0F%1S9pN/@_/A^Zs&L0'\![KF2FhoP<"7WYio=6Bm)-er$WZPYp@>3QT#EO5flH>/TET#l2uDd`IbKArqTI@aX4l#nrlS7YKb,(##4F%#^(\tkXA19<2^8G0m%igUD]F+lTsh_Q9ZS#X0!.]#InC&:p!Sm(hC3NV<P&IAN"g4Ig5MHg'?U4OM8@f4aY6qs&,R7,$T\mkpsS;%@>[I*HOr>[E`%7oRn]?8jfuIRqX=*HHp]'G4Puf$+;:6LqX,9@C"'%)k*iF)5]u'8gXq03S's^4U5_TCXW(9hdHT4&*uB5no"8iQ%:#$khUhHn1(t)sM.R(')OGbC2ig7Ms\Kd*<]n9I<(mcpnfP9:f((%&74rPHGrE9g0%p$RnWG\o""%VQ>=;/fbg91`iqk3nH1%57I%"[(6/qp;i:4C^=#di2&<j3TJI6lpiDaC2V]Jlp6((AIPT]i7L*`*Se>oI"^*qt`<#jd(soQFGcK.Xk:&NUo$XH#W2!+qN8Tm2u9n%l.+YhfUKM*XHm1h].N3FZFkHk][(-<^!2tqgu:aH27'sgYq_G&q.\0V]Jncrdqa,=H*DHPZZ:FtRTYo9'e-V;QR9W91W@SKel-n8%!*nbUgHL&>;@Ae*)*a,,T,Xh,Q*tt58i?@B[.dZU-;r[ff&h%&V/p[]F(k<VXM'U_Co.)/].S:LIS-H/Q+J-'c2?^^]Tb?ZC_V$k%I(?buF91DB).D!j'?[=Fp,l`!W7"PHgKj:HJ3d60V4;^#Vr9tnZRYohj`gT36)lNXAE6[ug[6_o[fLn]KB95kR0>?cZ7_u7Cp%F<%C=_#5+8EG%K[t>nn":3I?cN]?_1V0E^\,#5hq>e2J'X`,,uVHch*I%?iGL,id#FH8[jS)b_1S?$&)++j[c@pe8@cY3(0?Mt6O))u%e()FLEq#aUh5sY=QAu%PSZUD#6u(SkaIECX<N>u,.>81Fbb`T;oD,UVT;:;RT3(HR0Ge0Mh:8(8rTENa+G(^7<"1bLg#A_:^$9pY%=X/P#/O#N7CO-5Mr(B%0_-o.;X.$`R2NNd>0W<PD,,O09Q-_hik36^>*Rpor3c)5$HQdMP12,dgBIt-;i1Rd]0/[Rm4ht1sriR8(%f8\I*Dp_hR"qB9,4NXQrHMd\Cd%F:U/oS:Q_C48@S\Mi*Xp5K;h>NKd^\08]B0'8]Xf"@'f9\dU-;r:[b2=OUY/]7+rGC^SA>V/n%DQe+>O+T%oU%c4*Zu,6T*5eF]-^!uGouJ]>YsIhZe%S,-bG1,63b\?JUZ.^+cQ296^8qPKRRm*`pV(t9a5"3kL@l('][UeO%_D9%%=NlO/HCp<PfBPLS.+4In_2#'%LUHtN5B+uma6iQH5u/Qq%LPLSU?'qoMph:XXVHZMfqZ*ojkFk$$68^788a1mHF96sD3@0uWIVN#%9%P)+-Y1Tkbk:FoVgREq2quYO6%ab_`aKr2oDP-i"@$SJYL=S]i'C.6hu;Ds2O4CLrRK5cP<j2<)4p0Wg%*!sfUruDnbd/IGgOp1%9_Ua./,BI(;96!'5H@6ZJuu_SRhP%B%U,Fjms:C6]0!O5f5T*u+f78j>L33gHp.U5eeU0Urjb3E?-KW@5O9]R:9u&`TBKf^AT966%k8cD6mCaOaiLm7>TJ-]d&4bEALH2+2KC8Ad7,^MfVLrcab:>dKcK$LRMfd<QrNu_<H8AXGl[,*+0FA5X)]"-/nu?uBn-90"%/ba$%)qu5gkh:=544CmD6>Bq]%'"2P*?C8.E>1Ic\bhutI"-m'8j`kJYnq"jqrdi1W%oWh]D:X@eT+:<#_#s]5UPAo*BbAF4s*a:2Pg;,%jaP;"`@\XS4.?V($7eqUR7S.U9DC>7_X'Fp%'q]Bj7=G"RGE5Yn?"8*Brc$@rn>hL:S$%nlh;uVl_bWUH@K@8kObX!*qH\QI^jk]%f*d%R./cc6Ng?%)6-+--nRQ9JYScs'nF^VB]Nu%pC7Y9eq+drk"CUReRWm>'Fnhr@E)jS)DhU=087*/lDK^D'*K2!RQ>YisNC$2%%]p6X4n`(efl#FH.B/?;pJtJW>^lJ>jpK1`3H%,YR;si\2OJe^XmF@9/(&[^lf9pVU?);B?0_T;HhP'ArerO1i>TO)3XkkOsZR]W6%$tJtbP=g>uZl\$!<VlC&ph,(7n7h1M]QTj;3S=mgg?icASgRG$c?VI1ca1O8Q,<ObH/TF/%LJhHrpd<Ro4tTFpiQ#4Q<m1#bWM#c%6PtI=S!g+DS#*.>HE37_kVs>bLBsk2HZ/loO^?Jmdok'Qc-.<Z9XH?_Q4DO.R?c4>c-4?'Dm1`6CHlFZpR)&23^`eN34!r+#eJCM%LImtPD72Y/R`c^,Si^u\fP3!i3I3b0`X]8:?8nB_kAlR,k6u$KZXkh7EaH<0SQ-FacW6I=1Z&tWi2o!S`W*b%20PSS00[=&?Q<+i%4G45+>PYrN3iH",(oJO0)KT:4[FFk>G?E1aGJ>@,h4;s2#Mn5'hDp4gW*K\H>'k<t`o)CY]%cj$pm3t=Fu_4MpO)-j(pp`U0]roQ%UT?DX:>B9+#Y&Rp":qNgh1ZA#>BuDp>j38pfFB'WJi*kC_fOJ'e^-TZ)rHq36K^rtP0cKl+1V_Gmts1TeLnLUh-]ZRWk8DE"rX"[%@LI02W5Yc\3`l(GIRq`:e'49tot#drO-Cb=E6aKNHofpRYqECi8M:n6]b=$:n>V6?h`a=7a/m2K];HHqj5UmJCKhG,2oIq6G,;Wf%+nF+8!f4n9q]^[)H;OZ-f@jH"FR=k@CBVNkEpr[!$@g;\""a9'>g1q)nD'AkV8Ai3<`3WJY1VL_.]7r,+;nI5RlRd-b%D)h]F(.2%j1>;QV#rlG,/93V4GF&mm*qFhBmK#Ih%L>Ji-k@b%)+@Pc8A]Jit6_H#HHqhap1hI0t4SXISkJjIgtY],o*?e[b+LWBJ:@hjO]*!%P6]<M><Y.VRU76bcB.t(hNiaocs8kYqteA'W:a@TB(U]K&CT5#$j#)TV.aDY?bbF?(<g>@A4:T`*DYsX<"*ekOX7[nIbi#?/=3LZ%N/<eLQE0V8HXgJJ%.?3COse9IF"\I#M'up17*j[]b:e1a&&jPgJ2;PUkXhR>Y/]q9>lN:.Fh1D%&\*1t^m),iXt2f-p*8N>Z@)n+%h2>%[+l&@1Jj'SUgYlD*$([MG^OCDaf$q@E(e+,8gh9Y?:`]rG7&j<1YM<9;2!13+AqA/U=H)+=FM-AHL^Ac+R.<Tnl]Ek2)g^^Q%Wh3i=]Xk\a9O#+>?N_s@5P]Y^H!O)C%,7W)*MQ[K.![hIZXWVl7VBPC!S;UEYZoFGgWt)ofqY_fHl(%MKT`ANVc(T>Y*<#O0=Fo%%/!qlZe_-VW6qte8T_OF:6/ofmTT/7'YoH@T\bGggV@P:Ga_P6,O==O/iMV)84NWjT3^=)E08\jCC$W\%pm)%d?ZdT)D-YJpMu))Z%@O5Pp)Po69BX,#3Q)_^0PXpeE^)tp6I-iAMpAt'PR:p-ir,O#JZ=bEU8f+'9.NOKB4r4FO%cdMt.i>;70d6ER=H(c*4Y&KaV2N*;%?"^393@.JL=`(EINeT'HMVHf4]-@Y8c^?cW/<&`3T;8O<9`\a18NS*8]Fo'tN%rWo,;c69Hai8t>ka=[b2[9X0!*";O7;eN7S""T%Tad;tDgS2CFWr]=?jH!)H[\V8!j6q*;go/_LLV1DoJCc:-2ZFG(H9PN+!3T7bs&oPdk-?ZZ[;B`f8U=sQ`Zi0'Z0Vk`\KuNGWnBk%VA'<Y-n,]4&AN,Y/Y%c/HO^=jO[52R"E%(jgIH*CS"(O63\G;G%*?s:3@)?N?/+UAJ%PeKS/V:sKQhVKnI`V\@"up\Js8fc"k5I7%J4!fJbPg+dOoU%./W=K6LX'gbmJJp^jb]?q0D/UV+dP@1UWJG.535l7?(MO'!CP]MmKU8;7/K$_D"9gfd]5KW(P=mbUK=\LO3?OV%Ae252&6\i4aQeR*j(Yjg@rRZBo"cH'eNMWuFPpg$0Fpa>0*1_+q.OG.p%KU?M)rD+Ne1+tE=A3#JZHP,8flka!aVV^\i3IV#B)p6%6eh/jg`)jj;SDgEP=UE&,iVS_?kC4GQPe\X;s3O$/M:L!d6^<Jm#L*.$1laKG/F/7?:l!oVT70D<M_E,=n8T@LON7WMu5smL,.$)%@-r@0S%.MT(kj@89PTe=m(lujd(9ae?<_6INH"94$N+r.hZLVZkA06:j=*6qr2qt^h7cL\0d`-@VY!75VY;YCcoHbVI/Dao&/4F^%9FPi^+hB46`uK">EcbHaO*S4G9R>A2^B([P]o;*cBWgr)1'liqcR7*8^?V3Zd&C\`Ihd-mMo.34`hNF6fU4Rq9J-r<[PO;4<lq@1%CjEl8hroO%L?'2u\7afsT8>Rio^^r7faBQ\S:8K5pB5h-TJQ$CiE2SJkBrBXaHnKn8Vq$-3aj/oaM&,HgQ!)'2=/[;r/<:&M7EKr%':"1GR7IM7kDhr7$BSq&j%Ha5%ghaF'I6lN_gbi1?\8mQ/H!kMn!,V'OK^NPE_WM=-Gnm2UqD0l,gj?BqcDfNZln60l">$nFu>hs%=45E)kgA(D<:=2U#l,`44^4hU"^@<[/SNJX@BbdOk`uXA7508$Q@(u(E<@:l`*D,)LDnV2O5s_0K7p>dJKI\36>,<a=i1'0@eQr\%Ie88bR9pcFZp\Y<"U.7'QK(Q(Oo>%i\ZqfY\aY%p%Y5b9"DWP+-gr;W$0RgTPs"OmJTNfIf.Ukl>[b>Smr!A+M14n:dYBK](J\T4%TnP@5"*<PUkhQe2Mdnr*mY)_*!]lh'k>HsJWm=JTMqs?\dL+dKDC3d"4h\)5E2$Y)-:kl^l6VQ2fh\^*0R>D5&uI^:XA#o=qY!5a%$"%]H68lt_m)ulTO`:$'6$o<;=,OgmDAYjA/c]kh%Q-a>W$GUcmBJod@>%)f6dt-P)*3\pO>/RtkXlrY<JZmI?Au9iEEA;qb>=,\%2C>%dSXom5TRX';E>'PX7u,Rh5mh4%9$&g?bI93;"1G&<ctt5]T,bEs4ng.Z[#iA:E-qW1+%m]1ar&>+Q?_B^,MG&5)tI$_Y.jg<%Mm+gDS_daerRaM#&n>qZa^HP!hN^K$p4V<mFr$f]'XP?+i*2i[N)4(BOc'6>PZp,!\XX\.q1)_(JHgf5N$l?/-%.LdcE+\Y\\u_%%UR>+toe@kI/s2St%UF/\h,),<2fn2W1[(e13dD3@F9Z#M[bs,*FO:tJhJC$skKlY1cm;T=ae=X<T^u_&IQN<;3eK&IRSF>uF9WbB%m[-<N?$&5mrA93J]''P`d0hm)%UF/\*Ri%ukKnJVP/B*"3^MJCA.3j1-IC&i=<N<CHI!A<UB7n`T@5OcV$*o=_T:H;Kb4ojnNFR9%VmCAPahuI"c5+;Bc,RWLE0eafUtJYiA?b/4:)*.7?USNW'@2_QYbO#;im08>MI0g;h055B)PllH`t<3n#`sd>k0Q1NB$spH=`_%r%YdGjeB=nAI0g\/SmtV(!r%:e.ClZMq"st"C2ml3,h2/]\RI''qKH/;maS2#m4iTV;/bmu<D^CB:G5G;gLf[a]@Ns*?7FQ@S)1l-S%faMu[+1!bA#Su'o]?B%ERu5N=&'0-W.C6%\\'Z?/K$g(W]Ye]%5qAX#VIQHiZ95k2.?($=qb#4<[\/]W?"]oQLWdSQP1jeM!n$a;%X?N`T`;ZD\0G:DtRKn#nO&dXJalA;.F[>@R]@q.9KWuA8jZ9N\;q&2OgBSlE7B"X#*d@Z749jYF\le92c]<s7+!ZiM(&b:d\M<[M%7cqXB'8%ZfQZ[K)RLWo>-Qh<8.H>O4h,Pf?fY[uqALrdo+,,Y:8LDj!M_VEqfB`tN3q]t.5(2de#/o9Qa94uPlCi[MLjV4tZj?!5%'f_nTO$@1OCBSkU\*%6<0o7m0hN2M3_Uo6A7tadMRpDDW$V\GFZs#l`eQqDNS;=.bhcul6PEBgR-To@b2"-Jp8,*[kO6f5r+hUlb%'KVsFQbDTaSiCXMM5Nin^O"4/Y9(5=.P$fs$q9=Tn4]J*3,XWt;i,9^OU6%/;C=RO.VK""V2kXJWOQgR7ir,X;a2:h?),m8()%pC%MMik^.?9_tG_TKT&f?lO(CH<Y*uWP\`q%2=J>A47Ma_40`Uh00MGB4p'Gge5s4n^Mnj1UbO\t</c3TmlN^m\c5+J0+9'maU8&dRL%)dtXP*_bRUn_Q,G+"g;P[/c8H)r2)j%;gKR9L-%ZrUntH@<&E(1/blRT/Vd#-H+5kL`$qA+#>n^E+?h\jEON74+j4po<n1Xd;e2d%Pi^3L1ia5<YN4o'JN/Agoth_Ea/MG'()/dph3$`nTl"D]&!HPO0:g!_TaN*oa*aQg@G-7-o'45QAIOMo4cC>`(S+XjmW"AW_P73$%89/#29<(BPNYe]#,L7t<_UbD3*?C822nHrKpNoX[+-+@YN,X\NS.G@bpQ(<+%i62h4mdX,M'>o/kJN:8:n:KJ*0J>VF5X!E\A1%T%L;jII2]p<e%E4D.VOJ)4nD7%/Cs)Qm1#<NsKmYjg?,Vi=.HeSPfO?#E3p902mK&k3?`Xl75d=fCIBOItf.H%$6k2XWI#n$*-;Ug8%+VZ^FEb%C3Ohn:uGd/?_nN7:<N]or/R5DsUp+gGC#KOW@Q=s?^%P`IG1ZSF)2@MRf_\BQC6lZ^N3k,+lB6m8u,O2Y.Qs??JSR%"l%:5BktA]+)Vh)EbRIG-[=HO=S6f9se9J4Vt&C`(KE-2gNQL12gOKG2)cL@u:0Sf[efXjAb;m*,?aR8Ili'>#0/>9hF4g#p8iZB;//%PX-m3Uu"ci,PC#2MA`D?g%7$t+24V6OXe]Be&Y(^c5s/WpC],((&F=hD@62KZ/-rc&t2)WC#"Zspof5a:#b*@5/JES023HGa9^\%%Z^+o8@`,VGLkUZJf4(^uTlOtLWGnesNK!)k:@]@'E+/&fh,Ln@r0FTdiPr2S^RGSnHO%r.pE)t\$hPoB4V]Tn58M^3KDdTd..Fo7%3?n"8)^$ll)r^blf\P%`W.kUkgjL1@m_K_MAF.P;,4Z%^R-1(8-,\a`/pO_MMqM@:,FjS:"jHNVo$N;h`(4e>JJ=:l"Rg$>p:rdU%kOd?85]Z"e+1WNCI(b"e90XrYQTMa,iMbQ1^%o26U\#]W;T1uji2/>45I`7]044_2Cd0Kjn7hV*C+^8P[h"amZFDbrU,jH;pBpo\%l[WNTPAN#j$PR^)8KprRS%HBr'AZ`]'X4^Iir*.bZJ050ef!>g-V%_"O__?l"uYQ4;XIh"a_i=YloJnVTQmS^kb*1"p01WO<lUV;%k=]t[dhQ:fD[I>lC>'QTTBq:KA2_=\m'KGSL>?[BRLL9:WZ5oHKa`k5nYNUVdSj8RgLF3ggUn+^kjJ9%:Nt0ZqtO'eNT4d+TGJ4(%4ZU.b*>IR:\U7EIY3J,t@0-DHDR195D<><X;i?gB*p"2f:$HA+/K^b.jgB9Hlu&@Jk<$qlLq6X8@_d_%N/G.f)05&p?idBU`d:0S%M@nb\0=>HApK!8F0)^ZVQ2"2"<B*go&b2[EE?:/53jkI<K'na/I&G+T2p%'DKc>@&fse:2gPM.Oi]Z;X\A$$Wj@7)\:$E;$d.rCN%q\CtgG9f^(mi%"AoGF9dSp./^s8KP'r6cYZ^AOXCf6A+YNUl_%T2#&c5KnB*F?t)#l\1g/2I0-3?1@`"-HW+mnd,NibCnPj6+M(N%A3Q#nN#`gNs6XV`+'STQePjVf$gMKf)a_QiV@,0Ej6aqJACC^Qdg1<^Pd9P*Ep7s!,?)[\$hCWKh[;B&Cq:`r]5,)T/"80N4]bS+%V@1PCo>Zec,F^<!djD+[eSMf>OSj#TSiiJpB`/RCZ..5>flTOG(DmT=;)[6L=!R/Jr^JeO\8F=OCq?l*p?c\-iNDZUC=CJ*q_#n.%bGGZQYS'm\V@2[>jAo&6RkCXl`72-XJkesn@c/WZV@1PCo38D^B@@$\O*OMjVNFRhPY:2s?RF*r$UTU2[]HH=e&BDhRR/o<:bH%l%I=.4tJD9<dQPb7eqo.D]W#.6&`+FCA&%J)R?K+n"BgK.bC#;u."B)%=nZD]R,.3>RGT(k6XbTFf/G\nUpL>TenOT>&G7tZWZ^uf#%)?qXV.#<#XgfX1_";6^^fT2.j*u@^=JJ:ro-3@!9\D6DljRQJB!GB`N#Mq$U+Num`1FMNui>:=0Og>gNc(4Sl=7K8\nZTJ2QS8Y!%cA1FdEu0t\'eb\%eiU^Cj-/.bG8!a8?iV%51q=pP20X%&M?i0KpClghN4A((:9IJLlC'f+q_h1hE2Zi/h7d'a$_$Zhn%%^':+ae$%HgNpro'>KN-(*CiHK&2$c=*eV%%pBDFu21@DT$Z$UZqB3`UckKO`"^rD^&5:@<`>RgoN>#N%pS?ZGTMjT:_;,gos4XjD[<1fk9M<%(]80LYk&o0=3H'Q63ViqeE-=sTe<5\%<WOE)JVZJo@[b]jr9HYR$m^tK_,oR3q,OP]RIT(ja!pQda+^/8:'gJm]]CDd?._1ZdFW;%&N?rk'5O.?'FUF0>M+nkV;o<*&3DE9a3sIoFai[NM%pm\ls6<`r)6tnTeaW9Y7XA0C24]:">uG>052>5M20)I?]Cnn8)0=f[2TNo%YFJe9k&iaBO^T6dmsW-cBP;MMj8.3"l9oXe/]HU.XX="*Qd6OiO4DT-MSD5's#l3K?Gtl6OQ])e0i*$kpKAJ-A6AaJR@+\O%4AaG%cHWO$^>nWcCcHOSh=pB?*p89i#]6*eEArm$a3sOCDTWp75-]%KRn@!bfH#0GcRSG7hEuQ[EA!\"qhD]ppV!^<qliQIE#88NjqsmL%Q,G9jXq>Qb`_W\<c9@90Kh]K]XKBc3#J(=Q(nmPFa!i:b5(!NF[u^EX/)&=ZhQ3Ao6pNt88?Bd:GbA!B/N124nFseVTf'\K+[a_G%DT9h;&)cZ3pJgc6ZPpW6[hJYHKR;Un?S(57"(EN14a)7^Q?O,aRDq(J&Ji]/(Y0n^E5.r'(e`f0gK8@Y3(Zf)?(^N`ICg+*4l[kD%3Hkf@$SK6YFgtg#9/34[WS+dq9X,;L@Wp;"(ucs_m"i>#VIFcdWYgo/MfEfC$b,SuDe]Q*B0CZ1HY>n$#dYrIM%.Fks,P*;3fpVI%5j.3PFI8csNKJu(O`q1.Ibj%*O)0*HZCXQZ[(FC<9_kucUN0UFmZhgXa46jQGa_dKf^3S".@R"*A)"XhUe3j%G<\\abMA`eT(1j6%=NJ2jMhTq0L2gOCpr8M4HGO+J-/Uk%=.SK%:d/,.Kun''&Js8oYFUNGjN30]?@OsE9>]08QVnbYD,DX,'=Pc!s*D#:=tXnnWUcg'%*].OS7IOXuZc)co5"/au[qZ;'HF(Q$]sZsni4JJcFJms/+0C=Zrlq<-;q&=1-TNje%kpHa]WqGbgc=Oj_t2]ekFLjc<9E)9ipjk]%F8srYIY83BE)_=jKah2r)O0.VAt>ILL*B_LTA8mi$u50T/hci-H;4YZG2t[#RLB2eM'ZT5%BY(u^%K`u/Cp8NrGWIO7kJdOl`k<t%a9YU'3TF-Ec(VbA,5oGA6+^E%f]4f9]:A=*Z\<SXpp$d2q7boQ=&<@N8A\;g^>a`41E[ll)ClLK/?oNCfT\_'mRs7)<F-b`$r>=)%U-Ac4`mP%Hb]7&/0=32Q!R1T+amWl=NJc(nENl_3WU1qUn&G'c`X1<<"d53/"8F0#dc3i3&V"h#.U]cYGYERCLst(On-m@WHGrmm%4`kps[j'Uo)4\e`:L*iNa$%.qnA1:^`_GQsEFiDR.:jb&/l1Gj#H%2K\UWsiGma"WKJa9$Z6&VNf&-*NqdW.>ds)0NjoEEG(E7(r%?t\Fq>&jIM^7^U$V<uTtXj.tVcT/.]Gub-uZB8Y,K4?rp/"n\=oJ@`:olV<d*J_Dr.`c0k0G\f5%!aX^-\,TKoNN.0qFIP2?JCIl%*61\tZhgHc9So<2p=oV="*\n.cES:a]Qq/p*2MQkQc73qk^*eKB]C:-6ZG^3U]Pl(I:+P&mlab2WIPYaT-qroEV"L!C;b(^p$MVi%Fd@pdQT)N7U9fuKs,M`:On\akT;45:N2b:EQknE/:qH/#G3JM?GHq5/joG6&]"a@M(;oe*Dq,-Z@V"24X;jK1rU4A"qU[AO#>g4Q%rC.Q1F:Q@<\_&jI!.CXUC1.Um_1o)=,WG!cN.!Vmd'Fu03IjIW<h\`Ej@2;K7fGjm?oU\`?]"6aP/9"3/"cMlp8*.Hh8o<W9DQ60%Ac5Ponca:RVLL&PkSr3PE@E!;OVapJVpJ*4a@YB92rK,E;SF8,h"38]MnC-WC7"M1]t\T>9DL\V"U+*]HO'Z;oI<mVE6,/1ds*ec%hWm+c9WkA.)eu[*rOc)#-T6Atg,AG,^M'fI5`XC(me-0KV=.I"n%Ka`J$34d=")Q2+7igRO;266qLuU%C>=17@Su^7p\I<KL'XBO%M=1%pOi]J7Hi7V)=-u)$fj?)=f.VGb_tR5]mp<cm>Q)9Y"%^5@IaJf9N_gbr?GF9eMLMW%2t$?sN]7Dl(UOu?ERTt8PE,jKDk_UW%U,P,Ratn`urM"6')tOM<U%eCPS%9b?cstu!(DJaghWd&iI=+u7H&mHY?Z[r3oquc4?hAo,&CEYg]me@cZN1rChn%DmpcsPjlK>dM%iS4,'%>VcV\,,VSV/N90Y^?>CKiu:%GCB3l^VFn/7tmU:dcC0!70d(E1K(u;YFd1lCZng6U%_f?o3T1F"S*Mb-GA"aP1QjuP,E<'%?hEUP)#*Ppn.lQ'I=.7A4Ts[-2h!YTn@a:u8&XB6[c?30(Tkg.SG1.ooo$Q7D`V$8UZ+'BWTi4((Ob0,O!=Ae]meA<qFtoNh\\Wt%;>9TTr%];U<kkWha#DG4Nq)gtiHtOC\Ve]\@4&V<D^a;UF/tps0f7k&IL^W,hWjj+XL.NJS5:+Co3T0[2<Wp+m/<p=lSjg9f?s?h%`QNV!oNjb[Q^DulJ+$^YnRAX&me-I+1;%\/TBCZ6nPj5hS>W;ir?C*=2V,Qj+``O@!COKO2t-Et%WiW[.=Leo^Td>iD%t"Lk<,lC%j)O2!p\Kk^=+9mM5EF_@]%(_^kX"`F^M&Kq`,tR1]%8T=0m$/'-bS%a3[*)1OXIcm0D\_a!.F3<p\I<-5u`W-`k?h@FdU;=p%,>^%s&QnUm+O2^oo%ZH7V$MY^=P#aF'tFL*`Zg-[YH(Z!bAkq$qG^?hCGGJgE/GemgH:(Ef(aWcI%4;hR#_D*7Iq@]Vd[r*k"joMCpP+%R%4UN8=BNSJ[.[V[m,HM1W!bPpR/kAC2WQ$Wufsc][BZ\gJrRqRAIC\H#>LI[\2IslZq;gm_/)Pg4S\M?JVoR[dWC/cHbeN1GejL%7;hhe\$7i@Gr&MoIC(Vf(@1F[eO7Qi4Sj@\5AE],4!.6Gmt^R/gHKo8qmsM+4,:#+n)o\meSaf"E;d;98O#BSQSX-ZoKT7GB?TVE%S`QJ*rGLmU^"D_Po/!`?H97IVk24cH5EB-RQgNnpo[_Xlk7R96W`A>-\(Ao;Q@A3BcR=Lrk48A,[NeeJm4G=.j/+$fcF$HDh:%S^%DRZmag)[hE/bTr]:7cIb1G%!ql`7\2Bq=&>P0B#p2lV1A5'D9k#BRtOVtE<+`7BY'QYuKmV4X%N;.VPuq;P]]8ad6r/::_+,HE8/%Qg\#ITI4r->/n\.c,npbcs5g/#>a%KV1mFdft=`L/>UQDG7PI]0)%:^Hf<UZG*54$R3'MOk0_$f+H,>RDmlsd3n%sD!_UH8c3r9.%::jh].Z3TaP\PMlX/JcIIqulkR_/HQGh=nj'0nNo74[70^92[#rM@rJXZbhSAS#cbb)R!U?E\gJjS+V2P@[tUgof<$(U`8+K=O-#%;l+HB>c)=3:0"`GDpnD0]j+`4%4^VUrI)6SHYk!i.Q4:e)&K2NIeicEV;1IYWq*Z$>ENsVY>sB<k:n/i'jJS1\_6sY\$'DMUg#J+%k8&n/,is,"6bWWAG1uG.D4,btDf*)\Jq>#kcQ`!`?Ql&kq2LB3b%'T5:jW)Ro<tuS1t)W<%n/`bUt1b$?qG`B9KbHJ0QL9?F=#P/%7p5AugZGR.5S>->cL8O>#:CBE;gJ+N[d')/PKJ^rXhOZoqr0_A(&HVNX@ZN[@p=P6,%8@:Vn?X^.JQo:I6[a,3IRMQdjiZa);ik^%^+/J&o0=j@]H?8u9.R[m7I92B,-Qum?hR7:=4Zc^c[2(I.8oT:ZCF"jr(uA:Ntq4baV\e'>(1#X-rO[6P*G*?Wk;eRIda@2fCL1X%K#j_hPusEkegls^csn],^I2gg*[RLM3B,RE=M@u-)I$:s8`'AF92f`Nr4JOkU_s'eh(/<Ip/*JmG]WK;P*_=Le3<ZWDcYWs;bDD+%W!V<Wl;gMApLQtjV3b,OI;3(;j:b@1BlO*A0Y:6.<$-m=52=J;>hR@s8mm"$.mr!]0KmWK@!c26J57*h41S[1S+(l@:d$lLA:*49%\VpS#5,ggLJiQ2q!OD#66[VLIbIl9r(GPAO(7-9U?QXUh1q-`(^>2.U5-R"Y>u$U,29A"KnC:d<*+,8Me4AJ1dsSF.!.JR)f:jV^%'DD%`/g\g>RCPUPk3LROI@s49jM:pC&EainOB34TF3)$4G7i6*[/9(O4^<.qrWPRS",pGQ,'D=A9j_`nH+12RPP"%UD(5^tbj2t%%dmq+V)Io\\WpHm"E,go[Ku\]_9;Z?LoCD<Lg4K!G48#/@"fWMA<C)#DMUSe"mIQ\BZ9M]&hGtCCTWuPNSrBIe`B)bd],Y8ppZpWg%.5^a"#X_]r.UQRH7B/T@=H5;bDJI^X;WdW^'<gg*JO\KJ?EO+<B-O5`q$C=;I+nI8?`G48JEgMOW#i@>\&IZM8_Io757>^gqH3RI%PJg3XaLE69;DS\2NO#aGjl61r[H,DWe4SH/;dI>'ZJ!p5m9QUhCpoZu4V8MD[erb?m/Z%D0rsJb?/4;.jde"BC!W7:2X-f+"EXBI%I8sQT^R'L$9.RN%;!"43JSf@s-"Ziec/,3f.&KmCN\1%ufQZE\ASh5."m,.,F-!Uilb;um\+EgNE9DWM!53`G]SSt)?eW%nWq,mH%CuR?ngi>#a7eY5Qr@`\/an]IQ"uEF]2l$'6(V&a#Y0FE<pcB\NRo^u3/jukS,T&%B%NUOEmoO]+cP9<c:e/E_n>nd#Kf$QRO.r;s%]0tJ<+lP^T_VkFC6%\Q**m;j/^+\;deS"VCDZL$\T=*Pr"kco5gU'LD7l1jEjp;YK1u$!Q[M[Od/psAH-lJ6uSV\%dP0lfC7MQqC%2,?FR$C$)]K+=i>S9%:!G,Cf\;^?GmGP<^&da.M$%j?%V8IJWoD9P-<#`6r2A/CZt/k1&hPXnO&Kh)V\r/aH<E<LX+i<1j9HFWNM%?"@G=K1pl-U]u")RrfR3-nW2(<:X-j#o;Dp(FtpD\_GlTP-4u]I[G,dQs@M0XFt[-G;WE%K/t+lM`m&9N7CaKcI6LY6$<(SQi"3H%.8d3<TcF^$O4/e&"-oPg:3;j<Km-tL\a7k9h*!<8L<;*Yp$eM;B>,0#3V?VYU&,n/0t&CJQrPbXIE/(e>^"!'aT\h"Ts<6U8DdrZ%Qc=(+$&np%PY`2b)N/&>jVo3.UG:jL$gNFS`,`lMOd.n05nM'u*D#)EObrT:L=Qi[O'0<Z9OgNqJW&4&4,7utX8$K)iYLn>em78!%AG9_c:X*a-[=!3k9]l7F8(u(gHp4.`?d>:(auA(QLW)ST5:c]6=SqU03j8J65'fgmo"f<pcVV(YAYje`?*1npXo<SiQ-rE"k7R\S%k2sPt?n'8?9JDRedoheO"81N+2.W.A#P8uR]/Z/iPsgZV8If0BBA>kV];)#o]YZ5W>A;As+hVuZa7VGVM87a6EF4+I*L)6_M(Wb4%3A^a@&cq,Th]M8Q)Fb,G@%rIV4rUSn6s_@m8u/arYZ,D?p2g+k3=r5u2dD!3/tr6_F_mTi13PS`a4/a)/1m0Y;bG:!^?rK00NZe'%HWMZo<;506f*`DHjCI=fiR@PBhRa`b8UipV?56[nrr#?LEr%-8FRi1qq6c#e5.:Q)o]u(FF=8eTd?[Q!R&fO+:.S.rNagesU^J>h%PiBsrW-kk]6.gd\#p3N'WRAW'eM`eRrO#m?V6[3=()GNs.$pJVHaiieH!<l5_6,>%WaN\.Xm>`h[fN.O='a\.XN[^?d]MV!g>A)V%+aNg1*`&"b1j.bkDbnL1YO4_AMCLh4<VN<co9HC0/1p8YUK03KG<\s6jF.M9H/._MQ.!s:U+VZhNcL-8Hh_nn1njT2_%%6'3R+\]%]o3b;X!G7dkFt#EiQ80F=+f_p\VBg>`it:.%%nL/bN`^D]*1@_m`&$Fe04N8+)SRDj;`$_Oq)F`U^QHu\Y6LKq<?tlkMq-OG%3(P%[-"UB3aO48=f+^6oPCq)E[_5VMVG?fooIRR0ZrDKdOr*Lf@B])j`S@ODH83iIr<+s/HaV.O6\0U#:qsLT>&4H#4^='ioG0?]AL58%^,lGo$P'V?A6.SaU7Wkoon$AO1Bh%T#Oe,Id_V?aV.;1cB=R)m]_o%@+n&af,j9EZ%,LnCAS8'8oh2+?Y2JgGXiS&mD1<kOqMDI?%nk/(d2fo5D?U&]1lKF&n-Y>S_%L)j]=2PkZ!IXnr.[g5ERg9#4k:K9^<XQ<CRtUU%ZLYGT0-np'X-HR!No+po6__l0QOa4=<WBS]%PZP"KLKNA1o2"-<YRn=d.N(\"0.lUmL"pG!ANA%T)-JDj<XVO^o5G0849(FYCn:"RWP]X"+)EefYGS`]WGf3DVuFedZs(Ho8=m/.%q;G^aghF\`!CG)1U$aKbD`p$\W&#9e@3QF;%u4&]1[q'Cj>tD7fRg7Ya60#:9pkhOUOPQ96d-PpS#e#>,?G>OX07eRN%(1O<<H^_%I)kjWXauX5*X<Jsd"I5q\2'g3>^pXE#teL[/QRC9maZ_r_f[j0dbBsmmPbP^)Ik_X38<>`fjmuAqibtKoCTn@[0Yd^U4UEd#0d,A%#12g9JTgoG?Nk_iCM&r_PeOZ&#A,)o(;6fT7-WM"61V*6&+d>mS-NKcZ1lMkp@@=+S_#C($p%>Q^1%PO`t`shisa)+!^+`"PW.%6%+Sgl^75V/fpXd<&q5.!'+?CDh?jj0]_CL1m?/VlK6oiU1q+Xj)?uVFRp!5'Y>_d=ECL\hcnMD3rN_._0c'0C*A&dOj55=bHo%>$L%+F8N=]N\$snR?(VoH#I:K7NiAK_h(!O[+ShMnJN%%WZF;gX#[Lqcm@d3-b3a8Kil$Y1t.+lfTf1m),iea#>;9m*h1C,VcOYB3oje%Z8F:2=7?r@ld:l_al0)e"[0*l`Nf2N>Ko*U*?lF@7*NNO!g1EaP((#FEjng.p!MEel;G@/lDR?+#&]tnd_YND%X6thf?EsX/SEAV%)QZDGd3Ccu,r1+HL_j-(>rp3Y9Bi%/Y#]tOiN<>Ij'*?-<ndM[7"U2!6Yff!,U`5p1cm&TC!;RQ*Zjt,0#(5c/GN8rr3NoB'hf#X%N@!]Nk33"%7?uOS[ia4P2LSnWr4/T]KtoT[W9]Aa;s&7_GY$-(jm@0)k>?L[2XH?bM?pA8'"h-c.M'VKl3;'MdOA+>IfJpg4O0tk%dUE!:.QiAk<X`*fX*(7<ZVc%P*^I2)#=0ic2\dD!;i7^JHrK!4R44n1<[sQtX/rP)8L<;Ro/"]@6tKpjlBY'9:H[C;Jb^?<Z>00a%oPki!HMS@LGuFC^O>Tc.j^Mp7<1bPTCFZR*eK4)S*kd>$2kh&G<h<rMO1N"84)$F1;%f2eR_IJU)Je3LeU#<Jq":6*>uM/)6](26%o[IbJR>V<O^NnVNEJoJs^g7=`s6'`=-SR?G=Xr1j\ZUD%cH1XUZXhAJ"CKJ-nkX9E&+%\)2d;l+GWbR%oo&D?,%1$acg?WnhQW/a%kZ81C=]p-%F<Y3MiWHg]7&h4ZM[ti6?SK'D4VFMt<dpN\k<VjjcmcP'5-c"a;tr]:l%p88Z[7t7!C"H"FL!)SHIJBTQBNlQroCcg%*JpB7n#]X[#k^T_B<Q[:(\mZ.m/-Tq))6KP_W#1ibr*O/Z?"`tSqr``:%Z,ik?-rmp-,5<S9=^LIRUieQbdUaO_>*=.PtfaZ`<!8%q*RE*P1e\pVkXeE]-oMBD]kTW?B7^6q_OQ[KnsW@`IRS1;"F?1)pu@gW6Q"RS0)T/r=no'fmJ5Bf2(]aIlWm7P^h90coLtjFt$Ge%2>Fl&![R2_K:^:Yl%^U?e81ULE7E,^MlSikU2TQKa%?15qL8EtLG_"G%mmfM>#lS,WUpk3p[LpWkIP'u!sh-#^s:MF_rDN-maM"F%7K;B0jUu&PTFDOOL0BYV@b>S@<Mi2d+1$>b`^NA)HA*fs3#(4&#+!g<11;YfF&iU4&AH"Xp0/n8KjQbHC_l[B%%N6i04D*V3D2s'%GtCnO91oB!hIT!p:Ts:ZPr1=VZs<T9]-e^GhlTe2,@p#u2%4(gUhDa2]`$5/1hU#-Is;oMjcm]-O(P_7I_.\b/E2B'1\Lan<l-\1%3GE3s.sE^]f"7j9``o4'>Y2"EEqt,d^1u3PQ#=;7U]0_2WVnUIXLJ&J[:Cn>=kqoDoMYXa?)o?pCH_><dnrNCJ'7@0L;_eD_CWCS%],uB@(Rrt'X)tfs=9dgd4JV=]@N7#!DDRqeCs6EbIbHS.mgXO6oU;=R*irYmX;p,`Alba<"XS1s1qU@g)F'5-T,Xh,Q*tt58i<5H%KNF=QD*ETOF)jMS*,BKQ-<k3ae?7!NLS#3i(57FG'%oAeF+%SSL)/5E/cD[X?nNtuIr8n"Y()c=pm^$+oP/LakBDHken8%Tl5@fl%iV-$CdG10nD4No8/AG_4$iig)FqM,HqE#JGUR]uHhk"f,lMTfINK[T%]OOfWL"f*1Uq+W.QH+Y5T%e;fbkBK7rW(MPo!/ba,dR9B%TU7%<Q?=)Q!G5g-'ek4AkV"#:\.;+9.t=c*UUZ@M)`cX3O"+;kJKVb:N[4@M0D#WbRLr$ojq'H>hr<;#PuSX&JA<\fDg.7_9Hrkq%8gnqMJJg]LnF]Di^4E8aI@G?Z)@';G@=.h'ri1%LKt.\X<R-W1U_7`WT3Y!d\&e'>L0nk5\%jZ!/DG^;ZPaek\kc?>7OcLG>^W/U%77ZWhrHID3phj&+$VbE^'!6(W>%/_<cMRuDDCGM?74tOR7-aY4?:b3"?>Zh[o2c=c:W7PLY`o*LDqttB;@<.k^O_P^SEJ(4_[1<_%h472DhrgaLB>LUPR:JOUm"/t[q#9pprD]?$-J%O@]:"2CMqU"-8c^AXm/,6F]I?9U=2\8N[O4b0]^N'f#dZ?[[f_k)B?9ss1Fnm\%*s$1Bmq6u>JKXE[>#]slP;)JPk>DZZ.F:];Y>q`LC2$c<F>gd#I*^mjlHm_uo"iQ`llGX3IbhDG<4K6D1\6NYF;IM6)nm)X+:IS-%/6,(V.r3>HTg_Y+TWC.UY`hEq/]rO)TL]iI[:NrTmNojro$5hK1'dW:WHKdn1=!i\#+d=cCpYK4"e8CcT0d;>-r6S&ir#`INNoYt%H#X(GM#V[5UG.oGl6q#9Mq<6#aaEonmY!is#D>@FMD:>KetG<_Ei,Js3?=Xc3l##p>M@>:Hhl"7&BJa5A+eJ7c4,T'2!/CJL%uAM%i+9aV!KL(!$!kW;gKiJqlXS.o4#/:*\]3283jd2d80D,i5'biS(GEDdjr1/"AN.+<S\dWC*r?=Xbp!4%goIH&&W4EpM*sDPi&l$l%*?:S>LajZ:&Y7np"m<EN9](bAO?3pZIZ#Ts+esPhZMKu]+qf8^V0uGdNeAEqflLf['1[V>F&@J7HjFYs"[//Y&f-L\mBquj8&A0H%)l+oP6UZY@KEef#p>\WB#1C?]g0*<m;ba'Ra,X+fj'j_kc8.<"P6MqO](f3"O4D3G#JH1WY6.SqDi?=42<r(!&^:hq;DEM'`!"P^%g$=iTbd'l+a.5[bP2mn;\6@(0#!_.kggbHrHUjMMIN"Cr(>mT)E&ZoiAYM7/6"#g\f_qYg?mqn<H2=8=MjUPrQLmcX(s(ut6#e3S%N`qG-`eiH$HJar=Z%Lp\,q1c0F6mUk2A;E,)=J)Yd4%[4;&Qe'Xj6CYUk@OjmU!_pQGsoaZ@*$:6*\S:R[$+C>7X*'T#>qFZV):E%AD^maV&Q-r@o8&uN/EI*D"gY.F_U2HMmM/@M^'uF)Y80X2ntQGBGu5u'oCDl2j5lfN$C>8$ppV\#fZE(e79R!gl[<P'R&R4?+eCN%X-;qlkS2<;`:5KMdEesMG@Y_:XikFTE$t*-O)sGK:)npSa+*6qJZ&DEZY'd9Oha2,k(!uT8]C_JR=fR2qN%4.LnQW`B+E]*oq_\d%`]AMj2Y,K`NdD7e!=,3[Lk"J*K$]m0'(M$Q6SQiOHP5k0S3se>WH@!Oq@B)`#fhKV+g#qYEsSFF4DoBp[qao"6R%eIP080$d(p(c%A"inQBH:+QY'1P"P5^g+5Q3S.Uo[Zi7G$LVNho7lM);3$PV^FV<[.4(bBNi[`_4(oDH4;u-eGTdpA!id^Q_trd^kK9G<M>uBV\.s%%?E8h^@;I?4sm(9*e&#,Po.</;ZPc.+YaP$pi#qJ!$D2*dD(iJni1pp91md>`C3+ZQ)(6&58/c_iJ/cUTZ[Oe_Ir9ao'eL;HO<Hf%bUSdO?o(g*C6Bj,2;L%4<3iB<>M+QcoMoSpReQr'/eV(5Z4p;?P>]sg/42/F*,mgFq1Jh@ODu=>nsFNmaAu>B<.I?EjfE"WG#D2E%XD2Du%V!=S;hf%ET%1nM'M6V#\u@"k:!T1gJOP]dXK(4tBhDFS<1B-*=\Z.9.$LsBVWh3[(g1.qYfm7>,SS@#2/>aG%-q\>:&'ER%ciekp.Ya4rAMQKu_Lu+$QB_p-:tN"=DV2<e1(h'S+_PX/(!<0SM%4:Q=\4/j;/@**<(V#*Od0M.8ue&C[:D<)9;T^/,s*XC3mJhZ%;(P']AWgYeM:lKA2.\2"<BqQihFsl2QIU(5WN&#'5pJh(SCIXsWbQ0h?*["`Pr09!:9"LLP@bp_.Nm<,!Fr./ASm^V<E7^%X"]bH%lU&a1=BQJ-P@8#s"X-`#,AWc6=KjP`<ED^S^l"oiU,6+0;^Z.,'j4J/9\*U/ZlYl@JR10`8[W8pWFo45CCR47[V1d,$Z"Kn%2N/H%9i;,[C?\bs;iRk(.g073=dYsrBWRX,Lc'8f@+26Z--8,r!kJRDTG`8?8X;r9RC*`rU'<T^9pLqD!SXhKb>^jJPp"=n,qD>'o$sVU%Wp)RgNHPKhOA-%4eZubsO<JaK<8BfQEDj/jlkQL""4AuBMpsOVTN2HI$S)L9J[<d47<BDZKCHYeWFs&Ig9q#n9%Gb>;U9r+[6Qbr%/hOXCR]RgFl=@G5#_Z?ITSX/#$ChPuD3H._kZ-/rWWfo!2!dsBN(Ai.&rHZq-=m1./0d"QP@u;:&m^b?]tuTOb9Hna(8FqJ<jbm0%=k@afYL"Z(Q#Uqg^a.@/@S&O`>%A:m<C"LDP)c'-)[<-?A5,WRO>VT?.(q*\D8RJ%eY*dGY6lBi!7j]/8a04UC9e;*5R36_S&"\F%F;Q8-+@Um5Op[r#dY[li#1O><K5'(n'+H((7BuJ1MBknBU;Kf,,ZlVHZTok'-okk3;]R8.at?O@RMtYsE&6ta/1H%46#ZhqJ8>@'%O_k3>4buWQ=A:]X+;SNr&)37);(TjT%OaIDYmAT_PpJd3M_\+bAa6!h`,6;idmU/`_ZEu@DMqC)hu]9_5q(aNVQSRG:]uG#6qk*W%;3J8?8PnCR70s6"Z8I\>`%i[m\PU6+;,p>TM2JBe'XJ3F-7V8j"uHm&U&rL@P/e2GU*AX!M!3nT&[>`sA34mDU7so^11<XB-7ZfA%A:XoPLc^`-&s@BJ,1;k#j;OAA$4m7^(dTJu^bVd_H"8,M1Mq_c/ed1K(<"c-R>=:t9iff,M+I$"7O4HJ'GY"@c))_)Tnr@Mb%-N3%<'Y[@R3>*iCs2V+ObsDb<7=:8LpR0b)GDX?UptO+;N['%9Ecf1MF_?F9ifu1M@+;6&?I$I77@7$fS1kJ77%S5"cZ/D"^n-*iWqtX%IGLX7QjZ@LNl_Do.,qgQZ>GLd&]%Bt.Z1`8`%n@L3'n3i$_go?Kd&gG@<dGL$jk[KDMgam(XZ9_BQJhNapZABN_m[U[tmf;#XoH4%<1(0^&IHK5AWKXjJ8HcE*LWjV%Kck"Q&14tS0J\U2Pt2%*gqhRN+mN)+t@44fdIi&Lo[K/<;^`uLhJ_)`M6,dMV0>MCCl=Fp2&CV%FWq6^Y04eVX.?i]cdamYn`Q4KnkUZTjI]Po"e\]S#XG*-&V*1cQ[iNWQ%3<U(P-$5(P//5-3D.A/cs!I/d''J/d"7J9Eki8>R$'S%9Eog#Qja\P\-s(p\.&"o0c;C*E>^0jE>^0jE>dshUG>Xs@PUb2i\JkZ`ak`E`atf>k/]fmN6=I;;^J`q3&2&gFI@*5,6LN*6$<Id%%!OU=!]VqH[WcU)3&4<2;9@<N1/J1VH6o5CROpB2*!ll`%jV/.@iYj]b6)44M*!$cAY`2@.g!Q`aXSXf>Ib$(#tRHSF[Vl2`%3F)%7kp5c`%"cd\."TZkZB,MJ0P0$9Xba0P^tSu%Pk13"0k&o!>&caQ<CMn$Si9O<.tZ<-3J5jY!-kDLh3kep'O:oK(OWQ%?Fs(&9=c3%#XL#:8rFnr@:cdR:7=4!&Bcn_kQQtX6mV(VZ)M!A&/N0jM5KA!Khqu,it6mYh,tbo("3NkA2$'$&u\D`fZquM#&:LGKDb3<0,OZ'%.i1'K[$UfNEmZ<Lj<?5jjWZA<c)@Tja@02A0Jtt5&aS[fMj`(iqOJiJYo;.i>ert"HGh#DRdH5pfGE""*N;U+-Yeqt'qrj7W+9tF%,04ri5]NVEaEE9k5d"'Sbtt5\bE7[\n8#I&-k^":4k;BSfbU!V.hl!C)c2Pk`$4L9EJ,MM;9R7MM,4?Aj3\6#'aG%\C*&e!AZ@;.%A>4sA&V<bZ.&+:k'<Te"MDtor)SqG1KJKEP$UPHJFNnSP6Q'qp#sqMJ3tuFa]@>`+eW^#*hTJJJ8\CUC$0_%P@QV>SoH3UF^*de2%Xi,M%:8ThhgDf.UQ&*3KJq/mL9a\JljRb_iF'<6($JrVOXFSpUfEH7qco(ZH9c<X[=C2q^@^+mKPJBS`_+!Hs9q_tpES.A6%KUEX%K?-a=eYl\C."fL5V@@7?=es.$e^1^9";ZiHJe_k4=M\Q6R@;%p@?UsH'A<q_]dB$LnA#+j,r=,N/b^][kujRa#23&'Ih)]4k\Ea@%!O9K!_\kdlM;r)sCkA%%JMiOp80qAi5$\#gnpZGcLF%[%a_hEn!gH<YCK:hq75AR=<KU6YK$FiWYVafSbs9RIC*KDd'oX^^p,*.B%"i2CX*/*dR&Rkp%JBZ`?=@7]JQBLkJqPR%[%#p7KTJ2-&%F%*ETWR-!$=uUl@#7WK;U@!]h+;-\XFqc"N*]_eAMVStdl3R`W^94^%d?F5i(.20EjRIkW\-Me'g]9[lJ-&k%;'[nug5Hbt37UkQ@7M73:@(n7QpD3n'M9;tA>+/#TJUHs>/N4]M!h"sAno]7ff0RM64q=]%#cAH$2sJB4..VMdKZHPh1Qt9H29)n[[Y>E[m-?nrVP:X*W'Nt54EqI2;:]I5[RngO]:bm\!f,?,alEF?#,?2X0atBBD9>KaVaS^K%^=*6a/^%?eZ3YG`CjD0,/]N2Yn%]bS)NDRgb[Y=fK^9OC4SP#;J5@^A>hkM&*0Y=d6E3S6>DA?(.G%[DJqP5m@ndMGE8$%X<X=t@%*_;^=`mM"Y-Y2A(\9&r2&Hk,mi%!]?lOF+F#$MJC)$L<^>QRhJl%6#[D-/"<ciT)6K:p5`,;G(!\hVUaiu8ELaStRYKNL04!G\l)%=;b#t9],*T6'3slJ4C*4Meim2]-.)aHO3eH,&seo,JnSXNEt.QG8EM;6ipe-gRatP/X+T*6c?TjqN`1#L)sJl[9/hLZ2*)d.QL<,%ns%GO-7alZ$`+f3)Uo&&PpOU#&Uu`LCES$LH_?&[6+d=>fM&A.[/b$2MG]kK59AkTOhjF0!ZO;cFKYjQRo"hcT]Ao]M.0Wc/nl$%%DAa;c2QK8i+QR\I)@f4p@MpaDR7tamM'>laUR8?sn9!;%f#]9?!'@K($WTGgCT8[O!%<s<aWggoD%58#$,7/@%9K%@)A$1V!8EgY%qU(s+d`a/X6P,Y<Tu$I3*U8d9&26([R40PK)\"G!FLkQgE)gB\ODV[=8(-'OS#XHHP-FU_o\`'7A^engWsr0=RWNW%D;Aa4Q$&Y7%7*L*2JSsZqC$;N28qa#Tb33I'p>g0.+3pU,(*ba>P"#+o!GY-Q3HJ[VCb[rLZWa6<ZeBM"i-Pfs:r,ip/#ego*dYkppn^$4_p5b^%1TV"iGVcR_C1/M(^m<IUp6[O%Oe>WjG2sk^com6OU0%I`M3dYU%SR?ZZ9]ClAst76/0`!e&pIu2b=nda3?@(0!85)WiGbp(c:c"X%MXS#,gdjrB*M4<)_0./(5hoPQ,-!6gA@`K>N+[-!c@O,I%-@Q8$\[4'+pS:a)[B#`/.n-e+rB48X#A?_nZ<aJk)spSR8WZKqP/AC%UF8uPPO5ABGV1C!gOcIu[`o*,;3bti7L5Fqq^tX2Q%8^hil(3d,q%@_S<5dT^Ed'':c'&+;4+B0UnG>cNhj$:83mjR!9M9q#dS>)%#.Z^\b-qNZ,S^H:,)]hj-,S/VR6,iRPD^PISqoiGQ%Ni^\%<XZ7=,>C8@Fe5Kc$kBYt[QCL0\tpDV>$kgH-$sNtji@.rhGKp,L&3%3CY@%a'jV_gT+hm\n/$-N\O5G4lof+:5NJ=PBNDZ&\\VK\5h>l/ec992IoXH@sAA;#V$LV%[W;p5gaCc%Qh\?:e$Fa/?l\L9oO'\%-V*5hDN!P!S_;iK'#tX*U*g;!U<D>H?s>d[BW<Y#rn*7Q34BMAa)]oA9lU@8N&!a:Zc02n5YI'(iqV=bR)P"T_ZF&=HT3n%8J>=+%<JW5e--Qn8e,q718t9CM,=!MPb;%#AKR"H&ToCj<L6#i)A!phAZW\!nTipi?BhS,$isIeBZ)BK'ei8u"*K_e8DM_kM#XurU-QT21%X$l;o1)a/p*IF<l`5n<.,KiQdT1L4^2d;MS"IER$(&A_?EF_S)/>4R2$&eAVO.Nsn4I.N+4,dD'$=]]fBhm<E8Y$OE)TMp2G=6XT%ZF".@i9!!O)UiKd#"#991.?>UbhWo4@#uYgR#!Xq#iDo6%8Q`C=i0NF_EZN[AG5dPgMqSq`NF!;'2XAqr,,HI@0Roa$!,#!3->nD%):q$nW_fI^)5D)+9/U/j>.%*ah!T;SEfFQF*,\)aJ=1^-:^krW#dUG;m+*?MT0an*!\m-^Td5LJ!?T%bUNmK.K`Y[O\7:+bSbM0=%LQ<dTOFuVgR7$?oKn$X>!g\pbhC*;bRqr]sXMkt,k1U"i_\*S'8b@Me5gehp9bqm0i@#JnJLr?nZ,H2,)5pDX8sg&5P_"i\`Lc1+%dq!e=`m^pSqiVM`dZH!NU]<F(VOcC#)Rj0HS>g`RN7R(8<n`T8CT7(uK/2^HEF=A2l7V+)3sG'-KHc9R[i:>QG;'hu/k?u@0%e%8%L^V7'DT,G>"-FT6I0rCuebtr4La!AP/-@,3%"--pRmd'[$(2Xh!0']CQC*S'`b7YkMk*qDpBsD&Pism_/Q+p%b&N*^>.Vtk#<4p$%r+(Z[pgd05,UG1rYnW+Z#4ZAJ578p%%D!M3Hpb9N?NYHg#m7h^Mkf+*aq0j=g0FXdKp(^4W*Pc;!RbpF!&>HdNc(8fn&J]b\!Dsb%gJ6@VCr[@1>X)>&3*V6!]7`HpUmU=8r9@)l0/>Mi'm>1hc4L+5Xt+_e=;Fn*%!!=^V7imk=qWbCq*)ZOak^V]jrSSYpl-Id8"E$]%N>X8k>;Na"0\Y+;M?pIuKG%]$FinO#Js)-&B$3`R9Lkjj)dML$5Vgdl2'B3RgWZ;Lm/>!b<3EjU!>;N;Lm:d_+Ua9bQ53amQ)JIp%,3cPPR@+,QOp]_%KPIhef?;'U0>jmTMI!No)Q)g-U#$7_:L4X2HkV,#AA@;k<XbO^J8:ceOj7'\`+U(#]9Np`?RTo6mZoS_J^Y-R%.6(hJIKp*!Y/iR&]@)p>8sHk5;sW4B((HuM3l4-)4JNKYZ^?X:5\*f.&:eprKW-tC%K]a&%Z:$h+rWI40!7oM)l9Uo>;0.@3Y*2h%LI.^d/<S!R#_uS@3ZHnMJsm=9AW@+4U?Z?K.]?8i9\:rW>it\>E$?;ri)L"%LS6`HSE8S'FMn532a%N/<Ie[ljp,=cpdTgT9=72R%1fjjR^q(i/)Y,Xri_E;LGBMfoF3AQ.pC#8r3%k?o+I6W:n&^cL`..n4%NG`DS&&p'MLbYf##-K8^X'!]<L;Bc8;Te;ck6JP]tU*+%l<ACRh:`+3?UrFVnaRp10a"W.oXL=#T;^CepYtuSlsG<Qj%&@K-oTq/Q$`A&MN*f-`eBt@N?Y6VF\r/B(5`QK43[MNWf;\BE^RPU%NIN?3$<CHs5Chj=LC+RdR&_u?5OPcJm5lZ[NH-XaC)C3hOYBdR!#S[ILa5r=$6D[n\[2CI)Z^Zn^g'MV$4\3EU<Y/p>iqbG"\6B8%B<DCh<QkVs)NL"9)F&3N8!-WBU&m#J)usXd<##Xg;.rU!*J]$LB^cfY#8#Fh:rS":k;\W#JC6uj3)pqe[VPRi-mAe18Y)Pb@d4=:%3[IlkAlq%t>AR#*`;to6G,dM/Nfp*q[YU4Zpn]SSl8PN)8f:_&)q%cZ=hPs]/ZR^h[#nMG8ieu.BBu;L5kc^OH_F&q%+u`2VFmDq%,D#[,V\)uXU4+3(BEJQaS1lEQJ@%TM"I'm>5BLplVTR\;3X:J("*@1pSt."0,0bVQ)?[ZEmia3.-Bk2UIogu=>Q*&;<MOLhb70^V%n!hXf*'V65it+iWPmhXfk*7k_l(MpOB$s2Y"YLCbIZ]tR8QU?;*=F4pck&(%8g0W0`Bt2HlA6XNdRbu/P?)4u<>Aq2p9:^)(;$7%%[d8ki'^^>Y;ju`jRLcEFfPSCdqS8o=E;-PL2=htLP%,D:k3DJ#IEBg.+J<JTch'"YR%`DRm9%H^abSqJ.IODSllJGHbIh&8's(Ln%Of:Q3CA/3rG&K&nL_dLCY0.QR'_>_:3CK\&OmWLOFLdMZi>.O181=Q!GO6OrqsW2-L/?7j)GCq@<^L,:8rNiTXX<g5LZ3U[bS;f_%[;6M%:!5X+;KFA$Ss1S?B:"!184[hS0^la+jPsapjY:#F00.BK\51)eFP-g@rP:,mW)&hVZgbPo;MHa8DW\-7%(tS=Tb^oOpk`tE%)Zt:0pXq8nh,0A-k13^,mm3%lpHc1Vk*T!.hdt.tc&/%?e,#o,DI/IV;JC<i)`9!P?AD.W")3l1nud<s5!3X2%AAtqUMTT!4M8qi%j(8LFl94+N:];RBS,Y"K-i=h[f6bA=YB!Egr15U#9>5RDR*Am(6G.Im>nc.&Bf8i#-3P+9"FU)U""gjKmH4\sm7sIOfREmZo>%tX%"/R[.+MB"U2]&$om#DVomg*k6ZR^T5&l)uKIl#[K3l8UFQ\6%D]7sW)ee)63.fQV\]@3ngLupUZ-d1$/:t@/6M9o0PXpF?hjIgRH%>S5n1cmd#Y(#];Z!:3d?ASte&79J[lj*(Y$l&7bC.e-e%SW_e@<jDO_M>sWT//C0tZhlBSZcl1HPMHf$*Y''26WfgL]66PlbFP5$%G"$?qUnWD+P-?jN<S8Z!c,mXTh%E!%i]U=\$(/0'k0jE\>Gf=af>9MH_VRp/-tJ%8%0.GY_'7k*;0q5r-U?e+EEYjF3tBJP$&ai-%G"Fr@9U663]'09-G6B0W=aM,;Z67DhBh]W,G-#880UCuM!R'A<%35>;QT2T$?k\BYC,^gTXlhVG+5M$-=QT\LZK[4e&Sf`E2T=2q%)?%60k/ikS<.CsMlpt;?#niBTlZ&WR)bZne$$,Rm8N)\W<fPuL(8D)HaPfa*<W`#IlP8B3/f+X![Hc(tg]XG;:mVIV\(20:_hQV'%Od6hm$ZYYbGb(eRc/aR*ra_+LUR2tOp$i>[9mkLp"&dAd-bL@RG^4if^qCD`/1RL3VM]3X7A5"*)f,L[m@!g96"44neMK!Z6rQgN%c6&Yk4m+:S-(`G>AhqQnQqQ.`>g:5S#B)b&dCHU%c#kD;IRlSn(dWhNN]]'EEZChXfb]<i9,ImVe\j2*p?8<mJJ=ggh?#^kj@s>X%?Dbt8D%))(6>/FYd"sc!bNT@W+-rbg?Q_2Y8[9X9bZ$*TH&;]sci&$-[9$n%S]u,tDosN,kqio+6,,r1]'a\Ubf5_mGWDN</NL@d%ItP:AR#\_B>j.hf7oWFH0O\2$kYMA%c=/.[Uu><%:5F&Y!_M:#W.216&*b0%:CNu)^M%kWJHiDur(\R@<;3N%QnnV8?-?h2\.6EG%*4YQ<<f?>.]cT]g=4/M`RBDYq/gBgIXjDBRU&lJ7^jX>$AQ9W!F$VY;&F9Nq%WnG(0VQM_Zm/6;XEi+WOgWE4_2k4B*%$#M8f!Ze%h<A')Y9X@7R**)6*5@uRNQKhoWa%]J+'M`?/4Nb:;W@f(.<sNKEAfGWD[Ni>UYD@r9K`<*:h9,#Z^K_+M@%r[A>@_Tlq[^KG&H"N%gLUGL0So[2#f]q\TNI>[Zddd(R:IqNQmMnJIR0cVjG4keF`?eD;nHuf=aSM15r.!aPU[ZMcrUG54DnZ,gOU=hi'hIDU6[CDUY/ZV%Gd&Ba'N4lnFcW$Vbblb'X.hj;L"(AXWP0p^RuAu(gKE?e3?>^m"^%%O*9pc/0GoOZR=r)/R4tXcU*<M<7<>.R$DL5d%(bIQ[*IbX%F/`fb(YZ>()UXF;U`sb+2^bTlZ8GpnVj0EEe.NDM$d8gkCU.sNk0dWu;)..-gF))oio7WC5IbG8eL>G2PN>30`9m'J;"m,C2gK6?%2VgAhGisOC\B0(b+M#s];:cI=R5ubM$`-]3AW!<,gtAo-C%1)\^.V=80V[1"fm<E#>@T$]/@\_Pg,_CcSa8ViJi1c-^h`LLo(LL>%3`S)t:3R]PY>b2*REhG'Vn-J-:d%UM'`@dmWIC*2Mk94I=1P4nWi)k9na/=bm/46`QV`iX_Eq+RDja26'ibQ]72<Q(8B?mW;AEM7%UYeDK<K$=V`EXdUH?"_:Dr3:s<7QGrd-Q'.7oW-8T+Qj;eI87cj$/iPVl6&k<(O%Rg+LcN!GP+QL#;J77usjRDRrfI\aR6\W;uR]%Z!11*e_V1L8L5+%!s4N4W;t9shNV"1d@qXaPZ4TM"&(!U&BQ\lPZ5FD5hgB[+I_RSlCWT?KR[[7d+rGl#>=kMNKjU.luYfn<T2H,%(GMkgJFKe;ROSl`R4!f*.]K@e+j4jNc#p0XPJ[0)Oos6612gB?^Q\)fQ^\CQC<Jg>(uJU#@ZC9XcLWSH,[>P(#b6s!VUl/]lU^$V%JPf,FA06a<P<71F>.[<59'!A7'6:!:=6N`1P6@p!:7(4P_#S$%Q)ng5R)c0R4((fHODFuY'L8]E*bH%k)op.a1MJrU3&FW%WHeIN%L>EX9_c/>pH_]9QeSV]HM\d2o8`n"/.-3W186S1`K(:;S1&Xp*(-866aV7H8[Ri3YG[*5JR+lI]b7kC6:=U$sr,Q;gQ*HTJdUDR7%7Wed\]U88Mh7%]>Le9E_G,%o+MSV3N@mXM"m;XqI+c2-Dek[G"rkoT_lkk"%Hi^]m.0*9DI)+l*!J\8l%mD^#)<8PC=7>8/Y9tOI%75G`$ma0ph%bh`<L63-]?#9b\<2"/Fp]Qlm)VOVY9Sa6r(`s3!3)MS],#pRcZ/HATNBYuK8D;/EPn/p#r*bl.Nf0S2IAPT["ZF,+%P68#XP&UuE6?>[-]JS#@ikU;EL$"J<i"_A$jM4;0FcD\"RRTs/;F:+/M;P&.PXpE/&#e-eT`E/5T)iujF81Ye@q*9qoXuV>_:eOc%G'L=u#BhA4i4t9RNuA)7E8XURkU$BQ`UY&e"!35cJ]M*$+LD!Lo60c-RDHc.fhrs9^Lp2jlk$W7."Rl,hDkO`h0dM!I=Mt9*X<uR%hs_J'h)r[k:?8GC#1>@^P&ZgsNaL(_*/W40+^nqgO)mBu/$VJia;LlhD7h`lNq;.:d03ig<tQfpn[i:GCSU>SWBj^rOpOlKRZgo-%4dScMB`'n.j%!9^LclNjVr;d(*]Fb"1a$;-p+'iB:?\(eXf<SWbq\g4*1;TUQV0F2'5_pNn1uQ7mID>ig,q/jkg_.IN-2/+_4+(I%#q*k1(J_Fi2nX3'"#;g4)":FE1U4`1R_*1\bO$GteAsWWJ..W<Q1@27It?9$GYL(mhHUsn-d'Kb$28.ZR6&rN`#h;N1,nh(2i`-k%W[_]BLrf?iG`sqDLb)3d,*_536HToc$W63^&HTJC9^nKUiSa)L[=f4TapTTP)4jW=0Z@`RQ'Ib\-s8E;BP,iNfGNC=7a^GYX/f2)%P#eYmE@A&c3&dqHI(1"fIKCD;ECdc<guE!%J"d,mE[c_I_6JIn)NZ&;s.TO>moAf?O(pr6d?uR11a!7qP*5\toE5JA*<U=cH=i+[%/A?fCZap'+N#WDRXpH6`H?@N])D)o?Y.'.-S9BN#aV0IP%3eZA\%<1u7J=]EPI%ZT0bD**g6Y#(i?dAU#f)`ROFl]LNYMa#OY/;C%YVLU8_Ls$tKi38q_S21(Sup61YKa$\DLSGGgbf;B8TN:n"nI`]>8uZaQKg,("<^Yb14/OY-@on[=r)WB6eSWV1X-QH$U=&X]B>Q^%[,ajfTFr3Q9^"r)B$&CG$Yr\s1Wedq=d6AE&ajT%DS8$D@$IINWR-T;/mSK)R3.SL>A(kXC>j*:H4S.m@Ur$NVY?"hV[KBn>rK<9%/CeV=TsV:.!N,8S@`16++IWMWZ7c7;Fir/t!HXB,L0H\tGbU"]$D]N8:1TZ5?[.#j3@fY7<3FE$pqEjP2d8Fj.(@VU'q:%IX]1;"%1^F(]76I#C.85p?#<4E[W-ZSgBH[Q3:HqkgTI^]4S%K?8KN&SkR-YIHRX>cs$7Q7JY)Oj[c0jXMof'K]6aCjr1JZK)86VqHOjlD3%]`2#rO&(83WWc6Se1DHDcGn%dR1tnbi)1-O;cSD;,EU=:0SE@B!!?$pkf+e*N'r[F+N7U470X#CpY%@E'2at8*78(rU/$r000qQD%S2@2l"_$Q(8$#D3gh!H'],0YM%SbTJ833-g0$&2]Fj@3.!imc)am\2&0T@P(EMGTBj`Ti02q*$]5<]Sn>>MtSlX?iLCBZ/?C/22A%j>D#p(_'YRR4"Z]>@5$o`-;Ds)o4&qc/R!E/`fCr`cJ_>F*d#t(9SrW%kL`:Z\fJ`iPtbU2cif6UR+XgP:@or*D,(.bQkt!no:tt%nmIWX(i^eT-fnq!HiqD2@KW6i.[PRceB7ZR/LP(UC00^G0L*s-AQCk?gY1cXggMD8#J:Q(-f.bT9hp`;3@ELgAPAt>?+eHaP3O'G%Ji?N0Ad^gaDp1#*qUSrL_tU:F,$TqC?,NE6>6mM7TIo/&I2MpWC1D+&a)nshg>cch?a_Sm`E`![[^rVe&cmZs:)?gN^uVPUc98EX%k=_DbKVYT=06n2*U=^c`'e8Ss,:[llHHD?fSP*1rm:OuE;EIfCHVJ@,bEIa(pC-dQWfYLVk=H()HKUA!JQH?VjDC`eFGbI]SSFXX%f6QtY)h3[7MqgM:8="WH,NhW$n<t`0Gqq-^Qq0(\cBGte*QajqbVhe`27(QemA2Dr7/=iD_JO52N5kj&AfJ/V4(#9>!dW%VfI?sF%.-$GdN3J8(m5U9[X'r8_XesacT'83$hg*J4(j*fo]M@;CAibF9$6ieC8@erArY;@SI['hi$KAa#\YhZpJlph;7';.*gMWHa^T/V2%e.%3qYp8?N$P`f=,C36Q80$)UOob]'_O*#b$4(/R2>3sU#^C?Xql2+gi./AeF57NAidkebn>JG1lW+1BG`1$teeA\T0Rb;G".Y2U%*Vf7jRM""5"D7K8<8M8d+5j*!B1f*Ei$YWr!`M>!\($?>W`V4m[h>))@?%e\Zdd>pDl=aY2pGX,*tX;bktJ&@LXdt2S#IKq`M+aQ%6XZU:^mE:KBi.*&3g8t4.nWeCKf%7]drZ,J$et[EX+lhWp-19(c!G.1i'/R'_d/J_H(oTb0_e7pn24@UG++5'Rh416>VMR[<#"%7%BHD]6KpnG8@&h^2bsN<9AD/J$o?]GBocKWXQ"2,i4J6=6fW4-8:<[<g29gbu`Rgo15bd4+Ve%k,h_t)dAqMJM6f5JGaX.,_Xk=#^%&-*ce4He%&V)hYTK,YXJ#5!!BE0uVZ"Fu1#R?B7]&lFc_)pqp3,XIYd/jZs<2po0tJUi_@F!5m!,:XUMAfkFA1JSY@:>A>dgl^)L%a*\H"-6K/UB%.0^@`Z/7D4QoXM)-;'rP=11<+joM`Is+<(D,)CdVBG3IVo7/:*LZXcBQ$h#sOI+Bu_Vr6qo"J7!l1:K.)piJoD&V%BhD)*_Rsrf=;el&H8WYUH`=8ZY!>`[$/YlKm7?N4@5.m2V4,b>ZM*isqCU5egusbiH(DOec#chhlMGHO)KBZ``S<-+gib6=-h2%.%[iIM*-HoW+Hu$m\A`[[j;;SP4DK>`&a';qArOBbn\*mG'1%\s]Y&YO[2`"b$!:V=CHO<gDrHaapZ;8qL%KI`OD$L:YX!07X#%!F5%$u[cg'dq/7O43J9aubsB(s`.5?fh.CqD>D?Gg/@+2o"-:O$oDFK[G2npBc#g+WCHc`WjPR8cs>aXW3,NB_E<hR5O/9nV?%2Ela;P%T)]UbVW*VnCbE![O?CRD.c$Uc'Vht#D.#kST,f_"i&*O4Lf?:K<h(RN5#/WXVjL9C@1Xj]FHOK+)4!-TWt@RoQc9S9FQA?"&GMJj%Z3*\!eM&'HYK;RAgIm1`<;D=hh(^@^;tmei:@^)qJ!Zj[^HHhea!VC82WuT0=M"]5D,&2<28TZtBG<hTO,DrK:N_O;<A5Lh@%4Ga%@"S[1>:b4"9(>'ANnl)O?4n3`0cAT`'eB-r%`4VjWoaHuaa9fWO9@$c"[lOZQqn<hn[*XG*`45RGhXH@:lSnQj:Z2?S>Yi1(nqUi%Wb%,eN?3!W?1rfI>8ZX;9N@jX]^70L93?p2DLqki0#(C@.IYT`;e0:*3bLQ>V=->(o;QW=OU2&/B7\u*)%+r>5"b1-K[?.sHt,-s%FBGU]L+oR7*P%8cbAPOH.dKYW%=+K1<JZWK9I$VI'o5([+N8@5-`h&^-YhAsnpj/gCDmaarZTntp-_B]M)Xlm1R/);MIZ"-PdVKF%.Ar(&efiF"0W]q1LJ^Rj5T*QnD-_3?F&'Xr^,<T6Vj1Fc\bNn1h,b,.-)Lc@1Y)0]`:S'oC[9=nV+_)3i)U0;BagNOe1NB4`Z*Ar%RiAr;5!5K>gs%b#"`K4BW!X><Wpj%,2''?7=YDeRim@q0`$KM8?=om94R967j=mq>4`:,o]Z&[fD;XU/Nu\O,KnbD_^QN"j<")-<%^fh>.'H@4)deG)*lCtTq6ktd@$A]e<+EGHLmtgAGdK&c*[DTH-\m,rdZ)'>PYlr'<%-GR-.4'Ae2SRfP-&bOY(.0pC9nNPCe5$$!%k>-@"=KGMljJUH<\:\P8N?SH9p%7,)XI>6F2[TH.0g<hX53u):=51tW>(WtoP6l6Qc[f']*O`"l6S[+dD9QQ#6nc%(B%+@J:.I,E%\mP!SYuiNm_Os^+ZBIL&F4rP[fU7@D^)e.C%!DXq7<e*o&I=hfS_SEEN<:M=b!%P@SSctC-03F;"8\Qu9-Z[Ofds=+F`@D2YRpFq%e)Noa!EnB-r)>["E:IW&'=D2FZ1947N*'Ul?qjoeAHKe*#e#=fPf5N$?\[\O#8UPFX&C?18&RC-M3*DqJ(`)[5>#q0KOJ?pAPR?+%=LX;U;ack;poSaed%j1=q43$D:3&/2n48qh2iA8Ji748$_V%1ei;IO'1>p^[1;YpJ!LTBR4&^@pJCr*qhiA>-Oa+oMM1`'KBNdOs%c]+Z-6T@ar;`Cph4d3KRg.jh%YFFs"ZOt;:.kVff!c&G9%tR-(*'>7%bXu["GQAqPrS<jC!Rg<oFBgX8?se(pg>qXuE&7^T9q)*W%Pi]4u9`QT,1hEg#H'2AgPB)sh.C5Ej.G'H10_duLg0THZMT_KFlF0ksT)6ahhI0-fMIM@c,aln2Z**CX!g2"2-8=XCVutR>D'BMu%EEj^22M3ZWV:W^8TX-E;Bo\%6bC^u7%2g2bFOGgQ$Y&g0d3E?$AYhNXTWeB3e'XdrrqX*.NS`O$T"2-[DMZ0k]"\jRKdg*[+2#T<%'Clj_=d?4^&&C)GhQX[&NAW7+"&@S.)ancZI!c!k)M(?A^NE3125s.XACt\@!Hk\gYG]cVdG(\pp5%1='Q.t>q62B4GK^VG[d9hY%0BGq1<`?Kj-<#!AXd;N+M=;Ys,<HJ*><k(H;3;;c1m^\[Ll1.L_IH&AkKR?NN5+_J8+f5a'TKFb6AV!\$73S100X%O[(Ykt1(/rh%csjr+WaDkk9bL"hg7bBfKiCpG6R!J5`7Ea6fO(`63&@EWf8E*l-kWTa-M1lC@4oK):]FG,1tCqq6)US;^4'Jn3tTTb&F4Sj@Y;RQ%dJu<_50-3scbnLJ4`2U.8*Jh.4[\*&c^BcC:h%b0*@c:ro=&pGqXtqff16ME-&Fr%ZTo4r/QQ/GGXk%4ch[.NlOr5hOlLQj9n2;0%@9QQ?h_'r-l>js)Slb!Be!j!7fSGEEDM1)-nEqTg@?GM+aF^t(T!:(/?o0cbVKmBK:1Qt_D^RUXmor%8!)\jfP.)2OBb^A^)pLPk%DtE,8,5r5!@T[Mr?_nlTA7dR_16bg$,"O$9V=03GTsS)=89EQ/gO2q]D,>.'G-R1jqqS/o?4bR'$j//VN'3NEo%D8:<,1\>4V6so%=?N'oY[MEbcK-%&`TiQV9<ZE^WjS-QYL+'>g$"GVH(DLdc"p_"jRt=<SC7DE^nY!_h,b,R;hrZd]&_Z,^t3/(N(gs/*Jq=MaEN2:%j?(=a9A?HC*orV+^'D1tX^cY>:;1omV%B\*O'IfQ*-,hZD1eS%<+/)#,LJB(]`2#n&!8f:#1?&"d5J:?6=+:VG-ColmG@Xh90g^T%ZDcW:h$YgaA\lX9[/.3^Vu(AcdLF,V*KY,iW6"_92O8Nhd1]`.H=eMl>bB<o\YJa!p-R"Z^j802=7t9H[0T=$VHV\Sk;J@=>WUqn%b:@ViVJToDBCs,%PN8*gfD0aJbi)@iN0???XR7S#<s$9gk1?(F?*6+PobTQ8ak*"enqXD-MpJb(DG.\"<-_5LqRpF$+3YUHN\9dN%j$!1IFJs?rYJ8h9kDE?Z0/#_nmF?mcXi"p`Wm>A(rPK7F]A3OYn6NrDU3F3WWcVtG17bsR]p?t,@oH=9W5t/Q7SgMKWD7IVdBULX%,tKQOELkP/7_VSG76]@!ZVS[.[)MFPs$?mghJQ<$1CR"A;k_[)VKc'<=Oir8ih5(+7*n,S'*[gL$o5.F0#`:;4qfAE7ReC'h;=tR%jp]ZjP9)n<+!bc0$ILRPH4s-N+\E3X>jE,IZJa6dM('lK;eu#'F1MHF$e6utJ(/!R'^`k!##R;46+G1\gUo[ejt^4a<#n/jSeq,0%$[jo!RB]K:FjL!Q*L=Efa"A/K9uiFL`[QN(c,`t#kOY(TOE&Cp?P`OgAB(ktVE?(Ye+H.YV^4gN\"6T.S'tP4)qZS/:%#r_%7H8I%<=F5Oe'$AWO'^)(Tf9G<m%$YAB,n9f3lQY<Y6%?U+BI"P.`LO>^.XS:)s*aI7BP2+b4ckS-.mq45FH6=JMqr,_\Y#tI+6=`a$$9h%7*r%im!0c3/qKgI4(_\MC9m5@Xi2%cMR^ubBO_4n[9sj7[*-?-?KbWEqQu%.e#2c?`1$s<#RLu!oF[3nEX&=.C65boYJutZRn=+@%WH#@_"T)02:>"T=&rfZqRbR?;0l;>p9WBc:)YVD-e;S?BOXF-XFc1B&U(gKea@+6*bf59-GsOif4\Re!BoH,u:A#=:`'\*$NJYj)%Ztt$jgA6pC]b%Q>b:Gj$5+=.KAaMFaYmI=,(8>Q98_<30l/:J"1TaMrYI^us$2i>l%<\U>6^"<nmcMCe9W+Ffo:T0m.'YB0Fd6ZH%@Y?@hS)!799a2`qD0.itRE;#o7G'PpK7d(rijM[5T$\r[ChdS5Y>!pfc\A>M'R?naSJ12Q'+mso1u76VoRk'4:i!58LItuIrVd%(%'j7@/TqK"\,<C[]pkr%6j(0/?LqYc.l0>(>.sG?>>;:Td<[lA&9M9jO8BbYbVVUaK,'+9PeuIFC\^Zijo?moU)_F_14!L1g?1)%!%X.L1.Yp572GMgLE>/sNI6B9')"!b/%<;*SfCCJ>N(4Y1M5Kt0i89jK%o>SbTTD*a_OcK<:UABe;^81YSV<"7*#9B)-F>=(]B',E^%nZ9C;5fh"7FF0/EE,2l)$Oo6hoimM&LRm-*ZR_'dZ^FgMD&%Dogo2aGmLr'/R4m,(8!5STQ(m(\C,5*KC<]F36'7R\SE9gG@tCHq%'e?;(1XjqG3#YLTejai,`p9/.R=aoEEFB,OO@*o3!MYE2eN/<uVtqgP"UCD7mBlDV2k#7FOORp`2B'->Smj$![T+._RnQ,8(M01-%EZ#SE@lfI".4>q*od/-5(7O$E=`K$7)L@!G#LXeRa?&e?E-U#3)F,[i#MJ>6H$Gg[a3=b$RY!eL;f>l!q`+;nfMja*1Ojb,V/P7r%Y=7p_YP1oTc)Bf.HmXg<p8NWjN[[6QV0BbeT)/@!b8AlB3FoEGm0BlF/6FLBjEiHNf6VE=V,"Zh?bbjR1T.$T3jp@mf=lO0gs-ko%1uQ1S9M6G.,*5o[J_BG8.l,+TXTe;OHCVeh`QeS!>DZ:I8ii63g,`5%j`YN8(#XoilH"Tg#?&;VoA3\75![\"*_)pGLY@QEa`sA]%2a)KLP>k/pr\V<2Cgg=\kA>,%DdrpI+:hKb89?jG@ldqWo-Li1GaHn>r67cU()W5QI$.+d</>kd<0-7O05XSdS`lc-4D53M9r;FO%J$4\R`4")23^#4C,WVa]FhSnUF8.E8UR,i@Z5nDn]VRn?(kSF/qSe`p,lZKSs.lO)8<ABqI\Le)ba$UF_AdGI2:Zj.ZW0Ro%VWVU%`QK$+*J)K/U1;5aJW(<aCP9]5=p%Yh^Fk!u(?6m(C]IObZ6Mq>*i5g&p3N[Lc>Au$4")j1GYi6JmTX'j7RT["7VjZ9,O%d09p3tQ%][#6#U:e99ERq3=2osOt79nV\kcRc'1\eP9)h`?Z4]?L]kXlL/Q2OJ6($(HHQAuS]EX\EA"C"M9CrVVt3JYAbBG:QrJDced,"YM#%8l6h(C80QG[qFF^TZT+L6+J/*L$G%bJCP?DAF8K@1obr5NGtMOf1C>%cf;'d*5j'DE)Mf;oZU-1`Q'caH&'A:DidS@U+H%I<:Na1%&]:2kq:_Z%-'*Agl26ph'rr8MaD^7k;5l**pmD"#QJ7+2Fj'D_Ygd%K`uUKBnW&#<$4*OVkoDR6JJH^",ou#/[]=aG;EP"2Pq"Re%r!=Qr6DfSgHm($)*<d(r9%,j/,"?Ct4$)AIa&Ie>a!.c_1XqH;#b=!s<BL?1j;q8M*_;L"OsUgrM$Xgs)QN"sg(=FgM*t)*#R!G6%Tln:aBk3]I*Fm-ZehQb"dlO@(Wc]"@r6.n$.-k99.&gB?JU13T9(VFhSKiSZ;c+Jj1^Go%*2R<-r_K)[S1il?D`UBk>oND!3_*TC%Mf(RG5pUlbC#p=+3lb3WqE82tXp#Lp24DchKlY7+9Y5!PJP8fEJXFElQDsJWSjfK!1r`VKP01%Gbg,0XQd'Zcm$o:ljd8Z>b#&/d%lr)qI,f4MghpBZ$M2bBo-nA=lo!+Cf(m3G+rOg*uR`_m#EnM^9/4;>4Ic`t/O=l].;#S@-?a@nD9E%MJA*GH]-&nZcVW',(K]$mD%#YP_tl?$rKTpC_VVFis("fG`dpP]LoQ4hcd)+<e)='t^MCA)cdH;99ZR8J>U=07u;8`c=3nNI[FR1_24B<&hAajc/5Fs,2C^ha:N%VWBS92O?q^Ll1.L_L4aW-LFOhGRE^3EbD<j*HDl:^=GfT<=N(&s,t52,cLO_P_l&\(U*[#;NDjY/%e_XCNMFE>Nbd=1mV+$V%rPr%,P_J\dkGB4JP\<q&b=FNM5UGr6`)7?@]2p.H6#Ole0+(f=6$'nVL8<3(a!02f-fNoVB.\&pSr-_o((JhZbFhlB?#fm`V[m:hI5['%GO0+Q):u0'(dCE`-\8%Q4YrC-)6,*ra5U=P6;#G\VfT;HDbmj>QF+r-jt]fBf^OdhVN[qHM@KinA+k-ul'"(^SRr2_ClM?g.$?,&%]#VciAN#Oj#9`7?kQdda/35i@'c_`.4XZokh7aN#1HC-c&JPaEJNJSQp/,rQf^hV=TYurt4kmJ8or>M]h?<%r+s$81kFd\2!._Sn%_RF)r?h6Q+nIpEY!DK7Rq[bIkJA,W*c]JOa1_'`pKCuI*m#@BY<F[43p-^LA=A[YA75(W4!$#`ad>JfIFMp0TFjbQA%(bdpW>Jm;%CD3'6NC]gSLTjo!=V^B8aTNqrX7Sjn!7RkKRh3m;U#p8EOJST!SS+KWoWm5P;h0+B@'D35U<(%]Ub+gc0e<AlU1\'9DKNu\#+=gI%mi,b=Z7kI7EE(a5)AIhV$>$/qlAjJ%r4(G5GO"iH'i8!!B+U?]ECs*cSW>O)MYh[3C@aCt!ssu,QlWA-;7jEYkB#?*o#'6Rp@I.Q%Q)"K1<2WVnAuCMeE30kDEb-gSo\uT+:K0E=qW=0+J5p,iA<#]%1m2=TB<5X7O-_;B;m0i%J@b$QGGrfI'2)?^EMf.%4AJ%<SB&_g%89?gF4(GrN5DIil>+JEL+6Q,!*V_@U/e_&[*CZpM:6gXLqpH$5ie\Lec%Fq>dQBR&SbJS#JCp;$U!j[-9T!=$?75&Y1P,Q-h0QKl%g=&d9Z(Lao.$9O"/Q)Jc9jc<PkYgtIC>KPW/K6HZhApYh2\<`jLb;qA]]3HF)KT;hT9lVH\\mHZ6_q9E\3k^"nVTs&nCcTZ?/eG?%AY9RNpD4RP,>%VNV5W^?MPq$2XdRHsBJQuAclIpd/tdSndY^NL\r)3ba/)EXo'pmtI84*]mS3S=aRp7#/';\K>i@9np#7c?C@N3&%E*[`AkmB7Zm*I0YDGb!C*F1!g1e96637R7HRb:UB/nm=W[>k,2^#u#JHKd)FUjPt7W9-i4;&Pso1QAr/A4gtl3e1>0%eU+FAMk^L%E6%8M#":Gq6++tVgPe:5B(8ms/kJVc'";"-SKjkC>NFF.;7HJs%Qe\VmOP0d+eci/;K"r!dO1`$L/Ju]I/6"e+.>B")D)ZU[AJR#%/KWnVZ;?DtWg71X60_"SR4tBIVTu@U,+-PaFrG[N>I@aZEH%5F3kLkNFB2s*?%#\9J-nt[7a,Kb#VTVHN,Zg3QsM4<PJ"_e1qhn5%/FS0kh9@,uX(X$+BN\'h^5foB,1KmL)f-]Z,->1pm$3*slbYcMVTlU#4XBlk>*3RYqbRa.jQqu!4@E-^U8dp1BZZfB-ZLb-<"4nG%b>QW\3b:-T'bG_WP.^)p/OlO=-_+Ji0U&sOXok+\AjrpX#BnMLgFaP1Ve,I5@572n^fHF4R%7OUM\2'`Y-*f\C`iL;-F.%EAbscC%2A!EYZ*e**nlp:ZdV!If-ue>q>\XDY4@+"9.gkO!_<@C1P8[bYbHl5b.MJm.U,hD^r?7cW:_OO9F/>eZb9h\Nn*>n&WEQ%]A7orL%R5(kmA5g([O@-[^ChJn31j]<@?"Yc9;npMY1X,t19nJ5DdgSs&FNTbU$ZO#n9rSO19sVqi0.h"Tl/m%['+b@HCg=_T29Z(8]/2Ti%0L_e*RNs,@cK;Fg^$C)(Ce^)<9qkS1eeA@Zfp_IdBXXd;8o79(JE+2B8N?2tc.4S:84t`NRB]?;Qf,I&>VZWgPpK<1WQE^:?.3*+%\1Q!+?$_m,A:5=OV5[&WW`@K[.]#'54/"CKJ7N>N1,S:KdWN`o&6PA]KBZ6S.(aO.&nXhD@qNXn*tD:,iE/7m&Z3Rr[WRHG'+G2o%B%6F42:n5j.^q0JA!5`lq`@q4Gt-GR;G4AOa]^R.+*V^_iHX23cWfb6fpM>g&NBHYTCipL8=(i-eG[>q!VqV<9E%L%'-:IS@DJ=H%Dkr;R^,k'0as4BIdIN8eT80OliLp9D*b2s0]$$T.Al<Vb%o4[%Hoq5Pj7aU3#sE;=e#&od6U@-b0ErdA;j<t5-`Snj:N"A*_+p'E%Ne67UU0iJJ$Q(CoEKamRBc)i.(i,m.VW2gIhMb-.33`\hl]\h'@Y"8$HB/p$9n1@.Q-;p%)!G.3<0G;XpEKd>f8f51#0_tk'eD6I%:$Ce!<_?2\*X"#>MqjZ*!BCd)VGrAKSZ#"o5Ii)h_ZhtT+U,[lUbuluHQKTIi39%7J52%6ZI/"0n2=F1RgFJM1KCt`0_1Pg--)Sp%K24hB*o.ti8,^/2?]1;\lRFM*GkI2:%)^Dh6eu!XbRSC;p"5OZd-9K8ZW*Mi2t9u<#K'm8cH(/Cqi9=KTOnJ865=+`U/IgI&@W!<%VW0/"Q+Wa)9e=kRl/M</JugV2M,JL=!Rg>_+I>%rBK:7m2.Y2>P<_5dSQ1MEhDA>6147:AUcg02AJks=hD2Z;7:3FmLdQ[O</Af[%GB0HX8QfS#?tu-70e+(l.A^0i0hI9-X=+6IfBX$6b;p2c#U4WJh3r!aOBb:r&mJ823]-7[I](jm=L53l2?ZDoZEl8_6K'D';C"UJ%J>m2?M;TF]j]4/^YhK-f85ISg6Uc]MFfWu,8A\38#iCB)GmD,m9K5_0pq=oG#<\diT?u*:0gsP-@7&2^(K_%qVoiD/R3jMQ.Y>Ll%Ej3)KV6If%SBU%j2FOC0NsQD(iNeCqV'Mj?&=IEp;Vgt,0b<SX8h5Kb_"?P*5pSTGE013q9Q/b<[mEI:i$DXCA+kAN=sQJG3[m<0%',OnM.JmhhC2t2UnWRfq=Y(#jU;6Fg(gK4"/cEauSnNqfiul[IFpdQA-fA=#cH+e%bO=7>IKig7//e">KW^(T?`ciGHtN3e#JZX(%@-9G6!;WM8iQ?ir2k9]h7[U#5>22H%TM7$A%GL3T1h+J<OBKd-(ii=nEFK,a1/cW/>p=a'W+?Z'QSY()@e5&&<+j4Z-pr>dWeFKc%92gc7Ec]Eqf_uN"NhgPQk+/u-I!iT31l=b#%(/qQZgg(fDaqSpe'[0@(,\*pL`:*=b9Dc\pO^_Y!RN-^!2@qnR>;OlR2!W[P,.1B%R4r4uqnX27)94CiDQ/_o48*F-E-H#Q`k=bL%=g`a+DESOA*9U2kJQ"U)FLDM`gJ*m<4pN.j(8d.o$?9cif*uI,$LRZN#41;rf0,T%<[fe20QWaL"Hg\6RaZ;Bf*MQsbbn:<C:XtAUhTl!S?TNBSqnYhfP@2(XWdJBBFLu/;&>0jc(Wgd09&iVR4,?^#M"iNY&en.(X$U/%,J$L;L^Tgnqaag1*QM($lM4f[5op#sET",F0(dl8VWanq\"&78g;`%bGK7[qma@PjC7:bKe^X5n]1[Lt^5eUpl5!RkA35s/a0<3E%Q6(;F(^KAP1P#4e0@S'sn4/++<?;bQ-H6G6SdD_?6sruE$7>Qfl;/cN&:GOn;S:9eDj>o06J"2A;e/8rR]G7qi@`ahdeDBh?ts6I%j?&O'GU^Gk(]\Q-(HoX8-tMk;;b<hh6sbq!aN,-V678Y*/L"s+EiF82<5$f8+TtXA$Z&F?k2[ITF]iN6jo5]4:MT-<*W`@t%Kom1%\n\Br859q%8GTW0>59"**GV2HUA=HoHe]Kj.u5fX9kiO>W\u%98Y?,o)E/Q&l>Zf+rf^ch\/SCm?U6"SOTY;ufX"A69Q_2gpJhGl%T;XjQ#\"Y"_NYl[5j-g`&RrFZ(?kWN[c^pm<jJdK/0,YpMH@k0XpN50%S!H1WKZkDnh@\WgSnYp&gGc89]`.a68G^:K,U\N&W/=E%FU%V14^B7k;@f6$KkOtj=-o$a=TVQ@6o=:%oW?fq0(8aehI=>%PiYpTM2"%o[=4p32EiuCLiBiCLB;!D8>HeZ7W#"0,<&e9WZ[.N%?2C+h=p_")$%UnN`][d!(#G1Z*"Vj^&Nj1f#a6%]US6iqQ;Td]TSl5e,A>.CYtW%j)o\<'Mjp8Ue(eHtgSulj(Q;.j$"[L35Xb/S%njU3qFajH.F^CI_9*Sgo^3LW'&<]'3mrN<c)JM"Dl-OUC7%i1s>``\?!cK0$.eW=,+;05Fe#h&K/W%OF.XBl:?V<&jG^o?kFV;9U%E.N1'^I94FBpL2!0\Al+Gd#a0e0T;_^&r5G^uNUK);STfhN2PM)6jaN^aA*I5s0%o5VsXJ1H[Ym0NT+BR)ELOB2hQW[5"kAG`9dh%S^Fp$4QL%;mR<fmL=K8LAAi(tD5r).U59:Ba>P16/KbP=A:.hpdcCDR6TH$3)?W`o<gj_;_L1Kf#K[R#R8(k5&7=._6LF9CW73L-%$$PG^k"C9F>ic2PoL*&Hi8T^*,iI<SR4F:eBOf"YVK0V*a<PKSAT;cTRcV)sH/%Gik2M9/,f5aB>OtaXfa=IFU*nrs[A#s7+A!4@%g2<J2OP+Qd!L*6K1'tuZAmXn0+)dWXYM5X]ZDc_Vk!NGsHeXjIS#pG:#!YfY<5idA#n>'5@5#dGZV1XK*i-_pOg%pPKj5nifPq^Y%&8LX]>-.=5Ak!"dhs\aE-rrYU6lL(PIl)GT&,2fBH*HmS!fDX"Ro`p5ia?CiF;>)jbMloW8TE*m2JKD9NR=T=PA8eEZ'[VEY\E-T%=LsR/Rc^K*-/U4OkP9WB4YX/ufZUJ>L/\rTjs8ljTHQlBN'bN&;9crK94bqGo^0%;$Y#t<09K..[1etC6]l%Q:Fip>OL6"T+@7DY%ZO<qY8n%gO?b]6d[PZkXn@LN58ZM'ED:0OL'rt"H'P0L)-a)_X7r9"G0pD1fO<65*U.N0'Bdt[qUZfWQ='a<TREdG]=HuruGn?b*%B+bHSdmUqiSLaQ$hrCTOcW_rWK8kYJk^PIPJoc"NZIB$GN+3W(/?aZ=@']/?6Vg)ZI#MffXtm_8n?p1s^8#F\]daQ!amVsuM#g&i%9H7;gpqCg*'i<VAB3pjIg$ma<Y.2d8CkhPFT";r3Tf$'hZrN,A,`@h?>m=k=8LfXX[oiLX7*1B&ble,K[No[>,UqD*L*\LlNfh9f%CIme[4XDcl\hnN$62.Hdo\ZASLn,q@NMXNEp*7eN^/Bgk79q:h:N35b*fn6ImQqDMb56d:gak4G*Vlkt!N-_bN/p)!`:E+dlI6O^%SoTbNDhm*m1,>h01JG_.@;[=S#b!BcAT)M0iNao.%grJi^#PKLXjDaBF(+u?YsbNBRp1j/?BuC[dGu!l#nDbTSpMXoP';lL:5^_:%%XU=k%gJu6pWfPmLu47UI+-r/9\@]+".-uSLS\p;HLJ'p+n&Oc5b*6t^5DZIZ,oKM?+NP3><g!cFu;ePNFJ[aVU*=L]#U(J^'XQ*%,2A)"1R/mDi$K2lbTF's!g3@i(@OQ=0p@h(]&h15#M?R4k"M+tXdZYOg.NAH&PK1_,d#;o%3p51OD^UF7)sreLV/k2;Uf5eRG5%[%&$"&OOn.,7F(5KD:S(KRf&iD:c%rXp%8sBFmIkR/ke<BD4A+a!)4?-GcpXK:H\YaA!VRO,c1m;V:!4$1g+s<lW%p*Pkr'[1W+0EL%nVXQ"`1>;FS&8R.%AIHIH4MBN^0P./o`AX\`<F8q@nf-EWBH8e&B.dmZELV.Gah4pEiE9=fFTA'L[=Tc"*k+!p#4Em>Q%Fa:+6m&%8L2q'VMNL&rKuAZT&NJNRHP)PV2t4\<@LX_O8JB9i`1_Erj@JQ=df$?@d.+Wd^N?/gfg%_n$%t#/nql6d^O<$^L0.pb8LRQ7G1[8%rM(tU!*oQ+4p^?Qml!@^:%Ke]V!FH>\=)OC/XDECA-J,8C-(W#HY0@9%Ohk7/X3u6oB_(uTQeTjH6?\>[rYm(39_sPG0UnL._+qe%WWUY(])nt;A^W<*WT4u-KrV[A#K2!]I`<UneDullU[GV/A!658#:;&kI`)?I#3(^aT'%d3mdMKpJOOUVR"d[RII#@.LS^tpa/F=R%9"SEl0C*)W?X&K;*QE#i2tb#8k\Kb;MIWX*?*AGG=DHs*^3bg_d/&dCUN]H%i+*al8`,Gt%XDr0Z1P0DF@L*:)]"?]VrpaTrdDP[%#rdPpVii_"h4CqYjD`/M^_3>!5I];(ftd`r\#k&`+=9AJTPX]t)f0Z3C]Sf<g5M)u"n:6RK_X38D!m]4_aj(!"o)]hAL6/?q-0KJ%4"O+I48*f#21&@!/[%jdLY1n_0tP9tmIR3hHgId,.nB+P:=J_nQLoV0@A$:hCjJ=^7ah1)]Z;p1eGB8$d8na-!9OXY[iG*"K*/aL%4@1"lU;!J$o`HC]%Fb0E$Wn,p8a?UT;OXT9&"QVE*L!UUpsQ(kc`s;=94+^M05@B8:RYoqSSA%U`fcR8dLBF-N^s^q&em&A><A"@%L_1<TQB)9FT(\6ZFk+gbpm$9+XQ19a7mc7&$;oggABh4G6VGZWLiO>_)UUfKrkn2)6L=dLf:FhSkbLBE8:;QaX1>ePK.G\=WV^3=%N_oHFH@0)-Dot83S*cs:"/J]%VX+s/%XQ[h;EbS%1.`E2PUj)9`!f$Ib65+r!k=2'.MJulMnThO0(-j"6#E5&X][SOkf!8F(1c7=%QKqUpT6L*VM^<M<Z*5J;qAif*Vk`F1>bk$?A/C[2PsbB>"Y9:_Hht*P`+B^9degNqeR`t*T<kore$WOOVG_!cWTHkUC!e=UpJPam%-$=d#a6(h0O_bs)fXp^J</m+>\3aW8Q4,luZYKp:b<Xj/c!*%ZT3t6:;^Am*DfYcHoF>2Z=+%!a/0LYmOG6r/`0.L,DIuKgbE/gd%oa7?nM9F$\)J$dfj^?B.BT%bbUiZU6YKSuNct(;26Ja@_P0tM=o&9,-Hk95'51E>m:PVmJ11r7$LHLh)Qp0Eq^Ht8iV_X6ph4fI6%$:qdC".;$I)]VH7L/_p-GH?Yqs4!LBIZe2R6]gV)9VXrohb]262IkFk;H]>"7-K3.fh@9XJrKJO<\ue!'Fh%+%?X_&UR58lESdjr%8.^3;WQ4>S\R8^2Ht\^+Wl^;*O=$8JVZIu?,Dff8Weqq@M$9!4k]AicTWt")WPRhU9tM.'Sn]q6WXfJd>M'(,=O*DH7"E^>"[?_&%TF6Z&amS(hk&$KOG3g#?G)N28WPcJYFC>1sNn!4-,/ftm>>B(J7O/K[?sJnc-q`gi\(_fA&c[3!=L%\3!6b9bl+nR-W']ENH&$dA%M^CUB/>qpZl?M/.P_,sIi$1IKjB9YM\7&O!DI"SB:W"3;^,0O\A!E-&!M>%m6Mqg]H'8(DjD"L+\//2CGEdkQIF#B3P$:7(HZ!3r%'/]J)WuYq;MYgB-?/hX2$6ZlS$>5G?I+p/]0SGBNG(#T1q(aETq(f?inn!oYX!NSan'j'^>\qqJl/T[(S&`kkGDpXkCqDD>YDXTX%9^f1-p)iOlDC4c^mC%,tir0%UL3Z%Idl04t:N[bFoNI.[.n>=ERKuo7qXTNh0$^T[efq1ABJR'l+IddQIIgdW"&pc#E[<oSW@8`o%'1#'>KbDdn7*cLQRotL]]m;$dEGTojSQ_M?Qg&h/ces_+XD,LtdSj0]jW,R!O^+LVYVWt-Nm$jFkOL.#=>U6u>Oe6ppI1,p]_6q2%lXW7"@p8fKniUTj>aO<aFV^@tE1)cOSk!`b;Z2'PjLdl/VlkIteL],-16iEW0`Z3[cGn)[81W6dSViN#p^n=+E_1N]48ZhsR\IYr%D1cju,\-/Q_'2>[J7!#Y^9bc*g3Fa3(min%X=up'2E$e+7s$uG9:74;jnp^iY-;JC&P(JT(GdigH4^JWMHl]`T,H<M4-=f-ha5em%R8Q1rBs;eWNYs4eMUpM2FK534"2kgF"eFH3<B)d.&#,rY;:+ldBk`*jlVc)WIo3QFbsVSB6.(gJLbP&2($8O-JZ6b.,WhX;!@Rt>%.(WXc.Cj8*kEqtAYcPO,n-@)_9r:HL)-lWQ^R!=/Y_O4nih\Xdm4%Z!e4@0mZ0[\di?bDucE9)nl.f;kA4,P%L-QPmZ`Tu?;8e`L%BaR4emI\B"M+r8Jh`+E#-OSU$:W=8r+UKuIjKcI3n.*dVCP&X&IZQj8qUqe#'2,'8-YVu^rnd;jNAFVj##39N=Vg7PAZ'E<Wp$a$%k(q6dCPIgMDYps&^m*;!\]4185CH"Q%8!\lkGJN0ci!<#-3&pg+`E'@nqI!C4\u(RPSjDhBjWs64dcuYitKpY]'p/U#$-)W[.=4`%*L=FQ_u@\(go$2(2#W@unC`lmH/jDKc[Y\Y:WLK1[hTtJA`9jT%R-rPR-%DR"=O661QmfDiXpi2SQkueY=[rA<$@/#EKWks:s+l=%-qW(AAG$auR6&JCaBh9""g"7G=L"'H8uZkH&6XC,C[ZT\"Q(@k^c6?`,TCJCLlu/HdCUND#bM.+NA@<-CCNHs2A,T7(e^'SU5b]#%3EDImh8[oQD1VCB$pMPk/RL38mga-[U-]n]jD*J=oLW>PE;S:L=:4m(jL%4/net]o>]u*:;7_]C6Ei=DDk/8O!/tkXR*!5W*Vt4)%rE>'lKKPY8_/mn1_(mr;^KZN$"LLg`Pu%@8Cn&GfEIeOe9&J7Eo+lC)S:oed94pP8'Gd*#g>e8WYUJ2.+?f.^]i%ruhOtefdIt,1%,guG*3jscrgZX6e+Z1FTGo9kk;eXbN,S(']3!UO`jZMOs\EeO496)Y9Nlf?<]&XgG`O3h+iW*]o4JZnn9K@-eo*diAXlu!TMZtdk%IWlhBg,U]Jq$pV\6#[:Lp'h8`=ZQXX'nua/,bI!tDXj/$[i2;#q9(4qj0BY,>5VFc%>6?m[M.(la(9`YM[QSC8F?Ncp;>Qb7JF[l%.LEhcEZ'.5-TDgmetIXqA#p<!:>m*=%nrffJ#153k%HU,XK6_)EE8EN\5@CE:R4#:PU&?/e8N#J!*@i2q3=9o/.d?/3Jd>W+];U-%2Ki;;i7$ULB2]^Oa*h;43=")3D[thGXAm__Ul8/X+H>E]Op&KI:H[d$TjIVnRrC4X"4Gi)>\4q'#Q\^?jhYRU9k3'URKCm%0<3u1%WbYdt@+3>"kZ)Eu`SMqhTX3.^aW?&,<-0DI@Su5V\p"WCZ*'#Tq+65"[\4,8YOOX?IQWcipf+,dBl(\obVJ759^J-P-Xl[siM&#U%)E0K*3aXkI">rq7LrRPoG27YbhLr/+4iMX'(E8NhTne'F0LtOdS#j)IpUJn7]Z;:KX>L-eCX/n&S(+]&H-ee3k'*0q,KN-i[s+4S%6@ZfgM-"Q0D6"cdE9D+"cZU29-;di5=i2\nC-YuDb"FU8"Cne5*T'(RZkCRS-dLc0Aur_:i]r1'$_usJ)A&tT"p<p#C6dAE,RQJl%BTFJMfnu:tHHul;7_^16`pcg5F-!.XnSdkMcLLL<hX@_Q<L,g?3skfnZ+oXEi;=#,e2fT=6pr^:aH;r_MJk7oaH#@%O<k*rO<"f-%'=&i]*7f^ke1Sd&;Epa/<NlIJWh0*a$SpGcK3(u]'qFa+Em(&EoFO\B2t3HIWZV_!*[ba>a;UdW<_n5oKm-@H!dhNfb@*d;LdD\Y%3UU_\/sn%0YSg5[f;(2M!II:n-AU#$X4T0"NiIm%^hr9N_meBJ_bR(,2<nFi=$apG;P[!BHPk12)Z-HA[(qo$ju'Tuo-b+a1`Xmt%Xli`ucGcf)BMEZ'Bm)$EB2r:]Cj3sEaIgC9FOAuuo"H1^jNn!1=h%pd*&LUV*L'&@+:_(B/R]Qb6I@1l%(m)D,7b1kgL]M"+1fHE%"1)cf=":VsEo=aKnpAmP^t=@Y#KB2^+.,<&?lVh7i0T?`ls.-BcndB@]>GQB9SQh47P03`"Hm"Lj:j/idOm4`X)*cdU+0L:dG7^#%85MBZf@Wq*A_4T`7"`j-WM138["DdJe>g!p.iWRO;lO:s#oHKUIWc&'(T-c5@5PW%JD%A37Z>X5-]QJZrA%iBV:#!Tn$)T\Y;/]T%UJ!,UE[q=j;_Namm2_M,IE,;&&/F<RV(#m.8&fp=&/-O[:LGC4!,7U`bSN-YdYhAifQZ;ed"rcJ-8GVXdR+-#''ok#[q6ajK]f>h%C/(Ot`feR/Kc4VIqfsq'8`qt4n]:0/ds\V=3OVEt3lcnu*XGZrloVs,[d-MIC-n:'!h?%!9b&=oAjdYt!C9KU!V*^rh@\*hd32%l%FHDMonX2;"#?8/VqYGH3/W67Q3B<DF\\u]40UE9C0sKn8,ees,^,.UT[@*>bO<@]f%]3f=b/_A9j'_Ej+EE)GA3Vn)q\5o>+?E9'%OA`&D3U`?h/I@]^d=a56-qkfAYjCo)EZoPLZ\*N9-hRJfA3+==1FbH=mC>'K26<u[!9+oa#6b*q1*ITl6*MNVAg&*KAgJq`[U2[I%d<F\hBktLb;;5YK_%!EiJI;EbT]MQ5hfn8DB#bh!_GaHrp^6ru&)#&2g(#i&9:0G4S`>Taec;JFnU"([G1l9p\Z:ImC'mTnJPGjN%lYZ8*>HroD+/6mKPs+g(bc;g`8_I%1V7i.^Dd+#GcWR@K/q1?eQ;lBH)Om*\AGSEuZW-$4g$!G!_g4=4iHL0qJSPpm1OV:VL6u_B%D!+f4k`t/IH#"5EOk?RGWUl=n!:[[tKe9L=;1u:;O)S]8ln$\3Fn"LR5jm=kAY^e3OJ4i60f4tnEg^D4DmJCD3E4qWGE+u7d1G87%7L`*AXW<TfpCK2G0YJ]@rC`M,k#Zi$YO#\\9NqHm$fhu7X.tWs!>sWJ.0#gXEj^1ToVXZZ)TL2A/$;lfs89<uc,PbJ-m"m&g0(a%%>$.(7;8H=&!qG5\M_QjV#6[pZC=9!UHcqpGP7gcbjEA3V:kSW(F?h"EX(Yn9</5LljGL1$a+u?gOB&`lHA.X/-T=L+5'EJ:\Vb\,%*]IARhI:B%<ca)0cEK7<]ZL3QjE41'$P47F>h9D]n`q++&@(YI0qsP'_'/@3;aKsg7)mr1!!@G:-A:Z^2peGV,!js]5=(F*2^6br%R,kh1e`j$.Xm1NJc>Hpaf`>+"$&Aoa&GJnhj+]Z/SVC_0\"Q:)kGRrh_JkRU>T!b"p#_6A'!Xcf7>95Lr<S)Bga:o5Q5)sJV+!?H%A\\L>59lK6%gGj8oPUq$Nqi;Xj6Ste-i=bV=tca7V"24!OlSlP@AE,"+`/m4>h$4dWcD'91=sC`7X!L9:?FSqX\''8d=on5AF,3]%:t?nJhGs5ZNDc=I2^:q4YHjYk'"[POK4r<u@kdeGY`PF,]S+(d65,)^Gm..^PAd_=)n`mH$l@L#'C3?r(?#E*8V:50KI'^l2KT&P%0jX=LYN(-H=cU$[^RCVdN\:Go67kJdqR%%##DuS0E@[%;`<i9reY_Y*,f_b5:"aSk+.@`YEO02I[of#JT]1V^;BFpZe-#mfcC=nY%GF)q1Q9ZY)*:,fK&ThMd_jr\R4Q!P>P-I`RGM:PB-N+]g8bFu,2Xu=FH?H5(c!7K_k^lp:l.(MB!SH'T^;((s5]r.$?D):.(MX"N%;-8,b\IdPE=HVs(6e(sf&l^fiQ4Vgrhnb/aBi;C!De-6^j,X;S`GK0W`pe70e7&:>Le#ttj!7p6bD)inDjB0F:p2b*(@-?d;h[L$%Q5Bb5WTi06lT;.V'Yid0'*PWpM:gmhErs!f*&MIKU2s0J7+iur;,I?Dk>I#))G`;&AZ,'2;0@iN!7s4\4_)nHAB55cR:R]_a!<Q2%2#iP&c,I60_d2/Yfp^WERUg(JW%Qj+iRt)Trm23^."4*++p*$&'mX*sd>2A4claX'GaW479,iJQU8W+n6iD-<H*`b@[88C6^FGkS%3FLNkGM\hrH)McghtlnA4(%A1(>X.\8;^D_s7pP<<Cmgu,_qdOO]-A6$?bnfioFEeXG,40B0M>[E5r=_:MbIMI3@P!kc_?Bl$?D2%^Zo)PTh_n0AWBl8qeR&aMP7Vc<AA<+HkfDXBTe^co:T9@p7G)_IBV-J`^]RAHJNn.S*fE#+./q9B#L/3Og)2AO\&0Bj:9'7m(>MC%<iEOXgg7R8jPhgA_(*dq]rZk\'U=2R#_5^sTnR#lE7o(C2]"jRhCR6D<!jFqWho!b1imHaj[B\F\Ynb?Nj,DkeNBC,P`P\N\R6`E%]XTnLVc`(_PIJ[r/03MCh]3Jf3RYB2Y2VJ&L:0sI0!?T:<Nh[ul!!_k(LCS0g"BG,'p(ZHVQ1-^<9:\*Hh!Gn=9bQt%eMSeiY3Od%d8UWUBKP<i.2CBd]e?P/c%6V>&1R#>N@mg^*uT\5XX^B5bZdgpXFKGK%XDrF41m2jCZJaACbSDL<$p]s=N';b=W/*?W/'p"`'+g.%(XmHWjAMNiQ6CD1FbS,kC_p8[,fLI*gekA:krWUD-ngCU/2MIpqN0F?mEk7&8k`d/`u8oOXmM666I)R12H^9WI+)>BP%';eehZsl%O;BJY4Wr$cX=V-&=BRY!3lEjcO"*5fVh%!jG@4aQ"/Lu]9d"FOQ.0$9Lnuk\At1UZ@RngWPVM<b.^WsM(d58%;%Ak*j>_M-3Y:VS%m(%\kH:[rDKi+Aocns84HFD#oPh`=h[4E&J77`NI)6O.9fV%i1a04CQ>d\Vs0Khrj\1s4a^1Nrj(fXLWQ#q/(G1[JUl%=p+Gj;0I%RT#>I)B1TR31/^r(O\%&cZLa07WdHYPhOZY5_Mj&Da;<)NhAX-G[%gaMR5$N`T3c+W!5r2.;ISLfSb<dG@dN@Xrq/.?1X?7H`VU5%;td-Ge"A95Wp^P?5$:[.<OJ@\hF&-Oj"d,$Y)H*j+aT&u`5'3R"!qK--mJPI"g0YX/gr^%G%_Te:o>u"B!WQsJcBr#)(+JbI8C7R%pXW#aP:fA`hE-e1WCOPhC:M_=`aX<thMGOiWu$Ko5*2bnXt%f.6g=IlH<L`L9JT0\4i0`iU,+.r`e#9kCcUCZn4LV9'`KDW/jY<1%OXrhg4[3W>aeW^:E5KnD&E6+o3if.P3_tX)flPRS3."C:I[1me1eBS#F[%b8C#Es)n2-!g*%*k1SPJteg,+jee?`;\4)5;W^O6Mg%WANSJ\!BpkFM!FPH^@]*4pFlA_rMR.=Jk4i`/U^_("3%AEu+Lr?9W%G2V.A[0t>M;-VbW`i!a5FR(FfJk]i63fZYU#(A1=)<KB45%3EP<o7RTa>O.RgXBX^-eP=m@!b[IR?XZ>aMlP%_L<hGja6@l@Ga[@P'iCt@>cr"tf.t`8!8mg!bK?DB?KsWK\"WJ..Rlh*\8\+Ji%W>ht`Eg-B.e*A7TX(i87FI'BZa.8Q+%$&gh\p(f$>IF.4%3OH@.fl]94K3dk"Z"VDm#cIiZ1Y$G-'-gV`HBUs<4%^?q=[:S5#Q^0%UmIhrE<bFQ)]T!#9VTREbWp9?e1r,B])!BB>oo2=8"5I2:6^EdJ9$d5-#9GB[n[7IOk@#N'ibK/7GnG-[g"ar2eN`WT'h5+F`:[Q%>NX6i!`@)Ea`M>_P"?8Kj)*L2T+X]MZC57KL6ri\gaIQ^hI3jpmkK1a6h8m;KA)&IP3sW4GDEHVk]$BMFlbKL#^\Jc[3?q_G"6.)%3Vsp6C"teC0uomX<_/nInkOh5L>6frBn>2()Y-cT247%FA?/I-TLum';b4a6;kpN?(Xa&DeWO$h,_sVYG>iXpJPG5kcVNduGT&pY%&[`.\Tn8#o;L[,32*u!8/\;gmF;gK#iD`]SmR\.i6_uuS;6%`!(':/c!^HiT)Q?>I=Yge_J/WE9.M+Oo5^(]IlY"/]C[iaq^8eb9%[a-*qe^SZr/lrQd"hZQJ22HnO=gkCg5!,Z+<GDKWV=)$rPeSWmm=O;6L!mine22c6.9,9lBbTg?#^,Tog.dB=j(/9NUF"J@5h3Ra%Dg9VPRT7#A/2-M:`H)?3"b!g#fQdlU*NI+Erm&MfX=C^+n&)<"<.Rc^5`gG\lM?Q@ds2e4Z(d:!B/)nC\Us_<C^_3^i><loOEF=e%h;c2dcTB4mLLmdtPL'mFQBWG+dOFDj90/f_9LlI/VqI>MeIeoT2h[tO3\aLKa,hk-cjDXcUAe:TQsZ(Ga?mE(24&&?RU&L<I#N(p%8kPfkg[n3Z;\C5_@c\V6PscKE-';\_*"!pVm]aX0UV8f@PXMRO)fR3^OOR05_d,j@RP!2h'!33u)-%<OY.99rbH8U]I-f$tk[-/<%$ZD#;-.,n.+q>pH>08[lo!F^],^Ng'O.-m)HO"QrT&P#NP$od`Do\;la9%:YNc4Bjq"CmH3\<?kC1USGUkB3-UKhQH_pZ$_R-ZeC%]/ss8Q:KD^]XjB4.M4q%!8JIA"&7Far.&OkYXMj9C.5NHUIHLXT"N0\\ogT$-U+QMH[r>-cCp?R:2T0#$<#u'qKGYj2q9nH7g$IE%oJGBt+?C#5+Sm',PZ=sZ-=g1AT\g>K^<s*[ZmM`4`b;>7;b>n/UM=9kXJ"?D_rtHtO"h!PP`CuB>[ff=>V,CIMG].R!B7WX)-kW9%dab6+9!1(Z4iaG'PPB0s@9.,%m?F\TTn/M><DEjkOBPrZQh5m83DDoW)!EslJj^2b578)@iDD#5La3"3Z_<j$5(fAjl9M`@6^UDI%W\-aPq'89kO>NSiO`a,^Pf(2>&As3r\j?fY,1`#iTgmXI/9>t\PM$QR9<4XfP-d0h#kM<hb[2MLdK^L0ps]-6I,&Pk#b3l27CH^9%hjd%6h6'/rU0$Lf[K$8H8"?jrn\2:NN^803%>S9HkCILWgt\[ZZ"M("4WW$LI[n%H`8IlLVn4"?ds8b@^E_i`ouGF"U<P(tqM+n,%l]P"F[(E;bS?Z>EqJh;PI_9/tM\0&B%\QYjfH1Dm28U.,8tfa1f1Y91K:Ai&/9e%o"_>oY[R)]gSJNf#`IidD9O,@YS4ROULDJ=J%:mcN:ic9]aAXL!%PXOP3/Z%T<ah+eGK&GcWB+%hO5Z;$B0@R`C%>7$,NpI@UCKR1?Y1B[Y/?]5\mgbOTR=gk8-EsoAnKSf%Hs'We%N/-/R+DmQu>mstg`/!of=BQbo>u"]8%tMA/i,2EScq"Zi'"!!fe1Zo#d6q3g^u^6IKli^Va6V0"gaopmDotrkL.iq)i"'rM5OV^*%ah(oC=(:^q&pYE)c7)#s!;mBMA[,'a*/VBi,^<0)*d-i>)jW)IL6`"W/9h_tM`A%^Dh5NW1t6':9m('sL.&u`9QV`[\CO7A*#_Ng%rA*I(8Y<"$#ns?iNp3K5Su':,VWM:&`Gde2SN"$NgQC]'5eEJC]H/.9D_)?lP8$B$AB/f):7CKAj"FYA+&\m#V-%XYACC]1+hqKo%DEZSV_sAht&)G(]B`qA:IWjq?-6^cPK5_^I,)V73U/2VOCRBi:I#-mb6-Z>AII?U=Xtr]2+Y.\fd#gp0NI6YQjP@/;?(+-20"aZ*%-G1u[d_F8u86W,*fa)gk5"a[:)G;I##M]Ur*q243O.4fZ-],+--O0QHRg-k8L:DFj]AP]`%UDaHS-m#@/B2)J0GdAO*h3:ik2OLY%FfY"/1,XL"''rOAUG#8pqY4#^+/Y(+N#0kW(ORgsF=__T$u4ON,/u+TcKU.B#p^:T61SJTf0WXQF>ccurF9Va.^OGKEf+>D)puJ9%XD<Z8=T<Fc*?i(`U/j,j7m,M2RlO:M>;T!*Y5C$u-__3A5&JXnNa_A=`'u^)pm4A:$;rs5d/4Fh&gSjUA,n]hZ3g9jl;fP27tg*E%VWh'RkH-$`L"3iD3^YsV->i%u,_JA$(L@+]6[<acq'IQIYdO+72FGo73b5OH=+m]`D*9b3ogKr]&2iX)QdPeof\P&MrOfNl#ceut%;I&gYMT+3c4Po[o6DC,M?W_lLh><=Ie2HLMB#CX4ae9jd=WAKi$>)"JYRlRub^o=EM`,e]C;,MA0J70>0#V08^<W.VLef^GF^``*%o6*J@FtAudIb\AB+7E=;hA0,BAk?MWeFFf?9W"TkQ3+ZaI??qe1f_4[+uA%R<#,eY(SO3FY+m1GZM`oVCZRu)!DVZ"Ne$Pc`=_QD%i[L)e/Q/Q_Hd4-V9])2+CT<Xq6o"L4U>(dZ3JU9LnVUe?XLUHZ7T>>V&K\:L3d5#JotQ/F195_/a52H3pp,`bOcaa,l$/W?KFqka%A>5YTNrt5f)rrBY=6-9o2j\%XUWL';PO0>EAi9AG4B/q`8hguTWbGOgs/!8#/QR_,9d9fTiJ+/b3TNP8'u_k0F*TI!W#0P"4D*\t%mN+=YBd*j!A(=!sf<C<d&iX!`D7VfFe!+&SRnO287M\!i@?V<=rPn3J3&nP6p;H7E2a*8`=9([uN^jdiac\G;+'Q0$6YDr^'f?ZD%d4L+`.<+Bk<HB"][;W(,QOpit1e1r-du/E8Bb[">4`@UD=/1=.Chdpf@_s,3-%.4f'oG1B,Cnj3-H*U@_DDqDTmf6Z63'koW\<SD%S+I]D*iBC)fr<K3%Ss&j&.Qbt8Sr0giaAYW.7m>]UoSEb/YoAlA%jRsa89&(_fRWITrbD<s,f#X<9Ukc=nN$(,3ljSrq%5"9B5t(%fJG\.;P@+AM1e/IH5?Vp6O4,.+uZ+OnB;$p66?DGURrER58'6=A@c8*V!er)BgcQhMC2,]oh=M^K5W;ESr4GsocC?7=qj?H?'%r#%GJOoEP9\9"dlE]uDePlB>:;(Ks7-Z[bW]rWq]>Y2dsq8eMnf;bDnc,J5Q('Ar?&fQk0*5mq=D?_+gCZIs34VP5!T)<2nrXjJ,AaH%hgY=uk:aRJVf.%aO.ZI7O+6qshuC[YIs[K64no9*rU-_i=U\)grEunFrUq>?eB'k&Yg=3DIfKAU+'S*!QnJ="00]F4^OH4=+2@Wh%k?i].`GZfYJ,8r0Dnl;brQp/rrqtZOp%ar(nbMYQqkmg$k-t6e[pT*+n';J]T7?f@hgP1JJ,AC&hjt#5f9[RdrUu`<J+\<:h`Ik:%p:Gg_huE\>.X36BoCnk</,Z;@s("`3.YmngE&#?sTK>UKVe+TPnBM"3WSs\fcS0'b/V!7KSd#(`Bnu`T)S\Ck7?+OZT8S$QiS;(]%Xd)[Eb!RlKF.;kogtl&'fd7F/kD%`b#N#`/;8_c4iRa)Q:CLPKk@3::)h5$L-5%0dOF$#@R7`G?</%C*=U*41'Ie]i&^cKf9?omr%&95tMn_hTPKKm86qs[KSY&pY;fD[sE.;p7Xqfi)<3a4hQd!l?*m(%8^T='t9&GN>YF-XL6X<BX4^\I^+r;VA%rS/FN!;T2ZHFmD0%s%cZOnk?0_*q:?C$gUH+3WDa=Z_S#:l.t8TpE<YHja?W-c0i!mH56a4;5&%kDjj%"o'b7P(@3JPZ/o60QOkTHCcQ:m#SaT;]P5AU%8HC7*)*2R.Pr<rn@&_^$M>M8;F$3/s;LGp0[p:HdB/*Q8<mb-,IhqAG3jnfG:%&%:"oXbiQT09YoAe;Q)ijjnGFs?[TE!pB^\RN6%00]?o2ns3Zru]#OrU7JukHDVsbJ3uIMdQCK0E:OlhgY=]+.lngpZW4gpuVPPlLUA"I"Q%FqM4YqTE"E:=9!NJr3&<aj8]&NIfh\q%Z/WOn`IIgO^\[SP!J9/&/c~>%AI9_PrivateDataEnd