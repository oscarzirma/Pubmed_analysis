%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: antibiotic.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Jason Schwarz
%%CreationDate: 8/7/14
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 11412 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDB7FFA8277D7D7D52A827277DA8FD75FFA87D275252277D%27275252FD7AFFA8FD7AFFA87D7DA852527D7D527DA8A87DFF7D527DA87D%A8FD6CFFA8F85227F8FD0427F87D52F87D522752272752FD43FFA8FFA8A8%7DFD36FF52A8FD42FFA852A87D52527D7DA8A8A87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87D7D7DA87DA87DA87DA87DA87DA8A8A87DA87DA87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA87DA8FD15FFFD%04A87DA87DA8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A852FF54FFA8FFA8FFA8FFA8FFA8FFFFA8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8FF7DA8%A8FFA8A8A8FFFD05A8FD1CFFA8FD23FFA87DA97FA9FD19FFFD04A87DA8A8%A87DFD13A87DFD05A8FD1BFFA8A8FD23FFA827A9A9FD1BFFA8FD0FFFA8FF%A8FFA8A8FD08FFA8FFA8FD1BFFA8A8FD23FFA87D7FA9A9FD0BFFA8FD0DFF%A8AEFFA97FA9A9A9FFFFFF7D527D527D527D527D527D527D27A8FD05FFA8%A8A8FD1BFFA8AFFD25FFA9A9A9FD1AFFA8FFFFFFA9FD05FFFD057DA87D7D%7DA87D7D7DA8A8FD05FFA8A8A8FD1BFFA8A1FD25FFA9A97EFD0BFFA8FD0D%FFA8A8FD09FFA8A8FFA8FFFFFFA8FFFFFFA8FD08FFA8A8A8FD1BFFA8C3FD%25FFA9A9A9FD1AFFA8FD1DFFA8FFA8FD1BFFA89AFD25FFA9FFA9FD04FFC3%CAFD05FFA8FD0DFFA8A8FFFFAEFFA8FD04FFA87DA8A87D7D527DA87DA87D%FD08FFA8A8A8FD1BFFAF9ACAFD24FFA9FFA9FD04FFC3CAFD14FFA8FFA8AE%A8AEA8FFFFFF5252527D5252527D7D7D5252FD08FFA8FFA8FD16FF7DFF7D%A87DA89ACAFD08FFCAC3FD06FFA8FD0FFFA8FFFFFF7EFF7FFFFFFFCAC3C3%FD05FFA8FD0DFFA8A8FD09FFA87D7D7D527DA8A8A87DA87DFD08FFA8A8A8%FD15FF7D52A8A8527D7D9ACAFD09FFBDFD1AFFA9FFA9A9FFFFFFC3CAFD14%FFA8FD0BFFA8FD11FFA8A8A8FD15FFA87DA87DA87DA89ACAFD08FFCACACA%FD07FF52FFA8FFA8FF7D7DA8FD09FF7FFFA9FFFFFFCACACAFD05FFA8FD0D%FFA8A8FD09FFA8A8FFA8FD08FFA8A8FFFFFFA8FFFFA8A8A8FD1BFFA8A1C4%FD09FFC3CAFD06FFA852FD042752F8F85252FD08FFA9FFA9FFFFC3C4CACA%CAFD13FFA8FFCACACAFFCAFFFFFF7D7DA87D52A8FD057DA8FD057DA852FF%A8FFA8FD1BFFA89ACAFD05FFCACAFFCACACAFD07FFA8A87DA8FD057DA8FD%08FFA9FF7EFFFFCABCFFCAFD05FFA8FD0DFFA8A8FFFFCACACAFD04FFA852%52527D525252A87D7D527DFD04527D527DA8A8A8FD1BFFA8C3CAFD05FFC3%FFFFCACACAFD19FFA9FFA9FFFFCABDCBFFCAFD13FFA8FFFFFFAFFFFFFFA8%FFA8A8A8FFA8FFA8FFFFFD04A8FFA8FFA8FFA8FFA8FFA8FD1BFFAF9ACAFD%05FFC4C3FFCAFFC4FD07FF52527DA8FD047D527D7D52A8FD05FFA9FF7FFF%FFCAC3FFCACAFD04FFA8FD0DFFA8A87DA87DA87DA8A8A87DFD17A8FD1BFF%A8A1C4FD05FFC3CAFFCACACAFD06FFA8525227FD0452F852275227FD05FF%A9A9FFA9A9FFCAFFFFFFCAFD33FFA8FD1BFFA89ACAFD05FFCAC3FFC3FFC4%FD05FFA8FFA8FFA8FFA8A8A8FFFFFFA8FFFFFFA8FFFFFF7EFFA9FFFFCACA%FFCACAFD04FFA8FD11FFA8FD1BFFA8A8FD1BFFA8A1CAFD05FFC3CAFFCAFF%CACAFD0BFF7DFD0BFFA9A9FFA9FFFFCAFFFFFFCAFD33FFA8FD1CFF9ACAFD%05FFCAC3FFC3FFC4FD0CFF7DA8FD0BFF7FFFA9A9FFCACAFFFFCACAFFFFFF%A8FD11FFA8FD1BFFA8A8FD16FFA8FFA8A87DA8C3CAFD05FFC3CAFFCAFFCA%FD0CFF27FD0CFFA9FFFFA9FFCAFFFFFFCAFD33FFA8FD15FFA827A87D7D52%7D76CAAFFFA8FFAFC3A1FFA1FFA1FFA8FFA8FFA8FFA8FFA8FFA852A8FFA8%FFA8FFA8FFA8FFA8FF7EFFA8A9FFCAA8FFAFCAA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FF7DA8FD16FFA8A87DA8A87DA1CAFD05FFC3CACACAFF%CACAFD17FFCBA9FFFFA9FFCAFFFFFFCAFD33FFA8FD13FFA8A8FD06FFA8A1%CAFD04FFC3CAC3FFCAFFC3FD19FFA9FFA9A9FFCAFD04FFCAFFFFFFA8FD2D%FFA8A8FD13FF52A8FD06FFA8A1CAFFFFFFC3C3FD04CAFFCACAFD17FFA9A9%FFFFA9FFCAFD04FFCAFD32FFA8FD12FF7D527DFD06FFA8A1CAFFFFFFC4C3%CACACAC3FFCACAFD04FFA8FD04FFC4CAFD09FFA8FFFFFF7EFFA9A9CFCAFD%04FFC3FFFFFFA8FD11FFA8FD1BFFA8A8FD13FF52A8FD06FFA8CACAFFFFC3%C3C4FD04CAFFFFCAFD09FFC3FD0DFFA9A9FFFFA9FFCAFD04FFCACAFD31FF%A8FD12FFA852A8FD06FFA8A1CAFFFFC3C3C3CACACAC4FFCACAFD09FFC3CA%FD0DFF7FFFA9A9CACAFD04FFCACAFFFFA8FD11FFA8FD1BFFA8A8FD13FF52%A8FD06FFA8C4CAFFCACAC3CACAFFCACAFFFFCAFD09FFC3FD0EFFA9FFFFA9%FFCAFD05FFCAFD31FFA8FD12FFA8527DFD06FFA8A1CACACAC3C3C3FD04CA%FFCACAFD09FFC3CAFD0DFFA9FFA9A9CACAFD04FFCACAFFFFA8FD11FFA8FD%11FFA8FD09FFA8A8FD13FF27A8FD06FFA8CACAC4CAFFC3CAC3FFC3FFFFFF%CAFD09FFC3CAFD0DFFA9FFFFA9FFCAFD05FFCAFD31FFA8FD12FFA87DA8FF%7DFF7DA87DA1A1CAC3FFFFFFC3CAFFC3FFFFCACAFD08FFCAC4CAFD0DFFA9%FFFFA9CACAFD05FFCACAFFA8FD2DFFA8A8FD13FFA8FF7D52A87D525276A2%C3CAFFFFAFCAC3FFBCFFFFFFC3FFC3FFAFFFFFFFAFFFC3CAFD04FFA8FD05%FFA8FFA9A9FFFF85FFCAFFA8FFFFFFCACAFFFFA8FD07FFA8FD07FFA8FD07%FFA8FD07FFA8FFA8FD05FFA8FD04FFA8A8FD12FFA8277DFF7DA852A87DA8%A1CAA1FFFFFFA1CAFFC3A8FFFFCAA8C3CAFFA8CAC3FFA8C4CAFFA8FFFFFF%A8FFFFFFA8FFFFFF9AFFFFA9A8CAFFFFA8FFFFFFA1FFA8FFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8A8FD12FFA852A8FD06FFA8CAC3CAFFFFFFCAC3FFBD%FFFFFFCAFFC3CAFFC3C3CAFFFFC3CAFD0CFFCABDFFFFA9FFCAFD05FFCACA%FD30FFA8FD12FF7D52A8FD06FFA8A8C3CAFFFFFFCACAFFC3CAFFFFCACACA%C3FFC3FFCAFFCACACAFD0CFFCA9BFFFFA9A8CAFD06FFC3FFAFFD11FFA8FD%1BFFA8A8FD12FFA852A8FD06FFA8AFCAFD0BFFCAFFC3CAFFCAFFCBC3CACA%CAFD0CFFC4A2CAFFA9CBCAFD06FFCACAFD2FFFA8FD12FFA87DA8FD06FFA8%A8FD0CFFCAC4CACAFFC3FFCAC3C3CAC3C3FD0BFFCAA2CAFFA9A8CAFD06FF%C3FFA8FD11FFA8FD11FFA8FD09FFA8A8FD12FFA8A8FD07FFA8FD0EFFCAC3%FFFFCAFFCAC3CACAFFCAFD0BFFC4A9CAFFA9CBCAFD07FFCAFD2FFFA8FD12%FF7D527DFD06FFA8A8FD0DFFC3CACAFFC3FFC3C3C3CAFFCBCAFD09FFCACA%A2CAFFAFA2CAFD06FFCACAAFFD11FFA8FD1BFFA8A8FD13FF52A8FD06FFA8%A8FD0CFFFD06CAFFFFCACACAFFCACAFFFFC3FD07FFA2A9CAFFA9CACAFD07%FFCAFD2FFFA8FD14FFA8FD06FFA8A8FD0DFFC3FD04CAFFFFFFC3CAFFFFC3%FFFFC3C4FFCAFFA8FFCAA2A9CAFFFF77FD08FFCAA8FD11FFA8FD1BFFA8A8%FD12FFA852A8FFA8FFFD05A8FD0DFFCACAFFC3CFFFFFFFC3CAFFFFFFC3FF%C3CAC3FD05FFA2FFCACAA9A2CFFD07FFCAC3FD2EFFA8FD12FFA852A8A827%A87D7D527D7DFFA8FFA8FFA8FFFFFF83FFA8FF9ACACAA17DFFA8FF9ACAFF%FFAFCAA1CAA1C3CAFFA8FFC3A8A8FFC3C377FFAFFFA8FFFFFFA8FFA1CAAF%FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFF7DA8FD13FF52FFFFFD05A87DFD07FFA8FF%FF83FFFFFFCACAFFA183FFFFFFC4CAFD04FFC3C3CAC3FFFFFFCACAA9FFFF%FFC3A2FD0AFFCAFD2DFFA8FD12FFA8527DFD06FFA8A8FD06FF8484FF5FFD%05FFCAC358FFFFFFCAFD05FFCACAC3C3CAFFFFCACAAFA9FFFFC971FD09FF%A8CAFD10FFA8FD11FFA8FD09FFA8A8FD13FF7DA8FD06FFA8FD07FF83AEAE%AEAFFD05FFBC83FD0BFFCAC3FFFFFFC3FFA9FFFFFFCFA2AFFD09FFC3FD2D%FFA8FD12FFA87DA8FD06FFA8A8FD06FF8483AE83FD05FFCAC358FD0BFFC3%CACAFFFFCACAAFA9FFFFFFA9A9FD08FFAFCACAFD0FFFA8FD1BFFA8A8FD13%FF52FD07FFA8A8FD06FF8384A8AEAEFD05FFA183FD0BFFC3CACAFFFFC4FF%A9FD05FF7FFD09FFCACAFD2CFFA8FD12FFA8527DFD06FFA8A8FD06FFA883%AEA8AEFD05FFA859FD0BFFC3CAC3CAAFCACAA9A8FD04FFA9A9FD07FFA8FF%C3FD0FFFA8FD1BFFA8A8FD12FFA852FD07FFA8A8FD06FFA8AE84FFA8FD05%FFA8AEFD0DFFCAC3FFCAFFA9FD05FFA9A9FD0AFFC4FD2BFFA8FD12FF527D%A8FD06FFA8A8FD05FFAEAE83A8AEAEFD05FFA883FD0DFFBCCAC3CAFFA9A9%FD05FF7FFD07FFA8FFFFCACAFD0DFFA8FD1BFFA8A8FD13FFA8FD07FFA8A8%FD06FFA88AAEFFA8FFA8AF83FFA8AEA8FD0CFFCAFFCAC3FFA9FD06FFA9FD%0AFFCAFD2BFFA8FD16FF7DFF7DA87DA87DFFFFFFA8FFA8A8A8FFA8A8FF83%8383A8A883AEFD04FFA8FFFFFFA8FFFFFFAFFFC3C3FFA9A9FFA8FFFFFF7E%FFFFFFA8FFFFFFA8FFFFFFA1FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8A8FD15FFA852%A8A87D527DA8FD06FF84FFFFFF83FF838483FFA8AEA8FD0EFFCAA1FFA9FD%06FFA9A9FD0AFFCAFD1EFFA8FD0AFFA87DFD16FF7DA87DA87DA8A8FD05FF%AEAEFFFFFFAEA8AE8383AEAEA8AEFFFFA8FD0BFFCACAFFA9A9FD05FFA9A9%FD06FFA8FFFFFFC3FD29FFA8A8FD1BFFA8A8FD06FFA8FFFFFFA8AEA8AE83%AFA8FFA8FFFF83A8FFAEFD0BFFA9FD07FFA9FD0AFFCACAFD29FFA8FD1BFF%A8A8FD05FFA8AEFFFFFFAEA8AE838484A8A8AEFFFF83AEFF5FA8FD07FFA8%FFFFA9A9FD05FFA9A9FD06FFA8FFFFFFCAC3FD0CFFA8FD1BFFA8A8FD1BFF%A8A8FD06FFAEFFFFFFAE84FFFFAEAEA8FF5EAEFFAEA8FF5FFD0BFFA9FD07%FFA9FD0BFFCACAFD28FFA8FD1BFFA8A8FD05FFA8FD05FF58FFFFFF83A8FF%A884FF83AEA8A884FD0AFF83A8FD06FFA9A9FD05FFA8FD05FFCACAFD0AFF%A8FD1BFFA8A8FD1BFFA8A8FD05FFAEAEFFFFFFA883FFFFAEAEA8FFFFAE84%FFA8AEFFAEFD06FF84AEFFFF59A8FD06FFA9A9FD0CFFC3FD27FFA8FD1BFF%A8A8FD05FF84FD05FFA8FFFFFF83A8FFFF8483FFFF58FFA8AEFFA883FF83%AE83FFAE5A84FF83FFFFAEA8FF7FFD05FFA8FD07FFC3FD09FFA8FD11FFA8%FD09FFA8A8FD1BFFA8FD06FFAEAEFD08FFAEA8FD09FF83FFA8AE83FFFFAE%A8FF7EA88383FFFF83AEFFA9A9FD0DFFC3FD25FFA8FD1BFFA8A8FD05FF84%FD09FF5FAEFD09FFAE83AEFFAFFFFFA8AEA8A9A883A8AEFFA883FFFF7FA9%FFFFFFA8FD08FFCAC3FD23FFA8A8FD15FFA87DFFA87D7DA8A8FD05FFAEAE%FD08FF83A8FD09FFAFA8A8FD05FFA8AE7EFFFFFF83AEA8AEA8FFFFA9FD0D%FFCACAFD23FFA8FD15FFA827A8527D277D7DFFA8FFA8A883FFCBFFA8FFA8%FFA8FF5FA8A8FFA8FFA8FFA8FFA8FF83A8CBFFA8FFA88383A9A8FFFFFF83%FFA883A8FF7EA9A8FFA8FFA8FFA8FFA8FFA8FFA8CAC3FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8FD16FF%FD06A8FD04FF8A83FD0AFFAEA8FD0AFFAE83FD05FF8384A9FD07FF84FFFF%FFA9FD0FFFC3FD21FFA8FD1CFFA8FFFFFF84A883FD15FF8384FD05FFA884%A9FD07FFAF83FFFFA97FFFCFFD0CFFCAC4FFFFFFA8FD1BFFA8A8FD1BFFA8%A8FF84A8AF84A8FD16FFAEFD07FFA9FD08FFAEA8FFFFA9A9FD0EFFCACAFD%1FFFA8FD1BFFA8A8FF58AEA8A883FD1DFFA9A9FD08FFAF83A8FFFF7FA8FD%0EFFCAC3CAA8CAC3FD0AFFCACACAC3CAA8CACAFFCAFFCAFFCACBA8A8FD1B%FFA8FFFF83A8FFAEAEFD1EFFA9FD0AFFAEAEFFA9A9A9FD0FFFCAC3CACACA%FFCAFFFFFFCAFFFD05CAFFC3CACACAC4FD07CAA1FD1BFFA87DFF8383A8FD%1FFFA9A9FD0AFFA884AEFFA8A97FA9A9FD0DFFAFFFFFCAC3CAC3CAC3CAC3%CACAFD0FFFA8A8FD1BFFA87D83AE5FFD21FFA9FD0BFFAE84AEFFFFFFA9A9%7FFD13FFCAFD15FFA8FD1BFFA8A883A883AEFD0DFFA8FD0FFFA8FFA9A9FD%0DFFA8838483AEA7847EFD04A9FFA9FFCBFFFFFFCFFD1BFFA8A8FD1BFFA8%FF83FF84FD20FFA9A9FD0FFFAEFFFFFFAEAEA8AEFD04847EA884A984A985%A9A9FD19FFA8FD15FFA87DFF7DA87DA87DFFA8FFA8A9A8FFA8A9A8FFA8A9%A8FFA8A8A8FFA8A9A8FFA8A9A8A9A8FFA8FFA8FF7EA87EA9A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8CBA8FFA8FFA8FFA8A8A8CFA8A883847D7D58847D84%595A5359595A5959537E7E7E597D7D7E7D847D847EA884A87DA8FD15FF7D%52A87D52527DA87EA87EA87EA87DA87EA87DA87E7E7DA87D7E7EA87EA87D%A87EA87DA87EA87DA87E7E7DA8A8A87DFD07A87DFD14A8CAA8A8A8CAA8A8%7DA883A87DA883A883A87DA87D847D847D847D7E7D847D7DA8FD16FF7DA8%7D7D527D7DA87DA8FD0AFFA8A87DA87D7D7DFD0BFF7DA87DA87DA87DFD0B%FFFD067DA8FD0AFFA8FD057DA8FD0AFFA8A87D7D7DA87DFD09FFA8FD18FF%7DA8277D52527DFD0AFFA87D7D527D527DFD0BFF7D7D525227527DFD0AFF%A87D7DFD0452FD0BFF7DA85252277D7DFD0BFF527DFD0452A8FD21FFFD07%A8FD0AFFFD04A87DA87DFD0BFF7DA8A8FFA8A8A8FD0BFF7DFD05A8FD0BFF%A87DFD05A8FD0AFFA87DFD04A87DFD54FF7DA8FD7DFFA85227522752A8FD%7BFFA87DA8A8FDFCFFFDBFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-08-07T20:35:02-07:00</xap:CreateDate>
         <xap:ModifyDate>2014-08-07T20:35:03-07:00</xap:ModifyDate>
         <xap:MetadataDate>2014-08-07T20:35:03-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FWndURnY0VQSx9hirFdI/Nf8ttX0+3v7LzJp/1e6ZUgW4nS2lLyFlRTDcGKVWf024A&#xA;r8QFRUYqhtS/Ob8r9NsrO9u/MNsLa/5C3eL1JjVFR3WRYldomVZkJEgUiuKsp07V9J1NbhtOvYL1&#xA;bWZ7W6NvKkoinip6kMnAtxkSo5KdxiqLxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;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&#xA;2Kv/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:E62C002D0120E4118EC0CEC0D3579FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E72C002D0120E4118EC0CEC0D3579FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
75.9502 388.8 li
79.9009 388.8 li
83.8511 388.8 li
87.8018 388.8 li
91.752 388.8 li
95.7026 388.8 li
99.6533 388.8 li
103.604 388.8 li
107.554 388.8 li
111.504 388.8 li
115.455 388.8 li
119.405 388.8 li
123.356 388.8 li
127.306 388.8 li
131.257 388.8 li
135.207 388.8 li
139.158 388.8 li
143.108 388.8 li
147.058 388.8 li
151.009 388.8 li
154.959 388.8 li
158.91 388.8 li
162.86 388.8 li
166.811 388.8 li
170.761 388.8 li
174.712 388.8 li
178.662 388.8 li
182.612 388.8 li
186.563 388.8 li
190.513 388.8 li
194.464 388.8 li
198.414 386.323 li
202.365 388.8 li
206.315 388.8 li
210.265 388.8 li
214.216 388.8 li
218.166 388.8 li
222.117 388.8 li
226.067 388.8 li
230.018 386.082 li
233.968 388.8 li
237.919 382.928 li
241.869 322.649 li
245.819 60.0029 li
249.77 43.3408 li
253.72 69.417 li
257.671 169.677 li
261.621 236.202 li
265.572 259.04 li
269.522 267.815 li
273.473 283.696 li
277.423 311.768 li
281.373 320.933 li
285.324 330.359 li
289.274 332.136 li
293.225 346.174 li
297.175 349.178 li
301.126 351.104 li
305.076 359.967 li
309.027 363.537 li
312.977 365.764 li
316.927 365.907 li
320.878 368.783 li
324.828 370.656 li
328.779 368.934 li
332.729 374.874 li
336.68 375.284 li
340.63 375.695 li
344.581 375.7 li
348.531 375.849 li
352.481 377.705 li
356.432 378.114 li
360.382 378.142 li
364.333 378.729 li
368.283 380.321 li
372.234 380.165 li
376.184 380.448 li
380.135 381.098 li
384.085 381.077 li
388.035 380.807 li
391.986 381.851 li
395.936 381.076 li
399.887 381.562 li
403.837 382.29 li
407.788 383.117 li
411.738 382.645 li
415.688 383.776 li
419.639 384.063 li
423.589 384.137 li
427.54 384.084 li
431.49 384.513 li
435.441 383.473 li
439.391 384.575 li
443.342 383.926 li
447.292 384.114 li
451.242 384.193 li
455.193 384.86 li
459.143 384.849 li
463.094 385.286 li
467.044 385.356 li
470.995 385.373 li
474.945 385.735 li
478.896 386.269 li
482.846 386.213 li
486.796 386.879 li
490.747 386.694 li
494.697 386.869 li
498.648 387.145 li
502.598 387.522 li
506.549 387.522 li
510.499 387.771 li
514.45 387.631 li
518.4 387.768 li
0 0 1 rgb
@
72 373.392 mo
75.9502 367.574 li
79.9009 381.892 li
83.8511 351.182 li
87.8018 381.791 li
91.752 346.871 li
95.7026 340.809 li
99.6533 364.724 li
103.604 307.433 li
107.554 245.081 li
111.504 284.789 li
115.455 257.766 li
119.405 240.011 li
123.356 291.294 li
127.306 320.371 li
131.257 301.278 li
135.207 279.941 li
139.158 307.85 li
143.108 277.685 li
147.058 345.77 li
151.009 299.106 li
154.959 237.771 li
158.91 312.519 li
162.86 306.918 li
166.811 324.274 li
170.761 319.072 li
174.712 295.273 li
178.662 317.258 li
182.612 325.317 li
186.563 300.352 li
190.513 314.944 li
194.464 324.7 li
198.414 329.348 li
202.365 353.39 li
206.315 319.098 li
210.265 324.817 li
214.216 329.03 li
218.166 320.995 li
222.117 319.637 li
226.067 317.375 li
230.018 334.445 li
233.968 350.279 li
237.919 330.075 li
241.869 310.621 li
245.819 325.348 li
249.77 332.693 li
253.72 321.618 li
257.671 333.241 li
261.621 338.011 li
265.572 336.215 li
269.522 322.217 li
273.473 332.479 li
277.423 343.131 li
281.373 351.474 li
285.324 357.488 li
289.274 359.318 li
293.225 365.213 li
297.175 370.031 li
301.126 371.647 li
305.076 376.483 li
309.027 375.762 li
312.977 377.407 li
316.927 374.936 li
320.878 376.154 li
324.828 376.029 li
328.779 374.939 li
332.729 379.591 li
336.68 379.25 li
340.63 380.646 li
344.581 380.789 li
348.531 381.253 li
352.481 380.648 li
356.432 381.837 li
360.382 381.694 li
364.333 382.864 li
368.283 383.096 li
372.234 381.779 li
376.184 383.753 li
380.135 384.025 li
384.085 383.596 li
388.035 383.792 li
391.986 384.222 li
395.936 384.098 li
399.887 384.351 li
403.837 384.621 li
407.788 384.619 li
411.738 385.812 li
415.688 385.346 li
419.639 385.39 li
423.589 385.183 li
427.54 385.188 li
431.49 385.5 li
435.441 385.735 li
439.391 386.177 li
443.342 386.595 li
447.292 386.635 li
451.242 387.149 li
455.193 386.938 li
459.143 386.616 li
463.094 386.552 li
467.044 386.932 li
470.995 386.863 li
474.945 386.828 li
478.896 387.162 li
482.846 386.7 li
486.796 386.846 li
490.747 386.537 li
494.697 386.929 li
498.648 386.801 li
502.598 386.905 li
506.549 386.921 li
510.499 386.825 li
514.45 386.894 li
518.4 386.722 li
0 0.501961 0 rgb
@
72 203.903 mo
75.9502 70.4121 li
79.9009 209.18 li
83.8511 181.897 li
87.8018 178.53 li
91.752 161.185 li
95.7026 184.835 li
99.6533 148.037 li
103.604 207.985 li
107.554 105.246 li
111.504 168.776 li
115.455 208.186 li
119.405 130.19 li
123.356 86.1968 li
127.306 97.0771 li
131.257 177.289 li
135.207 215.433 li
139.158 247.137 li
143.108 187.938 li
147.058 236.238 li
151.009 266.816 li
154.959 197.252 li
158.91 201.564 li
162.86 195.559 li
166.811 227.484 li
170.761 205.765 li
174.712 248.509 li
178.662 156.905 li
182.612 214.221 li
186.563 211.904 li
190.513 227.899 li
194.464 236.563 li
198.414 240.169 li
202.365 249.686 li
206.315 224.502 li
210.265 270.312 li
214.216 231.903 li
218.166 281.876 li
222.117 267.764 li
226.067 274.009 li
230.018 296.398 li
233.968 245.722 li
237.919 241.988 li
241.869 205.38 li
245.819 192.676 li
249.77 232.502 li
253.72 241.434 li
257.671 238.646 li
261.621 254.523 li
265.572 225.931 li
269.522 97.4121 li
273.473 115.759 li
277.423 76.9287 li
281.373 92.8379 li
285.324 123.083 li
289.274 159.949 li
293.225 168.479 li
297.175 191.88 li
301.126 214.679 li
305.076 234.611 li
309.027 235.143 li
312.977 252.006 li
316.927 266.274 li
320.878 271.953 li
324.828 283.604 li
328.779 301.654 li
332.729 308.165 li
336.68 310.365 li
340.63 316.139 li
344.581 324.102 li
348.531 326.514 li
352.481 332.919 li
356.432 337.998 li
360.382 337.116 li
364.333 342.334 li
368.283 348.179 li
372.234 353.771 li
376.184 356.191 li
380.135 359.349 li
384.085 359.453 li
388.035 361.138 li
391.986 363.017 li
395.936 356.848 li
399.887 363.288 li
403.837 365.036 li
407.788 366.151 li
411.738 365.658 li
415.688 365.565 li
419.639 367.654 li
423.589 366.244 li
427.54 364.222 li
431.49 365.388 li
435.441 366.567 li
439.391 363.429 li
443.342 364.16 li
447.292 359.21 li
451.242 360.522 li
455.193 361.532 li
459.143 358.158 li
463.094 360.803 li
467.044 360.477 li
470.995 361.401 li
474.945 359.732 li
478.896 360.334 li
482.846 360.399 li
486.796 361.661 li
490.747 360.369 li
494.697 360.166 li
498.648 360.881 li
502.598 360.586 li
506.549 362.191 li
510.499 359.87 li
514.45 360.021 li
518.4 360.971 li
1 0 0 rgb
@
0.5 lw
0 lc
[1 3 ] 0 dsh
72 388.8 mo
72 43.2002 li
0 0 0 rgb
@
grestore
72 388.8 mo
72 384.8 li
0 0 0 rgb
f
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
72 384.8 li
@
72 43.2002 mo
72 47.2002 li
f
72 43.2002 mo
72 47.2002 li
@
59.3281 400.764 mo
61.2598 400.764 li
61.2598 394.092 li
59.1602 394.512 li
59.1602 393.432 li
61.248 393.012 li
62.436 393.012 li
62.436 400.764 li
64.3682 400.764 li
64.3682 401.76 li
59.3281 401.76 li
59.3281 400.764 li
59.3281 400.764 li
cp
ef
69.1919 397.872 mo
69.7202 397.872 70.1401 397.692 70.4521 397.332 cv
70.7642 396.972 70.9199 396.468 70.9199 395.832 cv
70.9199 395.208 70.7642 394.704 70.4521 394.344 cv
70.1401 393.984 69.7202 393.792 69.1919 393.792 cv
68.6641 393.792 68.2441 393.984 67.9321 394.344 cv
67.6201 394.704 67.4639 395.208 67.4639 395.832 cv
67.4639 396.468 67.6201 396.972 67.9321 397.332 cv
68.2441 397.692 68.6641 397.872 69.1919 397.872 cv
69.1919 397.872 li
cp
66.8398 401.58 mo
66.8398 400.5 li
67.1279 400.644 67.4282 400.752 67.7402 400.824 cv
68.04 400.896 68.3398 400.932 68.6401 400.932 cv
69.4082 400.932 70.0078 400.68 70.416 400.152 cv
70.8242 399.624 71.064 398.832 71.1362 397.752 cv
70.896 398.088 70.6079 398.352 70.272 398.532 cv
69.9238 398.712 69.54 398.796 69.1201 398.796 cv
68.2319 398.796 67.5361 398.532 67.0322 398.004 cv
66.5278 397.476 66.2759 396.756 66.2759 395.832 cv
66.2759 394.944 66.54 394.224 67.0679 393.672 cv
67.5962 393.132 68.3042 392.856 69.1919 392.856 cv
70.2002 392.856 70.98 393.252 71.5078 394.02 cv
72.0361 394.8 72.312 395.928 72.312 397.392 cv
72.312 398.784 71.9761 399.876 71.3281 400.692 cv
70.668 401.508 69.792 401.916 68.688 401.916 cv
68.3882 401.916 68.0879 401.88 67.7881 401.832 cv
67.4761 401.784 67.1641 401.7 66.8398 401.58 cv
ef
76.7759 392.856 mo
77.748 392.856 78.4922 393.252 79.02 394.02 cv
79.5361 394.8 79.7998 395.928 79.7998 397.392 cv
79.7998 398.868 79.5361 399.996 79.02 400.764 cv
78.4922 401.532 77.748 401.916 76.7759 401.916 cv
75.792 401.916 75.0361 401.532 74.52 400.764 cv
74.0039 399.996 73.752 398.868 73.752 397.392 cv
73.752 395.928 74.0039 394.8 74.52 394.02 cv
75.0361 393.252 75.792 392.856 76.7759 392.856 cv
76.7759 392.856 li
cp
76.7759 393.792 mo
76.1641 393.792 75.708 394.092 75.396 394.692 cv
75.084 395.292 74.9399 396.192 74.9399 397.392 cv
74.9399 398.592 75.084 399.492 75.396 400.092 cv
75.708 400.692 76.1641 400.992 76.7759 400.992 cv
77.3882 400.992 77.8438 400.692 78.1558 400.092 cv
78.4561 399.492 78.6118 398.592 78.6118 397.392 cv
78.6118 396.192 78.4561 395.292 78.1558 394.692 cv
77.8438 394.092 77.3882 393.792 76.7759 393.792 cv
ef
84.4561 392.856 mo
85.4282 392.856 86.1719 393.252 86.7002 394.02 cv
87.2158 394.8 87.48 395.928 87.48 397.392 cv
87.48 398.868 87.2158 399.996 86.7002 400.764 cv
86.1719 401.532 85.4282 401.916 84.4561 401.916 cv
83.4722 401.916 82.7158 401.532 82.2002 400.764 cv
81.6841 399.996 81.4321 398.868 81.4321 397.392 cv
81.4321 395.928 81.6841 394.8 82.2002 394.02 cv
82.7158 393.252 83.4722 392.856 84.4561 392.856 cv
84.4561 392.856 li
cp
84.4561 393.792 mo
83.8438 393.792 83.3882 394.092 83.0762 394.692 cv
82.7642 395.292 82.6201 396.192 82.6201 397.392 cv
82.6201 398.592 82.7642 399.492 83.0762 400.092 cv
83.3882 400.692 83.8438 400.992 84.4561 400.992 cv
85.0679 400.992 85.5239 400.692 85.8359 400.092 cv
86.1362 399.492 86.292 398.592 86.292 397.392 cv
86.292 396.192 86.1362 395.292 85.8359 394.692 cv
85.5239 394.092 85.0679 393.792 84.4561 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
151.009 388.8 mo
151.009 43.2002 li
@
grestore
151.009 388.8 mo
151.009 384.8 li
f
151.009 388.8 mo
151.009 384.8 li
@
151.009 43.2002 mo
151.009 47.2002 li
f
151.009 43.2002 mo
151.009 47.2002 li
@
138.288 400.764 mo
140.22 400.764 li
140.22 394.092 li
138.12 394.512 li
138.12 393.432 li
140.208 393.012 li
141.396 393.012 li
141.396 400.764 li
143.328 400.764 li
143.328 401.76 li
138.288 401.76 li
138.288 400.764 li
138.288 400.764 li
cp
ef
148.152 397.872 mo
148.68 397.872 149.1 397.692 149.412 397.332 cv
149.724 396.972 149.88 396.468 149.88 395.832 cv
149.88 395.208 149.724 394.704 149.412 394.344 cv
149.1 393.984 148.68 393.792 148.152 393.792 cv
147.624 393.792 147.204 393.984 146.892 394.344 cv
146.58 394.704 146.424 395.208 146.424 395.832 cv
146.424 396.468 146.58 396.972 146.892 397.332 cv
147.204 397.692 147.624 397.872 148.152 397.872 cv
148.152 397.872 li
cp
145.8 401.58 mo
145.8 400.5 li
146.088 400.644 146.388 400.752 146.7 400.824 cv
147 400.896 147.3 400.932 147.6 400.932 cv
148.368 400.932 148.968 400.68 149.376 400.152 cv
149.784 399.624 150.024 398.832 150.096 397.752 cv
149.856 398.088 149.568 398.352 149.232 398.532 cv
148.884 398.712 148.5 398.796 148.08 398.796 cv
147.192 398.796 146.496 398.532 145.992 398.004 cv
145.488 397.476 145.236 396.756 145.236 395.832 cv
145.236 394.944 145.5 394.224 146.028 393.672 cv
146.556 393.132 147.264 392.856 148.152 392.856 cv
149.16 392.856 149.94 393.252 150.468 394.02 cv
150.996 394.8 151.272 395.928 151.272 397.392 cv
151.272 398.784 150.936 399.876 150.288 400.692 cv
149.628 401.508 148.752 401.916 147.648 401.916 cv
147.348 401.916 147.048 401.88 146.748 401.832 cv
146.436 401.784 146.124 401.7 145.8 401.58 cv
ef
154.464 400.764 mo
158.592 400.764 li
158.592 401.76 li
153.036 401.76 li
153.036 400.764 li
153.48 400.308 154.092 399.684 154.872 398.892 cv
155.64 398.112 156.132 397.608 156.336 397.38 cv
156.72 396.96 156.984 396.6 157.128 396.3 cv
157.272 396.012 157.356 395.712 157.356 395.424 cv
157.356 394.968 157.188 394.584 156.864 394.296 cv
156.54 394.008 156.12 393.852 155.592 393.852 cv
155.22 393.852 154.824 393.924 154.416 394.044 cv
154.008 394.176 153.564 394.368 153.096 394.632 cv
153.096 393.432 li
153.576 393.24 154.02 393.096 154.428 393 cv
154.836 392.904 155.22 392.856 155.568 392.856 cv
156.468 392.856 157.188 393.084 157.728 393.54 cv
158.268 393.996 158.544 394.596 158.544 395.352 cv
158.544 395.712 158.472 396.06 158.34 396.372 cv
158.208 396.696 157.968 397.08 157.608 397.512 cv
157.512 397.632 157.2 397.956 156.672 398.496 cv
156.144 399.036 155.412 399.792 154.464 400.764 cv
154.464 400.764 li
cp
ef
163.416 392.856 mo
164.388 392.856 165.132 393.252 165.66 394.02 cv
166.176 394.8 166.44 395.928 166.44 397.392 cv
166.44 398.868 166.176 399.996 165.66 400.764 cv
165.132 401.532 164.388 401.916 163.416 401.916 cv
162.432 401.916 161.676 401.532 161.16 400.764 cv
160.644 399.996 160.392 398.868 160.392 397.392 cv
160.392 395.928 160.644 394.8 161.16 394.02 cv
161.676 393.252 162.432 392.856 163.416 392.856 cv
163.416 392.856 li
cp
163.416 393.792 mo
162.804 393.792 162.348 394.092 162.036 394.692 cv
161.724 395.292 161.58 396.192 161.58 397.392 cv
161.58 398.592 161.724 399.492 162.036 400.092 cv
162.348 400.692 162.804 400.992 163.416 400.992 cv
164.028 400.992 164.484 400.692 164.796 400.092 cv
165.096 399.492 165.252 398.592 165.252 397.392 cv
165.252 396.192 165.096 395.292 164.796 394.692 cv
164.484 394.092 164.028 393.792 163.416 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
230.018 388.8 mo
230.018 43.2002 li
@
grestore
230.018 388.8 mo
230.018 384.8 li
f
230.018 388.8 mo
230.018 384.8 li
@
230.018 43.2002 mo
230.018 47.2002 li
f
230.018 43.2002 mo
230.018 47.2002 li
@
217.248 400.764 mo
219.18 400.764 li
219.18 394.092 li
217.08 394.512 li
217.08 393.432 li
219.168 393.012 li
220.356 393.012 li
220.356 400.764 li
222.288 400.764 li
222.288 401.76 li
217.248 401.76 li
217.248 400.764 li
217.248 400.764 li
cp
ef
227.112 397.872 mo
227.64 397.872 228.06 397.692 228.372 397.332 cv
228.684 396.972 228.84 396.468 228.84 395.832 cv
228.84 395.208 228.684 394.704 228.372 394.344 cv
228.06 393.984 227.64 393.792 227.112 393.792 cv
226.584 393.792 226.164 393.984 225.852 394.344 cv
225.54 394.704 225.384 395.208 225.384 395.832 cv
225.384 396.468 225.54 396.972 225.852 397.332 cv
226.164 397.692 226.584 397.872 227.112 397.872 cv
227.112 397.872 li
cp
224.76 401.58 mo
224.76 400.5 li
225.048 400.644 225.348 400.752 225.66 400.824 cv
225.96 400.896 226.26 400.932 226.56 400.932 cv
227.328 400.932 227.928 400.68 228.336 400.152 cv
228.744 399.624 228.984 398.832 229.056 397.752 cv
228.816 398.088 228.528 398.352 228.192 398.532 cv
227.844 398.712 227.46 398.796 227.04 398.796 cv
226.152 398.796 225.456 398.532 224.952 398.004 cv
224.448 397.476 224.196 396.756 224.196 395.832 cv
224.196 394.944 224.46 394.224 224.988 393.672 cv
225.516 393.132 226.224 392.856 227.112 392.856 cv
228.12 392.856 228.9 393.252 229.428 394.02 cv
229.956 394.8 230.232 395.928 230.232 397.392 cv
230.232 398.784 229.896 399.876 229.248 400.692 cv
228.588 401.508 227.712 401.916 226.608 401.916 cv
226.308 401.916 226.008 401.88 225.708 401.832 cv
225.396 401.784 225.084 401.7 224.76 401.58 cv
ef
235.344 393.012 mo
236.832 393.012 li
236.832 398.712 li
238.08 398.712 li
238.08 399.696 li
236.832 399.696 li
236.832 401.76 li
235.656 401.76 li
235.656 399.696 li
231.708 399.696 li
231.708 398.556 li
235.344 393.012 li
235.344 393.012 li
cp
235.656 394.044 mo
232.668 398.712 li
235.656 398.712 li
235.656 394.044 li
ef
242.616 392.856 mo
243.588 392.856 244.332 393.252 244.86 394.02 cv
245.376 394.8 245.64 395.928 245.64 397.392 cv
245.64 398.868 245.376 399.996 244.86 400.764 cv
244.332 401.532 243.588 401.916 242.616 401.916 cv
241.632 401.916 240.876 401.532 240.36 400.764 cv
239.844 399.996 239.592 398.868 239.592 397.392 cv
239.592 395.928 239.844 394.8 240.36 394.02 cv
240.876 393.252 241.632 392.856 242.616 392.856 cv
242.616 392.856 li
cp
242.616 393.792 mo
242.004 393.792 241.548 394.092 241.236 394.692 cv
240.924 395.292 240.78 396.192 240.78 397.392 cv
240.78 398.592 240.924 399.492 241.236 400.092 cv
241.548 400.692 242.004 400.992 242.616 400.992 cv
243.228 400.992 243.684 400.692 243.996 400.092 cv
244.296 399.492 244.452 398.592 244.452 397.392 cv
244.452 396.192 244.296 395.292 243.996 394.692 cv
243.684 394.092 243.228 393.792 242.616 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
309.027 388.8 mo
309.027 43.2002 li
@
grestore
309.027 388.8 mo
309.027 384.8 li
f
309.027 388.8 mo
309.027 384.8 li
@
309.027 43.2002 mo
309.027 47.2002 li
f
309.027 43.2002 mo
309.027 47.2002 li
@
296.208 400.764 mo
298.14 400.764 li
298.14 394.092 li
296.04 394.512 li
296.04 393.432 li
298.128 393.012 li
299.316 393.012 li
299.316 400.764 li
301.248 400.764 li
301.248 401.76 li
296.208 401.76 li
296.208 400.764 li
296.208 400.764 li
cp
ef
306.072 397.872 mo
306.6 397.872 307.02 397.692 307.332 397.332 cv
307.644 396.972 307.8 396.468 307.8 395.832 cv
307.8 395.208 307.644 394.704 307.332 394.344 cv
307.02 393.984 306.6 393.792 306.072 393.792 cv
305.544 393.792 305.124 393.984 304.813 394.344 cv
304.5 394.704 304.344 395.208 304.344 395.832 cv
304.344 396.468 304.5 396.972 304.813 397.332 cv
305.124 397.692 305.544 397.872 306.072 397.872 cv
306.072 397.872 li
cp
303.72 401.58 mo
303.72 400.5 li
304.008 400.644 304.308 400.752 304.62 400.824 cv
304.92 400.896 305.22 400.932 305.52 400.932 cv
306.288 400.932 306.888 400.68 307.296 400.152 cv
307.704 399.624 307.944 398.832 308.016 397.752 cv
307.776 398.088 307.488 398.352 307.152 398.532 cv
306.804 398.712 306.42 398.796 306 398.796 cv
305.112 398.796 304.416 398.532 303.912 398.004 cv
303.408 397.476 303.156 396.756 303.156 395.832 cv
303.156 394.944 303.42 394.224 303.948 393.672 cv
304.476 393.132 305.184 392.856 306.072 392.856 cv
307.08 392.856 307.86 393.252 308.388 394.02 cv
308.916 394.8 309.192 395.928 309.192 397.392 cv
309.192 398.784 308.856 399.876 308.208 400.692 cv
307.548 401.508 306.672 401.916 305.568 401.916 cv
305.268 401.916 304.968 401.88 304.668 401.832 cv
304.356 401.784 304.044 401.7 303.72 401.58 cv
ef
316.392 393.204 mo
316.392 394.284 li
316.092 394.14 315.792 394.032 315.492 393.96 cv
315.18 393.888 314.88 393.852 314.592 393.852 cv
313.8 393.852 313.2 394.116 312.792 394.644 cv
312.384 395.172 312.144 395.976 312.096 397.032 cv
312.324 396.696 312.612 396.432 312.96 396.252 cv
313.308 396.072 313.692 395.976 314.112 395.976 cv
314.988 395.976 315.684 396.252 316.188 396.78 cv
316.692 397.308 316.956 398.04 316.956 398.952 cv
316.956 399.852 316.68 400.572 316.152 401.112 cv
315.624 401.652 314.916 401.916 314.04 401.916 cv
313.032 401.916 312.252 401.532 311.724 400.764 cv
311.184 399.996 310.92 398.868 310.92 397.392 cv
310.92 396.012 311.244 394.908 311.904 394.092 cv
312.552 393.276 313.44 392.856 314.544 392.856 cv
314.832 392.856 315.132 392.892 315.444 392.94 cv
315.744 393 316.056 393.084 316.392 393.204 cv
316.392 393.204 li
cp
314.04 396.912 mo
313.512 396.912 313.092 397.104 312.78 397.464 cv
312.468 397.824 312.313 398.328 312.313 398.952 cv
312.313 399.588 312.468 400.092 312.78 400.452 cv
313.092 400.812 313.512 400.992 314.04 400.992 cv
314.568 400.992 314.988 400.812 315.3 400.452 cv
315.612 400.092 315.768 399.588 315.768 398.952 cv
315.768 398.328 315.612 397.824 315.3 397.464 cv
314.988 397.104 314.568 396.912 314.04 396.912 cv
ef
321.576 392.856 mo
322.548 392.856 323.292 393.252 323.82 394.02 cv
324.336 394.8 324.6 395.928 324.6 397.392 cv
324.6 398.868 324.336 399.996 323.82 400.764 cv
323.292 401.532 322.548 401.916 321.576 401.916 cv
320.592 401.916 319.836 401.532 319.32 400.764 cv
318.804 399.996 318.552 398.868 318.552 397.392 cv
318.552 395.928 318.804 394.8 319.32 394.02 cv
319.836 393.252 320.592 392.856 321.576 392.856 cv
321.576 392.856 li
cp
321.576 393.792 mo
320.964 393.792 320.508 394.092 320.196 394.692 cv
319.884 395.292 319.74 396.192 319.74 397.392 cv
319.74 398.592 319.884 399.492 320.196 400.092 cv
320.508 400.692 320.964 400.992 321.576 400.992 cv
322.188 400.992 322.644 400.692 322.956 400.092 cv
323.256 399.492 323.412 398.592 323.412 397.392 cv
323.412 396.192 323.256 395.292 322.956 394.692 cv
322.644 394.092 322.188 393.792 321.576 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
388.035 388.8 mo
388.035 43.2002 li
@
grestore
388.035 388.8 mo
388.035 384.8 li
f
388.035 388.8 mo
388.035 384.8 li
@
388.035 43.2002 mo
388.035 47.2002 li
f
388.035 43.2002 mo
388.035 47.2002 li
@
375.408 400.764 mo
377.34 400.764 li
377.34 394.092 li
375.24 394.512 li
375.24 393.432 li
377.328 393.012 li
378.516 393.012 li
378.516 400.764 li
380.448 400.764 li
380.448 401.76 li
375.408 401.76 li
375.408 400.764 li
375.408 400.764 li
cp
ef
385.032 397.872 mo
385.56 397.872 385.98 397.692 386.292 397.332 cv
386.604 396.972 386.76 396.468 386.76 395.832 cv
386.76 395.208 386.604 394.704 386.292 394.344 cv
385.98 393.984 385.56 393.792 385.032 393.792 cv
384.504 393.792 384.084 393.984 383.772 394.344 cv
383.46 394.704 383.304 395.208 383.304 395.832 cv
383.304 396.468 383.46 396.972 383.772 397.332 cv
384.084 397.692 384.504 397.872 385.032 397.872 cv
385.032 397.872 li
cp
382.68 401.58 mo
382.68 400.5 li
382.968 400.644 383.268 400.752 383.58 400.824 cv
383.88 400.896 384.18 400.932 384.48 400.932 cv
385.248 400.932 385.848 400.68 386.256 400.152 cv
386.664 399.624 386.904 398.832 386.976 397.752 cv
386.736 398.088 386.448 398.352 386.112 398.532 cv
385.764 398.712 385.38 398.796 384.96 398.796 cv
384.072 398.796 383.376 398.532 382.872 398.004 cv
382.368 397.476 382.116 396.756 382.116 395.832 cv
382.116 394.944 382.38 394.224 382.908 393.672 cv
383.436 393.132 384.144 392.856 385.032 392.856 cv
386.04 392.856 386.82 393.252 387.348 394.02 cv
387.876 394.8 388.152 395.928 388.152 397.392 cv
388.152 398.784 387.816 399.876 387.168 400.692 cv
386.508 401.508 385.632 401.916 384.528 401.916 cv
384.228 401.916 383.928 401.88 383.628 401.832 cv
383.316 401.784 383.004 401.7 382.68 401.58 cv
ef
391.236 395.232 mo
391.236 395.688 391.368 396.048 391.656 396.3 cv
391.944 396.552 392.34 396.672 392.856 396.672 cv
393.36 396.672 393.756 396.552 394.044 396.3 cv
394.332 396.048 394.476 395.688 394.476 395.232 cv
394.476 394.776 394.332 394.428 394.044 394.176 cv
393.756 393.924 393.36 393.792 392.856 393.792 cv
392.34 393.792 391.944 393.924 391.656 394.176 cv
391.368 394.428 391.236 394.776 391.236 395.232 cv
391.236 395.232 li
cp
391.668 397.104 mo
391.164 396.984 390.768 396.744 390.48 396.396 cv
390.192 396.048 390.06 395.628 390.06 395.124 cv
390.06 394.428 390.3 393.876 390.804 393.468 cv
391.296 393.06 391.98 392.856 392.856 392.856 cv
393.72 392.856 394.404 393.06 394.908 393.468 cv
395.4 393.876 395.652 394.428 395.652 395.124 cv
395.652 395.628 395.508 396.048 395.22 396.396 cv
394.932 396.744 394.548 396.984 394.044 397.104 cv
394.608 397.236 395.052 397.5 395.376 397.884 cv
395.688 398.268 395.856 398.748 395.856 399.3 cv
395.856 400.152 395.592 400.8 395.076 401.244 cv
394.548 401.7 393.816 401.916 392.856 401.916 cv
391.884 401.916 391.14 401.7 390.624 401.244 cv
390.108 400.8 389.856 400.152 389.856 399.3 cv
389.856 398.748 390.012 398.268 390.336 397.884 cv
390.648 397.5 391.092 397.236 391.668 397.104 cv
392.856 397.608 mo
392.292 397.608 391.848 397.764 391.524 398.064 cv
391.2 398.364 391.044 398.771 391.044 399.3 cv
391.044 399.828 391.2 400.248 391.524 400.548 cv
391.848 400.848 392.292 400.992 392.856 400.992 cv
393.408 400.992 393.852 400.848 394.176 400.536 cv
394.5 400.236 394.668 399.828 394.668 399.3 cv
394.668 398.771 394.5 398.364 394.188 398.064 cv
393.864 397.764 393.42 397.608 392.856 397.608 cv
ef
400.536 392.856 mo
401.508 392.856 402.252 393.252 402.78 394.02 cv
403.296 394.8 403.56 395.928 403.56 397.392 cv
403.56 398.868 403.296 399.996 402.78 400.764 cv
402.252 401.532 401.508 401.916 400.536 401.916 cv
399.552 401.916 398.796 401.532 398.28 400.764 cv
397.764 399.996 397.512 398.868 397.512 397.392 cv
397.512 395.928 397.764 394.8 398.28 394.02 cv
398.796 393.252 399.552 392.856 400.536 392.856 cv
400.536 392.856 li
cp
400.536 393.792 mo
399.924 393.792 399.468 394.092 399.156 394.692 cv
398.844 395.292 398.7 396.192 398.7 397.392 cv
398.7 398.592 398.844 399.492 399.156 400.092 cv
399.468 400.692 399.924 400.992 400.536 400.992 cv
401.148 400.992 401.604 400.692 401.916 400.092 cv
402.216 399.492 402.372 398.592 402.372 397.392 cv
402.372 396.192 402.216 395.292 401.916 394.692 cv
401.604 394.092 401.148 393.792 400.536 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
467.044 388.8 mo
467.044 43.2002 li
@
grestore
467.044 388.8 mo
467.044 384.8 li
f
467.044 388.8 mo
467.044 384.8 li
@
467.044 43.2002 mo
467.044 47.2002 li
f
467.044 43.2002 mo
467.044 47.2002 li
@
454.944 400.764 mo
459.072 400.764 li
459.072 401.76 li
453.516 401.76 li
453.516 400.764 li
453.96 400.308 454.572 399.684 455.352 398.892 cv
456.12 398.112 456.612 397.608 456.816 397.38 cv
457.2 396.96 457.464 396.6 457.608 396.3 cv
457.752 396.012 457.836 395.712 457.836 395.424 cv
457.836 394.968 457.668 394.584 457.344 394.296 cv
457.02 394.008 456.6 393.852 456.072 393.852 cv
455.7 393.852 455.304 393.924 454.896 394.044 cv
454.488 394.176 454.044 394.368 453.576 394.632 cv
453.576 393.432 li
454.056 393.24 454.5 393.096 454.908 393 cv
455.316 392.904 455.7 392.856 456.048 392.856 cv
456.948 392.856 457.668 393.084 458.208 393.54 cv
458.748 393.996 459.024 394.596 459.024 395.352 cv
459.024 395.712 458.952 396.06 458.82 396.372 cv
458.688 396.696 458.448 397.08 458.088 397.512 cv
457.992 397.632 457.68 397.956 457.152 398.496 cv
456.624 399.036 455.892 399.792 454.944 400.764 cv
454.944 400.764 li
cp
ef
464.136 392.856 mo
465.108 392.856 465.852 393.252 466.38 394.02 cv
466.896 394.8 467.16 395.928 467.16 397.392 cv
467.16 398.868 466.896 399.996 466.38 400.764 cv
465.852 401.532 465.108 401.916 464.136 401.916 cv
463.152 401.916 462.396 401.532 461.88 400.764 cv
461.364 399.996 461.112 398.868 461.112 397.392 cv
461.112 395.928 461.364 394.8 461.88 394.02 cv
462.396 393.252 463.152 392.856 464.136 392.856 cv
464.136 392.856 li
cp
464.136 393.792 mo
463.524 393.792 463.068 394.092 462.756 394.692 cv
462.444 395.292 462.3 396.192 462.3 397.392 cv
462.3 398.592 462.444 399.492 462.756 400.092 cv
463.068 400.692 463.524 400.992 464.136 400.992 cv
464.748 400.992 465.204 400.692 465.516 400.092 cv
465.816 399.492 465.972 398.592 465.972 397.392 cv
465.972 396.192 465.816 395.292 465.516 394.692 cv
465.204 394.092 464.748 393.792 464.136 393.792 cv
ef
471.576 392.856 mo
472.548 392.856 473.292 393.252 473.82 394.02 cv
474.336 394.8 474.6 395.928 474.6 397.392 cv
474.6 398.868 474.336 399.996 473.82 400.764 cv
473.292 401.532 472.548 401.916 471.576 401.916 cv
470.592 401.916 469.836 401.532 469.32 400.764 cv
468.804 399.996 468.552 398.868 468.552 397.392 cv
468.552 395.928 468.804 394.8 469.32 394.02 cv
469.836 393.252 470.592 392.856 471.576 392.856 cv
471.576 392.856 li
cp
471.576 393.792 mo
470.964 393.792 470.508 394.092 470.196 394.692 cv
469.884 395.292 469.74 396.192 469.74 397.392 cv
469.74 398.592 469.884 399.492 470.196 400.092 cv
470.508 400.692 470.964 400.992 471.576 400.992 cv
472.188 400.992 472.644 400.692 472.956 400.092 cv
473.256 399.492 473.412 398.592 473.412 397.392 cv
473.412 396.192 473.256 395.292 472.956 394.692 cv
472.644 394.092 472.188 393.792 471.576 393.792 cv
ef
479.256 392.856 mo
480.229 392.856 480.972 393.252 481.5 394.02 cv
482.016 394.8 482.28 395.928 482.28 397.392 cv
482.28 398.868 482.016 399.996 481.5 400.764 cv
480.972 401.532 480.229 401.916 479.256 401.916 cv
478.271 401.916 477.516 401.532 477 400.764 cv
476.484 399.996 476.232 398.868 476.232 397.392 cv
476.232 395.928 476.484 394.8 477 394.02 cv
477.516 393.252 478.271 392.856 479.256 392.856 cv
479.256 392.856 li
cp
479.256 393.792 mo
478.644 393.792 478.188 394.092 477.876 394.692 cv
477.564 395.292 477.42 396.192 477.42 397.392 cv
477.42 398.592 477.564 399.492 477.876 400.092 cv
478.188 400.692 478.644 400.992 479.256 400.992 cv
479.868 400.992 480.324 400.692 480.636 400.092 cv
480.936 399.492 481.092 398.592 481.092 397.392 cv
481.092 396.192 480.936 395.292 480.636 394.692 cv
480.324 394.092 479.868 393.792 479.256 393.792 cv
ef
282.468 406.932 mo
283.728 406.932 li
286.152 410.532 li
288.564 406.932 li
289.836 406.932 li
286.74 411.516 li
286.74 415.68 li
285.552 415.68 li
285.552 411.516 li
282.468 406.932 li
282.468 406.932 li
cp
ef
293.904 411.816 mo
293.892 411.228 293.724 410.76 293.412 410.4 cv
293.088 410.052 292.656 409.872 292.128 409.872 cv
291.528 409.872 291.048 410.052 290.688 410.388 cv
290.328 410.724 290.112 411.204 290.064 411.816 cv
293.904 411.816 li
293.904 411.816 li
cp
294.984 412.128 mo
294.984 412.656 li
290.028 412.656 li
290.076 413.4 290.292 413.976 290.7 414.36 cv
291.096 414.744 291.648 414.936 292.368 414.936 cv
292.776 414.936 293.184 414.888 293.568 414.792 cv
293.952 414.696 294.348 414.54 294.732 414.324 cv
294.732 415.344 li
294.348 415.512 293.952 415.644 293.544 415.716 cv
293.136 415.788 292.716 415.836 292.308 415.836 cv
291.252 415.836 290.424 415.536 289.813 414.936 cv
289.2 414.336 288.9 413.508 288.9 412.464 cv
288.9 411.396 289.188 410.544 289.764 409.908 cv
290.34 409.284 291.132 408.96 292.116 408.96 cv
293.004 408.96 293.7 409.248 294.216 409.812 cv
294.72 410.388 294.984 411.156 294.984 412.128 cv
ef
301.944 411.936 mo
301.944 415.68 li
300.864 415.68 li
300.864 414.684 li
300.612 415.092 300.3 415.38 299.94 415.56 cv
299.58 415.74 299.124 415.836 298.596 415.836 cv
297.924 415.836 297.384 415.656 296.988 415.284 cv
296.592 414.912 296.4 414.408 296.4 413.771 cv
296.4 413.04 296.64 412.488 297.144 412.104 cv
297.636 411.732 298.368 411.54 299.352 411.54 cv
300.864 411.54 li
300.864 411.432 li
300.864 410.94 300.696 410.556 300.372 410.28 cv
300.048 410.016 299.592 409.872 299.004 409.872 cv
298.62 409.872 298.26 409.92 297.9 410.016 cv
297.54 410.112 297.204 410.244 296.88 410.412 cv
296.88 409.416 li
297.264 409.271 297.648 409.152 298.02 409.08 cv
298.392 409.008 298.752 408.96 299.112 408.96 cv
300.06 408.96 300.768 409.212 301.236 409.704 cv
301.704 410.196 301.944 410.94 301.944 411.936 cv
301.944 411.936 li
cp
299.796 412.38 mo
298.92 412.38 298.32 412.488 297.984 412.68 cv
297.648 412.884 297.48 413.22 297.48 413.7 cv
297.48 414.084 297.6 414.396 297.852 414.612 cv
298.104 414.84 298.452 414.948 298.884 414.948 cv
299.484 414.948 299.964 414.744 300.324 414.312 cv
300.684 413.892 300.864 413.328 300.864 412.62 cv
300.864 412.38 li
299.796 412.38 li
ef
307.813 410.124 mo
307.692 410.052 307.56 410.004 307.416 409.968 cv
307.272 409.944 307.116 409.92 306.948 409.92 cv
306.336 409.92 305.868 410.124 305.544 410.52 cv
305.208 410.916 305.052 411.48 305.052 412.224 cv
305.052 415.68 li
303.972 415.68 li
303.972 409.116 li
305.052 409.116 li
305.052 410.136 li
305.268 409.74 305.568 409.44 305.928 409.248 cv
306.288 409.056 306.732 408.96 307.26 408.96 cv
307.332 408.96 307.416 408.972 307.512 408.972 cv
307.596 408.984 307.692 408.996 307.813 409.02 cv
307.813 410.124 li
307.813 410.124 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 388.8 mo
518.4 388.8 li
@
grestore
72 388.8 mo
76 388.8 li
f
72 388.8 mo
76 388.8 li
@
518.4 388.8 mo
514.4 388.8 li
f
518.4 388.8 mo
514.4 388.8 li
@
46.7759 384.216 mo
47.748 384.216 48.4922 384.612 49.02 385.38 cv
49.5361 386.16 49.7998 387.288 49.7998 388.752 cv
49.7998 390.228 49.5361 391.356 49.02 392.124 cv
48.4922 392.892 47.748 393.276 46.7759 393.276 cv
45.792 393.276 45.0361 392.892 44.52 392.124 cv
44.0039 391.356 43.752 390.228 43.752 388.752 cv
43.752 387.288 44.0039 386.16 44.52 385.38 cv
45.0361 384.612 45.792 384.216 46.7759 384.216 cv
46.7759 384.216 li
cp
46.7759 385.152 mo
46.1641 385.152 45.708 385.452 45.396 386.052 cv
45.084 386.652 44.9399 387.552 44.9399 388.752 cv
44.9399 389.952 45.084 390.852 45.396 391.452 cv
45.708 392.052 46.1641 392.352 46.7759 392.352 cv
47.3882 392.352 47.8438 392.052 48.1558 391.452 cv
48.4561 390.852 48.6118 389.952 48.6118 388.752 cv
48.6118 387.552 48.4561 386.652 48.1558 386.052 cv
47.8438 385.452 47.3882 385.152 46.7759 385.152 cv
ef
51.6841 391.632 mo
52.9199 391.632 li
52.9199 393.12 li
51.6841 393.12 li
51.6841 391.632 li
51.6841 391.632 li
cp
ef
58.0562 384.216 mo
59.0278 384.216 59.772 384.612 60.2998 385.38 cv
60.8159 386.16 61.0801 387.288 61.0801 388.752 cv
61.0801 390.228 60.8159 391.356 60.2998 392.124 cv
59.772 392.892 59.0278 393.276 58.0562 393.276 cv
57.0718 393.276 56.3159 392.892 55.7998 392.124 cv
55.2842 391.356 55.0322 390.228 55.0322 388.752 cv
55.0322 387.288 55.2842 386.16 55.7998 385.38 cv
56.3159 384.612 57.0718 384.216 58.0562 384.216 cv
58.0562 384.216 li
cp
58.0562 385.152 mo
57.4438 385.152 56.9878 385.452 56.6758 386.052 cv
56.3638 386.652 56.2202 387.552 56.2202 388.752 cv
56.2202 389.952 56.3638 390.852 56.6758 391.452 cv
56.9878 392.052 57.4438 392.352 58.0562 392.352 cv
58.668 392.352 59.124 392.052 59.436 391.452 cv
59.7358 390.852 59.8921 389.952 59.8921 388.752 cv
59.8921 387.552 59.7358 386.652 59.436 386.052 cv
59.124 385.452 58.668 385.152 58.0562 385.152 cv
ef
65.7358 384.216 mo
66.708 384.216 67.4521 384.612 67.98 385.38 cv
68.4961 386.16 68.7598 387.288 68.7598 388.752 cv
68.7598 390.228 68.4961 391.356 67.98 392.124 cv
67.4521 392.892 66.708 393.276 65.7358 393.276 cv
64.752 393.276 63.9961 392.892 63.48 392.124 cv
62.9639 391.356 62.7119 390.228 62.7119 388.752 cv
62.7119 387.288 62.9639 386.16 63.48 385.38 cv
63.9961 384.612 64.752 384.216 65.7358 384.216 cv
65.7358 384.216 li
cp
65.7358 385.152 mo
65.124 385.152 64.668 385.452 64.356 386.052 cv
64.0439 386.652 63.8999 387.552 63.8999 388.752 cv
63.8999 389.952 64.0439 390.852 64.356 391.452 cv
64.668 392.052 65.124 392.352 65.7358 392.352 cv
66.3481 392.352 66.8042 392.052 67.1162 391.452 cv
67.416 390.852 67.5718 389.952 67.5718 388.752 cv
67.5718 387.552 67.416 386.652 67.1162 386.052 cv
66.8042 385.452 66.3481 385.152 65.7358 385.152 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 339.429 mo
518.4 339.429 li
@
grestore
72 339.429 mo
76 339.429 li
f
72 339.429 mo
76 339.429 li
@
518.4 339.429 mo
514.4 339.429 li
f
518.4 339.429 mo
514.4 339.429 li
@
47.0161 334.776 mo
47.9878 334.776 48.7319 335.172 49.2598 335.94 cv
49.7759 336.72 50.04 337.848 50.04 339.312 cv
50.04 340.788 49.7759 341.916 49.2598 342.684 cv
48.7319 343.452 47.9878 343.836 47.0161 343.836 cv
46.0322 343.836 45.2759 343.452 44.7598 342.684 cv
44.2441 341.916 43.9922 340.788 43.9922 339.312 cv
43.9922 337.848 44.2441 336.72 44.7598 335.94 cv
45.2759 335.172 46.0322 334.776 47.0161 334.776 cv
47.0161 334.776 li
cp
47.0161 335.712 mo
46.4038 335.712 45.9482 336.012 45.6362 336.612 cv
45.3242 337.212 45.1802 338.112 45.1802 339.312 cv
45.1802 340.512 45.3242 341.412 45.6362 342.012 cv
45.9482 342.612 46.4038 342.912 47.0161 342.912 cv
47.6279 342.912 48.084 342.612 48.396 342.012 cv
48.6958 341.412 48.8521 340.512 48.8521 339.312 cv
48.8521 338.112 48.6958 337.212 48.396 336.612 cv
48.084 336.012 47.6279 335.712 47.0161 335.712 cv
ef
51.9238 342.192 mo
53.1602 342.192 li
53.1602 343.68 li
51.9238 343.68 li
51.9238 342.192 li
51.9238 342.192 li
cp
ef
58.2959 334.776 mo
59.2681 334.776 60.0122 335.172 60.54 335.94 cv
61.0562 336.72 61.3198 337.848 61.3198 339.312 cv
61.3198 340.788 61.0562 341.916 60.54 342.684 cv
60.0122 343.452 59.2681 343.836 58.2959 343.836 cv
57.312 343.836 56.5562 343.452 56.04 342.684 cv
55.5239 341.916 55.272 340.788 55.272 339.312 cv
55.272 337.848 55.5239 336.72 56.04 335.94 cv
56.5562 335.172 57.312 334.776 58.2959 334.776 cv
58.2959 334.776 li
cp
58.2959 335.712 mo
57.6841 335.712 57.228 336.012 56.916 336.612 cv
56.604 337.212 56.46 338.112 56.46 339.312 cv
56.46 340.512 56.604 341.412 56.916 342.012 cv
57.228 342.612 57.6841 342.912 58.2959 342.912 cv
58.9082 342.912 59.3638 342.612 59.6758 342.012 cv
59.9761 341.412 60.1318 340.512 60.1318 339.312 cv
60.1318 338.112 59.9761 337.212 59.6758 336.612 cv
59.3638 336.012 58.9082 335.712 58.2959 335.712 cv
ef
63.4561 334.932 mo
68.1001 334.932 li
68.1001 335.928 li
64.5361 335.928 li
64.5361 338.076 li
64.7041 338.016 64.8838 337.968 65.0518 337.944 cv
65.2202 337.92 65.3999 337.896 65.5679 337.896 cv
66.54 337.896 67.3081 338.172 67.8838 338.7 cv
68.46 339.24 68.748 339.96 68.748 340.872 cv
68.748 341.82 68.4482 342.552 67.8599 343.068 cv
67.272 343.584 66.4438 343.836 65.3882 343.836 cv
65.0161 343.836 64.644 343.8 64.2598 343.752 cv
63.876 343.692 63.4922 343.608 63.084 343.476 cv
63.084 342.288 li
63.4321 342.48 63.792 342.624 64.1758 342.72 cv
64.5479 342.816 64.9438 342.852 65.3638 342.852 cv
66.0361 342.852 66.5762 342.684 66.9722 342.324 cv
67.356 341.964 67.5601 341.484 67.5601 340.872 cv
67.5601 340.271 67.356 339.792 66.9722 339.432 cv
66.5762 339.072 66.0361 338.892 65.3638 338.892 cv
65.0518 338.892 64.728 338.928 64.416 339 cv
64.104 339.072 63.7798 339.18 63.4561 339.324 cv
63.4561 334.932 li
63.4561 334.932 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 290.057 mo
518.4 290.057 li
@
grestore
72 290.057 mo
76 290.057 li
f
72 290.057 mo
76 290.057 li
@
518.4 290.057 mo
514.4 290.057 li
f
518.4 290.057 mo
514.4 290.057 li
@
46.7759 285.576 mo
47.748 285.576 48.4922 285.972 49.02 286.74 cv
49.5361 287.52 49.7998 288.648 49.7998 290.112 cv
49.7998 291.588 49.5361 292.716 49.02 293.484 cv
48.4922 294.252 47.748 294.636 46.7759 294.636 cv
45.792 294.636 45.0361 294.252 44.52 293.484 cv
44.0039 292.716 43.752 291.588 43.752 290.112 cv
43.752 288.648 44.0039 287.52 44.52 286.74 cv
45.0361 285.972 45.792 285.576 46.7759 285.576 cv
46.7759 285.576 li
cp
46.7759 286.512 mo
46.1641 286.512 45.708 286.812 45.396 287.412 cv
45.084 288.012 44.9399 288.912 44.9399 290.112 cv
44.9399 291.312 45.084 292.212 45.396 292.812 cv
45.708 293.412 46.1641 293.712 46.7759 293.712 cv
47.3882 293.712 47.8438 293.412 48.1558 292.812 cv
48.4561 292.212 48.6118 291.312 48.6118 290.112 cv
48.6118 288.912 48.4561 288.012 48.1558 287.412 cv
47.8438 286.812 47.3882 286.512 46.7759 286.512 cv
ef
51.6841 292.992 mo
52.9199 292.992 li
52.9199 294.48 li
51.6841 294.48 li
51.6841 292.992 li
51.6841 292.992 li
cp
ef
55.728 293.484 mo
57.6602 293.484 li
57.6602 286.812 li
55.5601 287.232 li
55.5601 286.152 li
57.6479 285.732 li
58.8359 285.732 li
58.8359 293.484 li
60.7681 293.484 li
60.7681 294.48 li
55.728 294.48 li
55.728 293.484 li
55.728 293.484 li
cp
ef
65.7358 285.576 mo
66.708 285.576 67.4521 285.972 67.98 286.74 cv
68.4961 287.52 68.7598 288.648 68.7598 290.112 cv
68.7598 291.588 68.4961 292.716 67.98 293.484 cv
67.4521 294.252 66.708 294.636 65.7358 294.636 cv
64.752 294.636 63.9961 294.252 63.48 293.484 cv
62.9639 292.716 62.7119 291.588 62.7119 290.112 cv
62.7119 288.648 62.9639 287.52 63.48 286.74 cv
63.9961 285.972 64.752 285.576 65.7358 285.576 cv
65.7358 285.576 li
cp
65.7358 286.512 mo
65.124 286.512 64.668 286.812 64.356 287.412 cv
64.0439 288.012 63.8999 288.912 63.8999 290.112 cv
63.8999 291.312 64.0439 292.212 64.356 292.812 cv
64.668 293.412 65.124 293.712 65.7358 293.712 cv
66.3481 293.712 66.8042 293.412 67.1162 292.812 cv
67.416 292.212 67.5718 291.312 67.5718 290.112 cv
67.5718 288.912 67.416 288.012 67.1162 287.412 cv
66.8042 286.812 66.3481 286.512 65.7358 286.512 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 240.686 mo
518.4 240.686 li
@
grestore
72 240.686 mo
76 240.686 li
f
72 240.686 mo
76 240.686 li
@
518.4 240.686 mo
514.4 240.686 li
f
518.4 240.686 mo
514.4 240.686 li
@
47.0161 236.136 mo
47.9878 236.136 48.7319 236.532 49.2598 237.3 cv
49.7759 238.08 50.04 239.208 50.04 240.672 cv
50.04 242.148 49.7759 243.276 49.2598 244.044 cv
48.7319 244.812 47.9878 245.196 47.0161 245.196 cv
46.0322 245.196 45.2759 244.812 44.7598 244.044 cv
44.2441 243.276 43.9922 242.148 43.9922 240.672 cv
43.9922 239.208 44.2441 238.08 44.7598 237.3 cv
45.2759 236.532 46.0322 236.136 47.0161 236.136 cv
47.0161 236.136 li
cp
47.0161 237.072 mo
46.4038 237.072 45.9482 237.372 45.6362 237.972 cv
45.3242 238.572 45.1802 239.472 45.1802 240.672 cv
45.1802 241.872 45.3242 242.771 45.6362 243.372 cv
45.9482 243.972 46.4038 244.271 47.0161 244.271 cv
47.6279 244.271 48.084 243.972 48.396 243.372 cv
48.6958 242.771 48.8521 241.872 48.8521 240.672 cv
48.8521 239.472 48.6958 238.572 48.396 237.972 cv
48.084 237.372 47.6279 237.072 47.0161 237.072 cv
ef
51.9238 243.552 mo
53.1602 243.552 li
53.1602 245.04 li
51.9238 245.04 li
51.9238 243.552 li
51.9238 243.552 li
cp
ef
55.9678 244.044 mo
57.8999 244.044 li
57.8999 237.372 li
55.7998 237.792 li
55.7998 236.712 li
57.8882 236.292 li
59.0762 236.292 li
59.0762 244.044 li
61.0078 244.044 li
61.0078 245.04 li
55.9678 245.04 li
55.9678 244.044 li
55.9678 244.044 li
cp
ef
63.4561 236.292 mo
68.1001 236.292 li
68.1001 237.288 li
64.5361 237.288 li
64.5361 239.436 li
64.7041 239.376 64.8838 239.328 65.0518 239.304 cv
65.2202 239.28 65.3999 239.256 65.5679 239.256 cv
66.54 239.256 67.3081 239.532 67.8838 240.06 cv
68.46 240.6 68.748 241.32 68.748 242.232 cv
68.748 243.18 68.4482 243.912 67.8599 244.428 cv
67.272 244.944 66.4438 245.196 65.3882 245.196 cv
65.0161 245.196 64.644 245.16 64.2598 245.112 cv
63.876 245.052 63.4922 244.968 63.084 244.836 cv
63.084 243.648 li
63.4321 243.84 63.792 243.984 64.1758 244.08 cv
64.5479 244.176 64.9438 244.212 65.3638 244.212 cv
66.0361 244.212 66.5762 244.044 66.9722 243.684 cv
67.356 243.324 67.5601 242.844 67.5601 242.232 cv
67.5601 241.632 67.356 241.152 66.9722 240.792 cv
66.5762 240.432 66.0361 240.252 65.3638 240.252 cv
65.0518 240.252 64.728 240.288 64.416 240.36 cv
64.104 240.432 63.7798 240.54 63.4561 240.684 cv
63.4561 236.292 li
63.4561 236.292 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 191.314 mo
518.4 191.314 li
@
grestore
72 191.314 mo
76 191.314 li
f
72 191.314 mo
76 191.314 li
@
518.4 191.314 mo
514.4 191.314 li
f
518.4 191.314 mo
514.4 191.314 li
@
46.7759 186.696 mo
47.748 186.696 48.4922 187.092 49.02 187.86 cv
49.5361 188.64 49.7998 189.768 49.7998 191.232 cv
49.7998 192.708 49.5361 193.836 49.02 194.604 cv
48.4922 195.372 47.748 195.756 46.7759 195.756 cv
45.792 195.756 45.0361 195.372 44.52 194.604 cv
44.0039 193.836 43.752 192.708 43.752 191.232 cv
43.752 189.768 44.0039 188.64 44.52 187.86 cv
45.0361 187.092 45.792 186.696 46.7759 186.696 cv
46.7759 186.696 li
cp
46.7759 187.632 mo
46.1641 187.632 45.708 187.932 45.396 188.532 cv
45.084 189.132 44.9399 190.032 44.9399 191.232 cv
44.9399 192.432 45.084 193.332 45.396 193.932 cv
45.708 194.532 46.1641 194.832 46.7759 194.832 cv
47.3882 194.832 47.8438 194.532 48.1558 193.932 cv
48.4561 193.332 48.6118 192.432 48.6118 191.232 cv
48.6118 190.032 48.4561 189.132 48.1558 188.532 cv
47.8438 187.932 47.3882 187.632 46.7759 187.632 cv
ef
51.6841 194.112 mo
52.9199 194.112 li
52.9199 195.6 li
51.6841 195.6 li
51.6841 194.112 li
51.6841 194.112 li
cp
ef
56.5439 194.604 mo
60.6719 194.604 li
60.6719 195.6 li
55.1162 195.6 li
55.1162 194.604 li
55.5601 194.148 56.1719 193.524 56.9521 192.732 cv
57.7202 191.952 58.2119 191.448 58.416 191.22 cv
58.7998 190.8 59.064 190.44 59.208 190.14 cv
59.3521 189.852 59.436 189.552 59.436 189.264 cv
59.436 188.808 59.2681 188.424 58.9438 188.136 cv
58.6201 187.848 58.2002 187.692 57.6719 187.692 cv
57.2998 187.692 56.9038 187.764 56.4961 187.884 cv
56.0879 188.016 55.644 188.208 55.1758 188.472 cv
55.1758 187.272 li
55.6558 187.08 56.1001 186.936 56.5078 186.84 cv
56.916 186.744 57.2998 186.696 57.6479 186.696 cv
58.5479 186.696 59.2681 186.924 59.8081 187.38 cv
60.3481 187.836 60.624 188.436 60.624 189.192 cv
60.624 189.552 60.5518 189.9 60.4199 190.212 cv
60.2881 190.536 60.0479 190.92 59.688 191.352 cv
59.5918 191.472 59.2798 191.796 58.752 192.336 cv
58.2241 192.876 57.4922 193.632 56.5439 194.604 cv
56.5439 194.604 li
cp
ef
65.7358 186.696 mo
66.708 186.696 67.4521 187.092 67.98 187.86 cv
68.4961 188.64 68.7598 189.768 68.7598 191.232 cv
68.7598 192.708 68.4961 193.836 67.98 194.604 cv
67.4521 195.372 66.708 195.756 65.7358 195.756 cv
64.752 195.756 63.9961 195.372 63.48 194.604 cv
62.9639 193.836 62.7119 192.708 62.7119 191.232 cv
62.7119 189.768 62.9639 188.64 63.48 187.86 cv
63.9961 187.092 64.752 186.696 65.7358 186.696 cv
65.7358 186.696 li
cp
65.7358 187.632 mo
65.124 187.632 64.668 187.932 64.356 188.532 cv
64.0439 189.132 63.8999 190.032 63.8999 191.232 cv
63.8999 192.432 64.0439 193.332 64.356 193.932 cv
64.668 194.532 65.124 194.832 65.7358 194.832 cv
66.3481 194.832 66.8042 194.532 67.1162 193.932 cv
67.416 193.332 67.5718 192.432 67.5718 191.232 cv
67.5718 190.032 67.416 189.132 67.1162 188.532 cv
66.8042 187.932 66.3481 187.632 65.7358 187.632 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 141.943 mo
518.4 141.943 li
@
grestore
72 141.943 mo
76 141.943 li
f
72 141.943 mo
76 141.943 li
@
518.4 141.943 mo
514.4 141.943 li
f
518.4 141.943 mo
514.4 141.943 li
@
47.0161 137.496 mo
47.9878 137.496 48.7319 137.892 49.2598 138.66 cv
49.7759 139.44 50.04 140.568 50.04 142.032 cv
50.04 143.508 49.7759 144.636 49.2598 145.404 cv
48.7319 146.172 47.9878 146.556 47.0161 146.556 cv
46.0322 146.556 45.2759 146.172 44.7598 145.404 cv
44.2441 144.636 43.9922 143.508 43.9922 142.032 cv
43.9922 140.568 44.2441 139.44 44.7598 138.66 cv
45.2759 137.892 46.0322 137.496 47.0161 137.496 cv
47.0161 137.496 li
cp
47.0161 138.432 mo
46.4038 138.432 45.9482 138.732 45.6362 139.332 cv
45.3242 139.932 45.1802 140.832 45.1802 142.032 cv
45.1802 143.232 45.3242 144.132 45.6362 144.732 cv
45.9482 145.332 46.4038 145.632 47.0161 145.632 cv
47.6279 145.632 48.084 145.332 48.396 144.732 cv
48.6958 144.132 48.8521 143.232 48.8521 142.032 cv
48.8521 140.832 48.6958 139.932 48.396 139.332 cv
48.084 138.732 47.6279 138.432 47.0161 138.432 cv
ef
51.9238 144.912 mo
53.1602 144.912 li
53.1602 146.4 li
51.9238 146.4 li
51.9238 144.912 li
51.9238 144.912 li
cp
ef
56.7842 145.404 mo
60.9121 145.404 li
60.9121 146.4 li
55.356 146.4 li
55.356 145.404 li
55.7998 144.948 56.4121 144.324 57.1919 143.532 cv
57.96 142.752 58.4521 142.248 58.6558 142.02 cv
59.04 141.6 59.3042 141.24 59.4482 140.94 cv
59.5918 140.652 59.6758 140.352 59.6758 140.064 cv
59.6758 139.608 59.5078 139.224 59.1841 138.936 cv
58.8599 138.648 58.4399 138.492 57.9121 138.492 cv
57.54 138.492 57.144 138.564 56.7358 138.684 cv
56.3281 138.816 55.8838 139.008 55.416 139.272 cv
55.416 138.072 li
55.896 137.88 56.3398 137.736 56.748 137.64 cv
57.1558 137.544 57.54 137.496 57.8882 137.496 cv
58.7881 137.496 59.5078 137.724 60.0479 138.18 cv
60.5879 138.636 60.8638 139.236 60.8638 139.992 cv
60.8638 140.352 60.792 140.7 60.6602 141.012 cv
60.5278 141.336 60.2881 141.72 59.9282 142.152 cv
59.832 142.272 59.52 142.596 58.9922 143.136 cv
58.4639 143.676 57.7319 144.432 56.7842 145.404 cv
56.7842 145.404 li
cp
ef
63.4561 137.652 mo
68.1001 137.652 li
68.1001 138.648 li
64.5361 138.648 li
64.5361 140.796 li
64.7041 140.736 64.8838 140.688 65.0518 140.664 cv
65.2202 140.64 65.3999 140.616 65.5679 140.616 cv
66.54 140.616 67.3081 140.892 67.8838 141.42 cv
68.46 141.96 68.748 142.68 68.748 143.592 cv
68.748 144.54 68.4482 145.272 67.8599 145.788 cv
67.272 146.304 66.4438 146.556 65.3882 146.556 cv
65.0161 146.556 64.644 146.52 64.2598 146.472 cv
63.876 146.412 63.4922 146.328 63.084 146.196 cv
63.084 145.008 li
63.4321 145.2 63.792 145.344 64.1758 145.44 cv
64.5479 145.536 64.9438 145.572 65.3638 145.572 cv
66.0361 145.572 66.5762 145.404 66.9722 145.044 cv
67.356 144.684 67.5601 144.204 67.5601 143.592 cv
67.5601 142.992 67.356 142.512 66.9722 142.152 cv
66.5762 141.792 66.0361 141.612 65.3638 141.612 cv
65.0518 141.612 64.728 141.648 64.416 141.72 cv
64.104 141.792 63.7798 141.9 63.4561 142.044 cv
63.4561 137.652 li
63.4561 137.652 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
grestore
72 92.5708 mo
76 92.5708 li
f
72 92.5708 mo
76 92.5708 li
@
518.4 92.5708 mo
514.4 92.5708 li
f
518.4 92.5708 mo
514.4 92.5708 li
@
46.7759 88.0562 mo
47.748 88.0562 48.4922 88.4521 49.02 89.2197 cv
49.5361 90 49.7998 91.1279 49.7998 92.5918 cv
49.7998 94.0679 49.5361 95.1958 49.02 95.9639 cv
48.4922 96.7319 47.748 97.1162 46.7759 97.1162 cv
45.792 97.1162 45.0361 96.7319 44.52 95.9639 cv
44.0039 95.1958 43.752 94.0679 43.752 92.5918 cv
43.752 91.1279 44.0039 90 44.52 89.2197 cv
45.0361 88.4521 45.792 88.0562 46.7759 88.0562 cv
46.7759 88.0562 li
cp
46.7759 88.9922 mo
46.1641 88.9922 45.708 89.292 45.396 89.8921 cv
45.084 90.4922 44.9399 91.3921 44.9399 92.5918 cv
44.9399 93.792 45.084 94.6919 45.396 95.292 cv
45.708 95.8921 46.1641 96.1919 46.7759 96.1919 cv
47.3882 96.1919 47.8438 95.8921 48.1558 95.292 cv
48.4561 94.6919 48.6118 93.792 48.6118 92.5918 cv
48.6118 91.3921 48.4561 90.4922 48.1558 89.8921 cv
47.8438 89.292 47.3882 88.9922 46.7759 88.9922 cv
ef
51.6841 95.4722 mo
52.9199 95.4722 li
52.9199 96.96 li
51.6841 96.96 li
51.6841 95.4722 li
51.6841 95.4722 li
cp
ef
59.1118 92.2441 mo
59.6758 92.3638 60.1201 92.6162 60.4321 93 cv
60.7441 93.3838 60.9121 93.8638 60.9121 94.416 cv
60.9121 95.2798 60.6118 95.9521 60.0239 96.4199 cv
59.4238 96.8877 58.584 97.1162 57.4922 97.1162 cv
57.1201 97.1162 56.7358 97.0801 56.3521 97.0078 cv
55.9678 96.9482 55.5601 96.8398 55.1519 96.6958 cv
55.1519 95.5562 li
55.4761 95.748 55.8359 95.8921 56.2319 95.9878 cv
56.6162 96.084 57.0239 96.1318 57.4561 96.1318 cv
58.2002 96.1318 58.7642 95.9878 59.1479 95.7002 cv
59.5322 95.4121 59.7358 94.98 59.7358 94.416 cv
59.7358 93.9121 59.5562 93.5039 59.1958 93.2158 cv
58.8359 92.9277 58.332 92.772 57.6841 92.772 cv
56.6641 92.772 li
56.6641 91.7998 li
57.7319 91.7998 li
58.3081 91.7998 58.752 91.6919 59.064 91.4521 cv
59.376 91.2241 59.5322 90.8877 59.5322 90.4438 cv
59.5322 90 59.3638 89.6519 59.0518 89.4121 cv
58.728 89.1719 58.272 89.0518 57.6841 89.0518 cv
57.3599 89.0518 57.0122 89.0879 56.6401 89.1602 cv
56.2681 89.2319 55.8599 89.3398 55.416 89.4839 cv
55.416 88.4277 li
55.8599 88.3081 56.2798 88.2119 56.6758 88.1519 cv
57.0601 88.0918 57.4321 88.0562 57.792 88.0562 cv
58.6802 88.0562 59.3882 88.2598 59.916 88.668 cv
60.4438 89.0762 60.708 89.6279 60.708 90.3242 cv
60.708 90.8037 60.564 91.2119 60.2881 91.5479 cv
60.0122 91.8838 59.6162 92.124 59.1118 92.2441 cv
59.1118 92.2441 li
cp
ef
65.7358 88.0562 mo
66.708 88.0562 67.4521 88.4521 67.98 89.2197 cv
68.4961 90 68.7598 91.1279 68.7598 92.5918 cv
68.7598 94.0679 68.4961 95.1958 67.98 95.9639 cv
67.4521 96.7319 66.708 97.1162 65.7358 97.1162 cv
64.752 97.1162 63.9961 96.7319 63.48 95.9639 cv
62.9639 95.1958 62.7119 94.0679 62.7119 92.5918 cv
62.7119 91.1279 62.9639 90 63.48 89.2197 cv
63.9961 88.4521 64.752 88.0562 65.7358 88.0562 cv
65.7358 88.0562 li
cp
65.7358 88.9922 mo
65.124 88.9922 64.668 89.292 64.356 89.8921 cv
64.0439 90.4922 63.8999 91.3921 63.8999 92.5918 cv
63.8999 93.792 64.0439 94.6919 64.356 95.292 cv
64.668 95.8921 65.124 96.1919 65.7358 96.1919 cv
66.3481 96.1919 66.8042 95.8921 67.1162 95.292 cv
67.416 94.6919 67.5718 93.792 67.5718 92.5918 cv
67.5718 91.3921 67.416 90.4922 67.1162 89.8921 cv
66.8042 89.292 66.3481 88.9922 65.7358 88.9922 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 43.2002 mo
518.4 43.2002 li
@
grestore
72 43.2002 mo
76 43.2002 li
f
72 43.2002 mo
76 43.2002 li
@
518.4 43.2002 mo
514.4 43.2002 li
f
518.4 43.2002 mo
514.4 43.2002 li
@
47.0161 38.6162 mo
47.9878 38.6162 48.7319 39.0117 49.2598 39.7798 cv
49.7759 40.5601 50.04 41.688 50.04 43.1519 cv
50.04 44.6279 49.7759 45.7559 49.2598 46.5239 cv
48.7319 47.292 47.9878 47.6758 47.0161 47.6758 cv
46.0322 47.6758 45.2759 47.292 44.7598 46.5239 cv
44.2441 45.7559 43.9922 44.6279 43.9922 43.1519 cv
43.9922 41.688 44.2441 40.5601 44.7598 39.7798 cv
45.2759 39.0117 46.0322 38.6162 47.0161 38.6162 cv
47.0161 38.6162 li
cp
47.0161 39.5518 mo
46.4038 39.5518 45.9482 39.8521 45.6362 40.4521 cv
45.3242 41.0518 45.1802 41.9521 45.1802 43.1519 cv
45.1802 44.3521 45.3242 45.252 45.6362 45.8521 cv
45.9482 46.4521 46.4038 46.752 47.0161 46.752 cv
47.6279 46.752 48.084 46.4521 48.396 45.8521 cv
48.6958 45.252 48.8521 44.3521 48.8521 43.1519 cv
48.8521 41.9521 48.6958 41.0518 48.396 40.4521 cv
48.084 39.8521 47.6279 39.5518 47.0161 39.5518 cv
ef
51.9238 46.0322 mo
53.1602 46.0322 li
53.1602 47.52 li
51.9238 47.52 li
51.9238 46.0322 li
51.9238 46.0322 li
cp
ef
59.3521 42.8037 mo
59.916 42.9238 60.3599 43.1758 60.6719 43.5601 cv
60.9839 43.9438 61.1519 44.4238 61.1519 44.9761 cv
61.1519 45.8398 60.8521 46.5117 60.2642 46.98 cv
59.6641 47.4482 58.8242 47.6758 57.7319 47.6758 cv
57.3599 47.6758 56.9761 47.6401 56.5918 47.5679 cv
56.208 47.5078 55.7998 47.3999 55.3921 47.2559 cv
55.3921 46.1162 li
55.7158 46.3081 56.0762 46.4521 56.4722 46.5479 cv
56.856 46.644 57.2642 46.6919 57.6958 46.6919 cv
58.4399 46.6919 59.0039 46.5479 59.3882 46.2598 cv
59.772 45.9717 59.9761 45.54 59.9761 44.9761 cv
59.9761 44.4717 59.7959 44.064 59.436 43.7759 cv
59.0762 43.4878 58.5718 43.332 57.9238 43.332 cv
56.9038 43.332 li
56.9038 42.3599 li
57.9722 42.3599 li
58.5479 42.3599 58.9922 42.252 59.3042 42.0117 cv
59.6162 41.7842 59.772 41.4482 59.772 41.0039 cv
59.772 40.5601 59.604 40.2119 59.292 39.9717 cv
58.9678 39.7319 58.5122 39.6118 57.9238 39.6118 cv
57.6001 39.6118 57.252 39.6479 56.8799 39.7197 cv
56.5078 39.792 56.1001 39.8999 55.6558 40.0439 cv
55.6558 38.9878 li
56.1001 38.8682 56.52 38.772 56.916 38.7119 cv
57.2998 38.6519 57.6719 38.6162 58.0322 38.6162 cv
58.9199 38.6162 59.6279 38.8198 60.1558 39.228 cv
60.6841 39.6357 60.9482 40.188 60.9482 40.8838 cv
60.9482 41.3638 60.8042 41.772 60.5278 42.1079 cv
60.252 42.4438 59.856 42.6841 59.3521 42.8037 cv
59.3521 42.8037 li
cp
ef
63.4561 38.772 mo
68.1001 38.772 li
68.1001 39.7681 li
64.5361 39.7681 li
64.5361 41.916 li
64.7041 41.856 64.8838 41.8081 65.0518 41.7842 cv
65.2202 41.7598 65.3999 41.7358 65.5679 41.7358 cv
66.54 41.7358 67.3081 42.0117 67.8838 42.54 cv
68.46 43.0801 68.748 43.7998 68.748 44.7119 cv
68.748 45.6602 68.4482 46.3921 67.8599 46.9082 cv
67.272 47.4238 66.4438 47.6758 65.3882 47.6758 cv
65.0161 47.6758 64.644 47.6401 64.2598 47.5918 cv
63.876 47.5322 63.4922 47.4482 63.084 47.3159 cv
63.084 46.1279 li
63.4321 46.3198 63.792 46.4639 64.1758 46.5601 cv
64.5479 46.6563 64.9438 46.6919 65.3638 46.6919 cv
66.0361 46.6919 66.5762 46.5239 66.9722 46.1641 cv
67.356 45.8037 67.5601 45.3242 67.5601 44.7119 cv
67.5601 44.1118 67.356 43.6318 66.9722 43.272 cv
66.5762 42.9121 66.0361 42.7319 65.3638 42.7319 cv
65.0518 42.7319 64.728 42.7681 64.416 42.8398 cv
64.104 42.9121 63.7798 43.02 63.4561 43.1641 cv
63.4561 38.772 li
63.4561 38.772 li
cp
ef
28.9321 278.184 mo
28.9321 275.508 li
28.9321 274.536 29.1602 273.792 29.604 273.288 cv
30.0479 272.784 30.6958 272.532 31.5479 272.532 cv
32.4121 272.532 33.0718 272.784 33.5039 273.288 cv
33.9478 273.792 34.1641 274.536 34.1641 275.508 cv
34.1641 276.996 li
37.6802 276.996 li
37.6802 278.184 li
28.9321 278.184 li
28.9321 278.184 li
cp
29.9038 276.996 mo
33.1919 276.996 li
33.1919 275.508 li
33.1919 274.956 33.0601 274.536 32.772 274.236 cv
32.4839 273.936 32.0762 273.78 31.5479 273.78 cv
31.02 273.78 30.624 273.936 30.3359 274.236 cv
30.0479 274.536 29.9038 274.956 29.9038 275.508 cv
29.9038 276.996 li
ef
33.8159 266.976 mo
33.228 266.988 32.7598 267.156 32.3999 267.468 cv
32.0518 267.792 31.8721 268.224 31.8721 268.752 cv
31.8721 269.352 32.0518 269.832 32.3882 270.192 cv
32.7241 270.552 33.2041 270.768 33.8159 270.816 cv
33.8159 266.976 li
33.8159 266.976 li
cp
34.1279 265.896 mo
34.6558 265.896 li
34.6558 270.852 li
35.3999 270.804 35.9761 270.588 36.3599 270.18 cv
36.7441 269.784 36.936 269.232 36.936 268.512 cv
36.936 268.104 36.8882 267.696 36.792 267.312 cv
36.6958 266.928 36.54 266.532 36.3242 266.148 cv
37.3438 266.148 li
37.5122 266.532 37.644 266.928 37.7158 267.336 cv
37.7881 267.744 37.8359 268.164 37.8359 268.572 cv
37.8359 269.628 37.5361 270.456 36.936 271.068 cv
36.3359 271.68 35.5078 271.98 34.4639 271.98 cv
33.396 271.98 32.5439 271.692 31.9082 271.116 cv
31.2842 270.54 30.96 269.748 30.96 268.764 cv
30.96 267.876 31.248 267.18 31.812 266.664 cv
32.3882 266.16 33.1558 265.896 34.1279 265.896 cv
ef
32.124 260.268 mo
32.0518 260.388 32.0039 260.52 31.9678 260.664 cv
31.9438 260.808 31.9199 260.964 31.9199 261.132 cv
31.9199 261.744 32.124 262.212 32.52 262.536 cv
32.916 262.872 33.48 263.028 34.2241 263.028 cv
37.6802 263.028 li
37.6802 264.108 li
31.1162 264.108 li
31.1162 263.028 li
32.1362 263.028 li
31.7402 262.812 31.4399 262.512 31.248 262.152 cv
31.0562 261.792 30.96 261.348 30.96 260.82 cv
30.96 260.748 30.9722 260.664 30.9722 260.568 cv
30.9839 260.484 30.9961 260.388 31.02 260.268 cv
32.124 260.268 li
32.124 260.268 li
cp
ef
31.3682 254.544 mo
32.376 254.544 li
32.208 254.855 32.0879 255.156 32.0039 255.468 cv
31.9199 255.78 31.8721 256.08 31.8721 256.392 cv
31.8721 257.088 32.1001 257.64 32.5439 258.024 cv
32.9878 258.408 33.6118 258.6 34.4038 258.6 cv
35.208 258.6 35.832 258.408 36.2759 258.024 cv
36.7202 257.64 36.936 257.088 36.936 256.392 cv
36.936 256.08 36.8999 255.78 36.8159 255.468 cv
36.7319 255.156 36.6001 254.855 36.4321 254.544 cv
37.4277 254.544 li
37.5718 254.855 37.6802 255.168 37.7402 255.48 cv
37.7998 255.804 37.8359 256.152 37.8359 256.512 cv
37.8359 257.496 37.5361 258.288 36.9121 258.864 cv
36.2998 259.452 35.46 259.74 34.4038 259.74 cv
33.3359 259.74 32.4961 259.452 31.8838 258.864 cv
31.272 258.276 30.96 257.472 30.96 256.44 cv
30.96 256.104 30.9961 255.78 31.0679 255.468 cv
31.1401 255.156 31.2358 254.844 31.3682 254.544 cv
31.3682 254.544 li
cp
ef
33.8159 248.256 mo
33.228 248.268 32.7598 248.436 32.3999 248.748 cv
32.0518 249.072 31.8721 249.504 31.8721 250.032 cv
31.8721 250.632 32.0518 251.112 32.3882 251.472 cv
32.7241 251.832 33.2041 252.048 33.8159 252.096 cv
33.8159 248.256 li
33.8159 248.256 li
cp
34.1279 247.176 mo
34.6558 247.176 li
34.6558 252.132 li
35.3999 252.084 35.9761 251.868 36.3599 251.46 cv
36.7441 251.064 36.936 250.512 36.936 249.792 cv
36.936 249.384 36.8882 248.976 36.792 248.592 cv
36.6958 248.208 36.54 247.812 36.3242 247.428 cv
37.3438 247.428 li
37.5122 247.812 37.644 248.208 37.7158 248.616 cv
37.7881 249.024 37.8359 249.444 37.8359 249.852 cv
37.8359 250.908 37.5361 251.736 36.936 252.348 cv
36.3359 252.96 35.5078 253.26 34.4639 253.26 cv
33.396 253.26 32.5439 252.972 31.9082 252.396 cv
31.2842 251.82 30.96 251.028 30.96 250.044 cv
30.96 249.156 31.248 248.46 31.812 247.944 cv
32.3882 247.44 33.1558 247.176 34.1279 247.176 cv
ef
33.7202 239.892 mo
37.6802 239.892 li
37.6802 240.972 li
33.7559 240.972 li
33.1318 240.972 32.6758 241.104 32.3638 241.344 cv
32.0518 241.584 31.896 241.944 31.896 242.424 cv
31.896 243.012 32.0879 243.468 32.46 243.804 cv
32.832 244.14 33.3359 244.308 33.9722 244.308 cv
37.6802 244.308 li
37.6802 245.388 li
31.1162 245.388 li
31.1162 244.308 li
32.1362 244.308 li
31.752 244.056 31.4521 243.756 31.2598 243.396 cv
31.0679 243.048 30.96 242.64 30.96 242.184 cv
30.96 241.44 31.2002 240.864 31.668 240.48 cv
32.1362 240.096 32.8198 239.892 33.7202 239.892 cv
33.7202 239.892 li
cp
ef
29.2559 236.604 mo
31.1162 236.604 li
31.1162 234.384 li
31.9561 234.384 li
31.9561 236.604 li
35.52 236.604 li
36.0601 236.604 36.4082 236.532 36.5518 236.388 cv
36.708 236.244 36.7798 235.944 36.7798 235.488 cv
36.7798 234.384 li
37.6802 234.384 li
37.6802 235.488 li
37.6802 236.328 37.5239 236.904 37.2119 237.216 cv
36.8999 237.528 36.3359 237.684 35.52 237.684 cv
31.9561 237.684 li
31.9561 238.476 li
31.1162 238.476 li
31.1162 237.684 li
29.2559 237.684 li
29.2559 236.604 li
29.2559 236.604 li
cp
ef
30.96 226.728 mo
30.96 225.792 31.272 225.06 31.8721 224.52 cv
32.4839 223.992 33.3242 223.716 34.4038 223.716 cv
35.4839 223.716 36.3242 223.992 36.9238 224.52 cv
37.5361 225.06 37.8359 225.792 37.8359 226.728 cv
37.8359 227.676 37.5361 228.42 36.9238 228.948 cv
36.3242 229.476 35.4839 229.74 34.4038 229.74 cv
33.3242 229.74 32.4839 229.476 31.8721 228.948 cv
31.272 228.42 30.96 227.676 30.96 226.728 cv
30.96 226.728 li
cp
31.8721 226.728 mo
31.8721 227.304 32.1001 227.76 32.5562 228.096 cv
33.0122 228.432 33.624 228.6 34.4038 228.6 cv
35.1958 228.6 35.8081 228.444 36.2642 228.108 cv
36.7202 227.771 36.936 227.316 36.936 226.728 cv
36.936 226.152 36.7202 225.696 36.2642 225.36 cv
35.8081 225.024 35.1958 224.855 34.4038 224.855 cv
33.6362 224.855 33.0122 225.024 32.5562 225.36 cv
32.1001 225.696 31.8721 226.152 31.8721 226.728 cv
ef
28.5601 218.508 mo
29.46 218.508 li
29.46 219.54 li
29.46 219.924 29.5439 220.2 29.7002 220.344 cv
29.856 220.5 30.1318 220.572 30.54 220.572 cv
31.1162 220.572 li
31.1162 218.796 li
31.9561 218.796 li
31.9561 220.572 li
37.6802 220.572 li
37.6802 221.652 li
31.9561 221.652 li
31.9561 222.684 li
31.1162 222.684 li
31.1162 221.652 li
30.6602 221.652 li
29.9399 221.652 29.3999 221.484 29.064 221.148 cv
28.728 220.812 28.5601 220.271 28.5601 219.528 cv
28.5601 218.508 li
28.5601 218.508 li
cp
ef
29.2559 212.844 mo
31.1162 212.844 li
31.1162 210.624 li
31.9561 210.624 li
31.9561 212.844 li
35.52 212.844 li
36.0601 212.844 36.4082 212.772 36.5518 212.628 cv
36.708 212.484 36.7798 212.184 36.7798 211.728 cv
36.7798 210.624 li
37.6802 210.624 li
37.6802 211.728 li
37.6802 212.568 37.5239 213.144 37.2119 213.456 cv
36.8999 213.768 36.3359 213.924 35.52 213.924 cv
31.9561 213.924 li
31.9561 214.716 li
31.1162 214.716 li
31.1162 213.924 li
29.2559 213.924 li
29.2559 212.844 li
29.2559 212.844 li
cp
ef
28.5601 209.112 mo
28.5601 208.032 li
29.9277 208.032 li
29.9277 209.112 li
28.5601 209.112 li
28.5601 209.112 li
cp
31.1162 209.112 mo
31.1162 208.032 li
37.6802 208.032 li
37.6802 209.112 li
31.1162 209.112 li
ef
29.2559 204.684 mo
31.1162 204.684 li
31.1162 202.464 li
31.9561 202.464 li
31.9561 204.684 li
35.52 204.684 li
36.0601 204.684 36.4082 204.612 36.5518 204.468 cv
36.708 204.324 36.7798 204.024 36.7798 203.568 cv
36.7798 202.464 li
37.6802 202.464 li
37.6802 203.568 li
37.6802 204.408 37.5239 204.984 37.2119 205.296 cv
36.8999 205.608 36.3359 205.764 35.52 205.764 cv
31.9561 205.764 li
31.9561 206.556 li
31.1162 206.556 li
31.1162 205.764 li
29.2559 205.764 li
29.2559 204.684 li
29.2559 204.684 li
cp
ef
28.5601 201.192 mo
28.5601 200.112 li
37.6802 200.112 li
37.6802 201.192 li
28.5601 201.192 li
28.5601 201.192 li
cp
ef
33.8159 193.296 mo
33.228 193.308 32.7598 193.476 32.3999 193.788 cv
32.0518 194.112 31.8721 194.544 31.8721 195.072 cv
31.8721 195.672 32.0518 196.152 32.3882 196.512 cv
32.7241 196.872 33.2041 197.088 33.8159 197.136 cv
33.8159 193.296 li
33.8159 193.296 li
cp
34.1279 192.216 mo
34.6558 192.216 li
34.6558 197.172 li
35.3999 197.124 35.9761 196.908 36.3599 196.5 cv
36.7441 196.104 36.936 195.552 36.936 194.832 cv
36.936 194.424 36.8882 194.016 36.792 193.632 cv
36.6958 193.248 36.54 192.852 36.3242 192.468 cv
37.3438 192.468 li
37.5122 192.852 37.644 193.248 37.7158 193.656 cv
37.7881 194.064 37.8359 194.484 37.8359 194.892 cv
37.8359 195.948 37.5361 196.776 36.936 197.388 cv
36.3359 198 35.5078 198.3 34.4639 198.3 cv
33.396 198.3 32.5439 198.012 31.9082 197.436 cv
31.2842 196.86 30.96 196.068 30.96 195.084 cv
30.96 194.196 31.248 193.5 31.812 192.984 cv
32.3882 192.48 33.1558 192.216 34.1279 192.216 cv
ef
31.1162 187.176 mo
31.1162 186.096 li
36.2402 184.752 li
31.1162 183.408 li
31.1162 182.136 li
36.2402 180.792 li
31.1162 179.448 li
31.1162 178.368 li
37.6802 180.084 li
37.6802 181.356 li
32.3042 182.772 li
37.6802 184.188 li
37.6802 185.46 li
31.1162 187.176 li
31.1162 187.176 li
cp
ef
30.96 174.168 mo
30.96 173.232 31.272 172.5 31.8721 171.96 cv
32.4839 171.432 33.3242 171.156 34.4038 171.156 cv
35.4839 171.156 36.3242 171.432 36.9238 171.96 cv
37.5361 172.5 37.8359 173.232 37.8359 174.168 cv
37.8359 175.116 37.5361 175.86 36.9238 176.388 cv
36.3242 176.916 35.4839 177.18 34.4038 177.18 cv
33.3242 177.18 32.4839 176.916 31.8721 176.388 cv
31.272 175.86 30.96 175.116 30.96 174.168 cv
30.96 174.168 li
cp
31.8721 174.168 mo
31.8721 174.744 32.1001 175.2 32.5562 175.536 cv
33.0122 175.872 33.624 176.04 34.4038 176.04 cv
35.1958 176.04 35.8081 175.884 36.2642 175.548 cv
36.7202 175.212 36.936 174.756 36.936 174.168 cv
36.936 173.592 36.7202 173.136 36.2642 172.8 cv
35.8081 172.464 35.1958 172.296 34.4038 172.296 cv
33.6362 172.296 33.0122 172.464 32.5562 172.8 cv
32.1001 173.136 31.8721 173.592 31.8721 174.168 cv
ef
32.124 165.708 mo
32.0518 165.828 32.0039 165.96 31.9678 166.104 cv
31.9438 166.248 31.9199 166.404 31.9199 166.572 cv
31.9199 167.184 32.124 167.652 32.52 167.976 cv
32.916 168.312 33.48 168.468 34.2241 168.468 cv
37.6802 168.468 li
37.6802 169.548 li
31.1162 169.548 li
31.1162 168.468 li
32.1362 168.468 li
31.7402 168.252 31.4399 167.952 31.248 167.592 cv
31.0562 167.232 30.96 166.788 30.96 166.26 cv
30.96 166.188 30.9722 166.104 30.9722 166.008 cv
30.9839 165.924 30.9961 165.828 31.02 165.708 cv
32.124 165.708 li
32.124 165.708 li
cp
ef
34.4038 164.064 mo
35.1958 164.064 35.8198 163.908 36.2759 163.584 cv
36.7319 163.26 36.9478 162.804 36.9478 162.228 cv
36.9478 161.664 36.7319 161.22 36.2759 160.884 cv
35.8198 160.56 35.1958 160.392 34.4038 160.392 cv
33.6118 160.392 33 160.56 32.5439 160.884 cv
32.0879 161.22 31.8599 161.664 31.8599 162.228 cv
31.8599 162.804 32.0879 163.26 32.5439 163.584 cv
33 163.908 33.6118 164.064 34.4038 164.064 cv
34.4038 164.064 li
cp
32.1118 160.392 mo
28.5601 160.392 li
28.5601 159.312 li
37.6802 159.312 li
37.6802 160.392 li
36.6958 160.392 li
37.0918 160.62 37.3799 160.908 37.5601 161.256 cv
37.7402 161.604 37.8359 162.012 37.8359 162.492 cv
37.8359 163.284 37.5239 163.932 36.8999 164.436 cv
36.2759 164.94 35.436 165.18 34.4038 165.18 cv
33.3721 165.18 32.5439 164.94 31.9082 164.436 cv
31.2842 163.932 30.96 163.284 30.96 162.492 cv
30.96 162.012 31.0562 161.604 31.248 161.256 cv
31.4399 160.908 31.728 160.62 32.1118 160.392 cv
ef
31.3081 152.844 mo
32.3281 152.844 li
32.1841 153.156 32.064 153.468 31.98 153.792 cv
31.9082 154.128 31.8599 154.464 31.8599 154.812 cv
31.8599 155.352 31.9438 155.76 32.1118 156.024 cv
32.2798 156.288 32.52 156.42 32.8438 156.42 cv
33.0962 156.42 33.2881 156.324 33.4321 156.132 cv
33.5762 155.94 33.7202 155.556 33.8398 154.98 cv
33.9238 154.608 li
34.0918 153.84 34.332 153.3 34.6201 152.976 cv
34.9199 152.664 35.3398 152.496 35.8682 152.496 cv
36.48 152.496 36.96 152.736 37.3081 153.216 cv
37.668 153.696 37.8359 154.368 37.8359 155.208 cv
37.8359 155.568 37.7998 155.928 37.7402 156.312 cv
37.6802 156.696 37.584 157.092 37.4399 157.512 cv
36.3242 157.512 li
36.54 157.116 36.6958 156.72 36.792 156.336 cv
36.8999 155.952 36.9478 155.568 36.9478 155.184 cv
36.9478 154.68 36.8638 154.284 36.6958 154.008 cv
36.5278 153.744 36.2759 153.6 35.9521 153.6 cv
35.6641 153.6 35.436 153.708 35.2798 153.9 cv
35.124 154.092 34.9678 154.524 34.8242 155.196 cv
34.7402 155.568 li
34.5962 156.24 34.3799 156.732 34.0918 157.02 cv
33.8042 157.32 33.4082 157.464 32.8921 157.464 cv
32.2798 157.464 31.7998 157.248 31.4639 156.816 cv
31.1279 156.384 30.96 155.76 30.96 154.944 cv
30.96 154.548 30.9961 154.176 31.0562 153.816 cv
31.1162 153.468 31.2002 153.144 31.3081 152.844 cv
31.3081 152.844 li
cp
ef
1 lw
2 lc
72 388.8 mo
72 43.2002 li
72 388.8 mo
518.4 388.8 li
518.4 388.8 mo
518.4 43.2002 li
72 43.2002 mo
518.4 43.2002 li
@
373.423 114.257 mo
511.2 114.257 li
511.2 50.3999 li
373.423 50.3999 li
373.423 114.257 li
373.423 114.257 li
cp
1 1 1 rgb
f
373.423 114.257 mo
511.2 114.257 li
511.2 50.3999 li
373.423 50.3999 li
373.423 114.257 li
373.423 114.257 li
cp
0 0 0 rgb
@
383.502 61.7607 mo
403.663 61.7607 li
0 0 1 rgb
@
426.533 62.7886 mo
426.533 61.8384 426.331 61.104 425.942 60.5566 cv
425.539 60.0098 425.007 59.7358 424.33 59.7358 cv
423.639 59.7358 423.105 60.0098 422.717 60.5566 cv
422.313 61.104 422.126 61.8384 422.126 62.7886 cv
422.126 63.7393 422.313 64.4878 422.717 65.0352 cv
423.105 65.5825 423.639 65.8418 424.33 65.8418 cv
425.007 65.8418 425.539 65.5825 425.942 65.0352 cv
426.331 64.4878 426.533 63.7393 426.533 62.7886 cv
426.533 62.7886 li
cp
422.126 65.5391 mo
422.126 69.7007 li
420.83 69.7007 li
420.83 58.8433 li
422.126 58.8433 li
422.126 60.0381 li
422.386 59.5776 422.731 59.2319 423.148 59.0015 cv
423.566 58.771 424.07 58.6563 424.646 58.6563 cv
425.597 58.6563 426.374 59.0449 426.979 59.7935 cv
427.569 60.5566 427.872 61.5503 427.872 62.7886 cv
427.872 64.0273 427.569 65.0352 426.979 65.7842 cv
426.374 66.5327 425.597 66.9072 424.646 66.9072 cv
424.07 66.9072 423.566 66.792 423.148 66.5762 cv
422.731 66.3599 422.386 66.0142 422.126 65.5391 cv
0 0 0 rgb
ef
435.437 62.083 mo
435.423 61.3774 435.221 60.8159 434.847 60.3838 cv
434.458 59.9663 433.939 59.7505 433.306 59.7505 cv
432.586 59.7505 432.01 59.9663 431.578 60.3696 cv
431.146 60.7729 430.887 61.3486 430.829 62.083 cv
435.437 62.083 li
435.437 62.083 li
cp
436.732 62.4575 mo
436.732 63.0913 li
430.785 63.0913 li
430.843 63.9839 431.103 64.6753 431.592 65.1357 cv
432.067 65.5967 432.729 65.8271 433.594 65.8271 cv
434.083 65.8271 434.573 65.7695 435.033 65.6543 cv
435.494 65.5391 435.97 65.3521 436.431 65.0928 cv
436.431 66.3169 li
435.97 66.5186 435.494 66.6768 435.005 66.7632 cv
434.516 66.8496 434.012 66.9072 433.521 66.9072 cv
432.254 66.9072 431.261 66.5474 430.526 65.8271 cv
429.792 65.1074 429.432 64.1138 429.432 62.8608 cv
429.432 61.5791 429.777 60.5566 430.469 59.7935 cv
431.16 59.0449 432.11 58.6563 433.291 58.6563 cv
434.356 58.6563 435.192 59.0015 435.812 59.6782 cv
436.416 60.3696 436.732 61.291 436.732 62.4575 cv
ef
445.426 61.9678 mo
445.426 66.7197 li
444.13 66.7197 li
444.13 62.0112 li
444.13 61.2622 443.971 60.7153 443.684 60.3408 cv
443.396 59.9663 442.963 59.7793 442.387 59.7793 cv
441.682 59.7793 441.135 60.0098 440.731 60.4561 cv
440.328 60.9023 440.126 61.5073 440.126 62.2705 cv
440.126 66.7197 li
438.83 66.7197 li
438.83 58.8433 li
440.126 58.8433 li
440.126 60.0674 li
440.429 59.6064 440.789 59.2461 441.221 59.0161 cv
441.639 58.7856 442.128 58.6563 442.675 58.6563 cv
443.568 58.6563 444.259 58.9438 444.72 59.5054 cv
445.181 60.0674 445.426 60.8877 445.426 61.9678 cv
445.426 61.9678 li
cp
ef
447.993 55.7759 mo
449.29 55.7759 li
449.29 57.4175 li
447.993 57.4175 li
447.993 55.7759 li
447.993 55.7759 li
cp
447.993 58.8433 mo
449.29 58.8433 li
449.29 66.7197 li
447.993 66.7197 li
447.993 58.8433 li
ef
457.507 59.1455 mo
457.507 60.355 li
457.133 60.1533 456.772 60.0098 456.398 59.9087 cv
456.024 59.8081 455.664 59.7505 455.29 59.7505 cv
454.454 59.7505 453.792 60.0239 453.331 60.5566 cv
452.87 61.0894 452.64 61.8384 452.64 62.7886 cv
452.64 63.7534 452.87 64.5024 453.331 65.0352 cv
453.792 65.5679 454.454 65.8271 455.29 65.8271 cv
455.664 65.8271 456.024 65.7842 456.398 65.6831 cv
456.772 65.5825 457.133 65.4238 457.507 65.2222 cv
457.507 66.4175 li
457.133 66.5903 456.759 66.7197 456.384 66.792 cv
455.995 66.8638 455.578 66.9072 455.146 66.9072 cv
453.965 66.9072 453.015 66.5474 452.323 65.7983 cv
451.617 65.064 451.271 64.0562 451.271 62.7886 cv
451.271 61.5073 451.617 60.499 452.323 59.7646 cv
453.029 59.0303 453.993 58.6563 455.232 58.6563 cv
455.635 58.6563 456.024 58.6992 456.398 58.7856 cv
456.772 58.8721 457.147 58.9873 457.507 59.1455 cv
457.507 59.1455 li
cp
ef
459.754 55.7759 mo
461.05 55.7759 li
461.05 57.4175 li
459.754 57.4175 li
459.754 55.7759 li
459.754 55.7759 li
cp
459.754 58.8433 mo
461.05 58.8433 li
461.05 66.7197 li
459.754 66.7197 li
459.754 58.8433 li
ef
463.834 55.7759 mo
465.13 55.7759 li
465.13 66.7197 li
463.834 66.7197 li
463.834 55.7759 li
463.834 55.7759 li
cp
ef
467.914 55.7759 mo
469.21 55.7759 li
469.21 66.7197 li
467.914 66.7197 li
467.914 55.7759 li
467.914 55.7759 li
cp
ef
471.754 55.7759 mo
473.05 55.7759 li
473.05 57.4175 li
471.754 57.4175 li
471.754 55.7759 li
471.754 55.7759 li
cp
471.754 58.8433 mo
473.05 58.8433 li
473.05 66.7197 li
471.754 66.7197 li
471.754 58.8433 li
ef
482.386 61.9678 mo
482.386 66.7197 li
481.09 66.7197 li
481.09 62.0112 li
481.09 61.2622 480.932 60.7153 480.644 60.3408 cv
480.355 59.9663 479.923 59.7793 479.348 59.7793 cv
478.642 59.7793 478.095 60.0098 477.691 60.4561 cv
477.288 60.9023 477.086 61.5073 477.086 62.2705 cv
477.086 66.7197 li
475.79 66.7197 li
475.79 58.8433 li
477.086 58.8433 li
477.086 60.0674 li
477.389 59.6064 477.749 59.2461 478.181 59.0161 cv
478.599 58.7856 479.088 58.6563 479.635 58.6563 cv
480.528 58.6563 481.219 58.9438 481.68 59.5054 cv
482.141 60.0674 482.386 60.8877 482.386 61.9678 cv
482.386 61.9678 li
cp
ef
383.502 82.5068 mo
403.663 82.5068 li
0 0.501961 0 rgb
@
425.899 79.9536 mo
425.899 81.1777 li
425.524 81.0049 425.15 80.8608 424.762 80.7598 cv
424.358 80.6738 423.955 80.6162 423.537 80.6162 cv
422.89 80.6162 422.4 80.7168 422.083 80.9185 cv
421.767 81.1201 421.608 81.4082 421.608 81.7969 cv
421.608 82.0991 421.724 82.3296 421.953 82.5024 cv
422.184 82.6753 422.645 82.8481 423.336 82.9922 cv
423.782 83.0928 li
424.704 83.2944 425.352 83.5825 425.741 83.9277 cv
426.115 84.2881 426.316 84.792 426.316 85.4258 cv
426.316 86.1602 426.029 86.7358 425.453 87.1533 cv
424.877 87.5854 424.07 87.7871 423.063 87.7871 cv
422.631 87.7871 422.198 87.7441 421.737 87.6719 cv
421.276 87.6001 420.802 87.4849 420.298 87.312 cv
420.298 85.9727 li
420.772 86.2319 421.248 86.4189 421.709 86.5342 cv
422.17 86.6641 422.631 86.7217 423.091 86.7217 cv
423.696 86.7217 424.171 86.6206 424.502 86.4189 cv
424.819 86.2178 424.992 85.915 424.992 85.5264 cv
424.992 85.1807 424.862 84.9072 424.632 84.7197 cv
424.401 84.5327 423.883 84.3457 423.077 84.1729 cv
422.631 84.0718 li
421.824 83.8994 421.233 83.6401 420.888 83.2944 cv
420.528 82.9487 420.355 82.4736 420.355 81.8545 cv
420.355 81.1201 420.614 80.5439 421.133 80.1406 cv
421.651 79.7373 422.4 79.5361 423.379 79.5361 cv
423.854 79.5361 424.301 79.5791 424.732 79.6514 cv
425.15 79.7231 425.539 79.8242 425.899 79.9536 cv
425.899 79.9536 li
cp
0 0 0 rgb
ef
431.597 88.3198 mo
431.223 89.2417 430.862 89.8608 430.517 90.1489 cv
430.171 90.4365 429.71 90.5806 429.135 90.5806 cv
428.098 90.5806 li
428.098 89.501 li
428.86 89.501 li
429.206 89.501 429.48 89.4146 429.682 89.2417 cv
429.883 89.0688 430.1 88.6797 430.344 88.0464 cv
430.574 87.4702 li
427.392 79.7231 li
428.76 79.7231 li
431.223 85.8862 li
433.685 79.7231 li
435.053 79.7231 li
431.597 88.3198 li
431.597 88.3198 li
cp
ef
442.613 83.6689 mo
442.613 82.7183 442.411 81.9839 442.022 81.4365 cv
441.619 80.8896 441.086 80.6162 440.409 80.6162 cv
439.719 80.6162 439.186 80.8896 438.797 81.4365 cv
438.394 81.9839 438.206 82.7183 438.206 83.6689 cv
438.206 84.6191 438.394 85.3682 438.797 85.915 cv
439.186 86.4624 439.719 86.7217 440.409 86.7217 cv
441.086 86.7217 441.619 86.4624 442.022 85.915 cv
442.411 85.3682 442.613 84.6191 442.613 83.6689 cv
442.613 83.6689 li
cp
438.206 86.4189 mo
438.206 90.5806 li
436.91 90.5806 li
436.91 79.7231 li
438.206 79.7231 li
438.206 80.9185 li
438.466 80.4575 438.812 80.1118 439.229 79.8818 cv
439.646 79.6514 440.15 79.5361 440.727 79.5361 cv
441.677 79.5361 442.454 79.9248 443.06 80.6738 cv
443.649 81.4365 443.952 82.4302 443.952 83.6689 cv
443.952 84.9072 443.649 85.915 443.06 86.6641 cv
442.454 87.4126 441.677 87.7871 440.727 87.7871 cv
440.15 87.7871 439.646 87.6719 439.229 87.4561 cv
438.812 87.2402 438.466 86.8945 438.206 86.4189 cv
ef
452.626 82.8481 mo
452.626 87.6001 li
451.33 87.6001 li
451.33 82.8911 li
451.33 82.1426 451.171 81.5952 450.883 81.2207 cv
450.596 80.8462 450.163 80.6592 449.587 80.6592 cv
448.882 80.6592 448.334 80.8896 447.932 81.3359 cv
447.528 81.7822 447.326 82.3872 447.326 83.1504 cv
447.326 87.6001 li
446.03 87.6001 li
446.03 76.6563 li
447.326 76.6563 li
447.326 80.9473 li
447.629 80.4863 447.988 80.1265 448.421 79.896 cv
448.838 79.6655 449.328 79.5361 449.875 79.5361 cv
450.768 79.5361 451.459 79.8242 451.92 80.3857 cv
452.381 80.9473 452.626 81.7681 452.626 82.8481 cv
452.626 82.8481 li
cp
ef
455.193 76.6563 mo
456.489 76.6563 li
456.489 78.2974 li
455.193 78.2974 li
455.193 76.6563 li
455.193 76.6563 li
cp
455.193 79.7231 mo
456.489 79.7231 li
456.489 87.6001 li
455.193 87.6001 li
455.193 79.7231 li
ef
459.033 76.6563 mo
460.33 76.6563 li
460.33 87.6001 li
459.033 87.6001 li
459.033 76.6563 li
459.033 76.6563 li
cp
ef
463.113 76.6563 mo
464.409 76.6563 li
464.409 78.2974 li
463.113 78.2974 li
463.113 76.6563 li
463.113 76.6563 li
cp
463.113 79.7231 mo
464.409 79.7231 li
464.409 87.6001 li
463.113 87.6001 li
463.113 79.7231 li
ef
471.979 79.9536 mo
471.979 81.1777 li
471.604 81.0049 471.23 80.8608 470.842 80.7598 cv
470.438 80.6738 470.035 80.6162 469.617 80.6162 cv
468.97 80.6162 468.48 80.7168 468.163 80.9185 cv
467.847 81.1201 467.688 81.4082 467.688 81.7969 cv
467.688 82.0991 467.803 82.3296 468.033 82.5024 cv
468.264 82.6753 468.725 82.8481 469.416 82.9922 cv
469.862 83.0928 li
470.784 83.2944 471.432 83.5825 471.82 83.9277 cv
472.195 84.2881 472.396 84.792 472.396 85.4258 cv
472.396 86.1602 472.108 86.7358 471.533 87.1533 cv
470.957 87.5854 470.15 87.7871 469.143 87.7871 cv
468.711 87.7871 468.278 87.7441 467.817 87.6719 cv
467.356 87.6001 466.882 87.4849 466.378 87.312 cv
466.378 85.9727 li
466.853 86.2319 467.328 86.4189 467.789 86.5342 cv
468.25 86.6641 468.711 86.7217 469.171 86.7217 cv
469.776 86.7217 470.251 86.6206 470.582 86.4189 cv
470.899 86.2178 471.072 85.915 471.072 85.5264 cv
471.072 85.1807 470.942 84.9072 470.712 84.7197 cv
470.481 84.5327 469.963 84.3457 469.157 84.1729 cv
468.711 84.0718 li
467.904 83.8994 467.313 83.6401 466.968 83.2944 cv
466.608 82.9487 466.436 82.4736 466.436 81.8545 cv
466.436 81.1201 466.694 80.5439 467.213 80.1406 cv
467.731 79.7373 468.48 79.5361 469.459 79.5361 cv
469.935 79.5361 470.381 79.5791 470.813 79.6514 cv
471.23 79.7231 471.619 79.8242 471.979 79.9536 cv
471.979 79.9536 li
cp
ef
383.502 103.254 mo
403.663 103.254 li
1 0 0 rgb
@
422.155 98.1313 mo
422.155 100.363 li
424.819 100.363 li
424.819 101.371 li
422.155 101.371 li
422.155 105.648 li
422.155 106.296 422.241 106.713 422.414 106.886 cv
422.587 107.074 422.947 107.16 423.494 107.16 cv
424.819 107.16 li
424.819 108.24 li
423.494 108.24 li
422.486 108.24 421.795 108.053 421.421 107.678 cv
421.047 107.304 420.859 106.627 420.859 105.648 cv
420.859 101.371 li
419.909 101.371 li
419.909 100.363 li
420.859 100.363 li
420.859 98.1313 li
422.155 98.1313 li
422.155 98.1313 li
cp
0 0 0 rgb
ef
426.264 105.129 mo
426.264 100.363 li
427.56 100.363 li
427.56 105.086 li
427.56 105.835 427.704 106.382 427.992 106.757 cv
428.28 107.131 428.712 107.318 429.303 107.318 cv
429.993 107.318 430.555 107.103 430.958 106.656 cv
431.361 106.209 431.563 105.605 431.563 104.827 cv
431.563 100.363 li
432.859 100.363 li
432.859 108.24 li
431.563 108.24 li
431.563 107.03 li
431.246 107.52 430.872 107.866 430.469 108.096 cv
430.051 108.312 429.576 108.427 429.029 108.427 cv
428.121 108.427 427.431 108.153 426.97 107.592 cv
426.494 107.045 426.264 106.224 426.264 105.129 cv
426.264 105.129 li
cp
ef
436.767 101.559 mo
437.025 101.098 437.371 100.752 437.789 100.521 cv
438.206 100.291 438.711 100.176 439.286 100.176 cv
440.236 100.176 441.015 100.565 441.619 101.313 cv
442.21 102.077 442.512 103.07 442.512 104.309 cv
442.512 105.547 442.21 106.555 441.619 107.304 cv
441.015 108.053 440.236 108.427 439.286 108.427 cv
438.711 108.427 438.206 108.312 437.789 108.096 cv
437.371 107.88 437.025 107.534 436.767 107.059 cv
436.767 108.24 li
435.471 108.24 li
435.471 97.2959 li
436.767 97.2959 li
436.767 101.559 li
436.767 101.559 li
cp
441.173 104.309 mo
441.173 103.358 440.971 102.624 440.582 102.077 cv
440.18 101.53 439.646 101.256 438.97 101.256 cv
438.278 101.256 437.746 101.53 437.356 102.077 cv
436.953 102.624 436.767 103.358 436.767 104.309 cv
436.767 105.259 436.953 106.008 437.356 106.555 cv
437.746 107.103 438.278 107.361 438.97 107.361 cv
439.646 107.361 440.18 107.103 440.582 106.555 cv
440.971 106.008 441.173 105.259 441.173 104.309 cv
ef
450.077 103.603 mo
450.063 102.897 449.861 102.336 449.486 101.904 cv
449.098 101.486 448.579 101.271 447.945 101.271 cv
447.226 101.271 446.649 101.486 446.218 101.89 cv
445.785 102.293 445.526 102.869 445.469 103.603 cv
450.077 103.603 li
450.077 103.603 li
cp
451.373 103.978 mo
451.373 104.611 li
445.426 104.611 li
445.483 105.504 445.742 106.195 446.232 106.656 cv
446.707 107.117 447.369 107.347 448.233 107.347 cv
448.724 107.347 449.213 107.29 449.674 107.174 cv
450.135 107.059 450.609 106.872 451.07 106.613 cv
451.07 107.837 li
450.609 108.039 450.135 108.197 449.645 108.283 cv
449.155 108.37 448.651 108.427 448.162 108.427 cv
446.895 108.427 445.9 108.067 445.166 107.347 cv
444.432 106.627 444.072 105.634 444.072 104.381 cv
444.072 103.099 444.418 102.077 445.108 101.313 cv
445.8 100.565 446.75 100.176 447.932 100.176 cv
448.997 100.176 449.832 100.521 450.451 101.198 cv
451.056 101.89 451.373 102.811 451.373 103.978 cv
ef
458.078 101.573 mo
457.935 101.486 457.776 101.429 457.604 101.386 cv
457.431 101.357 457.243 101.328 457.042 101.328 cv
456.308 101.328 455.746 101.573 455.356 102.048 cv
454.953 102.523 454.767 103.2 454.767 104.093 cv
454.767 108.24 li
453.471 108.24 li
453.471 100.363 li
454.767 100.363 li
454.767 101.587 li
455.025 101.112 455.386 100.752 455.817 100.521 cv
456.25 100.291 456.782 100.176 457.416 100.176 cv
457.502 100.176 457.604 100.19 457.719 100.19 cv
457.819 100.205 457.935 100.219 458.078 100.248 cv
458.078 101.573 li
458.078 101.573 li
cp
ef
464.707 100.666 mo
464.707 101.875 li
464.333 101.674 463.973 101.53 463.599 101.429 cv
463.224 101.328 462.864 101.271 462.489 101.271 cv
461.654 101.271 460.992 101.544 460.531 102.077 cv
460.07 102.609 459.84 103.358 459.84 104.309 cv
459.84 105.273 460.07 106.022 460.531 106.555 cv
460.992 107.088 461.654 107.347 462.489 107.347 cv
462.864 107.347 463.224 107.304 463.599 107.203 cv
463.973 107.103 464.333 106.944 464.707 106.742 cv
464.707 107.938 li
464.333 108.11 463.958 108.24 463.584 108.312 cv
463.195 108.384 462.777 108.427 462.346 108.427 cv
461.165 108.427 460.215 108.067 459.523 107.318 cv
458.817 106.584 458.472 105.576 458.472 104.309 cv
458.472 103.027 458.817 102.019 459.523 101.285 cv
460.229 100.55 461.193 100.176 462.432 100.176 cv
462.835 100.176 463.224 100.219 463.599 100.306 cv
463.973 100.392 464.348 100.507 464.707 100.666 cv
464.707 100.666 li
cp
ef
466.824 105.129 mo
466.824 100.363 li
468.12 100.363 li
468.12 105.086 li
468.12 105.835 468.264 106.382 468.552 106.757 cv
468.84 107.131 469.271 107.318 469.862 107.318 cv
470.554 107.318 471.115 107.103 471.519 106.656 cv
471.922 106.209 472.123 105.605 472.123 104.827 cv
472.123 100.363 li
473.419 100.363 li
473.419 108.24 li
472.123 108.24 li
472.123 107.03 li
471.807 107.52 471.432 107.866 471.029 108.096 cv
470.611 108.312 470.136 108.427 469.589 108.427 cv
468.682 108.427 467.99 108.153 467.529 107.592 cv
467.055 107.045 466.824 106.224 466.824 105.129 cv
466.824 105.129 li
cp
ef
476.073 97.2959 mo
477.369 97.2959 li
477.369 108.24 li
476.073 108.24 li
476.073 97.2959 li
476.073 97.2959 li
cp
ef
483.206 100.176 mo
484.33 100.176 485.208 100.55 485.856 101.271 cv
486.489 102.005 486.82 103.013 486.82 104.309 cv
486.82 105.605 486.489 106.613 485.856 107.333 cv
485.208 108.067 484.33 108.427 483.206 108.427 cv
482.068 108.427 481.176 108.067 480.542 107.333 cv
479.909 106.613 479.592 105.605 479.592 104.309 cv
479.592 103.013 479.909 102.005 480.542 101.271 cv
481.176 100.55 482.068 100.176 483.206 100.176 cv
483.206 100.176 li
cp
483.206 101.271 mo
482.516 101.271 481.968 101.544 481.564 102.091 cv
481.162 102.638 480.96 103.373 480.96 104.309 cv
480.96 105.259 481.147 105.994 481.551 106.541 cv
481.953 107.088 482.501 107.347 483.206 107.347 cv
483.897 107.347 484.445 107.088 484.848 106.541 cv
485.251 105.994 485.453 105.259 485.453 104.309 cv
485.453 103.387 485.251 102.638 484.848 102.091 cv
484.445 101.544 483.897 101.271 483.206 101.271 cv
ef
493.819 100.594 mo
493.819 101.817 li
493.445 101.645 493.07 101.501 492.682 101.4 cv
492.278 101.313 491.875 101.256 491.458 101.256 cv
490.81 101.256 490.32 101.357 490.003 101.559 cv
489.687 101.76 489.528 102.048 489.528 102.437 cv
489.528 102.739 489.644 102.97 489.874 103.143 cv
490.104 103.315 490.564 103.488 491.256 103.632 cv
491.702 103.733 li
492.624 103.935 493.271 104.222 493.661 104.568 cv
494.035 104.928 494.236 105.432 494.236 106.065 cv
494.236 106.8 493.949 107.376 493.373 107.793 cv
492.797 108.226 491.99 108.427 490.982 108.427 cv
490.551 108.427 490.118 108.384 489.657 108.312 cv
489.197 108.24 488.722 108.125 488.218 107.952 cv
488.218 106.613 li
488.692 106.872 489.168 107.059 489.629 107.174 cv
490.09 107.304 490.551 107.361 491.012 107.361 cv
491.616 107.361 492.091 107.261 492.423 107.059 cv
492.739 106.857 492.912 106.555 492.912 106.167 cv
492.912 105.821 492.782 105.547 492.552 105.36 cv
492.321 105.173 491.803 104.985 490.997 104.813 cv
490.551 104.712 li
489.744 104.539 489.153 104.28 488.808 103.935 cv
488.448 103.589 488.275 103.114 488.275 102.494 cv
488.275 101.76 488.534 101.184 489.053 100.781 cv
489.571 100.377 490.32 100.176 491.299 100.176 cv
491.774 100.176 492.221 100.219 492.652 100.291 cv
493.07 100.363 493.459 100.464 493.819 100.594 cv
493.819 100.594 li
cp
ef
496.474 97.2959 mo
497.77 97.2959 li
497.77 98.9375 li
496.474 98.9375 li
496.474 97.2959 li
496.474 97.2959 li
cp
496.474 100.363 mo
497.77 100.363 li
497.77 108.24 li
496.474 108.24 li
496.474 100.363 li
ef
505.339 100.594 mo
505.339 101.817 li
504.965 101.645 504.591 101.501 504.201 101.4 cv
503.799 101.313 503.396 101.256 502.978 101.256 cv
502.33 101.256 501.84 101.357 501.523 101.559 cv
501.206 101.76 501.048 102.048 501.048 102.437 cv
501.048 102.739 501.163 102.97 501.394 103.143 cv
501.624 103.315 502.085 103.488 502.776 103.632 cv
503.223 103.733 li
504.144 103.935 504.792 104.222 505.181 104.568 cv
505.555 104.928 505.757 105.432 505.757 106.065 cv
505.757 106.8 505.469 107.376 504.893 107.793 cv
504.316 108.226 503.511 108.427 502.502 108.427 cv
502.07 108.427 501.639 108.384 501.178 108.312 cv
500.717 108.24 500.241 108.125 499.737 107.952 cv
499.737 106.613 li
500.213 106.872 500.688 107.059 501.148 107.174 cv
501.609 107.304 502.07 107.361 502.531 107.361 cv
503.136 107.361 503.611 107.261 503.942 107.059 cv
504.259 106.857 504.432 106.555 504.432 106.167 cv
504.432 105.821 504.303 105.547 504.072 105.36 cv
503.842 105.173 503.323 104.985 502.517 104.813 cv
502.07 104.712 li
501.264 104.539 500.674 104.28 500.328 103.935 cv
499.968 103.589 499.795 103.114 499.795 102.494 cv
499.795 101.76 500.055 101.184 500.573 100.781 cv
501.091 100.377 501.84 100.176 502.819 100.176 cv
503.295 100.176 503.741 100.219 504.173 100.291 cv
504.591 100.363 504.979 100.464 505.339 100.594 cv
505.339 100.594 li
cp
ef
2 lw
0 lc
0 lj
4 ml
187 124.667 mo
187 138.667 li
@
188.025 141.028 mo
188.524 139.376 188.984 138.301 189.517 136.975 cv
184.472 136.975 li
184.698 137.449 185.465 139.376 185.964 141.028 cv
186.499 142.798 186.864 144.403 186.995 145.443 cv
187.125 144.403 187.49 142.798 188.025 141.028 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 80 /P putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 117 /u putdup 118 /v putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings17 dict dup begin/space <1C60D8A8C9B896187A> |-/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B4A59D9CFED19B0A38B3CB0F4F897304E6BAD66C826BEE7E4169B0E7C80E2CF9471E5F92DE30A72B04AC0EEA14B3B5B59AE75C5D253EAF073DA7CF16B6D745CDF6FBBE2E5B43C2B5E88E6AFB64C1CBC51F> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624097F1B5D47BF4F384727F53BA1763156DBDB0266> |-/d <1C60D8A8C9B7E7C1D82219353B31AE497773900CFE039E7C34F7CEBE101056958EFFC2C789CCBD8768CC683564B6074DAAAE648B50C88AD4C58AC712C8476BA68C74E592EF7E71792F9E5367AB3C80F9D183D28DD5E961AA14DCB5D9206768FB9E099DA642A8BAA73D52C56C9913DC619FDF3F90996DC8D242E6BF94BEBE752CB2F5D6196384CDD6E5AC10AFB49712810FFD82A2782B9B182DA37A23E6043872EFC1C407DD53136E> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F43B727FC67DAAB0A1AC346364003E4FEF79FBAC399EF60BAB44182D20FA0C6402BF1E27F05398DCDDDA14D79F5733F11E560A813FF9D16C42617DFDA23021803BAB86086244EE74B29A5E1F99E79BC6C6C8880FE4C572C55E990D88B7521BD46854B97930948AAC94E7DFE2FF69F2221950186414A7427A5E80E1B04B219E3300404246D87351FD05C6F3EA0B95C636083B47E4D5C2DAA8BBB8D343439CEC8A6CCD7C3BA57C2332F2A02343DC56BF6AA691E1A081F9D254D> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F89019F8CCCB6FE3AF5C57> |-/v <1C60D8A8C9B75A17982D11DC3FC677436DFDC6EA949B3A8A476902498B78CD729866CE567C88B5C4105F11006EA75E6774682E91A2E1F257423C8BD0B940F1B9F1BCB8B413DFC78AF75D4027> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BWBVFN+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/BWBVFN+MyriadPro-Regular*1 [32{/.notdef}rp /space 47{/.notdef}rp /P 16{/.notdef}rp /a /b /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /.notdef /u /v 137{/.notdef}rp]BWBVFN+MyriadPro-Regular nfBWBVFN+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf161 106.333 mo(Penicillin)[6.08398 6.01172 6.66016 2.80811 5.37598 2.80762 2.83203 2.83203 2.80762 0 ]xsh161 120.733 mo(discovered)[6.76807 2.80762 4.75195 5.3042 6.50391 5.65234 6.01172 3.80371 6.01221 0 ]xsh232.666 22.6665 mo(Penicillin)[6.08398 6.01172 6.66016 2.80811 5.37598 2.80762 2.83203 2.83203 2.80762 0 ]xsh232.666 37.0664 mo(available as drug)[5.68799 5.72412 5.78369 2.80811 2.83154 5.78418 6.82764 2.83203 6.01172 2.54395 5.78418 4.75195 2.54395 6.76758 3.92432 6.61182 0 ]xsh240.333 43.334 mo
240.333 57.334 li
@
241.359 59.6953 mo
241.858 58.043 242.318 56.9678 242.85 55.6416 cv
237.806 55.6416 li
238.031 56.1162 238.798 58.043 239.297 59.6953 cv
239.832 61.4648 240.198 63.0703 240.328 64.1104 cv
240.458 63.0703 240.824 61.4648 241.359 59.6953 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/BWBVFN+MyriadPro-Regular*1 uf/BWBVFN+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Jason Schwarz) ()%%Title: (antibiotic.eps)%%CreationDate: 8/7/14 8:35 PM%AI9_DataStream%Gb!Rfk?9+Rc2\3$2rK$:_-drCc2i[X8BsR@QsgC]i5+'c@I:JrO)s\YWmG&-mV]MO5't'%bQHMJ'dT'?P#S9\<3":dZtbTO>G;#i%7T,P;Uno@Hb=_'*O[u>B)jg5(FHoc$Aaii@p!:8;Q[5i:CcC,)hF=gG:UQHMWP634C@]*qCpsA//2XC\+$u/`]@D\:-i\9-eJbf%%^T>0ZRanQ;j_E0,1`Q*kGh)_Cr`!Sgl]lYfZeA4/=UE8^jf'qI1i'"Acf]Uu,H46=(9:46^?Zg?"u,%L>("\CBb"nNF+CK$48=KL%4a^X$Oj@,%INJgq!6>/pj^(5@FsAGus60c=WR:$UX8PN"oeSrsra,Wk1opR9+eC#P=Zrb:2Z+=SZ^QDt6fN7E+>buMM`u:*>lUj%%rtgckqU0'MgV%fgdWsl,dN[T9?T%flfNFB%1aIpD?4NFsmWGSXV`<`JCte6O?)one&SYH`<Y8,bP3i1F'u!b]DtQ<`7(YHE/BK=4%&Q&>6qG4fj%WL!u\%]=i#dip'ChF3pd$)%PdLS++0C+@TZn*N&(h>$n9q"*^<$h]'aKR>aM%=%34Ij=5S95chNRe:9d!XR52JVYr%RD>lq(Vq81#sU?JTtg`drI2H!J-YcsT"+a7<1R:A!PZ;N8%#?+,ar0gD#bYC.DX0:9%AA*B2=0UgTUXJ/H!se/s>.bWo@s7^u)S[%^PbNeWiGhq<Um&gi_rjR:Fd/r9j8J>ecN]+p`!ud#1bPg8qm"RgK;M)Z&T:nYdJ=X/_e9Kp^)F[X^VlX'oU_M=MuT+,1`_mn7e_.%(tcDt_<7'jD*oJDn5=MpM"E.)jNgg`Oi$!X$ZX&@=:9-.R*oW'&cTd2L_9VU]K%9O>Jphtj#=m^Iq)9=::+ZP#_+)Up_QR8-QJ=J%PE(^3&23s@FXe+Wj7@nb;]8Ra;C^XDg6,o?Tr5+nf]_N)3M.O&KDrblL`cW9T'-S\XQ_N%A,$jU+b"fn.91%c`".@X2oLa%5Q7OA%@gW.S>)4:"VR&h(K[Q-GO!AZd5fbtcn2[95;6"+X8iKK]ME-A3+fB;,EG<aH^1[uT&*k?]S21a=Ce_13:D#hhNO:0a,CYk(Zn;9s%3f%&c`AsF2%](-cJT<^4@EpBngCSDJ.?kXY>jsbMFJmJ_Wmbr:h%4Tj,9/WL44`Dde)"ecqOIP[OAj8sge?n$dY@Hl+o`tj]$a@.%,Z7lN?-2)JEd=9t2s5OSs0/oS6X8'q=lr\,k5cacPf2-*2)qZW?9U"/QaW,iM>Y9+<%H,XT;'[[mU,fde*)#M0E%5.krLD9s3cCo%8\_leks*@ch^sbID6\Td4FQ5gV>gl+qVD*Cs!:R>&hS,'dXU@6rU0Z]s!6bLe`So9pm]PZrQ`1*^OVrN'fE[&WZXGt"g_+K>Dd-\%n@u-aBDe().OA$6B4a^iF[]B91m,YQp^NhWnL=KrXn*;lU&En./?MnH2f+KHN?W(L@?2/u/nt(sCXM%l596RudSs,RJpeqCcs'(q%Gt0:AR=aPq)-bL.Yo\?9rk[1%:POA34n5ej-+m:*NunSEg\YO2?V5fN`u0JSeV)?XVb$TD=GP6cTGCE8.&hpnJ2P2J,@$DRHOBVm%nTIQuKhekHo3YBpau=V#XQ44H[n.U";Z^1`N6<^Lb?>]!Cok<Zk&&PX5^SbG?G&jt$hmJER)KF"6/k%lB^:$`^>&9ohPO8K]H$R=%R%u<r(cpR"=FcZgjYh`J0?fSRgYd"qH^n"p(\1lqIEHH"Am'd-FXLs9o2ucQK)K7;&c4,ZaD1g<QK44$IWh<DcYrkJ.cPc>kKm*f%ZC.m->$A9ST3kYqE:"2:<Q36nT8MbQ$VP&dHh1f0@iRkc#BXRfAtYcE]O9ZViXb-.`/A"'c\m(ELLbY?MXUW(@a^=5(?-?b25<AX%gFM)(VUue5SSDMr95MEeJNaDe2A8!>))a7F!1e%p"(YQ-T['O]Im!MBIfd0;oPu7Inf8b*Ucce>c$SV4K\%4!7'?.QDc%`hgDgl!%Bei$odJ[U0E+[>VE'S9"6;I#_lN;dAJj340.E6J+TX)Q:,-Hr4F82/5`qs2SRM9eI4jh=Z-KG?3>ptl@"*reg9;<?`$LI>\.gK1/%CD4Hn3m\JnaR)p74g`<I9#UjcKN!WP^;=N7c^8XY+Bg^#c[2H!n4"8%U.Qk?e2[2!R'@_?^IriA-Xq?TWN(dHE+q2BK#6^uLOmOU%9LdMLca]3N]L+4W6:GWpYjXVeD7fAV\HLZeC+(/HV"g\ko'KRG"8&Ug+o%!-)=q91AQ2om*3%#+nKV'sD-J-oMTWI]c?TCBBN'gF%-K"qg'^=o,qQ.2+TmcIG9M0o02-_&-:Ek:/\=%5cZ,dn!3P;'Xf@aoaj8i=JdjXAMgm3N*o*>[&$051)FUk$jJ&n]nFF;YL5.HrP%f("4ka"FoEF4WYFHrIWJq3GGuMM2X!;]Yg0H^<=lbZ78):/t.iYhj&q]PA*-Jj.5HR04H=BC^0Mf0t\B+,(DUV4,NXHV%3SX9uG.%!rCEFm6LX]lN`F!aR`D$Pd.l,X=uii.#2k[!k?g:PJciK[Rqf4itB./-Dm>McTEo:#^3Ku-&sqD`t'W=kI9Z^j=;=7P*.>N0('^n%-uA,"$m0+Wk\-\Y$hu]mM9_KhmjL(<0&F-J4Zi6gkV[Q!0=b='NCb>55<6.S_26jmc3uG/<*+iPbnN:C0Lp[R;%JP/OqkFVa94HP%iU/fMV't%iRQCl>o:i`qjLG\U\5:9`4B*Q/&72-]@!]@[jC?X\B=4m%fPsL0*SnRld\9i);B\r,g+MAla&Y#;c/`%ZRKL)e2)2!@%KqETI5Uk3rA-A;uMVC+,'qhn1])9VmUDB3+9%jtW)dA-[U3>_]N92;LmARe;@uH`NFFrdm=u&/c3]>Tcm'l9$G+PjSBR:3[+-gbE%o'/J+7p)AQS.T$'gf_0VH\[Pm(BjSsrYYBc10+\$2.,<cKn('?'WD"=159:QH%jJ=%F=fOe1[l4QoS3Q6!$AC\]CV&b8&JLH)=*Q%ke)*U'8j7ho*oIC`EE.!LR2`TgdYnNER0/qVP3&X\<uoVM[?icX]3M:Fo#!AX\S*!FV1;c_kod"3j]O_-%&F-WJ2]C-OAF2AJcp-%-HoQMqV8o@lO=pOmRekr)lK-.e6JPrF$iFuR[@>!#-CG7Mfj<(8fEW@OAS#^=1mQkC/V0)+@CRQ0UgZ[_[<"\I&`FE.hn#FR+-KG%Sqj@0\?oI6(YaV+H(!9hRDhU;1"C/HMc&;"rt\V`V#"3C,G]dBCBsm,n\0c]RY9NDQU=:ETdJ_je('<k?b,A=,Wjm@_%K_$'opY+%C.3_!HItnTkirnmr\H141^eWZ/#$[M4)9nXo`P^qGb=d][OG-H_&4K+,M.m*[Xb;P.+X]Q09]L63FAJT'oJ<P8).+7>6F@4jeUni%5MXBjdTHX;0TN!@StOBA-#TXW0rsd\,4d;j/[uK%dZ.h$R"jiC:UN"l]dbi;QQ;SqB/GToZ*]8-0qqj]3,7=@QDG4o=j@kMD@9sQ%L^TD,D@KF$**sl<3K+UjduP0&AGPR-13SN#'\-It)EJXl.4>?9+2gXUEZLXGN&0OgRUn4#]hmeU3:fdJR[IEpfGp02kK)aCY1FKo%o.5bjekW5D8ApXmEZ?`aM*_/nP]5=83&r]`-Pe,o"#ksp>`hPXB+QYJr92da:4;]"l;G%,UB6I*,\e[P?TFq;UOTdc$EH2B1@KJX%e1[LrY:Eu$%JUG_LE,cV+Bc73j[Z:^G^'9I"cje4h'Plg0kODDYo_s4$5qfI6H(_?I`B2tA)s2#FFdX)(H8'E>cm)VM-,OBJ`FPu%!Y$_j*Tq]qSkG9"(#]PTjZpOu^uG<A*&OB9=?5=Gd)7Q?EkfO?;^*i9Ke9k\\l^t&)['V.17^3n3uEt(Q$ofk=:oGU"fdk&b<LmE%Bu")iAl&infJjM3-&[-t'I$=G!\XgB0_rsTrjP+X-Kkb"96>%3fMMJcbs^`On0r4JgV2'nN#U"!)7).)630$VRZRM"B-`DX!-0QO%JhenD)ILZ:FCmtWf47o$k7sE0\%#c8*?^!n9\6!o?WFYDnM-t<A<mfC>"1N0iQCLT71YhUbDG'@P\N+M-#G;-KM=:iJ2?3(4_P&'%jk+`O1lLg,d,1F#0XCQ(<fB+Zm#"k^bd'#,ATq43ioNW]PbH/Ch8^1G8.'LE^qXrmW)pVdFT-nH\[@:NZ!DgOXXRTWjmA]^kR[E]%`Lf_rP&B';l8?;a"7RehV.E/t3Yi728!p`Z)ShJRXqA5;?PN9@UFWRmH>lnrNS,o%L1^?rA%[`Pp<5mG3PmGkPZ*G,,JRA$[4Gui%cKVM2/+ZmJ+5#I(80ZM=.bi\lCc<uS-><Q4;42cnCfVP3/X/:NDt9^>Tm,*b^(MR<EnO_#W-71tX]!.2=F#:RC[MPW#>Qh/`Y*h(%ACY5#+l?1U_84l/6ZF1</-9\r;P&)5#4]aeFf9QJ_CVBSU$bum=6$%sFgN]&6W&3P.U0H33X"DOp'e:Aq!KVc$><aTdR3Bj]P2(j%O'CYV*lS2U8gT9tR"^*7UuY@&kWEK@j`[k_4VPujj@<k[6o8*8d6s_B`cQk#s6Di:i2tt'Fr]&9!J8U#+>8T/8]6E^&R\,$f>>9N%A%Jf*FVTAc?i7$pAc/adA.Q81[E&lt=?'fB(:JIJL;;sNPf1>h&(/O2pGqcY6Yc1_4NV,7Rt_Qn0Zd6$)s^WVD9'/=d@*?pIQ.P7%:?1M`\EE=*F*UA.pDcVUm@T6IN*&PM,1)6W]8F4-m.A2B(Y2uP`fXu2Pg[ga:>Kt7Ht6CcpEY#I*jqrn*D6W(Ib'CcFn^W1>a.<b%EH)77-22eKgP`k(mbXY_^[\WfXMhBCBht!,SdT"?^^.^Hh,F^`i6AV0m@TppX3d+U<Gp@V\2+"^Ck(HlnfC$:I,8^!gMc_Po9h_O%WqQah`'Zl!F'jQC^YWb5hO=,5D<0Qbe\CBo,W_9q2<nIld`^aan2OKsWRi'5Ai3Ym^'sl2ghFONXOVB)]NQM'mBih?.TOo$Y56T1%^'m24S+XO;<OWHT?R;8XnBU?qAKk3R:$Y-p]$n#P]5Q%W%A?P7WRE'I-ZX'-[nZ1sKt;-!DOZ55TN)6(lG0Nja:4ZN[HcLN]pl&'%JG"6V"mDNCp$:E\@aV6ki+`&Co:Xd<pN)m?(Fd^VcU!K8C9.'`"=eOcFoh59bIt8Es)]2un,6M+>HQF?X5/gVKu"WZgM6Iup"*H_%S3-$oX1e7\;q,LkHCp2J^obQTr_mas4pV)H`)&Vr\)"1"etK-6X,`f:X1aic'>O#D<@DLTIgt[+7'bDC="@APqk[Ho,ThTL)DBVf%1iQX32VTpr_dL+d@&iObm=)D@g3:;/9%9?T7L([:FfI+f>b4\[ShV2];pMe57p7bM.9HNpIg@8$M+OWC$gj.*F3A9+XmoHp)8m\e%6h>ZfdqcEbB='eb[L&`t;B33g2pttUpY#V#)100?\IOSIXs&FZ\T[*$\_=)G!0T!3[K#))oRK@C\\,_PA`7^%E^n^_Y"VE.5g'[+%G!0do*RIDk[*kAh+348;f!qS7Y/P:]l(]0B<3Oop$*EG[HraUcaR@qGX]Bin!^T8D8ou9O5%qW0]7\FAFjL@RCq&[O\X+eQ97/CV%X:Y@"l$I@<=l2cA_F'b>6e#)Gp!Uj=V2aQb:rZ<s%adX]\6<d[+\bW*rdt[`\rdMebh(Rpp$_p&lA5c!OI;%TAQ-hSXm08GC(n;u%\OPm"A>T<e+G!'*;?7JF]o"V+?P9XjUEG.4kVoNd>3#95#DdhlbbA@?gTCul5YX).a$(t8kh`UdB:nk+C,-seH4I:`$<:!4c!7XY%%K9s9fN,.SDt^5'7Fi;'K*;1chKl4M'huQf:#PE:X+*=*gWcW9rQEW?.-`jinIs:I*$u(mA.kd\Ht#702[AhcYM1+?%U-('7%-q!%H!]mQ-OWY1]3Zi+b37G&D#pKRNPFbc/6ct516MN`mpbk:>Oq.V%qn^ObR3-$=+`uW5.[Mi(X2a?-4AWqmlgK[h/5:CGoo%SZ=6^h%p&?tj3%#/=B.Za?iK74Gs%)s's*no#W#\&'4T&RS]i]tgLb.AAQ_4?\Si\1EB4D?N!Mrb>gQSi=D[a'"P25>M]%e]uS>54lC"BKe%!L)PbFDn#PCV0HmOH#Kj>CY1mm>_1B;Z]Tmo![9>7!4L<"<+TN&jk[4-"HhYK1W&aX7pA,:;H83=%LT:(i8!/[QpCIEi2Q05JY%,%cb(`aQ8tN$W:ra2\%Woc'5dRKZSMFXJ@887N`oiaO>"]b!3+M'TlR']c['U@(\'Ztb+IfUU6S1]o`Wbt^&pJh>(MuOLi1MC.Vh>0%Y$chZLi-1jp)5SnMf/Ee*n`q)T:9J!<YmeG22Kd]mJ`=)!1_dAbPDV!L%Q?JUt$;sd*lPmb*nbN.7kt(R$OVljF[Tl18\VTZ>I[!%iOR,ZGVUarq$4VR_M:?I-2Fa?Q97`&r03@%.)!5d@')MpL4CG2S&n&R/I\*L0K,*tb2d.YR6r;3^qC"C.^3+_g(=dV*77`G+qR^)%JD;O$f=cM+YBoN9<^VBDO^4sj:dH/"K&ih]dn'fS,-YOVYuUu"fPUZS]jAZX>kT9EQ"oA/&JXGdL_-Fp1WE2egZQ:0^c3<&'-.:f%XFoJpmX[AcJ;99i&CNE/o2N[MYuG50rG&+lQH#;.@WG.+BfXUjh!&hA`GHYW0o902n+mD`[jDVV>JD)%JC<_Ug&EMbP,lSM(j!?I%PWVT0:0omY^T/\n,)$%'P4!o$W'YX#-41>AW2gCulI9mBGH`P&m,u^bU%P>D'=@6-SJXuJ5CZ7p(E>F0E8rA>A*?[XJfusBKh5;U%=e^u@dZ!#[s&_!tj=:Z'SAEA*+$cSb:HACp3!6o%/<8WV:6&-)[<gcKc"-\>:[ltOolVt_\rC?As*Dc":_b7gqYs8+1[&2Ep$rT1%Bt)rnFVL]Hpf%+@s//en:X_t=hU>i^DJp2!%9=9e6p+KLW\t*p/sc5ulErlPBf-)dch$Q(.!;+#jCKKT%,q7!YNl'b6AEl%&o4]L%GB!bT/IZ/%^LmB)UL&k2)m;8sl(8T83>23ko@g-,2sYH#J)j<&?P<!j^LE*^<rF[m0r"Ctkk3]&s'8@mTB!hK?560W>k:4'`+@!h%\6K"bs$NIWs+?R0?N9[_]Ggg:`Lth!]_l-g`A2Xt_iT7`pHao^f3eFIPu)I4H+;+K=!R%._;3p$2#l+)p#"ff`[^t3&^jWi'LM82%g]`Ug&[2#f71!>H2?K_i@qh>12BnGF$BK\ri:5.n`(Eg)gf8^JIArF>(&lgOH<?:.gE:mpqpcTe51@AW:C5'.NJ/;1Y`ho:U\6G)%OaO"okc8okSSl,Bn,?<_[f<@O3uIEobU/$#BFjra0Ho,Qs#m+BQY*"VHtfA3pid@s>dR]iqsKS;1TN'"4Ab:Ch6#Z[NqL0P0E$&Q%q-7c;>;,[.!TYN(7'b3Uiu98-cPS/X]:<C32`@*hY`gI-hL"gVo\K:$$#M!Ef/,s?s3Uo2'6$LVd1$\hW_/l.cNa=X</Bu!cui?4%E41t\DZ@7QmFHfT9u'^4pc2+u6FD9Og?Ng\^hth*!!nQfZIekq4_C%jcd%9s'htsMlRKd@,HHjRD3t.e,CsuPb+=GLkIg^5GV`L*%2>Ykd7^LMBa-eg17WQq6g6%"ial@.%D,>Y]-dUNf5'?in7!3='::4-oEPc@rpYgb(f4ju-[AqIUj(ae(>clJrZ8J5=!1$n\N:R:r%r1Mqj3+ePom:<-K!HI<\4pT?4b=-G""dqDs32tLJK27's0]mf>C:o'LiVFjV=;==/$,ue`;aKs7KUBK7LAm:LBE%7.X6hC1A>;Rm%8%V97.jNse!*,1IXU*iQDBX.\W1f)B6X>Qfb&mH?<i,H7h,%Z]&=&5FJ'cnrG\dKhL7>MKU%i/G1cBB[I!ufaN^pM(EK<tDincbW%9;K?fY#f(OKQ&+Df0*UNqFX`6,->OdfYjN77oRTh.W%$]f+H6)gQ(6YF%rcAVpimKn6O#dY%oAR\e8;8H9be*,M)eAIa6O0]uF9W%l<-W3qg?4ThqP?<]m>0-[=A"P"V+0.lBrN2,:g30)pN\fHI^knU]4Ka6s$4-]#3js;!jT]2uD$@JHG&1if!jPCH@@4);g)f;7BcQ%[_'UceIf\d`E/.SpNH;gCqU1T7<Ht6.E#'a_Ig3>I?.P"YAi,TDkA+SYjT;C@EVDl=A]SdTE.W.2WM/q.I6#314pmRk^d!"<GV8/%<!@kt*"$us"JjFkD3(XH'm:6\<$f`?F1'b\+>0W!,cfN^8@!JJ1j7u0]+_fZTHn!r(=e'M=riYIpUj>CW9cbiUTOT>N7t%kgM<j^%XYi2rf6/Z:E'(`aY3B4SaVm1Y]dtQh2"Y!K<EK9VCB!&2G5]R;X=upthr:RXW5l9,a2*V28"Gq7*kSgtcRZ\L&B.3umbIG\i?Q*b%B"?Cao(c(GmW0neqsX2q"MnLqU$<hL=KGGrqso\ajNo2M:^X'?>"]8kV+^J_cmH0]o0:>p\+(8$)l]s4^$G)U/<CqG'XlZF4Yf,n%8?>4lX&tf)f0'X\JLfA#ZlZV3FPfP@+&M,R_,1]F7F(i#^.-\3=Ggdg:@mS>#R2St?<Y#jP!Y^gUZqR3Tpi^9:\7')+kh(gMUCP>%0aM<i^cYO.=Jn*&k#eV!MQ9n[X58esU)o[iBTP\u^K1<8MPh7\W)>>#>1%J]1+M'/#<@%g;;JrfCRD79Tq=AF41VrE$o3o0/U@IQ%@B-ZeLbKgB6G)h%@4mWK]a3+ZL"]oS8(Z?T>(ETX*jf6_.0NP\g1p.sJEu>,eJb9<6)V>"R_I'RAWsUrB5lb.I8HMrl)WRFo>aPq%0-qM\Z8;iQ^(NOB-:Kb9"OV9G/unA`ZUqL-4J):Ds1NlF0.=c%k6ocF@U_,ohjpN%D)sPM>dG.aW(oHb)k52gF'?Xc['StbFe`\4%2Vk5Dj21"NT%?]2M]3@p'YX2.6^E[8`>A1f$BYI;r)-WKGGGhbGH_>ak7Z-rV=lKMP-A-YUX9,"Y8(LG?o:W9lLsL&E.n1B23DaV%rH]$_&)5ETl<U'j5Y$^HO,TRG(qW9r]a"g_*."h#M8u57E`ar[+;OKL`Ie7c0@c1$Z.INCrO9>KF7YocEiUQ<X#ocu'gF/$[u1^G%H#V_i+qHT^SaZMDl.+YffO)/DWg6tfqebMqZFY0m][(0=rN3X'h"###27L0qnSKn"qSSn/HZ-]phlk_De\T8UgtKkUBl73;;5E!u%I@:SJcP85P>#4CR!-"bFD<L9[[T]n7bP5LnrqNr$]@&TU<N5+EQ1gj8`C-`\h;3J'YB<SNGE;+I[^H/&2Hsnqcu."^`ue4D8*0_s%ALkOg,-U(P()o\J]N?bgY?\qha$poW'VVUSCbGk/L+45<]%tWfG8OlX5g!eB'FbkaSlP%4.)4IX92]Uu-6o.nh0+9?]l29,2-A\k%Rp.(mPBeU*A90nL:U@bns1m7"-FCK?GmAcar]GJ=#Te*6r2"<Or5o3RqJ5Wn30Eb@lOIYdNqQAeK79:_GC+A1)a*>pr2@jj)_:?L%M3L)<DgC_\4_.Cf4^D@-0*`#fh;:d=C#pUZd.p;Y8>I$GbKOZ3Y#=BYD(0!l@j,uDQ-Y3pqHMZXpi5[2$FgAZm]Gq1+$=3)!X\f"%VeWG%c^0uHjAe/9bo.H6Gk&?2S^VrDjIaTR.1VgbT%31[[WPJQKgE-?&1d_U<XBdGDk>5Jh*G=AVScHH^QqbV+bNg%N7P;."qKA1%s&?l?h$8hF+7@n"\:0oCpQj(#DU>'4_/D?!8aee>$lW*Ff]?so:`./5X,C%<h9FkD[JQRojlcVS+K"aqhIc$tGB4KUBHebiXUS#m%E&ADslYjCJ+dgR:]"QDb+qD1>7,EjEb)X"oG63DcSOCV]l`jU&B7o'EVgX19=2uCAFO9U=8&^,FO'V#FTr\J.RRm,6pV2%:a23Nr%L@l('ZI3TC%_DQ-<6U++qN-iB2X3F\..Wad^dm^O8%&1s5B+uMVk))Z5u/Ts%gt[UU?:&KMUKc?SJ=]Rq;[1Fe_>/i$68^#=Dim(%HG,["CQ^ssW;p1aUmmCU)`$VPk2t:_msO&d[l_nd6%aba`aPL2o)7;S!^CGJca3).i'C/bhYu;q^9%MJqQlg-+G8\M15tP^q<HC6%fUruDl/M#5n=XF+RI3GV=7cq/UQAp-J(BSj!aGPC\#7Y/*OIlbht%3":3U[ST])QE6UGk&YaP;Epj<.BX=\:3rODi5\QiZtIb60b%Q"ETK3Ru6Eb49_%h`GM[gNu"e^d6T.6"(J)+HEdLNseD\#2SYUWPZ]a9aBKGQe-WGS]b*[QKb&,q\t;3nn,%+2tsck@2'P:2lm@i%j`U0>kmn2+)>FI(2Kgild#Esb(Xr?K6>Ga()-#G&5!C<Gi[>MmKnl9!r,@[K8j`_F[?p%EqA0AjW%t0>]D:X@okI+t(AtOIJPNqo%5(5U&Hp4LSI?P-^=8O.:Qac'kmsH;B.Ek%gD(\gj/E,&#%C?)i1<dn8N6d:3Aq'cn_j@[%Vld+Ip2aU84`t@d^YcN]m2oqZl[u%E%h6Yl,7EEsWk0_$(68/,uOn:Gl3aQ+B#9hEQVpjJh_/dWGUY#)Ho4C/TWHJ&)jt!F:(-o-7C!i?lp#2ggdWP5V]H-S8>Pb5lm<7+U%e=kN7@HD[;gF.`^hHtUZ)W)WhT:Y*oJ$q+I-MZii-*51;H;EYQOQUh;51Nt7$$lCCeR&9S>JX,(J"@UGeTKS(J7:`E*ZXShDZ03M%_t@HRe*<L028<a(_C/I"40A/<cg&?K?_sC`bC:#a".uH.05<H1\^R+BVqpdldmYIWmTu^<pcLY9>U^Y_>nfKml&ZPCk+=haF$H!a%JPQNc2ps4UDf`\8dijUbo<$6Zmd3WsD8"cII-Wa5?\^&/D0pd&&(+_3rpTHQj-lB%Y*nKVbcMk%b&_?pbM0S8RpY)T51RBnV&qGp%r,dtuB5qhfkQu(!]+:)`gYQ[p!&RchA3>(sgkjQb#']]W5b&kS-,"bKL0_kX[[o9_iQ[_*h8ss8Ap7QahE#"VcH]m'>_9F$<)imQ%T@DP>?G-1If6qX@/b9fCk^;LDHK_#"V-ogI$u.>DQdenlTA3j<KAQWc(j'[k%j,n3YC#^HWhOVZ$u>5`Hl7Q,53Q>%9AlH%T\@qj%8D]9\94?3$daE_/.#bIb]KUInoar%OXV3gqG(1Stk^;JdnjoU$=Q2Dq$jti:p^YVYK2t>E7;I9Hg'GZ_=<sSmU-3N;7c$"H:hj9\%EBRFpc)SD\[K[V@Ht!b/3iL#tGIC?BaaQe*q6R36)"kImViR(8/J)Pb>Q-hAnVJm*?;%I;g:^G-rU?eBp>5lo%&^0OnU"o85i\%c%p1m/2_D``(KRTc+Ft(S_q%BXHjbG%4]6[T[5W@EOSTO825AC>=(NT!;;@7n*3!68W_H\YG"7SF;jH[TS$<C&=(TuKHhCb^Z?_A9B%H^b2EKZ`IN?b?_5f83c5aO6cR8s*K%$m%ok6$DBu:g2\(<qcb!$?Y1;5)6=7\8i$ZaEU*Z_L_"JJF\8UCFj;'O^F?E1gWOqEENGp%K.jZr59>b13r*nIqW%\PmDqf<622a(,)5/[or\ucKC8Z:4#c%m7a9iE$0)ioLQKQ20a)/K=/(NdJ,]/E>(Fdu`/<dF-Cia&W>P!i%&kdOVrjn$2=Y=&A'GEL-/QWaTpW'"U(u96c-VmJ4k?^"$'2c^=WLj!pQ='<L+,_.Z!!dkSl:Id@cGm&n>lNF2F1P2#$+P2d`/Lue%W@U9*ocrE=\pY$;4buDU+ki4/K0BW?gYl%u#t7QogcRV=$T7B&7S3Qg0UgKa<//6iOm:JpCDSL`a#mI8Q3^O-C@ltWj'=!$+;CPY%b)`C#8&I;qki$T^I\'j9g?RZSD=9W:&[FCdjN.]!\rlt([Rsmd9X?'bnnLR*`U#sNc@WY0WUn&9\"Aqo?garca'UR^/m@NG-W_fn%V3&5m/$I?-Cp)i"0O$Z?o0Li^QBHGYnJBZ+,`!JV)qF`t3KuICn*SXW+'aJ_2nhU$;neL5&,S$tagFGr^^B[/M.\JUqnq^oV?C(0%G9_6I>h-09p=T1]-"LF&AM\XWZ*riGWku'+8<#XE+4ahIlR>s0!VkigBOW-6\WJ#fo+>c7$Vq1p%`Wj&#Qne-aaW"_$oR::P'n6"%8)!m4)'!59`LjoJZW*ooPGdZH[TkCS_j*d3m;/$E&I"M6:RlMB`q/48kur3cTU8g0:.[1D7N7h+/@*539e"lRYBq;AI2%t;psu\X%.uEjB4T4XZRR8cBKD!mOI].O_8.?Hh_7%4ph\2VK.c9rbT7b#.(lgB-boNCtr_CV4%J.NYVbVWK%qrjsb9?0;SU\Wg,D>!\h/eiJ%R(UA)VC38,#7.`%!^R^#"l]OA[k/u%aXFFWJ8cSJ/?)>$&llGgd`1n#l'A1[iqAlcq7T'PaY1W[G.Q0FDh*qB`W=oSh&A_0KEqjn%@Ip08,uS4R25((jGYA[Z56iuB!.`tT\Ggq*IQJJb-da28`$BZ.n(J,RiY`e1?B"P+5C;kiCmYP4nm2S\d.J\Gef!V6s#H0Ijn\cj%r0\BbK;F$%&J'#2R$WKEd\e3g7oUA@\,&8h7m/1@%Us\=USCJ;IK9t;O@7&#^eS3pL*kE!+,Z/YM]3K])!)IP#g".!p,hHun\ZX!%765=2"#YSt,'5fO/5Hi6pcOf+]oUo9.O6>Q(SS`4N#5i07$LGP[(iuXKF&q4)<IhZ:(/C!?3A[`Mq<26=jWY08;#NY`hUY=f9AJi%S'kX&-W2[XBf628(CLo)Nn\%XT("nB;3nGAG+BlH18oMIZ*>(]NJe[qbE78`S:JpE0':5R\mII31g8_G:8orZ8jmasO`/X:8-*gm%?khLE2]6%uK8#0@V(T]P7I$9#X[A+#9C4J&;O9tYHI$L0<d.WmEYg<M?;:\N4SA[V#2e$\3"PD6`f4&.B=U"m6?t+ChMRjqe*?!<%d:9e@.=%3&>/ZROm.$)'a6Q9V!KF]=:AUA^!_G&+rg:BlPK2p#b]Q_NpB*JJmLYDdLjJb"abkJro"1,g2QIi&ZB+?VE$c(-+KT"@%52gj9@7J2kpR%`jbg/[,a?Ol*g.Hlb],k=SKgeNt2J/W0H6<.BlM)-B5\K&F5('Jk\V#R+.FVKn7;rjAk,4LClQD0FJa?a)YL.r2%(Sm\f2;7_>p0L<T:SD!*]2H=lSKmKb#`WYkGp[?+$MC&T>DL$QMITjG:mSouhHo^mlABrX+i]qN]:2Ve3rYF-9P9HMFX$>8WEJG$%*$n6g5?,naGK)lGi"tP-jY&3JRbC$C,6t:>1sF$ir.a!/ci>]2T;dl:OBqu?_;UsZOo9r+:8g`*\=5`E)`-aq[2,pMfS+N,]Ud'V%pFtjl(Kh-DoD$\M)R4fQH>N4g#bAqS+%+XHO(SKa9c\:(_@4s2VdID\`t)kfY%"lhf_:tDfNL8b.WubAhZrh;8<)s`enQ&8(30j_%SNfuK=Ufdp+W^qsF4W`:b0\h.M2if(p3/f<Tt=?_LSrp;(nnA<_"B5-*VGMW87cn]!hG#W(1dnIQg82G/=&Q@Y]QQhI8j/h;V-4D%ek3oP8ZF@04efQUEZVW8$DN(@Z/3N<LmB-2SB_XCY`MaXNZh`CKddtF/DZ(69;1n:d"U_p(ZD0DS6QHrp[A&nl,-%06b'oF0ALtD%qaPRd]G7-@0E9HEbfa,#2qV7t2A;.I=IaVVfZo"k-BXKTa)<1a$SaAnfj)JS>MocLTuqU((B^V7Y],873@ckC!P&C:4VSqkT(m2h%o];f-\+]ga$8^_&kLQd.Vk=I06u"V?FO:tJ6Q&6)k0QP0cr'7SqAd*1%(`BR_/XMZU,2#Gfn,FNcp_To,uV(kTo73ho48;)S3n*`%6'k-e-AO37K8uJiQpD3fF?Pfc1kQdZkR9L,$9(Zh?$$8kZc>Pud!6-ILM)usJun@\1[s@k5eCB5JJ8ma4^[K73k2lrS;r^b-!5Ro%Sub(^)K?rXI\[eDF?[uQo'efVoB#J*An05&36Pq/UtJAaA?aT$5nrc/?USOB;r^A!f[6+.naXe_P*afhpMK&O"t;\+EC:Wp!i4e>%3K/uYR5>^UfA*P9@dQ211L:.5(e6ljm"ZScq,O$2hAe[?)OO2T*bph7]6!7LA?q^!,ij3$6,(',)_pKsDSb'cIP5DGZJ.c;6+kna%#SXJH/%VT&h%8qqa_%43rg97%O'mOb]!pt\Z)RMGnpns)Qo_9/Ii!OO6#_,`Sp)"]9kYh0a`OTu;jPH?2hc7YDdNh)b80G!J*:]j%i,Efu9N'UQ8g'R=a6LPL:[AV7![D=m6M%u6qU+HD3-fo!Y:bWZcE=SlHGWcHF6*V._Geplq`BQV+@V[G5nS>A.f9^f1NftbcX%T6%#(DLn^/jm<"r>5"iu=C"'@%#X*+%4L<GOL_jmIMLB;UX:R<MZ!P%'Is]U#fN(;:M=2Ngb/9hI-Yi7I<**H^RbpO)\eKFYrTrl>43%-L.:EbD:O+^U=F6^f<@fR?-6:qJ1b+pNIB_3&-7LcJDB22o=5UGt3Nc\=[,sV@-)8$M7Lin(!un&=SESEYHaFnBOS7cP)o02HofE%P9YI5dDtsS`":e+0T$iIQHOaL.o2\ES]%iZQ(PbQXOiIp(mPh/1PR)pI<_VbCRhWJOK6;OV8reM!3Hp+&J[,)'A6jq;CZS:_Qh-J%l-rML("_Y+]B-s:T]4DA^Ph,`!M3^9MZlR]`eB$*b=BQo[]q#3&Kn(5X^Y-FG4?b3UJ@`-8;`<*aoCdh*Vlr&Mo_iTG%ZJ((FLE5%,9P0+InK)^7RY8Liu?r8Hlc#rOn%9c+<N12O'4e:`]`,i57MK-LeL(BT`$b4!F]uNL,)XSbKh+T+qkUP8&C3GBcf,k#A@VcioG?^%,^'D[M<5`nF/.'@a"`lA8$g9.gpr`G:CP0]1h[TkBJr-sJm-OC=mq4f-OjoC1]AOXhtkb]MKO#LAGV\^kX&C[i2F<"n]iloSkqS-%HX8?dYKgG6+u=pC*tTU;Fl>!Q&ihu/;*>bA@G,j@*QlgX-aMr&QPfOIcWT>HdIT%:_W"MW_bK_$Z17GEJkn\Y3Zi7>'<8>/iC9>6%SP_QjdE,<[i2D%5^c-k"Se%>J+3o?SMJrO>2BOR0]qa65N:Z";]Hpqiq/F3`Le%;RS.?FoMhQ!5?mK=3%6@k1=='De@\8ML]j`tV%[Z#8SEp/b+A?p\JI<n%+TpR2N8+mU=1-"t;0D=FIT#ZE%Z,]C"e)o<3?AAF@i%skt2;31`5g4`7RE9oR(^=g<@1$4\,*#/!S_JXG%1VIC`&TuZ#9Q/;Lc>LKF-Ua#LMIH>NIY)Z>T/@,NSq.a8G@pD(@+%i8(rl/R8O$.0U"B_YiKWfBU&BZ5V['t2/+f2dG344lbc&"E%M-US(XV!9mou4/>CnrL#j\Q=&WOK4T8:CE)@7D_g2S4pta0-@kUrr<*/2C,(o-\>$]u8)bKmooIRmOhkXLF(GKI5&o)E/lurbJ/q%QT4bF*taTjQ_odia9^\%Z]SQ5'#T_$Ll$p(f4(^uTmCOPWGlO3NBGVK7<3uZ\?L7HD(==?EQd"6E9$bZPGZ4mhEge`rK!bk"\'5=%SdH8L+,fBU_>5$>(&6XX*0L$W4WlK9)r^bhf_s$#W.kUk4FA.Im_K_@AF.P;,4[1!R-1(8-,\b[/pO_MMqM@:/Y%Wl$^g$7'Vc=3%M36T["">Qe#gq%MjafjN0'KEWJaCTT5B9&eq>0SqQ@;eNY'+mb_K!-`C[5^#Hg*mmUl'l]iGE;&IX"lH=hX[Gec*6s^o+keW4?07%gc\\Qb4>7RM;!V.gag=,DZZ*X:3XW]/54\>4,H)QD;jXV>RXtb;S]_"M@]Gia_l<r=_Dt8T,`u%8$:AP):Vd(9=98(-+f/XYj87H%KAs;mTnD@$g2CE1=;c%3SM/[`>ZZSE]d[@MWbH*BJ$L#"OP(&cYgY?>)0YV:C,U01WH.Xu4Ch:$O"[?#Q@=T8]0/S/].Fr[KC3"r%r,;l]\rSLeei9X`%=/mXhUA6hcp9sYQ-7bon#S.i(DcL9lo)Jlb#U,q4gc^6l;;isf9C`fCuf*u\@U)UQeeJOE5's%L8aDa/I*i*%`MbTe,ELXV/Qa-rT(24\Q!t_PMO3&'ja4&J1m`Y[^Iin;bZ-W!`=_9)UX+3FhWrC'Opeik0(>D];r&]XAe].HV.UHS6adXWBuGA:%^$#5909I2nY&?draG&UiEpm5VZaqAI)L9q"Cnes09'LVfg>r"K`KuqbW;#BY*I!Ke!Ss\Fn+bRXPK%%NbGG[<"5G<[XKq)BEp825%%l6p<>u43K5[L>3V@1PCRj.HDN,@q.PP,Z&e+q)Ec`Nd92I0-\,Ms%fFuEWf;]fpH*[dF0BV.ar.qb)@(R.SUgDQDF2I0.L`VWuO%=_,tb`S+VdF]R1;&b!9!@5_Cf/tMb'kUa%(Jei2Yq_QKo$NeHMB&i-^l%8%NOW)D*NKHpO1k1(STr,u0)t%J%S\c%NdtQPBZco9c%Mdd?4dg^MTmo#Wt2Vk/C)_[[5aMUWo4I[t%"-QkOdqlUg%MCSDV@2*0)*.jaFZ*N%/tLmHSN`Mq."0=O1GXl)\tE:hs8"L!2I-kK%4L\nH,b$DU-J&[3l%3s?,4=K\h>uD'Qb(*9o\D1o2T!CgR34ENUO0f4*:XZ6@VZ?d?-N/Z\fd(YXc&&(X,F>;imDK$c*eZ?Ff=BI%'0h:]=N"^#;Vt2F#gIZ*#&5!N=K3Lpm;c_,;\2LlFN6\+I/:?p$9C]iV-tS3<0&QCSkLc?7hi3%r-@L3&d"(r7muKm<@n'B].n?W%K!2`V^?6u;8O!,2GMsJ&0ZO*2ghZ=%1:cBjd`$M[GkCfBG1#-1#TXD*@ac[5`44q^:.4Vkr9Jeu,Dm'Lh8RK9.Rm]ba)g.X3<pNB%'iK7Y<u6I-*pYsjSYMV7=mTs0`(GJ!I7+B<gIP,2bL8J/FVY)SdlBK.S4GTu\q8?-H,S#"cQJ?fjOrEYX:3#96QC*PdZ?0&9Fd1*%KnfU)S/g^H/YXJFo81aW6Pm>lG=.)OpL(R9G(L):r266kAp50YC6kckY%!uW)KE"Wr%kMFNQ?Lk9YD0-H3o!?GTo"O5Ed[E*\WBB%1T^eC?@9=G/5pfcaY)#pkeu22)qb+G[E^:["j*_qD+1YVn_X\0SJD$3=a8m`5B`pB3Z0QO?(n(l;d]'W1<+aG&Oln,CDm-YC+/[\%dPSfS%m<:.4dP=REDt`<DD9#:Eb62Y2sns[L2gb=pCZ_cU!]9hRk)sV'?/q>'Ml)?:&5_\T/5OLX.`T/:PtG;T#<?:ipd=GF<\Vi%41o6RXUHL2/:WZ'9Sk3Q;r)EUk#VcEEAs!s%c)(_q7Y>=gi+'<NKZHlAs)mk>+O&8GpC6Tp.]fga\)uQj)/\7!ak=XPa<*IU<0ZY%\/TGFle6:dC\/'[ESkMkLK%lKfYrkdKR9om'5OZ?:Esmg'Cc`OX7OYg+bLV,W$h1V#)TaK?U<B4j1a]6p+pSC/*Iucd*E+5CU"\)%cmdZb)r4<bHf;o<28VEu6dqE?a3&<2OQ_^K=7g]K4[9GEVN,EupV)?r=N4hT`(4?`lM>l[mj^4NNG0dc/=tTKbY+npIQ-q./3tcS%@YLfA,V_H)ID5U>IO-=e`_Bo_mM$^C>X6]+E5ar*@7W1PZZ4H]@Msp>m(1Ls`)2EF&Sjs3_sfk>0I5g6`m&KTgqAKWW?Lc%p%/^\%Tc%8`gnM;?2O%\M3uTIT+CeK(_9#8bR%a*j,<$D_mhVGm]#WtT=n6$54ce0-pQ9B]nmssSjg_nM/*/6VlTsS$1p_M5gYIuj1e$m1%Nd76fQ$u^#^R'D6]=[lej838iOF8Pn$b7KE`d-+n$W!ee"cl*=I.sjNGFB%.q/D0)-Ds!p>]b1pEA"P[-Qd5KoAqMS#u?%X8U[(D%M`TO\YSEc,f:/tnEhS+XQ1'EbTKs5?H4QL4-0?<AGLSKolaALG2bU7,gK<hLYm^S#GM:mMnRb>[hg@IA26At8/I*W]!Q>=q^MSE,%GL$$4n9h_2Gqj`'b5D-94>BrfmU,kgpWu3mNpH/AYX.S@KCXBHXOE*>:]a;OdtbVu6*5R]jb<\"0?Bg'MS)2BP6!p4Yp@PQU"KsZ%[i&A1S[ITi59@l1;9PKYH>K!32?Jh40"@04F6N%ia>i^-ctXA>CiYfT?-[YPfhsp"q6?m+q4Zm*=&<?o8A\;g^>a`41E[ll)XAeF%=CMs/Yo+RaH74IgXRaA=@mlL*Qi0G$@SC(Sbq'C%nW$X=,_5^J4?7[fg8G[Rll9gmIVSbIF4.BXV/_N3NWR>GRK;slS*9B<Bp!X\%<%;:#S9R_QM)_E@9ApaP)s^L*g%NeTp&1=u?Y47(=$1WuWuQ?\1*QoqhA\D;\&O\Qp1KVLoW(*,>ol8uEVfI_YOW+YgB_jAZt2D_%H`\ZS/GmbRQ=o_#>0I#+RkH\JCVe<5:MIe)O809F4=b8uenfL.3#^ti)Wk0?bfWG9&Isg=%'G8TRA7A#ENZM:&F1V>AQM/@4$p3N%CLtSV+Zou8p-uf>_/GBfHK)?GLrFAH6o(f-qTb>XM.FC!ml>?"GO-<M;9#(Q)TtDbc@9!RWe\=O+GMa+Ji%REBo5kTYJ(N@jn-7L%.QeGbWql8I=Y+LIXNuhCDR.!!J#^e71#VV7f1'j?o(([X-oUXFTD1r,Z_WsL98[GWSIMD'%pOgl]M+Il(cM]HJ"h:A"L/fH-\&0d%=;N42Naq/Nip9I4"mDSnYT,peK^&\CJC-@s6i1=+Ac_a1-.KgP4pN#b6dshh7k$?1(8,;4,'![=Ei_UL1!P](Jr`#[(19*mhH5VQ%^QQGiKU'l0)Z*FHZ#4*Apej<ED-?n<9DO16$F@L3DtK$*Zac6\qT-jdTi:0OHt4UE]Gp>e\<JWp$9.iTq',8tT%TrfEUU*$i_hs9%;uqP2efI2/3kLE;)B<duh^mUnL%kGg,a3"UmtR;!?9^)XrktZ?:>6!0lPCQV$HTK@k[$Iq=8Hh-S+PN5rd4U<UI(ZGpmCgPL!1+?%eM$:F:ugEu(Q4KT^=P%7A;Cf-Rd+4o(n"Vb\CZdREeT3gSb6R:Hi9[9)ns(-Z?uPEDtTU`#*=@^rLsl25+t%:]mbO]'`D)($1@JE%5&hA//ncn\ihdfO-6EOphc0@H75&anQY-NsqF0<,2s)'X6LXT*G'-/I6'$Gt?dPc$pK#&.n)Km'c?oJ9rM"W^ZTj(hrLu5MKG30?%h<PlJ3#dsA3mkWi_&Fm%<^5L/$kqOa2gc$/][`(8;jo[/L#)&2XiqEl[;43;r;u_-*#!pM8^lS_(Ob5qRuoc-]mcRNXeAttL>Hu/%iOs]f"QVMI9ma'NUo[iH-dUdY^ZaM41%+(ki[l5.qtR&7HO.@9Du=F3i-YEs[tqptgQ$K]?aM+TF5Eh0f.Zu$^Y*.oNB3\o8Bp:'%^ZbW.s!`Okn+DUQeSg?Bpr5:h&To2Qe1]9jDY9L@I=*8fknn>W(r"U?S?)F4)J6R-rJ$Ie4Lb/I)+.?ZlfYKRi2qHlA>P9(k(N<X%R.pGGR5p=8i:#"Q?GBY(]oKhY04*N$[.jDW]u7Q&IBn4u`]J5VE3J0[amdTXI\-G!`Ef=FF.T+Doo"(<fi\"FL$17'"q7VC'Ai$k%IF)[VVDR8FIUVJ\g*hitc["58a-4ZFn+@XGYFP5k5EFeB]%(_fdt?YnIaK-tL`,7oFg#/Z@Hd&':3j$MF@*(@,#<Ed?hCIL!VY/6%p\I;r6.CXW`P$_?D4'SUp%-J)s&QnUm+O2^oo!,r7V$MY^=P#aEF>(FDH1;(QA8s%!bAkp%%m=a]iRg3Zp/SQh%rDiA/@%$S>-VO%Hd`aYH;%PTo^:QeH,MoF.>GKk@Wj@,+__!?"j.I1h>S'UQk;6CI`Mr[eoT"^=nUERjHYaPh6,2Lc`Oj&066BXN@"8k7*k2=C@D*D%f,dnXpZn-YZLb<q@t*j=T:*l(/p$XY^Pn/kX4r>+lD&KE]NfsTX=$ocea_7Tq,'5&g\pnqqL2DYZL-,]rND\@\T@ChomY;%?LQuN%"uf>)RIns,EAd@N?N5*?H+plcg0+BZg[D#Bd`^IL\i;Y+Y.&I$C%6U-oAfW-B%:3N8T0)1ING9NVcop7GA#r`DWU'<adc6gCT_Qh%BY./2g=_cAhet$nhEq*=g,hBEmrfX3leTDSp2Y(smIV8.T4=:TgL''m/aN$0Vdtg`]h.<)o;UJk4'Y%M4KA]:,W7;$^N@*>0E%j1%O"4H1XV^^=8:$?TEoH=>Qrm'c]6_4u"?X0+gG2OeDGQ<oK5dZS%Xr%,=-ca.kDRo'Z]I5_g,iR=I<Dcjfh3^4WfnD0e+?aK2ij=)%!*cO*HLmDSosnu#-ZCgfE*gE0En9p+;c+7$hl3J#[Yj2MMmjI,eD/SEUr/5'S,gQC.pDbWn9)(,l`ZORD='>b-nG2,:j-lhqg/5>%1r!u,5$bShXdt?_GZcQr4C$MdQn!geeM7kTZE(:EGFQTJl.+3cC/@Lj*urA`?Q7l8WFDWkPAtVHjd2#]>KYcMX=I*D[5BC7rE@6!%IM#@DXCH$J0XoaXlH]'MQ?:;mqnb+.L8:?BA]RrGfPVYBDQK#)jK2.C?Vmt"qH8OolYGRF](k[In&eSkiCJ:n[JRDEGs'[^\;s$C%f;-u9kJ<&NTU:%K*oP.KiR,&<Euno3#B*hMc3$X_YeGAOc6&Qg#c@1LnU/k9>:#OJ.9_/g=8'UYZnD!Wf@c7i/B=%ZrD^XeV,)Bo%3*,OL6Ml62Q#c`8=J]#h4#4OHj'l:r?P\2qdWe"#7@$u#0oFW0Kg]5d0>HkGOftk@QQH_nEDr[gI:Y9[EqQ-Ce*h)5WKJto*3st<%nkl4,U*V85X&OAhcMZDPP\q7*Q3<IE'e8`-LV6cdq4Yi6:k+>O'Ko&TO)f-3pMKSLZYOAaCSuILB.ZiS.J)S7/s0W@HiKc"5MO5l%r6ap!DjS/%bb4[G;86CX-VPuVDkSJ%9=\7UrA]lfgQu6lFS;\ZXcQ>oaechk0-]aT3E(>E>5<,#'67Zn3[mA]*N9G^HQr*4M]h`)%p'j3645A*R3]fb'97uO*=eOFEDTu`4GkaiN&l?diJd1GA_[MAN/ZeM82d[]GCK[0j1jj`<iR?Rsq;uQ:8bpHQ1$`kK>cpZd_1]#S%$C1DOr09bJ7\Ah$blu0M]=Sh1M'&snhfL;gf$DTZ<+WdMD`e/W6pMhV1'V`Ii<+@Bq)sM]RrKefrCX\_Okuj5#NVKWe,d@p>pNT$%%GpaM%b#XV#<>A*52)]6@,&?I0E1slf>(k^'NgX6N=8S-$+]OBBOf/+O)InP]1uQa^Mdc!]sJogK:48\:Y0P(Ni7C*:eJ.7S^e`l%ai(YI!-M,#4Hdfr;#$!bOOaGL\)ilAX[MD+S:i-kb0rug3-idL^0J/J#AW^R:G#]6CVVhO0&"@W5:Z,hGs6/(>QTnNdT*it9T6(i%O"!PCrnA%Xe4=_Yq#+?:9`n:JmgqJ;*W/\.3uC)PJ!$4YXT:<%Q@:6;_SSsgk-j\TiEZ*(1;!6j`1s`;h4KTGkj=8B"81U2PJgmC%(K]I(H(CtlQ+Yd:)-^,sT*5n[e2/]iD\B4P)-0f:>%(tao;d,q=*N<)7e?oBID[,:]s8fnB$&3`m7NXG,\Y9WC2r)O^1S;t!-t!5%o83auIEV=HIs](FoD0.%S]=7phH'lVh0HQ#CZik4I1Y5O4[s<a>%H"PoA\jVLmb^7Io->\`OZa&bdj&!SCW$hi^P-&@,#",Tc$Jl%UEnJl=$<bSpruC'jbWrRLk+uBp_2((&PB_eLBrro#].l(_jNjnh^^qB>S8;[TgV_$0@FQ(K^-jNLBnh^7KPL3S2_h4,QM(s7%i^-%$255k7h-.)IqImD>fYb)qDruG`9,a.o1g$3+H&X43BIQ-"*QAR_QCIVpfJuP"4,XAJK)Yn_X2k[kT%qMOo9N1PTRA967!gZ*n\0V%oZ"s$ck%(8\-#5N,J,AZh60V1#3c-Fdu0Uu;kQE=H66)]=:.&KZAS^s*/?&nbd3[']$hj)7Wgu0f>'",^75H5QR`(Q:D\"`,;!rt%8/P1sLS8\_142!'2Ek:aL6\"<"+_tRV3#0HU+ni5-N$]MHl55mW$TdO8nl%^p$??bmCq\aR;nK9H/4\UY+M?cH4H"@FcTCCcA.\#%@m6P@U>hVpa"f9"+HK5@nX4(0jm.HffME@cMbJeYb92I0*?L-B1brJJ&e9Pda&^./E"Y!.JlDrN=SscSNgOWO??(7"15T?EjbT$L%1@aetJ*K$0_%iLf752;/Va&bpet-WSF/p,K`OWC?]<f%*V/eUUTC6SB;Y^%p+!&S-?gV*-+;S_k=PiU:@u#ZFbU4c=qqb=G1poH+%)g`A%4_E_VqQA_0"C,HVqjk+PZl+>?*KL4(53:?!hdI\#f\%;XDO#ne7C[UKI-^c(%(r+VhkSB"8t:4qOSuW7:,\=onB/)UUg"I'%Ub(d$oC5+9?(1Z!T51NFCca_*QjJ2m6eCF#*9DBk%if>,T3/\g10U0$b8[aVE5(u/HXuU&%rc_TT0_YhQCi[*;#l][20i!S9s[q5%EW6ihJWp&D\g8B=X''PRe,5`a&2*]8l,)-"b:ms]!L5=i^QH#Wh+'W=qGO0-O6[h5-=96FEF1fD=J!H$\a"]4?%#o48b[R>.K-uO%gBP/0mF@cOg:[!go]M_7Z_,+<S'*?7\"CD/&CB:W2&;)H9'5-cQKle_gZm5U`[+rQA>r45UBKV*.MsU\,Uk`-qa]o9%UcN36[*oJ%?0X=5,*\#pe@F@u?KLKqS<kIE?:Z'5;H?OD!-pfh-/1I@QA,[ENplC])mDCMjRq<=LA%"So*-(_<\rg'p!3tg$f95.D;'2iJOU2W%jl:3orT/CCo,(JH]-%cE?''#nO'-p\4rk"#.aSDIG.-AN`[3=X'c'fBS!%%i]<Dqt_E^_*^QV`c^?m!JUFbl8lm_&@cRjNa[^it4%:f;%CE+%\,ks3bR]^k])=2UgBE_,VLb^hhXlI+q+I@,ReEf'kZ5Y]ekp>u8>[ge^WSb$+H*+,7g)fJV8qnjpEa194H__FVo/ZISk%gQZ$:<_foW"hh#+aa7qEqMkAd2loL*4d]IILkWB+`59:H7Hr&EFQe:crU*a^W%EW:klrW`;uCr(\%;OCJPZ%'(/*6#gq'oe":@!q%T+:7h\bT]`*qbC.Ur%rEA3:X)_RuoCI3>ODcq.K&jUQ%4-4(h"KUp&/jCKLu)PZ\QoVP.9HPEZp\5>A/Ed@.3L`UFr1G7sNgGD[l%AS:VA]!K?WgZ!ca%qi!qk*bSbR,Cu"beB\ANcO)WG+e,</@$udr1KjID&/19Hd75_IU%*fBio8ir-qg*kt)W4`%]><)3j<F';&st%rkp-K[V8Wn>#sLoi<tfFU$A:g1O"#@BG0Eo83,s4!hkd;ebnfqDgq@=,ar&1r,Js7PeS4Z!L)qC?Ch""WhhAbZ_2YCp"m`p="1:K%K`&\W__(;@^_0:^,d^Yod`reGM<uVu+024&pdQrs``X)[<^k,mb.-bH5AfR%cOUa:o5\Jgf#>+*5h+%)g]Q6&ZaN#!>JQ5[9oLQp%L>B!@HMHb7Rs`(AD\Li,.HROS9[CVTMjrfqQkJEZqd,VL2ED#<XT$.>$%;%.bJE1h]_8^[4KLK6qBRFc%!O5d\(\Qbs8CaXn\Rj]%^YH_,)X(.(W@5OEN.&b'r8bI&>/hpC?r%m(<onVSOo8*6lZk`[3IuA:D9$@9ou"]a^u#+NHVPq?B3XYXW;f8CCf,boe0NeJCM]V1%^Lqm=?s$qGenk'bR>QEUC$^G*S:sZSh!]dHVn9$a]8&#mQ?k:/)ch!>eKAaYXt@CQ3P2"'nU]M?Ft&JQ`<XGacMm"S\p*W9QW\MR%jhqCpU:\;nMgM=T02.Zl'fU@2Y1(\Ymcg0an+BCrFtle!jFsu3ro,OF.X?NWK#-GFR7?<4G:rFOL"Q.kgF?+p@ZBcC/t*_qJKcJR%Lt)kG^P-\%M]CJph)Ra+?*J3R0!7dTp`eX7$Y1WEBL04<Qs&$;=aq5GL6^!.m\ZaAJ]A,Bm+Y/3r8mU]FEB3\jf/APE>J_;eec-e%WI/daM=-(g[LMZficrZ2VkEe1([HE4IopXbX2/8?r1eFqgXtCpa&Ml:r#GXgAXd3(^JrKLh_fEIQ-t]W0ZNK@gJbd6if;i3NjJL4%o_n\DK:c\g!I7<RbVjoJkpLqq8*?dfkbcF!DMarr?k#n8N4[F$/!TtT>?<=KUjtDFq#t#9-$Far[TmD/^&!tip)$OZC4#ON0r!cL%.(ibR.BPh9&ts=kB:\MuOXiQ6Girm>nuDs\b^so6o`GM]\Qq2Xq>$G#.CZFA+BfQ3TC`?FV;*2,Uuh0Ng&h?nj_gWF*+_L0XLT:<%MtTXSH#12pnK2V`21W"-hXPuZiO?;.lIfh:rBK$Ce$S54V89@jje,cFSokujNE1'OZ'i\p%qPLI<GP[Ip%nFZhu-IMAaii@oog?:%>lLaJE+%q,qFeG$:K!AT2Vl^\Rom]t$SgHcA!UHg]oW,GbH5OD<P%'/Z>S4k/TgqWT[8/dL?>X%\+\[/8&&E;F/sqQ/$s"`F6h82%Jf6Z=,bo/R(dEu*+5bY!=5)f=.b/p9oGFO[hKmJNF\WHkO6k`3[K#VP>A=,aDT^eU*tiiF4up>FFS#!I]43ob1-lITq,nT.\c2Tk%DJnk(<uHP']phZu=6C116i=>P\"6[I!UHRhF.#L=HZ$N>nMn#SP-m%:OV.^5,Z1MshmLNDjX`[34R0;bq"[J,81\]8ZP*k']-jn?%XE06[k5gsom5p(2:j>7H:j?$RU9d=Z81q?S`@R.ZXOC!*>TiIHK-3.(rq&d7qg]YniX^3@'_`3,JB-FB;'d_T&/<djZ/e+<D>PQT%)0'0u%T8]IftYJ1pF>J]=b2+T>pqe[0o`Pa-DBF%"`aJ,_q/Z-qZ`asp2/@]fGn")NNM=*#O>-R-_>CUU2k^Q-'_R\k58+D]1%H]%2>hbj]*3IoA_@-lR*G,15R1gH@?dM!ajp,gQAn3_rq`hBC[p5ZS/%LDJgG_Z346[soH#)^LYLWpR.lrXT`.ak:"nX8,Y7%iej_BD%]sRUIphh-qo&'&@>9Zd6iF1ga1Y:#^D)fS*<-RF:kP+dsc'bdc/1+NhfUaaq"buL&c-T8:q&A<ZXgs>rR(2?.TpK^/XRtnqIl,]&%!5c,kWUhrMm"s)aloSYeat/P+m1AsC3Qh@#gfe=QH[sa%qSf%H+Qtn%(6p!5AC#)2Gp,3#oW1s`CRs4N>2$AGSHWpLhf8@D2Y8JW%2rSfQ])8tY*1Zma4V=VDn':lBa8(Tqnfltno//k9>iVuZV1o9NBrf2(,-F1-`WSufkn--/`.$ZtCN^&!gW[1U9:T[[SaEOZ%e:2f%mFJFO`5R3/0NU=5es;+-E/jtp$rV_Ln0(g]i^]&&iOPl,]XWP]SGdPTUG.oCjHsZ<96^3Zil1IAh)T@n0m$knl)fjk<aMl&Td)5h%FO040gt)S[DHPT8CA[g&I^Guc141umrBrW7PIBp[ce0:J@4kP^/;5/5_,1P"TaSDO[jSf.iL',nMMt#0Y-EC\-Kc5%,>\)uQed&Z%ZMSOBERn<9&,+u*E.D(Rr`B""(IMh1Lj#M*:::l2bXj#?3I!oY.epf5]=g$"`\otlOI>[t%0k/r$%@^V+M0Hq!kR(W6R79PQCJJd%'BA"Fpotdnl/S9rdI,Go6NT.o]8MD;M+@^=HL2h!D"X\eHaL,!hKP%:,Z<YE]Kt^iH)qZaM:>?<J*Q9t%Y<0P2:S3-a<a5aF@!+W%*L;LpGn:Y3=T7b'B[FuBi=:65);,2(n82De!YT%@60!89(ODAT?fW0$MdO*E1rmH%T^;5rH5c%foD"a;%R@pjkecbk9F!p>[E;EL%HsO[\%J6IJVE8+?f#@Kafr0?]FZWDAR^+5_nB7UY74:&#;\<dl/lsg]+6oS!PX^fkC<9[e4HN,>^%oA?Ju^J_Kp@FrqBaVo_^`Q=%<rU0X]p*\DqCU8[SmUH@-0lVI/6rf-*fD5dhQLacq$itP]f0fajfsXhB<SWR7qIK=k3lc/EAofk)Z/h8M=]A18cr!njL?lt*qMbh%r$sXq`'8HV@60)W3IVbtMrskX.l%<_ZVsHnMc',)CWmN]S065@Zr4E#%p$a-Er_(XrpYDTcN/IT]8,g(GgCrbrmCRlGgF44WUV(b%F'pXIrX\HXTU-A'>JT(AUA"gWWNgUg`!sud4c[,bJQn*W3tX:(LEJ\p]G!$;I0aJ\H$C]GFa!WnmL.0lFs:P.%tTRd+Zg:bm6^mJ%ic`4<\Q'<P)A9"`P[)c9K+:r/T*k8#7dIS\:VE6ZPOuTms7*R4-Y:7h._6*sF=]S(:8CJ;Umt!t[h>[<>e\rG2.$-=G,s?q-b4ds%G:1G_#GpKNP1G&5\speu5U/EXD0V;]rJ`1Tn0oM,oC-hqYJ^G?S,in6$&O35`W*`?6hp-UMZ/mjOseA,T2MtL/M7^BX<]ALq3`of%$U6Ji#@07G'0^J%Ob^+H=Ao2C1TO'0K$@7DX%AINeo](l;otK:D.*t+crZp[CZ5`;\P,Osb>M;F9hJR;YRJK]3$:,'q1JfoaG>V9%4RiLt>@uI;iM4c%Cs,scP&,')T!`ZCp6OB799Lm39Tdi+W@QgL1M]U?i@0uPXJ)\p[nP*d?BQ_BS^hl-gRY'NF\0!SAS+ulFUrSO%.K_[g06F4c<HTr?Wh!-9_`NOKAej.k2V%;lkpb'BXK5X_VRi@a-.<6mDJ(9Onj6uf=\5p36Pp$OKt"$1ASp*^4c65T<7np2<n?ie%Na`%D(d<a-,AYH-\#Crj%7BZo[C*(Zqe"EfZF]"_0i_,W\u[C<1*`h;hW[mKi+uQ6+mc92/5"'lXD2u?7?su+P^D.78ld[Z;l_B;%(:_<cSdNmj)htgmbK@-T*C@0>P$rTjd$-)c0a5mh$$;W-[11SHJju=u;\eH?<)bEteZ<?7d*u*IZQt0fR4oF2[D7o-gGWUo1ZYWO%&lCQ/S+L=V=]9m329j5-(?s%.l@@Zh:o#QjWFi/5QlJ,cQo8UY?n<ibZaqT\Fp*OC6X"M2=-TMT=]l;T>,5dg;h]t+!Xu6#Us.,!%MIIqJ8]sF\W[8G]2dolU^a6mo74&G(;?qUe)F6uZj=Du+8>h.YCFUd^Z\egZaT/iI(^_^uZa,Ec#L%!5KLhQ5An@3V!uTWJFA`6j%[#%Zc-qGgR<E%t[U`_(s!\C/"UeJtc-;LTo!Q53,:9h+5K$js:P-*YiBn3!jU=c0,ap'Fb#]NsU10%$pAK%L<doK%'huet'BeU3d%%V7DH'8nE/#odC[lQ`;n)*e?jfq_<,1m=0_gnELhR6l&'Ak6'1PuU^/lS9=Z0\7lN-j0?tE"US./$#YR:<4pSMkuX:J3REo/R#$8%[6la$),O6uOTMapOThL_.!M?1J4iI4$`=[d#g+]`<^Ub$%8m>_O[*P0=]r`>!TC7/3^5OH!TK//$DG'a!GPQ)NW?_oOYSe0>GqR!%Xu)W6_=F;b]Ifg3X:g&E@?NAg]2$K[."fYPOU)t,]4p6ji7(n?(3NI@VJ<*+(A(4&JcH^TWKVYD:H1L&hQ3DS3!-0\W_)J!NY[aP%(uA(h;?k="7Ve+i=U2pKfr.YcENi,7#rk6"aP;;(;eR%^G1Dle=q@EdPT^j*\H-h]C'lDr@6/+HC^NHsAjLTB)6ar,1FWp@9NI"k%JcGlb'flJ-'AWd/ZrJ(IfhNhL!HKi-W)')qjGpSNeSa-?'<t4S_h)L02-hLsMEt3l%[rs0)sT:W"_7ncm$=N<[*57C!Lhi?$P*Lr%.N:'25dd)M8TgaW&_%4cm=pT%MY0pT_)#VTMV&WI!mrGQ5dfpdBp(6r1hdi/*ZA2MgbM^n)Hk*G-kqRT_<O>2&QfB:Yr5$Tal6Li%$>gh_!tkUB+@Vs[n07q1J^"@a&"!X.D4iTg"q\%b5fjrXZ.WBO#K0kGLig6e%l1U^,gWlD:iXUYN8$Hk:E_!&9HF;8BA">ia$fG@%P]ohC*EB)4#pt]WiS&$]U<,chIbGf$H-iEcA3)2!GlW:Cpk$V_^p(7YX+JFqMAe`8A<4h7#T=+\DXo22C.$Yg9HFa+ZsO6hj?\Sf%s(\:M"6'j7\#t!M*Y\4TUl-Q1k\&gH_TCTo62QA@J7J-m?&?uD9HKidW%*kI!u#;Kj;s3a'Ul.kVJ,KJ$Aap5`6ku;ORZ1K7>hBm%>)FJ*4Cja71B!6PUVM1(ksR(-M[)LUMh#U5_"_=!W#gl;!*5<jm9GPS6)Nr"[<S?/R=aF%4=KA8KVHG</%7pt'\D>qmSp1h?&Js7%0biGRn=\U1PGQL2Gc5%[H7U*k"Dk(B*K*F=eR(0?o/IKr+WeOe>!-INW)O-c(68m2-EEYEo#Ne7TYEpZ7g;&1ENs$EaCkc\\fqtS%BR6'^[?e>MK>Zs]=Y(Sg#O"Jt(Q9CHCgAd.7M!QR#efIWH=3:&/D9M04^`[l"mR!hKSTa=a63Qi!Z"\;d=^bJ9Sh[H4_R-[QKg2N%@-ViGi&F1:(b(WAkoQT)qBJU<1jYh=2T[c_7LupR_WVn$ciE!*4B;uW&In-]4@G+S;&u,2b*Xr)D'!(MZ>=c%*c+K+kLr&6W.ldK%D'"\?1p5(*6r[l_C\,@$-W'uq[<^[4j]TF`!AS&V\4.!BH'9e>Y0j#;c;_JH%lBP&YK_^dCoLa18*2QWfK>hgR;M$=4>N6;_<QS,%M\&[gH9e,Tb@gL@6rEGYX%21G6a1lE6'P)<[!Js0Lk&n,^cZmZ*nOS7C`Wb^GuaCe4AZ6PYDP4K)?pD.7+^QE7Y'R-H(Z4[41`Jp%_6t,e(*/kLLX:ipGASDLQ=sUVjrqa"iAGqcb`ltJd0$VOVX6<gR"k;Q4d<f)UPF+;*hu4,UWdNG5[0]`O'qTF4e(Y7_<A_De=(B9%*i:_U7Lt_T6lcS'%tI=k%u_P`Cg]5*-ftns<A=SGPsMD(VC/=;Buh?K#*+7ebEXC&E"Y*KaLWOoU4&eg]:kXaQjtMEBW67c*#5SW%imKj\%Eo805sd\Ohl'p787;1Jp5K8E1j.>Yhl(4..%2^@2l_OhMoWIr2/gU"/=8@719I?u,!*NLgn/T1)dEhHAjJ0C7Kp'KEIehK%)c0MXM/^ZX<PaC='@7mt\Nu3$a1?gjP:.R*]"qC<::4TeTJ8]kH,m?j_*S0&D%"@C@c:MO2/^dJ!2X=TN#NnMB$6cbNf$*U]#V<X%-)/@0_70MA(9/7DE"3@.9/N$PN>k8cUTTnmgn:'LWPi._N#T\Q^?D;2UB'ase1TahN<5Va:gN8:2Mspg&T&Hj)3`&h\7pRM%Mf@i%9H.@WO:0_TbX"]S,dQbr[LJCl$'SlR+T3UthE/.T@V@0C_&V3!"XYN"Jn*QNEl?AbV@@^Ge$+F6g41=R/4r$F2jsh3BI5TpS7iDV%S7GH;LRC'A_+]:udg!/\-sMQZ2f1f]Eo"Z.)\'TJOUhTD7YQ!3p0'@(`a<hneiB$*8tiD4$l`jio0<Su%3+@SQ*-:1@0;5hk]If)%i.d3m$TGT8RV:?HYh1jrF2tLN\RC6*A(W2;V+;L:9ujI]nLPGEie@n'/LiQ,\7(">MT%lk?%XK)Tk`Ft%OsSnONt7MJ6smt7UI.Y%#&.r%!0h!H!!>cX/:/oe&7$2-F:B1RB"H\VL(,m>2#nZ/#%Z@aA?T9K.,6Cpm2@!&SRm'4)RN:CW/97dL^YT#CY,3\2lORP(cFVb%gJY`$*$(A6T4%ipLoq=!)_ch[6hM?U)VUng4P-fgHGkaR%3$_E<6ZB-JVdjbkScA#(1;1hL5kVi@ZFllUIh8+j#J#m/B)DZ!#@U1%'\BdELR(Pl!cH`mnYkR-=>mb9_\TCd"6@s.Xb`8PWXFQ]A(fcI@ai,UA(a*bd)TqTk\*:ZdQ*U&5Q]Zq)pX#CP^-NO#)fG"Fq#DS%%Q(!K0l4'8Mqg:HNK2JeH0cH&=JkeLA(Mh,A52dM25i2X0047c!%amQM09=4_>u!E>m"Z$@WT.nO7'H-Fo&<&""<(QfkVP\XRb_4%@6=MWgj`k,m6,HYBI,8DFu#U[hVF@N6Ab%E?4tV)F,bbm]Z!>BJ#ou.G;+c:@I^T1,$*&JmP^N4C/MK+o#TMiX\?*8TS6=q'Zq+H%p4t;[D.S>:QPf;#<,WY1"1>=(>I%IfqLDS@2G-f.3%0M"E#1(0$oFA!EBk?R6"NC;iNh(Rarj""W(J`J+@'iY.QD!#nSBmC!494,%!A&+,M&=#P_r0!G#Q_ud!nd^ois"QF<2;uV,VWQo]?:!s*XJ&KY\^lsfEr'cehsK3eq[eaG-F$-UdUCq`@T@YU_t_%,h*q=R6\4&%3eF$A3f88#p`3TZXC)X%=W?*<<PZtD8\YJ_BS7!JZr!K)lj!lR>+u"[W'$@p(6A7;OVCB^hoWb'PYbh>X_eHRJ7L]C4`9.Z!p2B]%c,N<?$^hFMmhPq.=)e,TYb$]_#aP]DOG+<9,.Q'5XGFjF84OToDOPAK-%g$6.[2kua@,@&6$_*,]Om:S)(YgZ&M?N5CpMm=8gkj>%,RUr@]h(F6L4c0E15.,EQDB^6@##<k'dgt'!Zi.DKBrb&"b8[k1XfC3aQ10!(%!*29K\cO,W`qj*?6(0TOBN,[unOXKkXIgOuOgm%QLgYB(mnUc.[!5fK@t)uDT8K5e(mJ4PR/Ud%u&'N=:)"&@@;I6<'Vmt&h\#%@3T]`Ul7e<GSq\M;lR#MJj^[,\g2qa3,c\k.tgP@%`M,\/j(MPh'/jo(>eUf.#_ALpE0eQXkR=>]EsfL32PVBDkUG_[9dnX$NVa!/6OP<!%71u2Nl3p2km")!X1lECN&VG&84[m75L,o;%$\Xok71T/h57WO?d0)LNOBc79W8.dM:YSOX<"b1;9p@8tSL,(HMYAJIP.d[,@">KH?if\9@=c>H-KRq>>%2JfQ-HO%@<G0F$$+0^%VJ1<?+@/t!q,eb*A8jRF)1r<^$Sgp\g5;ZE9<ai/V9#Wi[]CtPAE08aDL$th12n7E!@IHTa_$,,[Th`8kE^*#3'D723Q$]<j?U9:%k(#N,igVb=>)<Neo7/:):XU?4H]C9X.#?mA)UV#UcD(oD7/,t6gkHsj_bl4bM28H9"tQ5oe%XMX!e-'GG#9O$RU?7F!6NICG$oLc%SMQh>:,IB&dpsr`m0'<04-7EiE.@tmS*]N&n2^^SPHlBV.H%>aeUe8WXsb80BA$__]$$7dY$M1l:QSPG?eaKIj@Cf@paEa.k(!NQ%/Y%<0",ZA;#[@S*"k0<<'fB%p0lD,+KF)hE*7!^f\^J<L'4j^YAWKEOm`HT97L(q>Ao3`7#&Z"$?Dt<b'+"fohXN.7@6%.eeFdk`%k61p1]Z;5sn&D%6+%mk*LWCdOl.Rq8:42Zq#d!p='j,-D%9chB/K4V3,o68Do#n,Z%o#&>M]iO,@d/(K@92AY/+:B@<^)ZpY8eNP%e/XR\1qIbm#cs",[Na;Mkh-oK)i[-9%]4h8Uj3Z1MLN;kK'ed.W:;VZIGU/\+?lAf7Lk\NCC[g8*WAWW$(+71\R-LdUu2E?';r_Q%#!^qLrrZ#9,lA_XGShqCdmuu3_,Fg/f25RjN1l)%dhKr07iC((gf.dDZ;B[Cb+u0#EKh2DAbODgOZ9:'jOafNN`.JO&QC*a*A/Rs%ZD*h9Q$"'XTo;%TG\i&D#g?/c&k<2%f80ZkCbnRa@="/_abnBPdiAB(9+8r.,qF`2"pelo6Xj[;\<i0EE8h29?8<:aQJa&>"rQ&n%ZVrfN'\FHc)&l_ii$MrbDMW0cQ8m_Qo90b/&tsIGA1Z,6#8k3JQIei#>aa9hCB;7.>BH'km'c;(PHdff6oPuV'NMVI2q]d&S-#C?%\]IsJ]3[7\;<!&:?8@i2]'(H(3AX&V)0(j_YEt29@M'f^QHW$BVY?2K<%GT'&^(HGNXA4k,s_j?AXrm('tZoY:F=nZ-kg`en[l^'%CfNoK%#)7%`&^:KW+e`Q&&O6n.2mnBUhZ4^W?Z,OUJ.&HR?jB4(5mGm2]3!ZpWgJ5@=dHFZ:eER9?&a)'"qgBD+XA_ao7Cgna;2q%.%9&q&nX'k0A.psfg[MZ"4QXm];4k&Y2ef!`8+W6ChBFJI)CpZ6?8k1YCatFM,#hScE_k.+d6*(P>"MBi`7%4Ys=Zl)Va9(48h,Q%E^k,lk^_a@RKMqPLO[`Y![a)4h\)>gIKE2FG"b^T[d8js$>$AP2g!Y))(p!b6CC;i1Me6K@.)CUE5U5!-'l[?*\LVCO':NdA)+FJ%/7oS>rcft092oXJ>L[o<Fr$/"TR`+b[`'F'`(j,;-dZVW<<?CX9TX,&%UoI`[ue+'FUN<`!GE]],h%Pnl.MeW7:Ygi#'5#`VL&b"%6>0<N\(l[@VJ=su[,r[!)@@#IYZ_5=`?Kqt/PM[-q>[Sbh0,qmNpFJ.ptt&B+[?(gAnC)'EdYjGQiIS(Ce-<NG=$Y_RjP@([a8cK%Xgap+&M"@!GEGU?!.uI]nDEQTb)D9A`@3$sSCMc"#-5um.&AX8@U$ht"uBi/QDm^@d#L+%_?2ul`$S1N;RudmW$Z5.QT1/N[]*)&%\F\lRl@a*#P@n.W^^o1j]p,dEs%8%er`9!Rj:aMna2,_EiMN!GNLGb.8L9%m,5oeA*T[s..">!FL=n?<T"]=$Ap^"6E^9^?;(O]V%Z3Q%PmR(P@SM.\C\pXpdA_M"V:rU&$hN,dR=X$M',GhC$8=YtY1nf9_i.gs:N#suOgUn,#pTnqDR'nT_**Z(*jD6qu9[]/M"1+QN%@5b1Raf7i4n?#A`c%O$O)&SXiW6"VbBJ-[L+Ni!YT\K*Pmoq3pq]$;(U<q#Q,:hM6eGGW&RjP$n;<JqeH`#PJe2`/O"'1C;akFn-%1l?nB,K(cHP3]'7XrY$QgA$uB&mIfRF@m4!:10$]Nem0FOdAEDRZJ\;$EG0-8FEcnCaEgOm5EZkPLPFE9fWJ<6-"c0AKc'Tm7A'[%9Z$._=t6Aagt$p,r0@XU4@WA\'9]q==>57?"cmDC.\2bmPI'#BNY-OS[`A89rgC?@\e+#8Wal&=FR;:bs$bOgmoAf?+4[bL!Y\e$%DpC!J%!Z#WmD)'=`i%R2<OEM&VkjS6?<$<Lkat%VU"j=.;iMIQJl_O&#)Y(k+ZTV(KLoPDm"D@0NAsOF(t>mCq!O&d!VhhTSdgY@%"&ZH<lK7M`;5/X6EE0Cs66FIj^f!h/6Fa%$EIH*UU"$K$c,O5q\i'Q2H`Cj_KT>ebY)P2,kpr!8+ERT^f`pFs16q61h5`kR)b:pA%8)s?0SCA(+oV;3KAYrTA=Yj0p3]A8Jg;"u4fQD$RAS#./&D&KH6sX"H)PLt?A&hU&#"cMTMCZiXN1-@(gkjCcU,Qk9]+QHin7nf8%g6In>Yb+gemu>+`ccS.HY*q7bP78eGie11d7SOe+T_^QqgP"b#.RSPnFW3Kk]>Qfrcrg]kG/aN^>LKu,@T2;3W,I<&lE"dHI.QQ!%hj,R1,^oQ<iL.D#lj\@^fJ"DS@-GfmZG%oK@U9a;5Vt#jS!6c)+]^GF5[s"h#c_[iA(kcV(-6DrA=@P#9fXLo*>;[g%ld`BP$G>p%"W'a;g;5shM&nAK8D<b@8:tqnD;/fFmW_C@679hLC]sW3]FENRAe;l'L"OnKf?cPTEF:Xn9Q34AVIFb:IJTc#LVHg[OiaSS8eLm'%?Oe!,;Oou*"lHQC2m<2/)^s"'T_]-kT2r+_)[OiPXn'YNYO8[^5X^G.-mSAN:P%`Sj<X&hefcE0S`i>o1hdm5i_&$[,G4?/ekPT#%KZ*!e(fc3eaL$_9/p*$pb4_p0gU*70>j+#P,O"sEKt8j_YGfpKR@>-(k6Rf:`O.\a,=T1GpDe6$=A@)=*]?u1Arf*./197;-nb[8%>#"jGX#9ZS2fh3&3oZ=?jcA<C0bNSCT5(.qj//;cac@B2EgMsr9(W4haAdt//bBILaHVf0g<Piu:-W[B=YNM]dP?V(+1W-mMm#hi%'1eXd@YQqAfoac?_kR/W@Pc(MCG.K,6ohT5l55Q56$qAqjI`F%`)X_%$68qeT[is;qCc$sH`qHcs/8t>Y$;mA>cY\0V=NWh$S8Y'%I(H_edl?>*NI84ao?[BEQ(eK<>:d6d?e(6gr4Igqgd(Dg4!Z:M4+GS./"iTa,YV4,<m2V".SZ+ZM#KII"FtJ7Y0m;[:`ksk-3>T2%(3Kf%.H^B+eDLsu.s!7aW%m%lRKd2L?'Uj*L?YM`1pKNYl:Odg\s:W*=)-fka]MeFC4OBM\l&VuY"'b67S(Bnm",5!<`W+$)E/Aq%2!A^(XG-mlHa\7:HB%V-Pm/(XNiCG,.4QN<V$Y'D\-,[*ObsLT-L%inf,.%JV+,-ee@7rH&\@'NMJYcFWeO?gFp03iTD)6nBuBUo%I1P\Ja&T)>[RrSkY\qY<>AUTr`)`B^l85I'&0!ct)?;\WH)uUlhQg%3SrB)%)OZ\>ap6Zf'4[&%AshDC8rZOEOd-hf+\E6P)HfL<%2E/&+IIW_/'+>AY7dc#52$+GWlf+VJ%7C_('?Pe6ok%*>QPmQD<YJ#m4UH^t&G;D+iGF:C&HnL_&k#Yl8Q3[j(1DJ]!iJ^OH50Qj%Y-@?mg=DoQSC@r\FH,2]UbQTVdW;B5=C^_DrfNLSYu)IXn2a[4RfNr.]Bqtf*D6JiE)q*U6/WTAc,:.'"GFC/o@UE>M4f7;rOQSN%'\RV[<:.NOM1%\.0W!Y=)sS&-2,WL1m<)\kO"Z?iXuFrGjcl[VG:mn<iK?fEQ>Ws6c]#pXDf+b[Y=-k;C(<k!Ut_$]]7c:O?Bb!&%gIp=DWgr6I\W=pVlqH]aXi@s9A.Tj%B?#fVQ,9)$'d8KQN^E--\Q$iS>_KP)go[hK7Ii:NNEKdb*9Q=[@oGpHEIVG:\;7gtNrV*F%J<=8Po<M_CG*k-PY$_=Y82onWEWkc(]p%Hej,o/dG)#[JRL4^q?ckpM&ZV>JeFRmnW6IZH-'7'jJ2T<1E#OlE.n\ct@?&FGlQTC@%ED0i6I0fk.T-[-jM1\j:+r8hSDkBme%:c31cG6-RA03-D1_j%NK,HXHRhQceg=]&,e&foSXK\.F,/LLs-aa6SI-7*)ADsT3'A=.h%[ekac.PqH'VeEYb+l#I[]]Dt3U&kos[7e4pdZRs2AikeLh6"e%Dl5fHV!dLk,@K6V4Vr/->1F/gRJe>9_>i?CYQ_-s<T18j)PUU9%IH`n4QK-N^d:s-"]UD!&#C2;V$6_R"h[>V7k=!Ie87`u6j[(_F*WU,J;<(GCE'>sZ&#(8S0LTtjLBsVJWX67bGP07X4W(ZmFY.j;%AqGTce81GKp<H7\ZeY^S/(s?QOOQM8S-rA]1TH-hgUZ!(aro#iE$(C4U%9iqrnrMAHqi(TbrCfi_XN-6LYUWW12.d$R(,srLP[`4%PWFshm?fIdYK7TX\!NDadH#)uagPItL=CDSb_26T+#8C^?b)WB4,LMMc1DdLB]EP3WZ=ZZ1FtLn2$K>J^!'-Ear,)=a,mqDguE!#%s%MHCgjp!rJRe]iN$!P6rep=,]iVbBJ)'g=bdbu6edl"<ZCA(14`DrT5L+2dhN7+HJV=9g0Ge<+G-"EeSD7SQh6i_2mg]_X8+bgO%9Ds+Ue-pqE/G$gh&fAk9X/.4V0nZQFRN]ouX':*LQpG\rAR<S'CJ^UD!s`]O@)6A0aI7#G@A0ZtNj+,nIS,*pJfsC6aB"B9ci`()%+9:QS$A)J&Q0o<nJt*,"CfV,&ngH.lO9JMY@Kf'cOa43`XRXh5cJF>RXI'ek#d+9SC^<>$KDAs^5oR:R0n_+=L`(NiWZf<Cd/!f!%6O501(IJI_G'brsi1>^7a)FBO`iWMT+h60'pZpD<BE[r_LRg-S!S:4`0Q3/r8s4&Y=MZI^g3su3m)fVj1C,H[faP0P``+3>#Z:\k%;c_-cB0S"lFEFq6[F7*S:2&NRKWm5f64M-I,5EN:\pE#qVd\'@+HjJ.@L%0_I;T:0r[']4Y#k:S*Fqn+@jpU;0%[<F50bbM,F!W#%q0oT$30GUaK#FbKosj,"g.Jd[-cdkV::,j40lu+[!hO&FS#1ANG*%o1F2$9m0MSlV"q9*nfdKT\)AEnf]^&`o0ZR?h*$dDXA>;'o%`-&R22a\FVGi+tClmT&e$>)XQ&2MjVgLDEU+I[2@0S.J9o%PiF'N=g4jZmKtS!m;(+i?X60:6!R9/YrscdZ3$B:aS7Ha0ZfTUQ"+%lC<dkIHr>5KU.dcCa3"</-N1m-n;r04&sng(-g@)kVNP&*?3r_fA7%pE$9R_B`s9L?#tEA<h%>nL?!F#9E5;nZpgEZ4p>C\^sX[e%OdTfXhj:YW#gY[;s#)062tQIc(`sl)VZ\Wg'GohlN@dHX'H`$s47,-aJXdGVT[^R=eE>UiPYi`S=gKEr!p2*Vh2\$IbYe7SPStH!%SSB'_Z?U`F"A0nRC)YVj[j0;2"H`f8p2T8Y4'3+KEMpNU3'L$Ln542[1rkUia;-n9h78bE0Bht*&+)^p=OLlHC0#M;dm_0$'9MAA%N27`A9"O/o.J,m4A?&1&gq,3Ie!"=0AHpn/"6.dO[=_0(Y%lZkVOGEKX4c<Jj)+0uTh#l_2lb%qho[GOG0N7<GdPMF%-Q]s/2-(,%%=9c6j(5XOR45JQdMF0%mIQ3ljVJ2V.A&]P!`)kR*U,k"Z;0o<"8bMb8fV.a4(/ukfNKoXQ'80oT5uN$>3`kAU>-^LKI91!Vk4PO%RPWeNM?RRnfprVUhp-?tF"?J:&Y,0#*Rhh*04R\5C2--XH"4k`+NXl-WI>l!a3AS#o<[eLQGLdIaPXuk*)^t^EGZ4J&J4[F;C(U?%ZTn`&c2cd.:`=9c'(T[Ce?#Ag1DiQ%@9*`09I^L_rFGQGV=PA2#[;Hu!23Z\2-&@4;faOnZ'2+unUF;Y9+ca+4ia'!<g3-S])U3(%=[PS&a,OmWPa?sm1Go*h7P&p]6_k_YKgoKc'_nfERa<IEZu9=)L]sUKCr?Z+pXq9iK;'\K)+Am\=E9kSq@mJp2B)b`>B)*(BsKL`%>po/WE67=?X_jK[BbYF-r(ok*+A#io/<hWb.C`pUAR69Tc>]O?L?*L8*]J`Ik8LTL06.n\%/]d,`;4!9?]A0+]uiM:UIM>FUq:qB%\If56)/3Mu6VkSS8CVWB:Q8+n=F<3A7H]TX#]4aeMjH/\,dMU5EpthrpIgBe)&%ff,#t/QA]I,WR[5aUgi&CdGl7:-:blEam`Ej2%BkJg]p[rVG'*(b1]Vfs>GTASK]T4M,%m;V8OLWMume8GedF6D\RHTHRqIQu8ii[aA,f(fS.e-Ece5JFlE<T5rHM`t$?lG8>-RoZl%d)C1Uj0#69amAj&,qY;NV0S.j\X2:Qn10n^UJtj/Um^aV]TS\/@ETa@]f6pPp_dAtV2VbG]'=G`d]R*^QqYZ$q\ggKc<F5A=X:q(%A6pr1C#khn\5QBqk%9VY^QAh=R"nWF!JoX*&D&$9k)Jj\RHOm^*:QRtoLqt=]TNT>9iJ]f.FWcB=#.V56P!tGP52hZ+#aQi?-,26%='lA,,1,]+fBor9QEAOFjOm5tMdm\bbuBY^d69-2StH"5`0h7*8J5?l9,l_mP"D/l(L3JJ(N-m,8HcmVaHkq`Bh98=U)?%[2`JW,%f^6:.H"<(W7oK($F!b!`c6mB[1Xh-eQ4KVA3[cW`k9<b#+[i!F9f84LW9EC&`K<9D0^@B&4ce5eoQ6FYLKhns&P2>s@jXop9eLF1%HYK?<;(fOAi?mL$OLbu[HUJ?WRALk*;`-F[#i6C4$;NC?<5V$uZ5lN-X!sK(=^X)jS#j<I9V]`jDKNpl]FNcXAiQuspjTldi[$m2%G/XQn]&J:R]&NVWiedt[Fi>^Rpi3sXihI])/'#7P5)AcPGJ(NHUN:,M+0Vhl+BMW,OB5M25@.Xc5d%9bKV\U\]&KJ3B@OOD5)9Q;%^UW:\L<c.Tna;:Tf2l%dOHEf<q#0K87pbP_.iud^'d$!7oW'K+C@^J,]Y!0o-=;&=M^pt#WA!2i`>($>ki.I)o'2,$a/^^3aOM#t%OOUa@=+&L3>^CV5#?B(==',=s^ccQ>o47s_'eH\cDum/ejpl#2nlk>.n];IT0;!4i&jnEdT9dZZcTZDOR%p2m/)m_$eZBS*8muLL%3B9[FkaZBpR,56XI.:7Q\<ud;DK0T$e#l1697&aam5n1gD0e\H8le.A?=:bUYK?S#bp?s_;9j//g]uqPi-b@?+(G$u^.])Z"_<F"%@+4A9ZsP08C(.TGBo)t>Wa+<.FX21a0j=igP:mYf/?L6Ha4HiFCs+Sge!KLVoT@C#\goU(0&>iuHU&"b#n_^/1PKPn3g-A>@BjRL%VHC7X'A$r<%NDf1#d6Vg\/@I_fX`WTGN1JPT-r2I.uZc=5/ckq_tg(r*Ai$tVr_B4;FJ!Xl_f&pDGC"O_)C,5oS!q6_JZXNm460M%Qj.QGd38F@JKJL9cRWUG_SQ:+^?l_12EAF,K7fqUk=>W5088R]PeIS6Va`"Ne-LU3c[i%NIcJ%WD6pGM6h"CAXck0`)8^YC)WSGP%"s9UXoamaWC3=cZ73ZPVk8$;C#)fMZ(8$0iaT.R@2Dn,l^SL<Ve`p&g)l$V&J8!S[J`[Lo[ZDqB%5?QAQ`c-5'X7r5ogsobUt6/h%PZS0cd*?H6+94`lbU3]hc[<%BSEPu^B/epLJ]'/D;E^7+Yblk'e>1h^-8f<S+DUc-Qs&_udm.dIi0ct`Li5gr-,P50EuIcI^Qg)`%cX8'1c'':T)=UgH`o;#%\rDP+lL73$%_'d6VAAguq<VN%(b9S^Jso%o*T?f,<EeP9Y#@q;L%3M#<aaZU'ZA?N:>ntHIcFu^FA]^f%TND'fBL^uB%+,[;#a$N8B`j3\G1mb6QXmA>K7PKY^=a@R/sK!;"4it^i7>Z`9qS&eR,>1tKf3/:8/TqMAtR())[8^l,]j9g@6B)T%3sP]VOCs]cW2kqB&9V/d=27s]6,Xn=h\"<RM#jPWMYX@FE`$DdP%N?+/e*[?@:N>-+O(\9\6sldNag's\uZ-/PUb0RI"*Um(OuQ^%`j.C@hL(hY1_9X3-s%euWN,^XGE*,Z/aAVgG3L&l(Y+Is(W\;AT,I6A+OtdnnXcOcC.g_5Brl8.BE,Enn.rE\aY)%a]u"qG0m_Kh%qGJp\mZ4q>($+cB0'>=KU4Xr(0Ks5"K^+FXGU[(]1ZAqUH)X+g#"@sAS;<Wn2r5oW#XoO-c7q>?%R"qe1KD??YWo&o=D"T$cV6b?%AVTO@e)Z1t:".C9U5eIm$M(hRIZr<eY!EgY!2:0;>JV`1jI4k2-?!/IR6odG%_9;ef;O,\3"^&%Z+nqTCoJ,h9/^UFTT"`uLik3Q%\ftU(a)A@RRC=!&<9)!<)s5:[@cJuQ_i>8pI#o/adP`f/i=D+$%)287WtMRZ%tNmj6RF;E!E"aAGBSWRMd*G!(*nO0ol@$WJN'G:%Gf\m4eh^2'dW4n5H<kWRRt\ph;_DnO$/@sTqUFh`&r>Rp]"I49oMgso9Xuk#rb`Y5,1gl^Hu'aFq/k<#BnKL24Dos]Ro:Ur8kj%P%Uab`h@Fd/Z;W:4Xm5?V;DC.uup#:X(Q+Zaim6q;G)mQ,+gg\1YFc12,0SWFfe(ml[Rr1--_%\\"a(R5gOoe"b!km"T%>7%fVoZ0_%i0/uk0r'8Zb)C\>lMNJl(LhN^Rs*?1#CQ)k5g5,EiMs(;j`q)ZpEr$`rrcur?`T7ZmI@A)=8):r;4m\]g'aT]Rm#m326^tZ5iBWc%[[g411pG7Z4@CP'@;o(2p=jJGZ7K9oO"Z%5MJa$Ih;2Ah/_iFLBhqS01q8ft4e6R%hH$u;RnaL^O(lk1X2n89SmJn!.go,bH3Qj)%o(Pq]VW"_S7!$8<;DFVp4h'E]#NC.>a;>I')3^f*`(;1'fPQ;^LqJb;^[_qc@F"I?WH%LNC/'=ElkPaWafl2%.A^qE.0dWpK>fB@%_r##cR'%s$kd<bnjr5&'fp@]cQ19VqO58?-P3j#m)GhWJ#A3)J6N.UTf>H3<]W(<0WYdVLhHVde*JeEELikgp1$5^6`'>]iR;DNl%34o^Oj(8::KU1S88l4h<7s6_9[u/foA%N'hci!/NQG.dfg`K_XY*HYJBsU)&J5'(8RZcNQk34B6FC-@T&k*<peQqQ(js'N\i^h9G%LOA'+7D:ap\[7$LW*&7Q\8MT.]sM@dM`i\H.*m6'-_TVcB^CDLVQ_h=B!G%k7Wop2[t'D<;3<TT>741E7F#eGfgk+?gjHGa^Vj_-%%f_r@$]m+7Ahd!t9!eK71kVR,Lfl<FLTR"1U=0V*lALO9JU2CBMN&lgk>&GR"YlOP@17G931%MS.;$qkRYE-H:YX>t,?<I6r/-3s%EfS(KFia;MYK6H;CG#"f7T8[!7X'g5lc;5,7e>_1V`?c.de]N`B+HB5nCb_D1mfRH9f\8qnTie>ae[6g7q/P?nl=T_q+@pCdW-8?%#.`flY<ad5lW@K(LF(.;;MXA_p52O`aK8=J%>pIcWL]u2,eE-"pYY7U(3sDHO[`5fgW5BUGoa:p^&FA*H4PmJ5#E*?40a+`="b6T%f_F$R:Wm7S]1Fo'"7]+kA;_Q[o!PNXV3Pig`6osRZ#Y7PA*)"P'A*\<C-/Uh?StAK2=pK&23#;+h8YQo98@oPnqqg5e$eiHBCl>!%8TG6YlZbR1`ph<5j"+Flne-)r;[iOR=)W\4;/_'OYAa9#eXKh7&$%Vp-,cGr$slm*VJYu3$t>Xn#ARa9Sj@X[D(`/bMB3tm:!?]9%:=E'9`aC-(Qj#<TST0B];e$`_BWilhqAlQ8-9`@0EbJ?*d/FoWl@WE-oMY8<:eMP^'d]eXWAQ(SP,6fF_E15m:n@#>U3D/+&#(E2%P;a<%FHW0S7Wj[4le$oKj+$%L#$#YB^bZBnbfZJL;U%Jo:qHq'[+5'rU972(V5fR7+fTHH]ga-tn'kto?/8JZ%_aja%>!P./4)YJ%\U7Y_;j'pE[FZ8@h/'tGF;6!oeDqRh;3U)q:@02@W4nEgU*LQ=^*gJo8[Hr%l[MlE*:i5)+.XhC[M/'RnhtBHS$>Z@NnVD`0=H_V%Y`-l[3Q%F+gWcaa^:hG4\*qs<gYp&bZ$.<)<R`7cV22%(O4u$;1l_&]g#8oKGsNEj,;thrJ#=_b`0[&qiN(Fr8P@],W?F,K[D!<!%T@/0Cl/G71$<8RZC!u%2Rl`?QJD+_S$l+8hP9!29/MQL>e78uFp4A2gQ*K$lpX+4)Z`NE\0<o/[2<lDD5!p^ccg?(J`NmK91EC;s%4<&B*aK"8.f=GPq8c<hVemHqF--F6U.X$DkXZOqE+2jhlY(=+ZOuJA/O10C'6ZWRp/]o+NomLZA)bdNc)3AI16,$]P/\[up96o,H%C1;*._(cY-"895B7,'7>*Uib*UJF^o^,flY1LgiXH&?.3k,CEN+j.Eai'j0b#OEhO\<HW3oUU?9RHZ(T8Z@B@-4=4Ul:tG<QO<VQ%[0)6!\n$W^#/0+RMtuhHDKKbKCO_dW==!B%g!^*"VA#)%TKde9fPOGpk)dL?oZsMq\r>cNT"EkR<B4C+I9/Q:n'/5.:G[)kXHmR,%JjG_::8Uq<\Zas/F4fH^B>nlUo$lk6N;)>;:l!]iZ%Orn><l3-pnuCNH1;'A*JniSG.sJQotp7+)tG@!ZWD8[Y!'s^2W6^U%TuI/%of]X7$E=<G.!76#d8h9L--ofKlSQafd=M8,-"rX.clZJo]amma"u9]J</c_,#"33baTjiNPb^TH;35Vqk0Z3(J<ZqBQPpe1Ktk^b%SB2JPgqO(@Ec.d24Zh5W"A8GE`hY;#]IrU7/b\?fK_?E=a4diaj4I_J`fs#L`g!G$qPGo;A%Ip&8Vb[,1KAF8#WZK,(]Y1kA58Rl%r\1gj3HFhARYXaH%hP`oNc`H[R'<H#9N4tYn']4U`B4;i]4k5>Zb?)N4ki[hE5tR#7H[=nA1j>+S2kVA-?Jk`fmuQS!h5mQYpNsZ%[$Q%%<&qjeEZ^LsOaD-Um?eqSc,(dfOLnnNBF(AZBi(Aea2oV1dPUa?]KIBE6U(WDh0,kS81\MU["qn$]C'X[.CA,Q+AO>[=mk4U%9:(Kg:FHsP)^_Qs:JG`K]K&7e*Blcn")4VNA6k72N'5`kYgB@h2B0Ir&oY\\\/E.bV[uCcOR_BGEpT4!U*nhSIsZsIDr7hg7.A*;%msLpW2"E%Y1WHEk<'_0F'c=p&!sr1Hk2a!2GgYiJj`&hUp-4)(G-U3s:;4bHLTMLS;!Q"=o\H!>4`?`F;9.st&N^a^%Gc;pRl*>%%!je97IM#+E`5$3XM4/71o&aBpF-:@;F/!M-N1S"SBa3j%MFQr3&P_)Jf$kb4.&+gG;=-p>Rq'_EX2p^iXX."/:!R[TgP=j4gtiJ*%H,HGC3gQ`_Z=>2]XZN_0Z\QS]?oIW/2$/V@#A3j/e7;dJ[2.Ma;e.t\dHl3gF?)6QR]04/>-anA0m6o-U-Un=6_ep'*(UuBa/o#4%PB"ZI$SFJ+_.h=;KCM!3O.0#E$V]l2rim4F-k5.XYeP3E0h<*H0rY*JVCu(KbU%be[#Scf7@m;PFiW9n%7KTqB'KT;:banbj71O*%B1"^$+745F''Y\h-t*lZ*]6r(d#%I>]:5CjZKiDpH(jX?r?IJ!lVWO_m&5`KmbF6K`.KBmRKqZ"7.115*^i`B-Z:W)kp/:0SSB73%f<KZYXm]*^Yo=t;\moX$#,:j'bi6=ZQF#u3Zjph.+@Qb&qUY'U5?!o*<!KKq(%/:"L-1#S,,^*99Tnf:@W[Q"19IHPZsor%BLp84%R706:195[s*_;a&Nfa?>O`;e<$U+bl`pFo(7c\FA*]IU)C0Cl@@c0hTFiU'kgCP_2b[8(/l+;.5ji+&L!W-YZ&F`Y>1$k;_:1/rd%MemqjirUfZ/PePFV._JApmrDK,&aaD6.+ntp'UI5k+2/t]HaBXn(;hmZS4_/Keh$kck/_t)C+^UU%_EJJJ+?G_D(k_!:gb^)/TLZ%ULsD!bY#E)AG/S\)GPKdT6/$=PGnuXPO`Ou9N/8n@LXm%+[Q"$]W/UjK-YWW@FdpPWhh-PBW%EB/<mI-RSYCJ9(6)kkCeO%OQL(.%'4n7h1K!:?_+^)mPaX!(W&.Ur'A>'*\@aB,RG4#c8nl&gnYSBh$%$@[o0_T4A>@r!6qYM)BS_k_>2;^u1JFtV\<.EVU#'?!.HRol%H!]i^N[,i\.Rf8gcX4.#$CU%E:tq]aFQTT#"V0*Y\`8qe)p?%`lCqA0/E"KOlb&aT8@"/36$B/fl@%uGs!,e^mRD0Cip^/80P[9a%^h]9KVG&Sh9IY%+I&)JOK,H>#qfrGFGp^Z`C=1*8Ud9LdEb>pnYqp(mqRn+Fkfi.;dPtD(_]rR6d-$eL!Wd*^7B>%rPDbo)Z/X;q%O^lijXJC0`3muMmOGoCre9edWXVL4AUulO]g3D6slX&TG-HUY!4Si'F7bR0U;2-F5W5]7"\LfTb3^%(p%#P.DIKa>sO,Al`d9L.U%'BQlM\pZPE#OTbgM+>tZFpV/maK:!f>eRgc.E(]'Y+b,\eB4$Xdm:]3:`W*l[UW;jA4K)V2e?L\/+*p6cPH)ZP.WMG,5O_Rb`\q:%%=tK"0c$X`bao[$d,aE_qX670%C2!a/]JcG-l<f>(mCLs)i(o=HJAqeX&ZIJ>>WpJFiU'kgJm6Yk&9^mo^+a6SU-T+?-^GcZ20=L%A'd#!WK!lhUjL<M2*7Wk/!3Uu`M\ulii^3S+?0IQP&[e<G0Z8!e$7UX:0YBr<Lu>,25h>3;76/GeE+q(C<pZi\\]s!h0jU)++VEt%N0R3@n>lW-#37YoI7.n^!FdA&Y7s$E]h4/>!(&'lVD8;ddk`>'+D!l2EX0]La#0k\CWYO9<Zm?&dB7aDbW]nlqC4;\?kt+:dhbY:%!JJ0:(;QqY#nYI`]m#3>S(t%?4tRV@fHES3%cuo-W1Y1]IUb]saYKFJ8`lRX]<qM_UVr\SW?],kd;YWmb@HEIPR@+:Ar)!([N4)X%'Nd#C94<C_bVb$[oPV&.Hg')XO[0uT>r,m0N0"SVESU0(F((.g?!s*:Eq5)>&4S=oj_d5cj2-H(\s8[7;>BA/jDM#"AEW)Zf.c1X%S0iU3AKh02\<EV5ld!E.FZD\C=88=84pqY'C<(ln]6BcJ[#O7$bm`fUr0`[1NlXIppC5?,gSfrVZF:UI[Sp^,]@5!A5PjICK%[K*%$r,TXQ=[[0C2.aH0ktB/:BWbB]&f<'hWf+[G[lSg:6Ms[LrmlgGTF(K.sr*CB[KRjLc4]]\^W7':H,VN`sHGQof+6"M-^G,j#/CX%kS6#<ZSUgMA)0_bP<\mYiW0MBW=Wq'W?/=&kGDoR:Xmb(mK<cV`mQU-HW4PRZ*o7>6'(Wj8G8a%*O!N.)#a[spkh%uF8B0A+iF<%%FeKp`PbFcHl^PV!FXWUS8K3%7qb4<346G+3+<!:S2Y"qL-^iln\^i%Gonj;*W\t![]uuft\lM`uQ4kfQ.kV879t[PCA6VfckhKbh%K:B0A'Wp1t%h7O//[LlN7:o[5WWS*l"\&\a7E-Qjc2$Sq33Sl`+-5#NHaCFffK14^-gSBSDXOY?)E:e8`DNDk(eWBR.Mb>jghL)t%*Wp&i;icbhrDBT4I"TfZd[3iP1O<GXh:ZG;fe6KScO<D-pJd$9mSjkeiOM+XRKli)=:`OV8TWE:j$;+)4GriaP>7D7gF;kOGoO<7%c"OiFhpDHge*OMda--D78kSNRAD?r4QG7jg<'-797a=b/O5sG%a.<U\X\>!aDP6WuRH:8N;/.5jC],$uNV(Ig-LgGt!n'7C)(p3%%DDEXQ!4bLOoe!J\7%dKBj@77!g7fr'O?"SVYc.%q,p+ng0b[Pq]k]XZ*69g>acTTj^+#aSHBV"5W(8`IS:c,."$WKWlZsLnI99H(%R8/'&k3Q1rU+'ErF6*oEj[O1?18QGHG\^<?<Rb6a?#^WM'/6*^@j1PiOJnL,:.1m9)F@FU;?VQrLCN2c@pphK;0-$S"mr)LR#8uf%iZ(rnaiW?Re)3pcK^W.;cK$haX[!R10,8jtigPe*+Hdb6K?m@-@=Ug!+GULi4,(b70Z.M>I'@fPFMQPA(j8#`-+:>LYcD(4CmY^0%RaSQrP-C8@LMf+B4)D@a;.>s4];e;*J*Ks-:oA0j9'Wd^??KF4/XR#i__5W>HX4[QS$dZa4&qKWPMaKeB>uo0PEY5Pl`/S`a-0n`%Xp<7bc?fgR`=#Lb_OBLV0GQ\6GS7q=gSMrN\Do$'U#S_il-6k,g3h@s>jchL\LQB0eLtJnY\Uu&E'&X:D1p@Er11Lk_o5>;:AC>i%PEbuFk&ZDIc?rC_-o@Pp.]#<V!KtJ0^WiK=O-;gE)lDo,=^0+`,j2-ujP9tdR<m!8<6a'+*[d)Me<NC^P>!U`9'L>q2IkS',fiaJ%Y)\GdO&IMspPr$TpAkSgFM$"!,fbAmPs%"D9hPm28.9!9o]J\4eKViB[Bt%HVWP_d,eMaC#4EOojE!qiFKZFpDGTP`g[Yf+_S](%%U<a,GXYmhQCG=glD*MqnofN+dWK@+gBLR1?]g4k_XiPuu[%^O@[A$=9TC`cTD0HAE24'52k*<cpnT+MsNghBhYtG3]*h_+pf\A]9%Ujd,?JmBebKF:Ip+%JJJG"usKP:VKM#`+D+bSRe=W#+8F,^G5E.=,O!-M,uff$(Z<'U]'EBau7H(795/.P_c.CPe*IPO[AJNmW(l%ZSs6DrZ[h)3/JVqV[O-nDA0dE[)b+:^7>oFD\0LSNr]KK3pbLE[auM.%VBJ<#&@o$h'%'",`eDYJ3kpGdlVT+[j0iT8qlJn8bIo"%-F[R3SY1c;T-2g<1d__Xc:9`:=p`b?--fgAejnY8Ql\1RpZ`e$eT.*)pQ/n,4k0,/U?(sW61T6gfQSNu'q<X7Xmn4.H=4C:^[o;#%]pa>Rlg`VNP6E8j"\WD@I\I?W_[onQ8<K-tO"Ugne.EsXVUDf=7gMtFb_p+S$`":]Egl*/=.ull-:41MAi@uA$0(a*</<(oSY;>0%m>quQOL=Q,#=Mo7#0ZrtF*Iul&s!)q8hWf6)>Y?-2jIcMOV!!Z0ZhZMc(aos2lB#[OMZXURij5/7J1]1&(tl[/MuB:mQ60MS$6aV%.Kserii#p2;ZN='MO*RjqG&alMqrk`:@4LJ/H<0+FD-_.drM9"Luprg@uFnrMB6f2g*O:(;C_g1gY6mcgAj!>,j:YiAd>TA#oQ+t%f\dc+57@Nu-WPY*]-abFkM9Q(2V"*Ul8Aq^,5o5pEd[Y)D<rLMBPZbgI70U>b0kfbVf`XR)M%#8,!SOB%pQ%f>Y<*D$W?2R*Gs9o%%^V!4\rk.lVKT_R1-CY,P8hr<&6ZN:)`0F\N&n7n2bu`SE$io-LQ^QckM@t"WW\luR'7lS2O/E/n\]0KpK"k-O"Kh0@':TERK@so%%lB7?Fm#(>m+h8]#U]1W10k-2>dt25hkbnpb6c#c1$ZJ<ph7'B<!T:7Nj,q611ikEp\ji+ZR=XUo<KK/cWE^J1qgJ:62+QK5Kj9I%;Mr$L6BVX#Nlf'b'LbG;2gK0k><+jT`>QWIU3X52+D9,K.Ri5tWe__)gt:W1FF*/L$^)O/(QE*7j>a?`)<>W\2EF:HC*PbDj)r;s%S9\7rULu,PC-'[-c;=OEQ:9"&-_$'?kX(F=Ug=c2IM(V7&egb9Tb+>r(`0rG?9_=t,idgZ>:^L]\Vs[PGh4Qbd0#a!TpIBF%O@%0%A(L[YBgb>)4XVR99R:1[?:X:#1O=P%)_X@hH)G6Q27rAkl(YCOh-]%NO;6>OngE7<D%;WI2h.3)mP4lB9F)H&[38R.;WEY^Y[Ja.%GN,?4dfPR3g&5:cXO&X>2).Bb1q+n7acG&lfLs1`#tIrg9<K?=OrM`jctaE)d'8n+1@L^]A,a"]3KWH,@+P:TaB7N*"Wr_u@(+H&%"7eKhDgo>G[Q`;G`@'f8qp"UnYC=s4#"2.[acG&l8f+sM5eWOcm:Y]>OhsILWj([gD[=e3]\]BF-ZQ,^/&gLNBXu0<,VNIR7=SH>%7&O4+c!50QPI]k.mQf2_Fc>.;MMsdV>iML,jLfZII6?@Um;XqFY<KTGN[q-6o[c+sbS]b,B$]6QP.l:`^5KM8L)BeF.TKT5qdA9N%<'F;CQMV<eK]l&JU<55ZE7a#.@*Cr:WPZatMH<2&YfE)`D39'9=4gW;p.>/^9f+g#T8C9+R=C*?pk6/E2m0okg#\BGPWCX(PTZN3%X?Lb-L=Y0YW'^Coa?3gEb)oA$Ru74)acgG]0V#qEV;@OljgcG;ku6(J:8dLEChE*mQpcnbQQ[7W-=O_sB2"/TaMjT".+8$G;/5Y&%$a2X&IrMJLK96]]UV\Oe9WHVi1BRC@1mSI6p6@h*K0NB7$m%p_&rG.c`;M,m]eF>("j1OVkBtXp!+j4)'(jCE<F&=a=>@d-bT\DT%F2&S(^"G^7Dn@>E;[!;)Fa57SRFH$c"s@APAu'8k;kDGM^lstu#*#b'mTdn_YfSJ0:lc@J!)YsGn79&<^jPC5;D=@A@*urVYZn+c%;^S8;RjId5\5bPlCj(`O*+\q08]R\XCH;[tOq5c.jgm%D4lYDn1-Gek`Oj9ifQ)4TCo3STQgL&C&p%BD.X%b:P0BKj@r\Q=)QOVR%nAK^f'SSRhL:@:#-6-+qe"/$CQk6m0_dX\*XHD#eqO%gY[=i6_f<MgmBahOi_N11Gq;QcZAgZE96-fro+>:9.mkIP_Q9;@$8kqr)%^rfaXHkdpQX'go)9Z?TQaC$isG[;D1cYG#J4j$isHX;7[]=ca;s%oI8]rK?KI5t,OJiU4.aY`V&ar]n%hTgP40<CT5<R-t'0;9@M%r:D]+CHc7Pq3jpTo/2OFF2,kCP,na>P"DZC)AUa1)eU/JN5:p'>V>rr!AeqDfi9(S__T2g"UO9aANhYb^WIF%#<:PCE`/:NGdVkY%Z\'=Ab6^O#Ah$5u\U<NL;'FEDom2Y?\\I_.4s8H-J9`\%Fr]b`+(bL?J?:]>:OTeCf-2Z?OZfa^Z.?H'[k)!sHRX*P$;f3B5?XtE%kbn;82+IVH9\\SP/`](inZoZsG>K-_>1(7U4F6Z_5<"5GFce`Y9N\&/l%0Z495fc&!i!F'-;X4>+AWN>'K/'sM;0#ohRko^^&!+#%]A3'rQ.JJ7_08mW0gutn9TZ:-22L;@(o)0c7FpLlg(F&GEPiT>e?,6p`:C07^'an.Yfn-.;TjB+^!R2<oF/e/a[hDa[o,7P2^Q(&%X'F&gSEbZ?NVQ:HWNOA=;b^PMR4dmc%Q&'W4&(>Fb(=G"&pk&1;hY%d4[s$HD]!_[q&9?oYG(?3e!uVoJr._0fJ?rq3V%aSSag<(%itE$`&r:.QC"uI7*;]RV0G2%nAhR;Y#UE1GqG<R^e'dl!87&1rTJunuL0WG%`Cg5)<Jl:k!&$B?RbhIkQ<9jN"99Wk*$2t"fj5[t%DMrV'^0GtS4K;_f2@'>rn,a$Q+u$\ke@<7c:[0IY1cIqAb\l<_14YYdA=9d"H&BmjfJ7;kM6\k/&;WM&f7m$a7s(b';NWBWZk99.%&oaF@?/-5]bjsGS$V1JLaEh#NNoKuCT@9AnG3%$)5>>WPnQW3mT)bZKnC1pe)P_%X0LRb5I(N)!pM"G^S"cuH/L$sC/>9W[A#gA9%ShS&O.[U#uLRbEIg"\d@_52hKh=>`.3V+CoFAUlPbm4bc!=_4b&bQPA163K"bt5$sc+S*GM=%8sq@8<Fr>^7Op9*Y,J"O3;C]M'.%2U)5V!!1UGR6''tcDi"m]61iN-aQ)o?M''A"")3g@mf2LC'qNcd0-4q1j@tlN,-@fZHQaENk>4TWN-GZOoe2Gkql*Yea;=59L@^2%+cj!A)O@k[?M)@oVbj2b`GVsQD,]p'"fnYs$Y>Jt#02JZ\*OlYB(N`<Hf%1ci%A"a+H/sij7upt"9._WZSrZKM>1hL,RQFT(So^o%5pHpp9e6Z?Ec&d7X#+3_ipf3*Sp/P*dL-ZVp/+dAdcgndZ:"I?q?Z<_2l.4E@68;7[K:ToSVXI7Rj_bS=[lI//=3)IA;$#?-g[M,%\1u&78<l$t^>ZoB4hE:4bpdaDqSm47biX0plBf;(.`.,f%lkN(HVnHK:iNFiOj9<E%ZM)m1i\-YZ40?Q$]#3NQqSlpFE%1k<ZXr-%'F^n)/.DrGCHcdMK&ha!N2@ofM_ApATm"'mfk@f,'(!hF9]n3*^$nCm1Ekf_ECmr#$R#2=&MZn@jeIrJ5idW=mBY@up28!CES_3$%Xm)`n/;Il4CKsQ4<+B7KW2DE:9l@(J.N4Bo$);=E*jiQ4Da&]?f(1X'`ti9YmW&^"APpO.]ekmPY>WPg81a5aZ@(FY<E!3$0SLN^%f1VJ`ru%,6_GPG+cS?Z&fa-YYO`3,qRp73Y=E,..&A__]pR(-]?57Ee=FQWjBLnH4K6W"VVjtq_#j.can+,Dp]lAp^Y_hUND;q3j%'R#sb.LmA_`PM>4ih4n>dbkCPQqN&Ze["OO1(V%Tg?03U[,QXZ21<E-+-#^r4%$"h(g.asodaoI.LV9-&L8t:)NnXI-tHO,WnDZH%W@WkFR(V9e_-pL.3M/%+H6Vs)QmW=\C$%<b=`5GmN_$;@ZBA<pnAL8YK/PUE-h+`)LdAnB9@=q*'rt"HPV>(g:7Tj5NnQ#m%a/_W%LWkTg1ftmVDkpr<9d*A4j5V!(a/42PQ3Y7^E?oN8.o"7-dCH:GfKX77r4L"337rK^M1J'e<Uei"YUhZJ\cj"[@L;7D_.;4\L7Sgu%ACYLgCR3#?l.q!9hq9i]I$7XRjgV,\EhKGgLs0EW7^Yt%=95b3,ii]7PEG6Ma+ZQQ2>,LnVloF^0NBb5g.Y:2,`@h??'qps,aH?g%>:b2<U1D:9-CeW.Osd[]8TlEf;\poaN92G@o1IM2!dr@oU$E-\D!dts5+'X<OCkPnWi[&s-:\scaW1eN\XhYRF4V9WbUi(9WU`6H%*]K9VA]LOn5LO1E9T7<A.:S]l#JE9Xae!O2j_q'\&K*TB<\mFfSrG0&h+#b61+jS7*a5%";g"CY8]0W:P<Q1+]Tpaf'MF,5[(40N%m:CUsAKREDE9mVY(/GIOQmA(%)1h&c+cPHm'AL?RGV49+_AI?=K!Si,YmX4&^:A6Ob]d1ceq`u09*=aF-'P?GT*M!As30-3)d"`K%T?-FjQtTRAb^6+p`.2RY2b<[>BoY.2rjW7.''#HR9b$$EMJV@m>lmFda"6)"W;T7b%d93;7N>h!P*g=#6u:DT/^.PTfSN^&4"':2%-tjINbCt'(S0?#g9q<6"N([$3nM7Rd*"T't8<NJpZ1HlkDE`>>'j7#1>""_^%;j:CQBTUkYK2LdHgQbd`(hr%gtJ1&3r2N<H0*qg%e.LTCVM"\=F*f6c"]ZnH3Sao#&Tu<F:L4XqO!NNNjpjF2.*Mupa3\rEKHG+>b]-Wjm(6)%loWeZ6^-4Kc\!X+P*:;7[E%#]>2W*7%"i>[^20+2h.`XPca>4AuUt=KBj)Y-".<K]==bJ:lcDVCr\NsN1J5h/!l/V]@foqo<\)k@HBs09CmpBl,Pull?DR&i9mF&IGe#-V-%hqhd!n%#7U%SP^M'(Z8WHs+EB+=bMdHWR01AH2^Js4.a0oRON4O.a0B'ZeWWj`**%cW_q@p#fAL)JV=u*IDD"M[_,?kS?ctb'A.r%GgJP7#<`V)%^:!qJ/I,&S-L=+"8i9,U9@T&dU^Iq@m3i53H,AjLDQmE@tgKDFk^JBq[j?(<^]".JZ6uENd)[O5\(1N5;M8T?'nc:%2nTR:*L=G4@D0S,:qU9p4a<g@P6_@N4]F&DFGC<$)#.,R4H2NP0<I4"C+QC=h.*FLfD=niDMHa:_E6#QMhYfk9@_K7O3K8B^=A@k%LeW?9@e(=iQGr2Dj^KRl'N0Fq:[DOD3!Q[8/7)_@:`H$2N8IsG@`D;M!@OU;anZPtRmt<V,u?M^lgQ3>,+;`_(rP6V#oIhg!m<7*%`D!kZo!^fqG?>cFGO2puCJ%P$/^MYh@s0knmP'+e]W(?@]A!4`][q23q`0u/IMMStG#i?l*.Z:EpT%kn`JSh'+=>g"q#S:96N!st%]gh49Vnbr]`qu.R%u=hPUt*d)$7;eq0M*jk<^0/BW!6ML1m/KtVEV,2N[:`5qJn;$V:A8?T/>GoeYF'YG",T&#UnN5$13OS^'SUc%?6'[n_(kIs3BtZ[IYhV-;e%=0I^Mk7Q/(B^86Gdf+^4eoX<UsIcr,&k;%<\),8Ot8J,$/?=87."^02gc\0[39>^<$V&'X<VmK7Mh%hSV-JQjghQ`]g#Un$D`4fI(18?&X2p$W1Bpbh+9gm#7slWJp^R(<JjXPUE&FM-3_0p2',[mdBMrFA+I_6qs'@NJMb_,Sp]fIDT1Z%DMleDMu/+-HWY=KC@:[G5B!f;m^"K]:UY_mQH&1Qq&tW;X[P]1ms]E2IJSOqH[d5fg?g&=-oNmkmKLM!PB&h7cVIWQMG1G"_GeXG%Aq?t2=#NYcR8Oh,TuE?6pZ0eJa52dd[:tYncRT^4CWWU*/@15ub<Xj09s#>$&$VjJXcaFB2*(Y2FpBZd'jmsp%u;&(UnJhWZ"2X(%S%6tXAUrdkY/!p/]ZW41<(XJOBi/W'L;IJC!2`&@:,=GhOqZFDAOnR;Uf,JZYK<3"g2g:V<B_Btq9,/=fGsHY'!V:ae:31*>`WD/%9'-=#R\In\D'2?ljp">=\KR5!i]G^ZrBI]%><g67ZQ[D4,_j^?N>E8'QHcjSCT4J[#pT!af^).`L0>*Fn##>pG_.R:IZuT'Gt#`l%gm[bY]:L34oOXg>Y=%K)[DjH@^4!sg1VVHb.VNk3f>Qm$qheu2&aX:3&L7Ob!7DOO5mIBH;c-"fm.A4+dgAZBj-<ceYi)ur`aB4u%WL6D.AVRGI-_1t\@<!Rg*?<7L)hs&L]6l!<`R;6&iEn9nYQ0m!()F_1`1+qS:@8nFd2'P"N,t-a7;4p`G$h!h'%Ch#.lJFb_"(K-%"H*\_$A!;`Vh(->(7P\m\(U;a5pumq]q/OB%C9cG7MhI%b@5R[LX@cmE!N3m9cD7nV.<tV/eor!+$d^)X"?6E]k"2I<`^%g]>`rG%`0(Q6[]?nV3`]nQkg65REJ]`R.tC$YPaqh&`Q?&bNPQ0D%'o/nPf]7hOi`rh23T\G,b6MQ1k2E`3T=MKc:R10kAB@T:%$rHk3blp%nN&*caRoJ3D#]n5l>GTFP8Hn^0&]#[>.=e_j'R#>qk;udkRHQ^&i/:i7&X88QWM*Q"]B,U<@2Cb92@i3qj@6B^%MH)<3#+RHsflO%FM]AV.b!Sbd>gW@&ld)W_hqbF'/CYVk-J!%6h)p:O7s66&W\fqi(/%6`h](K)71=RJ<&I2oVPDB%!Og,&l\_:!#D'oU[TJBpXiA=%>nC7.cYUFgB%r49`'TiQZ%^YLW>;Y3T]u97RB#a1`-Kk!g%QFmG3P-H#_L\IQVsAW0G/pq)>^MH"FF\A6&`+Fd_hpH_=(?V*6]0D%MM^C2eU1Qs'f4Y]2;tLA6$L=WDdsq7)AtFFT40:P^.':9.6Lc=cf5]!'OuGr+:K3Y9!9JNT%^$b+WJS&]`6J4oAk]95M5%P;Q+<W%I="-S0kr^(ZAE]Jn%iCf=aDrf/stc5jgr,Y3DoAChcI1>'LfE6ReF1+6T]>`]F&;+ks<hl3so/?0J+V22-UEV+"q67@4A:*$]9ri%jC#.E^^B[OU8GcSSotW0#riM]m18>f`QBo*4&\W;bQA8`PGA[H6oR(Kq,0i1.TEe)*j.!p1Mc#uk:6r`5^>@<+X0NRm@?U%6g5Rh%@H$34ZcQL$ic\NeR[dJHq.3e^/Vm2?N1HN)qL1aqGV]cO92EPPF<S3+kf@=\+0g%RCdLlT$F4FBkt?4N3krUZJe9U^99$TNn9<94%1sT20)`0(+8709+U%;2!S4tRM@_O)PP;0rp)m?m@j(8OnS7\`^p5f7OJb0tG\Dp@\4S#(Fj:@OR',$J@'mdtko(RI%r0L>kq!FDk%^b*("O&OXj-V`--QXke[c\.9qfsg"r4"S+Z_uBNLkYqA(RXQALg+i<sZ15Tjiu`dHV86`#p(2a\(XBTuc=Y?2/26>4^SV,`s7lc=%9g#[PYE5d)q#P:P)l.,%TZo$eiuJ)?n&#UN3t+E^V]%+ReTM$<VG;$N!ieb_-T9?=p&X6=JXR^UMY,&<90gd"JH6Zk+%UI,<"ULe%c?43r]B;ci+LYW"j(*<Up^BIDA*-\PjuQXhmmVaa<u5E)L:.<VI9!!=49.Yn08+qhXf\!'gaan7h[tL]A_0h]$$XbNOk\XW`ig&P%pQb#6cn3D[SpP)U4u46J.:X%`\Eui"'`F@l0oh/XHn-9n.T"r]IXJfQ%25I%C6sm(f'UeB+lMmTmA*+W.(c,lU-kt)c^&R8K2Yk!%q6A60$tS+SSdT%Z1E9]%3n&i>F%2eIZY8K!81iYEXpM(oUo)W_Eg"qDLpBc:f`n5q2$cc0[eZ&#.I(;3D/kN"7T+n0_e/p><$MY6%ETnDSjU!s*V4:1bPOgQ;k6uR7Hr-@(f:dQH$tig)KN-br6]nfrfhqm#'"6i]Q)+uFf$X4nm$,'k_8JplENj8ko'WSf$DQ3>TPpiA%]Sem9[=>*aIkCu2Z#e0SM<,8AFk%]JI!72uUZOo+Ys,"*E:@]llP`Zt&ueUBP_$6m9$DE#CFgJUOk[KQYLjOlRj^FNM3qA&FP4CH%E][$>7dZ:,pTnS-@;ANfBGFmB:l5Mh@&7d9BU9*FZ*r'AF2PNS!"^H&?+Eqbd2!)c3HHn`kPr"AX,:4l#M5:V.XLCd,BK@[:.EMp%X)$m2`6MY-(KM\$a36Ukbdigbo7#D<R6,Rt;1#a;2J+?fX'Bi:-L(C[Kr3^-o:r";Ea3_`5,Gg-7],C[F34LM,L+k^,&QZ+I9QOI%VNPSY^T<Y!T*i[HNVd"nE(_rC9PHeG-BNP\Tu^&A\r/FA)0&E_.:$3/NgfPJ(Z_*Q1CtSUINZa*P_(?+?"u\KohhHAA9-]W\F6cF%:n2#UQ1/+%E";!8p?qJ-iTD6BC3IW\WEji#1kj"`_A\]%Z]5N&hcfcAg3eo2L/[?$hE1H#8`oFG2@4I<6'p$SY#>r+T%/2I8Om[3%SUA?=!3+\%,5;YiLLkLN.Eq7(Ur*9m$Pc7E7I:'g;aM/@e!s=Y:62jW$rl&boIH3)&ed0eVf&^a4F(d&&E_A(#b>2$G-Sn0,/bQr%:X"[/!?L6;*GUQ[)tYsJV_W:VJ6AUQ`+$WcO[L:*8Tqh[S4Xr(n^(1.8H=m>b!j<SP%US+!kT>WVhr?f[I7&[EAQFL;fnC"QL*\n%cT)Mu2f2h[7O5=o^:V;Bb?lQ;n0,_`_2r=2Wn\b;Pc;)1/:DeraYN2'.q2E'dH.*P_XK=<e;50nF]V--SrQcQF3e;,;PYk$d\ldg%a")&k+HdG+jK7WuqKM9c\3,su+FJmflro-X:h79!FN66VPsIb!_F9m'W?A^nG)lH5)MoG3=!/ZQ"GYYE6VF\]o+3r%bjC*(j?ukU%:NW(*@"!s^0`(6LS4=:A'.5_lFtRfur&2qR`ai#C=rOm[-`%GiR$`O"lY,;5hA/U[(7*3ETg@-$:qB`VfBTr:Li3QT*Xs_7+SiJd%$qYE"CJO9<V;TC2,7+jTWPfuSf^uPd-*f9@PO/S*[TQS*'@UP[dVq6ZRq5P%<OUu>OAi,;;Ru1h4Um[WKPk"o])Q.todGl,$3OK'%cBSV+7(2J<T\KQ$"$1Q\P[S9)Of\oJYH.87ZXRd<6Fnq7cdFG"1cB1kQ[R#]Zn(s]GM$K)E]!/_?=V]/U?1$qU;e-'J,>8jDM:JO%[9_OY4O`oro3EEA:N)p(jW!jJ$/u<"A1W[OO)lg(QVWJ!qX(mV/3!Ecl%gDRI70.q5,+(6LA]dflnY;qk3hp:&WN)doV0>E/:[PW%l%gt$d=d=bP(g\B?c^:[dRD3>L_lG8G\bn^-m@T@aCm4NhEn*`MhnhRd<cJq:.0]qZ\XCK0'skBS]J7n9F'T$fcmUD*pu?7(D6+$%/4<iZgBo3Z4NI#sib%^$P,F,fFbb[0GK>+^=iNP]CKO0H4$-"'.R^q'f:%_^7(gLZ#%LkBj^k2d[`_Cr<!jT?7Dq9M0jd>]Kd:kH%&l6tE1(itlC-?I3)s3jHN6_V+4B=XRhQ@"uPs,b1F_]Ae9VFF(@*@D7&Uh,?]8a2KP=2\3L5j\:9l0b5%A^KG[a%GG6X(LElZ2?V%8+p65TtF))9MT(?U;f.EJY5-CfQ.Bk;ik90.`;<4DhV/Dis[eUM1."s;/+FY1EgLs3af`qV&IV;W#_!Y5f=L;OjU>1<V)`d@gjY(%c4(nZRf\D5@4oX8e\^d2_%"!?GEO?TaI(>YnYbfFQ+T(c3]gG9XZ[R.fEIBo[HO3lr.$II4g92SiEY3hf^]_WBe%(/:L[C`@`9?)%+Dr!bQlA:Kbm+7G<[k7GeY93GZ'=3^%M1L[3WPS--:Ymr-8GXsU<('mk]j*SdUg?=6N5OJ`O0YM%Dl)3BMW.l]CpIgO>./@:7YSd%b,(1B;BCp-/h5h*SQ_4jU,k(,'J^2AS;Cg+PK*b8=Hn[cqjL]tqBZ6D84PbdUp$N=^<@"hi>2L>K2dCN7)DRPD'kj[Y[TAJW@PJ]%G#[kug5\F3_F9t[.YSk"r3">q"Hi@mm?>5;K-4(qLo-V0='uQ]5auoc1WSR'WG(Wu-:-;9iVo*VTo!$*[B8XlTj8]or4A75kII;"%S$G6:;4HZ&S@."USRA$9<3G5s*6R.G_58t4Zj`O"+.M=P<k95[Jb2j:PTGajWaRP(9dP5dc7pqp4D<5d99:i@:nTiS\omGY[b,rS%4`;G>b^0`8d:L_N@g/SO.["^"2,r!>7#Zh%`$23_H$!ZFi6@g5?nSWnn?,Hcq7[A(DY@ZS$cSVEM[pkX3Q/`](=@Q&qTqRL>a$"(%N'<iZOPLd4dPCHONMGfM_hCLLOg',\Y/X4b9s#/S:a@f\e'ekU[AiNNfJ@"s/JfSP@#uPu8,@=^5[nTLrDe9.Ve^p"]X"]=9ie/;%Srl=aFV)9h`OBH@WXVMLVe4k8f0t6Cc_`ctho5BtDcN'E_DW6'WTJ!BR'F"BSlrqU@EKQ[HheHJJs<lpHQAi-N)lOpGf!251Ll9Z%LpZ(5HRq&Bhqhg).M\.!%[bn(`C)(sk/qI%k:s)__e#DTFl2gX0:g@,Z.\fnl@FM(+60YQ@#g`:aJBgB(35$!?*']'[o7buAd'37%dYQ1G#[`b[(q[[f7n.[0QfrY3D#]E^\<2)Y]BAnrU+g4TiTqcppQNe4Qd.O&6Bj5pfkD5g7,;Hs25]ht:;Rj8P:CRV]h]5!jhlOM%C5n7'Adf907?,6f^kr8O8\A#a6he8!;`R*Skp-k]"V?sK>mQ'7G(]<6M/"&8`c:';#S65af7Z,YZ**J2.dAC]I%!+XNhh5K$s*V;%kseC:SoCYl*GQm!M#n?1j#%,:'AC'bc>dJ`PVP]s:!V$tc?\h7q7&E?YG:j%):@f=JB;aP+^9C"AE)!8/5b\S]u0@(WN*[AVfpM,%@\r7=*/JRq,8`nH!G(q1C0edfS$$d\kuC@k<BBWH\X8uX:u,6)i&cU>PTuM]HL7$]aeI?kRtZ(fUNh=eiSm%(\iY^a?M4a.L[5rW%:9h_AH#nVDl5NcL`U9/.]u@R#q2111cu/P$/t/WA^9WSjCf^nZg,B`mMYaS'&)C4KA3^r[WUIfM7u>,W_M0gP'%3XDaM>-F*&/<*%O6/kF;F@e72^^`M;:FjaD\MI,51f/6JuNnC,gC^o;6_,Q>18o"=It6?m2Zu"r[OZ_J4hCI."U?_TGeL'gH-s7qi9(\=6MtHN?_N7%/s`HOZ.'fop(#:'^14OJ@P-)Ui@cs@la@c1FY#I^hqhcXrW\h&kcH*c*=H2n[s(sNp)R*2*gQ7]alj:<(`a*`Esnb\;)QK>N"-(.%4?"!23ZPZDIIn'qJ8DWkF/qrSUNo#ENfB_A;/2kRl:)#kQ!dge=WQuGJ9](>&OB#7?+jimaG<t>!]-kZC>)(E1og`,2sEF2X2Bcc%P.e(\i4X`UV:CJ&M1I>u*KFSI@2L!p`XR^NiM[08E21<J2'$]q3ZLuQ],kR!F?#`O7rk@l!+Btgb`*+28Dg:&UVfqHYEOnT#?$=g%UVlUKDB27[ZsSMBYbbT`%U^:enM!"Sj^klYd6Si[a@6Cs4a:4j%`fSHY=8bPP0j:Pp5@<!Q-34s<X0o;3[dglf`?d"A9<X1Ql(Db%c]%'!cUjlA9-I'@,b)[Xo]'\-^`!hSdqoR"+,=u93<Nl7aI([$0ME+fjYHSHr:AV(JE;&]C^qiG)V<n*#B[+E2/8Q(_-)k9%WGln%:$8D-*5Gke??;S<??_L?EK\RT*b"P:RffsYeVhZqOK^`UN(Y0giYS'd?3)LeT!r<QR#CJMDKCW9`=?r?fmYe=J2+In'E;Sa%s'Ne%@._U5'J^[ImZV7'3*a$R;;l@.Iba;6DQ*Pr#EMIn'=Ic,Vi9%-f4$#gEYtV^q['$>_mT?)V+%OT9FKTT9WmPR>"mIIG)J3mc(=ac%4)EB$F#(0U28oXM`SS2Bb:ti&ZAI1L>A=sNA!dV8)m6B).]$0u-1aN<>jVr_1F1`O%*S9];rdMB?dcCi_e%D]b),M+_.A5r0Pr;6%P37"5i#(U',HYFI'U'MK.=+s+#)kESCEo-ILg(2V@/M%2L;^j?_`5T\Rpj(P^(]8/*e4D(P\i*@QWS!Vfo5ASjFNC3<Yqir/htUc%Mr/Ic@;;%5)H\^->2<luP<DX[&&a;N8[^^"(M55NY,\#UL8[7.4oA1Bgm!07;THYJMe`_T!anjsW]!OAp!aFnH7k'IXK#"<8?E7r%+qW2-?iob4]FKd.BpSS(\(ID6'!5_If>+%;_YbfZiofc.>>6i9S#8@_.ph*I_r&6HI<9+cLTV@hT7eB1p9L$J9%Cm?eSR':W00%^%BKOGuiChN"j)rXtUU..bpR1]aR;FA\K7qg,dGVOE><apPX.-Oj6@KJJl;q^Ti$hplQ,RJR,]Pf8bGia':DTbCl_2"]KNe;jW7XI*%V"%?':J2c,[@3Nj1oWVT&&l(h1s&1#R'iIN5hJ*qN#:EmK'V)?g:0VH3D!#B@7s@[:N7a%b5dZNd60k&]eN+sUS9)U1H">8GG8PG%N:=<]ZZHVTPIM!oUP^b"^$?HD2Rn(p;D]_0l/G3r5)LJ,!c8ujk#-9NM+q0S</a,O,kt$N/pOT+1IQkEH)2dOWf17NjV?7r%8kc.%O(!40]u2nj[j5e/TWW^fN5V@n[P9Opob^2o/NYn))AA#+`,Vf*BmS[b!d5&A.:\P0"NJQr>o:2YWSiMB$jfrp"QpU]XRWa$bDa]8%fYkq"pK0F,2,0MFG8M^J4_C#h`6JQii#Dd&&q21+B\^K]Kn6sG&f=UC>W@gDQ-uX\C_AaU0K:VS'Y%Y^EIf)b$dQKr)nitdktPH)%L8\6IIGRi$:m=,*.2Fu"+eA,/T^H*h(Voqr:*O1/OKhZ[@$FfjQPa6SHG(H*6^?s"Qh2Tl)'GS6C.CT,khr+"I-_\49uYZEEIk8K%:F"k=,?`fL50NH$_q8>Y,5)T!`OUdB[ug`Mj"4bG=G<CZd?74;63*&p6TBr.@t][Q>rqg"Z(2dt.Y:tE$[,DkcAUE5NfBkGDaE5"%b]'#ZO9(JlVJSb<MKP!I$+t,gW!FbGFcHgW"p7f)XNsp0+gXAh-FCB0nF!W-M@4=4C;BDc=Fe8H0g^PL0r:n0(Pp5>B8^fF>K9Y_%MP\_+MFT!?G<:XSP"msYocB-R>\&9D;?u#A?5&V5%*@?nZ<2#=PU^GRJDM^UiO(@a>=9>%md]/mk8b91Hb;p"JZIELOCgu"SlNaf%N\2gO5UK[#7jk>E!cHOGR0VA)(T!?eVLm$dTq1c0Vu[h:.1^*g68M1@+::Y1$WI,qY^f:Q%K-Cgie#D"KG;0fjB1,LnW(WTk3H-4%8>Em\%#PnrN#="L3\KNVMa$03*g9WrF>Dm5jrW\@,%DoG-^MqR)d6QHMoold_kFnHBjA3dn;1Ak&H0g1ePj5#+)0@>$3Y]Y9TC_a%U`VPej`uc4-[&\RSi@EJ'80R#S]9GgFh+GRFEY@8)1j'\kt=F8c+SnbEHaDYI*1BL"PdOG7>?!uNceWbGV$C49C5]Qd%8r`E;c5p%JI/2u%pY+u#c:723^r`%OA#`_+XXEfrNf?7KYTTpC+kF$:=[?pG!WY\K\jIc"umEnP]=j2CZd&Td%rJic?5I\D.$,52#,G;%a&Bb%l`EO0DQ%83EA5OP:O-^N82^K*Il%tBZuItY!\2W!j8Cl#!V*HYD@YfM;B@@5a!BMh-p3ggR$9PB9r+G^Mau?0h/0`h!(_]R&SZ2g%2^)l`*SYk_fIOg,&MpGpL=oS<boCl1A!P4PApFir[^9EsP-65Z7^D1:1o@ph:1"iDm<s7&$a\1#Le+Ubl&;Kf?'p]I[AjV%)?-p5%,I#i#i.$:DH]NkP,@b32E2S8V2"6f`4B7kE)TTiTj<b<=R*3/I2cdF1+cS:Zb.Z)*W\Q-QB/pCtjVSe*'aD]a$moT8J4%-5W0Mjf%7Dkh;!X-I^lQ/^>N.$!WKfK5VO,XcZ4-ECXbo*a6RpEo'P693FV1oTb-Ul;G#d!@4Yq@QmA@Y/l`R7p._B%bI]OAHoq_<-r*n`6:%Od\(R^:62`D,rf;At$rYj4m\r,-`RXT,NtH>!l2:*6T>/Dssq.m5l)<PgrK(k%UM4q0H]+:QWO0H#\G;Wm;m2`iuGe?r[R178.;%%a/<KY8#1e9N\/9_1CgM/CG@3BD:m%ZP+&G;)!\LPRQg*%!6JGG[(Kc1j>\ks&ujB[#)FZH'b,Si,.BJ\QP1'9Hu;dJ8EuUQ42WAW%,%lroQC2D3"fmXL(lm36EskV<V->ENe>W@ehe/9>9c3d##ooMAYK7C"I/G*^gq\gY[*%oX5lD$8p"M3=-!l_uT[=_`6=#R?OrnI7%[BImndTFHr2u8T:D.3RkI]3Vko(PdeAhFUOQtAI:Fs-J%1%2m3h47&P/2P^&$?dB=0d<g]p:(u5l83#:+kF(r&s=OLZ1/GI!6h@(%K^8c6N7T<fFDQrK+G<E_Il-4,!a7KN'cqV\?m^LS!4dV$p<\AG$+;^3Tj<:=>u^s3D.<=9\H^q+D$64o&cg>#,L_8t#ijPiR,fQT%RcL?lM+D:lO@+\f>pHJ9bbC!4Y#2#\\<H<Khu^S*-ai0$R`c,l.B2WJhG8,rptI&uY:/J0i%"*D6b=&GOpPZXU)O4+if@q1.KZ%)%@?pm[X5g(f?N\u[Yip:k8Q$\\^=qSrhN`U`rtdI:J4P[A_^TR8N-*Cl3E\.G_)h:U=-g)0]EDP5U/>3N'on3afEGPGA^,>HT<mff%$&)];f`b26^rAL2prkIqaJWG:#+Ac&V"0WV?:'/FJq[?$-J:[f9!j0!(##t0!mQ9.(2mU/X&Q+hIK?e],X):HPY,iV'F%WVD\<BX%6k0m^FtUj5Wst"s&/B2m=DC`6R-%d!.P$fZ'C+e*k=!b?,!L<UT&T+"V\(ndBnJbIjh-Ob.=)m!.>&p><G(D:6VjC^2g!0kLJ^%\%Ektn]UF!JHJP!AJN8Nu,C<+s_Jh26(7sWNl^pT1M9Y"M&OuQ:2Okm5bPdT7LT7s$&^5oq9E,Ut0]1i7V*E3e+VL0lDR'FF`$sCN>%@dW64qCY@=<d)oo@]nclHf'Ds2qp+LX9%R*emqUnIZ:k%F`@or('7chH\]SL^WNL5P,T04r=V"_V+ok(@HlNj9TQ!$]S]YklpqI7%NheFT45>mmJdcqZ&P#_bFr)&em77lec#KO(WE>Gr5AoC$Re`2bGKiMt03-8#@>>KXVeNM].,diS!D=dic4oVFE@>D:%],-KT`d16%TE.h!,r)UQEB0:lPN>B1LD!:d7m<-`!OY\BR=l;!QR1(J<:F41:!49-,VJRBWE@0!F=*8E:Um#gGQsn',FqDdUbaH0H6s@_f@lX7%[P+&!ntC/7H4/"/-*42R-)D&6meN*qiM9o($X'nM5EinP3G1O>?n'WI_p0M]9ERt5-@n1#EnZoq=I_tX:d$UX-HV?HWR+!='M)iC%F=;]8orm#A'Rd7H"s$_h=WC&1RkF$'\uE;b.$`*IYB20-bFRXJ;G"#)4d7^2LQZ.r-t0(HE3Vd0,bKu89%[Mj%k9`,YWsN#JfdTo%Br@MjLQXG:*D3VZl:csG==h`N5Eq&ebXmR&XP^%Qg7a2Z&t7j9;BTs-"m0TKVi'qu&shLP$c``'/EfMS8e7cN>O8k^$<B3b\8&E7%0@b?]e.3k,@Wdh1TbRC"*D4sW-]\g%Q/6]Ca3Dng/c3;2q:S"2ig2n-pj`81n`0)Ps8=l@r7f9lGsYUd^\GEZ^Nk;+r0P0)+2@gQ%kO3oqn`/s(s7Q-$q3R/WqqZ2ja,b`AnUI(jb":qA/GHX2I`Gp-7/I4IrPSC0XJO4-ncoPNrV_dAIfHD/ILc#is7r.F?i9k`5Q'sD%^]!s'f3eRKnbC_^^\e#NDpT"Hp`Ii^I9@XVs-o(!r-uHYlPHE)`P(tdE6fsp&+'2ga+bml]PG1JmEp(V;hO@s<h^cM5fJ:$^ZLbf%Iqt0gIr_sSHmr^9FkbD[;C<R)rY/%DH.P(Kq2Z1kLB-KY[[+Y<->TMSqVE<$o[,gt`Ad-4fN?3o3tE)#jN0QT\5kV?,oL*M!`Xjj%Sb'KS\%?^BQ7"QcSkOjS(H:Q./6p9"'*cZ8jLZ^5N`>5t>eglRke4kER=C\22#cOMI1Z\^k0)\MfjD5C^]*SlY/A-64to4uVuQX)%p!8-`Hd%8Or%ENplVd`@g]-s,3Q8Ig?i92EDnl6h^]2RQk>[RNhgBnMleha)g]++bs8L(-J+tu"r?&ee[f*,U<IV6V^N='3Z$F<3%NT@D7aaGKA?IokeMl13k80"9/+=[F54p=%0'M\"GE,\D$?3FB!<rpAcp,?5.lLMZq]\XbKkR;feOiJC$LdRKtK.d@tP$LeI,OH6;%W!W]@<LjVA`66Z5Nr]qgF%H^qn<t7ue;AQ`*l=2++oPU0f^$a=]ls2Ns7ErATFCZ.]h[(lrVF^`Iei=/:]K\R^\QW&rpAG^rkj6\%o!=tef5H-8m6CO<c0q7]rp]$Ys74G7qsDE_^]-I*]5R`Fr6*-!J,&_Ec>!">a1qP5n,Fbso+NYRZ_.2os733DruXCGG(9~>%AI9_PrivateDataEnd