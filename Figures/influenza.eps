%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: influenza.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Jason Schwarz
%%CreationDate: 8/7/14
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 10474 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD1AFFA8FFFF7D7DFD7AFFA852A852%52527D7DA8A8A87DA87DA87DA8A8A87DA87DA87DA87DA87DA87DA87DA87D%A87DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8A87DA87DA87D%A87DA87DA87DA87DA8A8A87DA8A8A87DA8A8A87DFD07A87DFD07A87DA87D%A87DA87DA8FD15FFFD04A87DA87DA8FFFFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FD06FFA8A8FFA8FD08FFA8FD06FFA8FF%A8FFFFA8A8FFA8FFA8FFFD06A87DFD0BA87DFD08A8FFFFFFA8FFA8FD1CFF%A8FD1DFF52A8FD057D527D5227A8FD067D527D527D52A8FD0CFF7DFD04A8%CFFD07A8FFA8A8A8FFA8FFA8FFA8FFA8A87DFD05FFA8A8FD1BFFA8A8FD1D%FF7D5227F8522752527D7D275252275227522727275252277DFD0CFFA8FD%0AFFA8A8A87D7DFFFFFFA8FFA8FFA8FFFFA8FD06FFA8FD1BFFA8A8FD0BFF%A8FD0BFFA8FD05FFA87DA8FFFFFFA8FFFFFFA87D7DA8FD04FFA8FD0BFFA8%FD05FF7DFFFFA97FA9A9A9FFFFFF7D277D527D527D2752527D5252277DA8%FD05FFA8A8FD1BFFA8A8FD28FF7DFD18FFA8A8FD09FFFD05A87D7DA87DFF%A8FD047DFD07FFA8FD1BFFA8A8FD0BFFA8FD0BFFA8FD0BFFA8FFFFFFA852%A9FD05FFA8FD0BFFA8FD05FF7DFD0AA8FFA8A8A8FFFD07A8FFA8A87DFFFF%FFA8FFA8A8FD1BFFA8FD28FFCF27FD19FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8FD15FFA852FF7D7D527DA8FD0BFF%A8FD0BFFA8FD0BFFA8FFFFFFA87EA9FD05FFA8FD0BFFA8FD23FFA8FFA8A8%FD15FFA852A87D527D7DA8FD04FFA8FD0FFFA8FD07FFA8FD07FFA8FFFFFF%A9A9FFFFA8FD07FFA8FD07FFA8FD07FFA8FFFFFFA8FFFFFFA8FD07FFA8FD%07FFA8FFFFFFA8A8A8FD16FFA8FFA8FFA8A8A8FD17FFA8FD10FFA9A8FD05%FFA8FD31FFA8A8FD1BFFA8A8FD28FFA9FD39FFA8FD1BFFA8A8FD0BFFA8FD%0BFFA8FD0BFFA8FD04FFA9A9FD05FFA8FD0BFFA8FD25FFA8A8FD1BFFA8A8%FD28FF7FA9FD38FFA8FD1BFFA8A8FD0BFFA8FD0BFFA8FD0BFFA8FD04FFA9%7FFD05FFA8FD0BFFA8FD0BFFA8FD0BFFA8FD0BFFA8FFA8A8FD1BFFA8FD29%FF7FA9FD38FFA8FD16FF7DFF7DA87DA8A8FD0BFFA8FD17FFA8FD04FFA97F%FD05FFA8FD0BFFA8FD26FFA8FD15FFA852A8A8527D7DA8FD04FFA8FD0CFF%A87DFFA8FFA8A8FFFFA87DA8FD07FFA8FFFFFF7FA9FFFFA8FD07FFA8FD07%FFA8FD07FFA8FFFFFFA8FFFFFFA8FD07FFA8FD07FFA8FFFFFFA8A8A8FD16%FF7DA8FD047DA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFF52F8FD052752%277DF85252FFFFFFA8FFA8FFA8FFFFA37EFFFFFFA8FFA8FFA8FFFFFFA8FF%FFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FF%A8FFFFFFA8FFFFFFA8FFFFFFA8A8FD1BFFA8A8FD12FF7D7D7DA87D7D7DA8%A8A87DA8FD0AFF7FA9FD38FFA8FD1BFFA8A8FD0BFFA8FD17FFA8FD04FFA9%7FFD05FFA8FD0BFFA8FD25FFA8A8FD1BFFA8A8FD12FFA87D7DA87D527D7D%527D52FD0BFF7FA9FD38FFA8FD1BFFA8A8FD0BFFA8FD06FF7DF827522727%27F85227277DFD05FFA8FD04FFA97FFD05FFA8FD0BFFA8FD0BFFA8FD0BFF%A8FD0BFFA8FFA8A8FD1BFFA8FD13FF7DA8FD14FF7FA9FD38FFA8FD13FFA8%A8FFFFFFA8FFFFA8A8FD0BFFA8FD0BFF52FD0BFFA8FD04FFA97FFD05FFA8%FD0BFFA8FD25FFA8A8FD13FF52A8A87DFFA87D7D7DA8FD17FF7DA8FD0FFF%7FA9FD2AFFA8FD0DFFA8FD12FF7D527DA852A87D52527D7DFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF27A8FFFFA8FFA8FFA8FFA8FFA8%FFA8FFCF7F7EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FF7DA8FD13FF52A8FFFFA8A8A8FFA8FD18FF527EFD0FFF7FA9FD38FFA8FD%12FFA852A8FD06FFA8A8FD0BFFA8FD0BFFA87FA9FD09FFA8FD04FFA97FFD%05FFA8FD0BFFA8FD25FFA8A8FD13FF52A8FD06FFA8A8FD18FF7FFD0FFF7F%A9FD38FFA8FD12FFA8527DFD06FFA8A8FD0BFFA8FD0BFFA8A9A9FD09FFA8%FD04FFA97FFD05FFA8FD0BFFA8FD0BFFA8FD0BFFA8FD0BFFA8FFA8A8FD13%FF27A8FD06FFA8FD19FF7FFD0FFF7FA9FD38FFA8FD12FFA87DA8FD06FFA8%A8FD0BFFA8FD0BFFA8A9A9FD09FFA8FD04FFA97FFD05FFA8FD0BFFA8FD25%FFA8A8FD13FFA8FFFFA8FFFD04A8FD19FF7FFD0FFF7FA9FD38FFA8FD12FF%A8277DA852A87D7D527D7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA87FA8FFA8FFA8FFA8FFA8FFA8FFA8FFCF7F7EFFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8FD12FFA852FFA87DA87D%7DA87DA8FD18FF7FFD0FFF7FA9FD38FFA8FD12FF7D527DFD07FFA8FD0BFF%A8FD0BFFA87FA9FD09FFA8FD04FFA97FFD05FFA8FD0BFFA8FD25FFA8A8FD%12FFA852A8FD06FFA8A8FD18FF7FFD0FFF7FA9FD38FFA8FD12FFA87DA8FD%06FFA8A8FD0BFFA8FD0BFFA87FA9FD09FFA8FD04FFA97FFD05FFA8FD0BFF%A8FD0BFFA8FD0BFFA8FD0BFFA8FFA8A8FD12FFA8A8FD07FFA8FD19FF7FFD%0FFF7FA9FD38FFA8FD12FF7D527DFD06FFA8A8FD0BFFA8FD0BFFA87FFD0A%FFA8FD04FFA97FFD05FFA8FD0BFFA8FD25FFA8A8FD13FF52A8FD06FFA8A8%FD18FF7FFD0FFF7FA9FD38FFA8FD15FFA852FF7D7D527DA8FFA8FFFFFFA8%FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA87FA8FFFFFFA8FFFFFFA8FFA8%FFA8FFFF7F7EFFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFF%FFA8A8FD12FFA852FFA852A8FD047DA8FD18FF7FFD0FFF7FA9FD2AFFA8FD%0CFFA8A8FD12FFA852A8FF7DFF7DFFA8A8A8FD17FFA87FA9FD0EFFA97FFD%37FFA8A8FD13FF52FD07FFA8A8FD18FF7FFD0FFF7FA9FD38FFA8FD12FFA8%527DFD06FFA8A8FD0BFFA8FD0BFFA87FA9FD09FFA8FFFFFFA9A97FFD05FF%A8FD0BFFA8FD0BFFA8FD0BFFA8FD0BFFA8FFA8A8FD13FF7DA8FD06FFA8FD%19FF7FFD0FFF7FA9FD38FFA8FD12FFA87DA8FD06FFA8A8FD0BFFA8FD0BFF%A87FFD0AFFA8FD04FFA97FFD05FFA8FFFF7DF852275252A8FFFFA8FD25FF%A8A8FD13FF52FD07FFA8A8FD18FF7FFD0FFF7FA9FD08FF7D275252527D7D%FD1EFFA87DFFA8FFFFFFA87DA8FFA8FD12FFA8527DFFA8FFA8A87DA8A8FD%17FFA87FA9FD0EFFA97EFD05FFA8FD07FFA8FD1FFF7D27F8FD04277DF827%7DA8FD12FFA852FFA87DFFA87D7D7DA8FD18FF7FFD0FFFA9A9FD2AFFA8FF%FFA87D7D7DA87D7DA8A87D7DA8FD12FF527DA8FF52A8FD047DA8FD0BFFA8%FD0BFFA87FA9FD09FFA8FD04FFA97EFD05FFA8FD05FF52FD25FFA8A8FD04%FFA8A8FD13FFA8FD07FFA8FD19FF7FFD0FFFA9A9FD0BFF7DFD05FFA8A8FF%A8FFFFFF7DFD13FFA85252272752272727525227A8FD1BFFA8A8FD0BFFA8%FD0BFFA87FA9FD09FFA8FFFFFFA9A9A9FD05FFA8FD05FF52FD05FFF85252%2727277DF8277DFFFFA8FD0BFFA8FFFFA8277D52A87D7D52A87DA852A8FD%1BFFA8FD19FF7FFD0FFFA9A9FD0AFFA852FD05FFA8A8A852A87DFF7D7D7D%FD11FFA8FD0BFFA8FD1BFFA8A8FD0BFFA8FD0BFFA87FA9FD09FFA8FFFFFF%A9A9A9FD05FFA8FD05FFA8FD29FFA87DA8A8FD1BFFA8A8FD17FFA97FFD0F%FFA9A9FD10FFA8FD057D527D7D527DFD1BFF52FFA8FD1BFFA8A8FD0BFFA8%FD0BFF7EA9A8FD09FFA8FFFFFFA9A9A8FD05FFA8FD0AFF5227F827522727%F8522752A8FD19FFA87DA8A8FD15FFA87DFFA8A87D7DA8FD17FF557FFD0F%FFA9FD11FF7DA8A8FD23FF7DFFA8FD15FFA827A87D7D527D7DFFA8FFA8FF%A8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FF547FA8FFA8FFA8FFFFFFA8FF%A8FFA8FFA9A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA9A9CFFFA8FFA8FFA87D%FD04FF7DFD04A8FF7D7DA8FFA8FFA8FFA8FFA8FD05FFA8FFFFFFA87D7DA8%FD16FFFD06A8FD18FF557FFD0FFFA9A9A9FD0CFFA97FFD07FF7DFFFFFFA8%27F85227FD05522752277DFFFF7D52A8FD047D5252A8A8FF7DFFA8FD1BFF%A8A8FD0BFFA8FD0BFF54A9A9FD09FFA8FFFFFFA9A9A9FD05FFA8FD07FF7E%A9FFFFA8FFFFFFA87DFD04FF7D7D7DA852527DA87DA87D527DFFFF7D2752%2727F87D2752277DA87DA8A8FD1BFFA8FD17FFA9A9FF7FFD0EFFA9A9A9FD%0BFFA9A9A9FD07FF7DFD09FFA8FD05FF7DFD0FFF7DFFA8FD1BFFA8A8FD0B%FFA8FD0BFFA8FF55FD09FFA8FFFFFFA9A9A9FD05FFA8FD05FFA97FA9A9FF%FFA8FFFFFFA87DFFFFA8277DA8FD057D52527D527D7DFD09FFA8FFFFFFA8%7DA8A8FD1BFFA8A8FD17FFA9FF55A9FD0DFFA9A9FD0CFF55A9A9FD07FF7D%FFFFFF27FD0452275252272727522752A8FFFFFF7D27522727277DFFFFFF%52FFA8FD1BFFA8A8FD0BFFA8FD0BFF7EFF54A9FD08FFA8FFFFFFA9A9A8FD%05FFA8FD05FFA87F7FA9A9FFA8FFFFFF7D52FD04FFA8A852FFA8FFA8FFA8%FFFFFFA8FD04FFA87DA852A87D7DA8FFA827A8A8FD19FFA8FFA8FD17FFA9%FFFF7FA9FD0DFFA9FFA9FD0BFF7FA9A9FD06FFA852FD05FFA8A8FD14FF7D%A8FFFF7DFFA8FD15FFA852A87D7D52A87DFFA8FFA8FFA8FFFFFFA8FFA8FF%A8FFFFFFA8FFA8FFCFA9A8FF54A9CFFFA8FFFFFFA8FFA8FFA8FFA8A9A8A9%CFFFA8FFA8FFA8FFCFFF7E7F7EA9A8FFA8FFA8FFCF7EA9FFA8FFFFA852FF%A8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFF7D7DFFA8FF7DA8FD15FFA8%7DA8FD047DA8FD16FFA9FFA97FA9FD0DFFA9FF7FFD08FFA9A9A97FA9A9FD%07FF7FA9FD04FF5252FD14FF527DFD04FFA8FD16FFA8FFA8FFA8A8A8FD0B%FFA8FD0AFFA9A8FF55A9FD08FFA8FFFFFFA8A9FFA9A9FFFFFFA8FFFFFF7E%7FA97F7EFFA9FFA8FFFFFFA9A97FFD04FFA87DFD0BFFA8FD08FFA8A8FFCF%FFA8A8FD1BFFA8FD17FFA9FFFF7FA9FD0DFFA9FFA9FD08FFA97FFFA9A9FF%A9FD06FFA9A9FD1EFF7FA9A8FD1BFFA8A8FD0BFFA8FD0AFFA9A8FF7FA9A9%FFA9A9FD04FFA8FFFFFFA9FFFFFF7FFFFFFFA8FFFFFF7FA9A9FFA9FFA97F%7EFD04A9FFA9A9FD1CFF7EFF7EA8FD1BFFA8A8FD0AFFA97FFD0AFFA9FFFF%FFA9FFFFA97FFF7FFFA9FD04FFA9A9FFA9A9FFFFA97FA9FFA9FF7FA9FD05%FFA97FFFA97FFFFFA37FFFFFFFA97EFFFFA97FFFA9FD0FFFA9A9FFFFA8FD%1BFFA8A8FD0AFFA97EFD0AFFA9A8FFFFA9A9FF7EA9A97F7E7FCFFFFFFFA9%FFFFFF7FFF547F547FA9A9FFFFA9FD05FFCFFFFFFFA9FFFFFFA97F7EA97F%A97E7FA9A97EA97FA9A8FD07FFA9FFA9A97EA9A9FFA8A8FD1BFFA8FD0BFF%A9A9FD0AFFA9FFFFFFA9FF7F7FA9FF7FA9A9FD04FFA9CBFFFFFF7FFF7F7F%7FA9FD14FFA9FD0BFFFD0BA9FD05FFA8FD15FFA87DFF7DA87DA87DFFA8FF%A8A9A8FFA8FFA8A954A9A8FFA8A9A8FFA8FFA87F7EFFA8A954A9A8A954A9%CFA97EA87EA954A9A8FFA87FA87FA87E7EFFA8FFA8FFA8FFA8FFA8A8A8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8A9A8A9A8FFA8FF%A8FFFD04A8FD15FF7D52A87D52527DA87EA87EA87EA87DA87EA87D7E7EA8%7EA87EA87DA87EA87DA8A8A87EA8A8A87D7EA8A87E7E7D7E7EA8A8A87EFD%05A8A7FD05A87DFD11A87DFD05A87DFD05A87DFD0BA87DA8A8FD16FF7DA8%7D7D52527DA87DA8FD05FFA8A87DA77D7DA8FD05FFA8A8FD057DFD05FFA8%7D7D7DA8A87DFD06FF7D7D7DA87D7DA8FD05FF7DA8527DA87DA8FD05FF7D%A852A87D7DA8FD05FF7DA87DA87D7D7DFD05FFA87D7DA8A8A87DFD18FF7D%7D277D52527DFD05FF7D7D27A87D7D7DFD05FFA87D277D525252FD05FFA8%7D527D7D7D52FD05FFA87D7D527D5252FD06FF7D7D52527D52A8FD05FF7D%7D527D7D52A8FD05FFA87DFD04527DFD05FFA8527D7DA87D7DFD18FFA8A8%A87DA8A8A8FD05FFFD04A8FFA8A8FD05FFA87DFD05A8FD06FF7DFD05A8FD%06FF7DFD05A8FD06FF7DFD06A8FD05FF7DA8A8FFA8A8A8FD05FF7DFD06A8%FD05FF7DA8A8A87DA8A8FD4AFF7DA8FD7DFFA85227522752A8FD7BFFA87D%A8A8FDFCFFFDBFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-08-07T20:23:15-07:00</xap:CreateDate>
         <xap:ModifyDate>2014-08-07T23:30:28-07:00</xap:ModifyDate>
         <xap:MetadataDate>2014-08-07T23:30:28-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWL+YdL&#xA;81S+Z9L1LS5gdPs45frFo1zLAruUeitEqvHL6jFF5P8A3dOS1JxVi6eVvzLstZm1e81g3sMGo3N8&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:E32C002D0120E4118EC0CEC0D3579FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CFF2D2641620E4118EC0CEC0D3579FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
124.034 388.8 li
126.773 368.584 li
129.512 388.8 li
178.807 388.8 li
181.546 302.097 li
184.285 324.343 li
187.023 165.306 li
189.762 370.352 li
192.501 324.357 li
195.239 358.978 li
197.978 388.8 li
200.717 383.819 li
203.455 383.388 li
206.194 376.586 li
208.933 382.808 li
211.671 366.788 li
214.41 378.054 li
217.148 388.8 li
219.887 388.8 li
222.626 370.165 li
225.364 379.469 li
228.103 379.437 li
230.842 371.221 li
233.58 388.8 li
239.058 388.8 li
241.796 386.045 li
244.535 386.185 li
247.274 388.8 li
250.012 385.964 li
252.751 385.664 li
255.49 388.8 li
258.228 302.377 li
260.967 69.332 li
263.706 332.99 li
266.444 348.689 li
269.183 356.438 li
271.921 373.516 li
274.66 381.956 li
277.399 384.28 li
280.137 375.963 li
282.876 373.45 li
285.615 386.742 li
288.353 367.954 li
291.092 382.646 li
293.831 372.182 li
296.569 384.946 li
299.308 382.898 li
302.047 375.247 li
304.785 374.055 li
307.524 363.619 li
310.263 352.289 li
313.001 373.431 li
315.74 372.928 li
318.479 342.297 li
321.217 326.739 li
323.956 365.963 li
326.694 320.978 li
329.433 312.529 li
332.172 352.642 li
334.91 364.991 li
337.649 367.38 li
340.388 366.434 li
343.126 365.889 li
345.865 371.896 li
348.604 367.919 li
351.342 369.542 li
354.081 368.181 li
356.82 367.282 li
359.558 371.643 li
362.297 373.663 li
365.036 365.243 li
367.774 346.838 li
370.513 355.83 li
373.252 367.25 li
375.99 369.905 li
378.729 372.875 li
381.467 372.051 li
384.206 377.245 li
386.945 377.615 li
389.683 375.96 li
392.422 378.774 li
397.899 374.104 li
400.638 371.082 li
403.377 373.866 li
406.115 374.937 li
408.854 373.898 li
411.593 376.764 li
414.331 375.851 li
417.07 372.447 li
419.809 371.544 li
422.547 375.138 li
425.286 373.104 li
428.025 373.863 li
430.763 375.692 li
433.502 374.291 li
436.24 376.664 li
438.979 377.724 li
441.718 376.813 li
444.456 378.668 li
447.195 379.257 li
449.934 380.043 li
452.672 380.664 li
455.411 380.473 li
458.15 381.02 li
460.888 380.754 li
463.627 381.293 li
466.366 380.978 li
469.104 380.944 li
471.843 381.634 li
474.582 380.915 li
477.32 381.588 li
482.798 378.241 li
485.536 380.26 li
488.275 379.958 li
491.013 378.125 li
493.752 378.28 li
496.491 377.534 li
499.229 372.557 li
501.968 373.976 li
504.707 373.682 li
507.445 365.554 li
510.184 360.311 li
512.923 362.069 li
515.661 365.973 li
518.4 367.551 li
518.4 367.551 li
0 0 1 rgb
@
0.5 lw
0 lc
[1 3 ] 0 dsh
72 388.8 mo
72 43.2002 li
0 0 0 rgb
@
grestore
72 388.8 mo
72 384.8 li
0 0 0 rgb
f
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
72 384.8 li
@
72 43.2002 mo
72 47.2002 li
f
72 43.2002 mo
72 47.2002 li
@
59.3281 400.764 mo
61.2598 400.764 li
61.2598 394.092 li
59.1602 394.512 li
59.1602 393.432 li
61.248 393.012 li
62.436 393.012 li
62.436 400.764 li
64.3682 400.764 li
64.3682 401.76 li
59.3281 401.76 li
59.3281 400.764 li
59.3281 400.764 li
cp
ef
67.7158 395.232 mo
67.7158 395.688 67.8481 396.048 68.1362 396.3 cv
68.4238 396.552 68.8198 396.672 69.3359 396.672 cv
69.8398 396.672 70.2358 396.552 70.5239 396.3 cv
70.812 396.048 70.9561 395.688 70.9561 395.232 cv
70.9561 394.776 70.812 394.428 70.5239 394.176 cv
70.2358 393.924 69.8398 393.792 69.3359 393.792 cv
68.8198 393.792 68.4238 393.924 68.1362 394.176 cv
67.8481 394.428 67.7158 394.776 67.7158 395.232 cv
67.7158 395.232 li
cp
68.1479 397.104 mo
67.644 396.984 67.248 396.744 66.96 396.396 cv
66.6719 396.048 66.54 395.628 66.54 395.124 cv
66.54 394.428 66.7798 393.876 67.2842 393.468 cv
67.7759 393.06 68.46 392.856 69.3359 392.856 cv
70.2002 392.856 70.8838 393.06 71.3882 393.468 cv
71.8799 393.876 72.1318 394.428 72.1318 395.124 cv
72.1318 395.628 71.9878 396.048 71.7002 396.396 cv
71.4121 396.744 71.0278 396.984 70.5239 397.104 cv
71.0879 397.236 71.5322 397.5 71.856 397.884 cv
72.168 398.268 72.3359 398.748 72.3359 399.3 cv
72.3359 400.152 72.0718 400.8 71.5562 401.244 cv
71.0278 401.7 70.2959 401.916 69.3359 401.916 cv
68.3638 401.916 67.6201 401.7 67.104 401.244 cv
66.5879 400.8 66.3359 400.152 66.3359 399.3 cv
66.3359 398.748 66.4922 398.268 66.8159 397.884 cv
67.1279 397.5 67.5718 397.236 68.1479 397.104 cv
69.3359 397.608 mo
68.772 397.608 68.3281 397.764 68.0039 398.064 cv
67.6802 398.364 67.5239 398.771 67.5239 399.3 cv
67.5239 399.828 67.6802 400.248 68.0039 400.548 cv
68.3281 400.848 68.772 400.992 69.3359 400.992 cv
69.8882 400.992 70.332 400.848 70.6558 400.536 cv
70.98 400.236 71.1479 399.828 71.1479 399.3 cv
71.1479 398.771 70.98 398.364 70.668 398.064 cv
70.3438 397.764 69.8999 397.608 69.3359 397.608 cv
ef
74.2559 393.012 mo
78.8999 393.012 li
78.8999 394.008 li
75.3359 394.008 li
75.3359 396.156 li
75.5039 396.096 75.6841 396.048 75.8521 396.024 cv
76.02 396 76.2002 395.976 76.3682 395.976 cv
77.3398 395.976 78.1079 396.252 78.6841 396.78 cv
79.2598 397.32 79.5479 398.04 79.5479 398.952 cv
79.5479 399.9 79.248 400.632 78.6602 401.148 cv
78.0718 401.664 77.2441 401.916 76.188 401.916 cv
75.8159 401.916 75.4438 401.88 75.0601 401.832 cv
74.6758 401.771 74.292 401.688 73.8838 401.556 cv
73.8838 400.368 li
74.2319 400.56 74.5918 400.704 74.9761 400.8 cv
75.3481 400.896 75.7441 400.932 76.1641 400.932 cv
76.8359 400.932 77.376 400.764 77.772 400.404 cv
78.1558 400.044 78.3599 399.564 78.3599 398.952 cv
78.3599 398.352 78.1558 397.872 77.772 397.512 cv
77.376 397.152 76.8359 396.972 76.1641 396.972 cv
75.8521 396.972 75.5278 397.008 75.2158 397.08 cv
74.9038 397.152 74.5801 397.26 74.2559 397.404 cv
74.2559 393.012 li
74.2559 393.012 li
cp
ef
84.4561 392.856 mo
85.4282 392.856 86.1719 393.252 86.7002 394.02 cv
87.2158 394.8 87.48 395.928 87.48 397.392 cv
87.48 398.868 87.2158 399.996 86.7002 400.764 cv
86.1719 401.532 85.4282 401.916 84.4561 401.916 cv
83.4722 401.916 82.7158 401.532 82.2002 400.764 cv
81.6841 399.996 81.4321 398.868 81.4321 397.392 cv
81.4321 395.928 81.6841 394.8 82.2002 394.02 cv
82.7158 393.252 83.4722 392.856 84.4561 392.856 cv
84.4561 392.856 li
cp
84.4561 393.792 mo
83.8438 393.792 83.3882 394.092 83.0762 394.692 cv
82.7642 395.292 82.6201 396.192 82.6201 397.392 cv
82.6201 398.592 82.7642 399.492 83.0762 400.092 cv
83.3882 400.692 83.8438 400.992 84.4561 400.992 cv
85.0679 400.992 85.5239 400.692 85.8359 400.092 cv
86.1362 399.492 86.292 398.592 86.292 397.392 cv
86.292 396.192 86.1362 395.292 85.8359 394.692 cv
85.5239 394.092 85.0679 393.792 84.4561 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
126.773 388.8 mo
126.773 43.2002 li
@
grestore
126.773 388.8 mo
126.773 384.8 li
f
126.773 388.8 mo
126.773 384.8 li
@
126.773 43.2002 mo
126.773 47.2002 li
f
126.773 43.2002 mo
126.773 47.2002 li
@
114.048 400.764 mo
115.98 400.764 li
115.98 394.092 li
113.88 394.512 li
113.88 393.432 li
115.968 393.012 li
117.156 393.012 li
117.156 400.764 li
119.088 400.764 li
119.088 401.76 li
114.048 401.76 li
114.048 400.764 li
114.048 400.764 li
cp
ef
122.436 395.232 mo
122.436 395.688 122.568 396.048 122.856 396.3 cv
123.144 396.552 123.54 396.672 124.056 396.672 cv
124.56 396.672 124.956 396.552 125.244 396.3 cv
125.532 396.048 125.676 395.688 125.676 395.232 cv
125.676 394.776 125.532 394.428 125.244 394.176 cv
124.956 393.924 124.56 393.792 124.056 393.792 cv
123.54 393.792 123.144 393.924 122.856 394.176 cv
122.568 394.428 122.436 394.776 122.436 395.232 cv
122.436 395.232 li
cp
122.868 397.104 mo
122.364 396.984 121.968 396.744 121.68 396.396 cv
121.392 396.048 121.26 395.628 121.26 395.124 cv
121.26 394.428 121.5 393.876 122.004 393.468 cv
122.496 393.06 123.18 392.856 124.056 392.856 cv
124.92 392.856 125.604 393.06 126.108 393.468 cv
126.6 393.876 126.852 394.428 126.852 395.124 cv
126.852 395.628 126.708 396.048 126.42 396.396 cv
126.132 396.744 125.748 396.984 125.244 397.104 cv
125.808 397.236 126.252 397.5 126.576 397.884 cv
126.888 398.268 127.056 398.748 127.056 399.3 cv
127.056 400.152 126.792 400.8 126.276 401.244 cv
125.748 401.7 125.016 401.916 124.056 401.916 cv
123.084 401.916 122.34 401.7 121.824 401.244 cv
121.308 400.8 121.056 400.152 121.056 399.3 cv
121.056 398.748 121.212 398.268 121.536 397.884 cv
121.848 397.5 122.292 397.236 122.868 397.104 cv
124.056 397.608 mo
123.492 397.608 123.048 397.764 122.724 398.064 cv
122.4 398.364 122.244 398.771 122.244 399.3 cv
122.244 399.828 122.4 400.248 122.724 400.548 cv
123.048 400.848 123.492 400.992 124.056 400.992 cv
124.608 400.992 125.052 400.848 125.376 400.536 cv
125.7 400.236 125.868 399.828 125.868 399.3 cv
125.868 398.771 125.7 398.364 125.388 398.064 cv
125.064 397.764 124.62 397.608 124.056 397.608 cv
ef
128.904 393.012 mo
134.532 393.012 li
134.532 393.516 li
131.352 401.76 li
130.116 401.76 li
133.104 394.008 li
128.904 394.008 li
128.904 393.012 li
128.904 393.012 li
cp
ef
139.176 392.856 mo
140.148 392.856 140.892 393.252 141.42 394.02 cv
141.936 394.8 142.2 395.928 142.2 397.392 cv
142.2 398.868 141.936 399.996 141.42 400.764 cv
140.892 401.532 140.148 401.916 139.176 401.916 cv
138.192 401.916 137.436 401.532 136.92 400.764 cv
136.404 399.996 136.152 398.868 136.152 397.392 cv
136.152 395.928 136.404 394.8 136.92 394.02 cv
137.436 393.252 138.192 392.856 139.176 392.856 cv
139.176 392.856 li
cp
139.176 393.792 mo
138.564 393.792 138.108 394.092 137.796 394.692 cv
137.484 395.292 137.34 396.192 137.34 397.392 cv
137.34 398.592 137.484 399.492 137.796 400.092 cv
138.108 400.692 138.564 400.992 139.176 400.992 cv
139.788 400.992 140.244 400.692 140.556 400.092 cv
140.856 399.492 141.012 398.592 141.012 397.392 cv
141.012 396.192 140.856 395.292 140.556 394.692 cv
140.244 394.092 139.788 393.792 139.176 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
181.546 388.8 mo
181.546 43.2002 li
@
grestore
181.546 388.8 mo
181.546 384.8 li
f
181.546 388.8 mo
181.546 384.8 li
@
181.546 43.2002 mo
181.546 47.2002 li
f
181.546 43.2002 mo
181.546 47.2002 li
@
168.768 400.764 mo
170.7 400.764 li
170.7 394.092 li
168.6 394.512 li
168.6 393.432 li
170.688 393.012 li
171.876 393.012 li
171.876 400.764 li
173.808 400.764 li
173.808 401.76 li
168.768 401.76 li
168.768 400.764 li
168.768 400.764 li
cp
ef
177.156 395.232 mo
177.156 395.688 177.288 396.048 177.576 396.3 cv
177.864 396.552 178.26 396.672 178.776 396.672 cv
179.28 396.672 179.676 396.552 179.964 396.3 cv
180.252 396.048 180.396 395.688 180.396 395.232 cv
180.396 394.776 180.252 394.428 179.964 394.176 cv
179.676 393.924 179.28 393.792 178.776 393.792 cv
178.26 393.792 177.864 393.924 177.576 394.176 cv
177.288 394.428 177.156 394.776 177.156 395.232 cv
177.156 395.232 li
cp
177.588 397.104 mo
177.084 396.984 176.688 396.744 176.4 396.396 cv
176.112 396.048 175.98 395.628 175.98 395.124 cv
175.98 394.428 176.22 393.876 176.724 393.468 cv
177.216 393.06 177.9 392.856 178.776 392.856 cv
179.64 392.856 180.324 393.06 180.828 393.468 cv
181.32 393.876 181.572 394.428 181.572 395.124 cv
181.572 395.628 181.428 396.048 181.14 396.396 cv
180.852 396.744 180.468 396.984 179.964 397.104 cv
180.528 397.236 180.972 397.5 181.296 397.884 cv
181.608 398.268 181.776 398.748 181.776 399.3 cv
181.776 400.152 181.512 400.8 180.996 401.244 cv
180.468 401.7 179.736 401.916 178.776 401.916 cv
177.804 401.916 177.06 401.7 176.544 401.244 cv
176.028 400.8 175.776 400.152 175.776 399.3 cv
175.776 398.748 175.932 398.268 176.256 397.884 cv
176.568 397.5 177.012 397.236 177.588 397.104 cv
178.776 397.608 mo
178.212 397.608 177.768 397.764 177.444 398.064 cv
177.12 398.364 176.964 398.771 176.964 399.3 cv
176.964 399.828 177.12 400.248 177.444 400.548 cv
177.768 400.848 178.212 400.992 178.776 400.992 cv
179.328 400.992 179.772 400.848 180.096 400.536 cv
180.42 400.236 180.588 399.828 180.588 399.3 cv
180.588 398.771 180.42 398.364 180.108 398.064 cv
179.784 397.764 179.34 397.608 178.776 397.608 cv
ef
186.312 397.872 mo
186.84 397.872 187.26 397.692 187.572 397.332 cv
187.884 396.972 188.04 396.468 188.04 395.832 cv
188.04 395.208 187.884 394.704 187.572 394.344 cv
187.26 393.984 186.84 393.792 186.312 393.792 cv
185.784 393.792 185.364 393.984 185.052 394.344 cv
184.74 394.704 184.584 395.208 184.584 395.832 cv
184.584 396.468 184.74 396.972 185.052 397.332 cv
185.364 397.692 185.784 397.872 186.312 397.872 cv
186.312 397.872 li
cp
183.96 401.58 mo
183.96 400.5 li
184.248 400.644 184.548 400.752 184.86 400.824 cv
185.16 400.896 185.46 400.932 185.76 400.932 cv
186.528 400.932 187.128 400.68 187.536 400.152 cv
187.944 399.624 188.184 398.832 188.256 397.752 cv
188.016 398.088 187.728 398.352 187.392 398.532 cv
187.044 398.712 186.66 398.796 186.24 398.796 cv
185.352 398.796 184.656 398.532 184.152 398.004 cv
183.648 397.476 183.396 396.756 183.396 395.832 cv
183.396 394.944 183.66 394.224 184.188 393.672 cv
184.716 393.132 185.424 392.856 186.312 392.856 cv
187.32 392.856 188.1 393.252 188.628 394.02 cv
189.156 394.8 189.432 395.928 189.432 397.392 cv
189.432 398.784 189.096 399.876 188.448 400.692 cv
187.788 401.508 186.912 401.916 185.808 401.916 cv
185.508 401.916 185.208 401.88 184.908 401.832 cv
184.596 401.784 184.284 401.7 183.96 401.58 cv
ef
194.136 392.856 mo
195.108 392.856 195.852 393.252 196.38 394.02 cv
196.896 394.8 197.16 395.928 197.16 397.392 cv
197.16 398.868 196.896 399.996 196.38 400.764 cv
195.852 401.532 195.108 401.916 194.136 401.916 cv
193.152 401.916 192.396 401.532 191.88 400.764 cv
191.364 399.996 191.112 398.868 191.112 397.392 cv
191.112 395.928 191.364 394.8 191.88 394.02 cv
192.396 393.252 193.152 392.856 194.136 392.856 cv
194.136 392.856 li
cp
194.136 393.792 mo
193.524 393.792 193.068 394.092 192.756 394.692 cv
192.444 395.292 192.3 396.192 192.3 397.392 cv
192.3 398.592 192.444 399.492 192.756 400.092 cv
193.068 400.692 193.524 400.992 194.136 400.992 cv
194.748 400.992 195.204 400.692 195.516 400.092 cv
195.816 399.492 195.972 398.592 195.972 397.392 cv
195.972 396.192 195.816 395.292 195.516 394.692 cv
195.204 394.092 194.748 393.792 194.136 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
236.319 388.8 mo
236.319 43.2002 li
@
grestore
236.319 388.8 mo
236.319 384.8 li
f
236.319 388.8 mo
236.319 384.8 li
@
236.319 43.2002 mo
236.319 47.2002 li
f
236.319 43.2002 mo
236.319 47.2002 li
@
223.488 400.764 mo
225.42 400.764 li
225.42 394.092 li
223.32 394.512 li
223.32 393.432 li
225.408 393.012 li
226.596 393.012 li
226.596 400.764 li
228.528 400.764 li
228.528 401.76 li
223.488 401.76 li
223.488 400.764 li
223.488 400.764 li
cp
ef
233.352 397.872 mo
233.88 397.872 234.3 397.692 234.612 397.332 cv
234.924 396.972 235.08 396.468 235.08 395.832 cv
235.08 395.208 234.924 394.704 234.612 394.344 cv
234.3 393.984 233.88 393.792 233.352 393.792 cv
232.824 393.792 232.404 393.984 232.092 394.344 cv
231.78 394.704 231.624 395.208 231.624 395.832 cv
231.624 396.468 231.78 396.972 232.092 397.332 cv
232.404 397.692 232.824 397.872 233.352 397.872 cv
233.352 397.872 li
cp
231 401.58 mo
231 400.5 li
231.288 400.644 231.588 400.752 231.9 400.824 cv
232.2 400.896 232.5 400.932 232.8 400.932 cv
233.568 400.932 234.168 400.68 234.576 400.152 cv
234.984 399.624 235.224 398.832 235.296 397.752 cv
235.056 398.088 234.768 398.352 234.432 398.532 cv
234.084 398.712 233.7 398.796 233.28 398.796 cv
232.392 398.796 231.696 398.532 231.192 398.004 cv
230.688 397.476 230.436 396.756 230.436 395.832 cv
230.436 394.944 230.7 394.224 231.228 393.672 cv
231.756 393.132 232.464 392.856 233.352 392.856 cv
234.36 392.856 235.14 393.252 235.668 394.02 cv
236.196 394.8 236.472 395.928 236.472 397.392 cv
236.472 398.784 236.136 399.876 235.488 400.692 cv
234.828 401.508 233.952 401.916 232.848 401.916 cv
232.548 401.916 232.248 401.88 231.948 401.832 cv
231.636 401.784 231.324 401.7 231 401.58 cv
ef
238.848 400.764 mo
240.78 400.764 li
240.78 394.092 li
238.68 394.512 li
238.68 393.432 li
240.768 393.012 li
241.956 393.012 li
241.956 400.764 li
243.888 400.764 li
243.888 401.76 li
238.848 401.76 li
238.848 400.764 li
238.848 400.764 li
cp
ef
248.856 392.856 mo
249.828 392.856 250.572 393.252 251.1 394.02 cv
251.616 394.8 251.88 395.928 251.88 397.392 cv
251.88 398.868 251.616 399.996 251.1 400.764 cv
250.572 401.532 249.828 401.916 248.856 401.916 cv
247.872 401.916 247.116 401.532 246.6 400.764 cv
246.084 399.996 245.832 398.868 245.832 397.392 cv
245.832 395.928 246.084 394.8 246.6 394.02 cv
247.116 393.252 247.872 392.856 248.856 392.856 cv
248.856 392.856 li
cp
248.856 393.792 mo
248.244 393.792 247.788 394.092 247.476 394.692 cv
247.164 395.292 247.02 396.192 247.02 397.392 cv
247.02 398.592 247.164 399.492 247.476 400.092 cv
247.788 400.692 248.244 400.992 248.856 400.992 cv
249.468 400.992 249.924 400.692 250.236 400.092 cv
250.536 399.492 250.692 398.592 250.692 397.392 cv
250.692 396.192 250.536 395.292 250.236 394.692 cv
249.924 394.092 249.468 393.792 248.856 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
291.092 388.8 mo
291.092 43.2002 li
@
grestore
291.092 388.8 mo
291.092 384.8 li
f
291.092 388.8 mo
291.092 384.8 li
@
291.092 43.2002 mo
291.092 47.2002 li
f
291.092 43.2002 mo
291.092 47.2002 li
@
278.448 400.764 mo
280.38 400.764 li
280.38 394.092 li
278.28 394.512 li
278.28 393.432 li
280.368 393.012 li
281.556 393.012 li
281.556 400.764 li
283.488 400.764 li
283.488 401.76 li
278.448 401.76 li
278.448 400.764 li
278.448 400.764 li
cp
ef
288.072 397.872 mo
288.6 397.872 289.02 397.692 289.332 397.332 cv
289.644 396.972 289.8 396.468 289.8 395.832 cv
289.8 395.208 289.644 394.704 289.332 394.344 cv
289.02 393.984 288.6 393.792 288.072 393.792 cv
287.544 393.792 287.124 393.984 286.812 394.344 cv
286.5 394.704 286.344 395.208 286.344 395.832 cv
286.344 396.468 286.5 396.972 286.812 397.332 cv
287.124 397.692 287.544 397.872 288.072 397.872 cv
288.072 397.872 li
cp
285.72 401.58 mo
285.72 400.5 li
286.008 400.644 286.308 400.752 286.62 400.824 cv
286.92 400.896 287.22 400.932 287.52 400.932 cv
288.288 400.932 288.888 400.68 289.296 400.152 cv
289.704 399.624 289.944 398.832 290.016 397.752 cv
289.776 398.088 289.488 398.352 289.152 398.532 cv
288.804 398.712 288.42 398.796 288 398.796 cv
287.112 398.796 286.416 398.532 285.912 398.004 cv
285.408 397.476 285.156 396.756 285.156 395.832 cv
285.156 394.944 285.42 394.224 285.948 393.672 cv
286.476 393.132 287.184 392.856 288.072 392.856 cv
289.08 392.856 289.86 393.252 290.388 394.02 cv
290.916 394.8 291.192 395.928 291.192 397.392 cv
291.192 398.784 290.856 399.876 290.208 400.692 cv
289.548 401.508 288.672 401.916 287.568 401.916 cv
287.268 401.916 286.968 401.88 286.668 401.832 cv
286.356 401.784 286.044 401.7 285.72 401.58 cv
ef
296.952 397.044 mo
297.516 397.164 297.96 397.416 298.272 397.8 cv
298.584 398.184 298.752 398.664 298.752 399.216 cv
298.752 400.08 298.452 400.752 297.864 401.22 cv
297.264 401.688 296.424 401.916 295.332 401.916 cv
294.96 401.916 294.576 401.88 294.192 401.808 cv
293.808 401.748 293.4 401.64 292.992 401.496 cv
292.992 400.356 li
293.316 400.548 293.676 400.692 294.072 400.788 cv
294.456 400.884 294.864 400.932 295.296 400.932 cv
296.04 400.932 296.604 400.788 296.988 400.5 cv
297.372 400.212 297.576 399.78 297.576 399.216 cv
297.576 398.712 297.396 398.304 297.036 398.016 cv
296.676 397.728 296.172 397.572 295.524 397.572 cv
294.504 397.572 li
294.504 396.6 li
295.572 396.6 li
296.148 396.6 296.592 396.492 296.904 396.252 cv
297.216 396.024 297.372 395.688 297.372 395.244 cv
297.372 394.8 297.204 394.452 296.892 394.212 cv
296.568 393.972 296.112 393.852 295.524 393.852 cv
295.2 393.852 294.852 393.888 294.48 393.96 cv
294.108 394.032 293.7 394.14 293.256 394.284 cv
293.256 393.228 li
293.7 393.108 294.12 393.012 294.516 392.952 cv
294.9 392.892 295.272 392.856 295.632 392.856 cv
296.52 392.856 297.228 393.06 297.756 393.468 cv
298.284 393.876 298.548 394.428 298.548 395.124 cv
298.548 395.604 298.404 396.012 298.128 396.348 cv
297.852 396.684 297.456 396.924 296.952 397.044 cv
296.952 397.044 li
cp
ef
303.576 392.856 mo
304.548 392.856 305.292 393.252 305.82 394.02 cv
306.336 394.8 306.6 395.928 306.6 397.392 cv
306.6 398.868 306.336 399.996 305.82 400.764 cv
305.292 401.532 304.548 401.916 303.576 401.916 cv
302.592 401.916 301.836 401.532 301.32 400.764 cv
300.804 399.996 300.552 398.868 300.552 397.392 cv
300.552 395.928 300.804 394.8 301.32 394.02 cv
301.836 393.252 302.592 392.856 303.576 392.856 cv
303.576 392.856 li
cp
303.576 393.792 mo
302.964 393.792 302.508 394.092 302.196 394.692 cv
301.884 395.292 301.74 396.192 301.74 397.392 cv
301.74 398.592 301.884 399.492 302.196 400.092 cv
302.508 400.692 302.964 400.992 303.576 400.992 cv
304.188 400.992 304.644 400.692 304.956 400.092 cv
305.256 399.492 305.412 398.592 305.412 397.392 cv
305.412 396.192 305.256 395.292 304.956 394.692 cv
304.644 394.092 304.188 393.792 303.576 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
345.865 388.8 mo
345.865 43.2002 li
@
grestore
345.865 388.8 mo
345.865 384.8 li
f
345.865 388.8 mo
345.865 384.8 li
@
345.865 43.2002 mo
345.865 47.2002 li
f
345.865 43.2002 mo
345.865 47.2002 li
@
333.168 400.764 mo
335.1 400.764 li
335.1 394.092 li
333 394.512 li
333 393.432 li
335.088 393.012 li
336.276 393.012 li
336.276 400.764 li
338.208 400.764 li
338.208 401.76 li
333.168 401.76 li
333.168 400.764 li
333.168 400.764 li
cp
ef
343.032 397.872 mo
343.56 397.872 343.98 397.692 344.292 397.332 cv
344.604 396.972 344.76 396.468 344.76 395.832 cv
344.76 395.208 344.604 394.704 344.292 394.344 cv
343.98 393.984 343.56 393.792 343.032 393.792 cv
342.504 393.792 342.084 393.984 341.772 394.344 cv
341.46 394.704 341.304 395.208 341.304 395.832 cv
341.304 396.468 341.46 396.972 341.772 397.332 cv
342.084 397.692 342.504 397.872 343.032 397.872 cv
343.032 397.872 li
cp
340.68 401.58 mo
340.68 400.5 li
340.968 400.644 341.268 400.752 341.58 400.824 cv
341.88 400.896 342.18 400.932 342.48 400.932 cv
343.248 400.932 343.848 400.68 344.256 400.152 cv
344.664 399.624 344.904 398.832 344.976 397.752 cv
344.736 398.088 344.448 398.352 344.112 398.532 cv
343.764 398.712 343.38 398.796 342.96 398.796 cv
342.072 398.796 341.376 398.532 340.872 398.004 cv
340.368 397.476 340.116 396.756 340.116 395.832 cv
340.116 394.944 340.38 394.224 340.908 393.672 cv
341.436 393.132 342.144 392.856 343.032 392.856 cv
344.04 392.856 344.82 393.252 345.348 394.02 cv
345.876 394.8 346.152 395.928 346.152 397.392 cv
346.152 398.784 345.816 399.876 345.168 400.692 cv
344.508 401.508 343.632 401.916 342.528 401.916 cv
342.228 401.916 341.928 401.88 341.628 401.832 cv
341.316 401.784 341.004 401.7 340.68 401.58 cv
ef
348.096 393.012 mo
352.74 393.012 li
352.74 394.008 li
349.176 394.008 li
349.176 396.156 li
349.344 396.096 349.524 396.048 349.692 396.024 cv
349.86 396 350.04 395.976 350.208 395.976 cv
351.18 395.976 351.948 396.252 352.524 396.78 cv
353.1 397.32 353.388 398.04 353.388 398.952 cv
353.388 399.9 353.088 400.632 352.5 401.148 cv
351.912 401.664 351.084 401.916 350.028 401.916 cv
349.656 401.916 349.284 401.88 348.9 401.832 cv
348.516 401.771 348.132 401.688 347.724 401.556 cv
347.724 400.368 li
348.072 400.56 348.432 400.704 348.816 400.8 cv
349.188 400.896 349.584 400.932 350.004 400.932 cv
350.676 400.932 351.216 400.764 351.612 400.404 cv
351.996 400.044 352.2 399.564 352.2 398.952 cv
352.2 398.352 351.996 397.872 351.612 397.512 cv
351.216 397.152 350.676 396.972 350.004 396.972 cv
349.692 396.972 349.368 397.008 349.056 397.08 cv
348.744 397.152 348.42 397.26 348.096 397.404 cv
348.096 393.012 li
348.096 393.012 li
cp
ef
358.296 392.856 mo
359.268 392.856 360.012 393.252 360.54 394.02 cv
361.056 394.8 361.32 395.928 361.32 397.392 cv
361.32 398.868 361.056 399.996 360.54 400.764 cv
360.012 401.532 359.268 401.916 358.296 401.916 cv
357.313 401.916 356.556 401.532 356.04 400.764 cv
355.524 399.996 355.272 398.868 355.272 397.392 cv
355.272 395.928 355.524 394.8 356.04 394.02 cv
356.556 393.252 357.313 392.856 358.296 392.856 cv
358.296 392.856 li
cp
358.296 393.792 mo
357.684 393.792 357.228 394.092 356.916 394.692 cv
356.604 395.292 356.46 396.192 356.46 397.392 cv
356.46 398.592 356.604 399.492 356.916 400.092 cv
357.228 400.692 357.684 400.992 358.296 400.992 cv
358.908 400.992 359.364 400.692 359.676 400.092 cv
359.976 399.492 360.132 398.592 360.132 397.392 cv
360.132 396.192 359.976 395.292 359.676 394.692 cv
359.364 394.092 358.908 393.792 358.296 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
400.638 388.8 mo
400.638 43.2002 li
@
grestore
400.638 388.8 mo
400.638 384.8 li
f
400.638 388.8 mo
400.638 384.8 li
@
400.638 43.2002 mo
400.638 47.2002 li
f
400.638 43.2002 mo
400.638 47.2002 li
@
387.888 400.764 mo
389.82 400.764 li
389.82 394.092 li
387.72 394.512 li
387.72 393.432 li
389.808 393.012 li
390.996 393.012 li
390.996 400.764 li
392.928 400.764 li
392.928 401.76 li
387.888 401.76 li
387.888 400.764 li
387.888 400.764 li
cp
ef
397.752 397.872 mo
398.28 397.872 398.7 397.692 399.012 397.332 cv
399.324 396.972 399.48 396.468 399.48 395.832 cv
399.48 395.208 399.324 394.704 399.012 394.344 cv
398.7 393.984 398.28 393.792 397.752 393.792 cv
397.224 393.792 396.804 393.984 396.492 394.344 cv
396.18 394.704 396.024 395.208 396.024 395.832 cv
396.024 396.468 396.18 396.972 396.492 397.332 cv
396.804 397.692 397.224 397.872 397.752 397.872 cv
397.752 397.872 li
cp
395.4 401.58 mo
395.4 400.5 li
395.688 400.644 395.988 400.752 396.3 400.824 cv
396.6 400.896 396.9 400.932 397.2 400.932 cv
397.968 400.932 398.568 400.68 398.976 400.152 cv
399.384 399.624 399.624 398.832 399.696 397.752 cv
399.456 398.088 399.168 398.352 398.832 398.532 cv
398.484 398.712 398.1 398.796 397.68 398.796 cv
396.792 398.796 396.096 398.532 395.592 398.004 cv
395.088 397.476 394.836 396.756 394.836 395.832 cv
394.836 394.944 395.1 394.224 395.628 393.672 cv
396.156 393.132 396.864 392.856 397.752 392.856 cv
398.76 392.856 399.54 393.252 400.068 394.02 cv
400.596 394.8 400.872 395.928 400.872 397.392 cv
400.872 398.784 400.536 399.876 399.888 400.692 cv
399.228 401.508 398.352 401.916 397.248 401.916 cv
396.948 401.916 396.648 401.88 396.348 401.832 cv
396.036 401.784 395.724 401.7 395.4 401.58 cv
ef
402.744 393.012 mo
408.372 393.012 li
408.372 393.516 li
405.192 401.76 li
403.956 401.76 li
406.944 394.008 li
402.744 394.008 li
402.744 393.012 li
402.744 393.012 li
cp
ef
413.016 392.856 mo
413.988 392.856 414.732 393.252 415.26 394.02 cv
415.776 394.8 416.04 395.928 416.04 397.392 cv
416.04 398.868 415.776 399.996 415.26 400.764 cv
414.732 401.532 413.988 401.916 413.016 401.916 cv
412.032 401.916 411.276 401.532 410.76 400.764 cv
410.244 399.996 409.992 398.868 409.992 397.392 cv
409.992 395.928 410.244 394.8 410.76 394.02 cv
411.276 393.252 412.032 392.856 413.016 392.856 cv
413.016 392.856 li
cp
413.016 393.792 mo
412.404 393.792 411.948 394.092 411.636 394.692 cv
411.324 395.292 411.18 396.192 411.18 397.392 cv
411.18 398.592 411.324 399.492 411.636 400.092 cv
411.948 400.692 412.404 400.992 413.016 400.992 cv
413.628 400.992 414.084 400.692 414.396 400.092 cv
414.696 399.492 414.852 398.592 414.852 397.392 cv
414.852 396.192 414.696 395.292 414.396 394.692 cv
414.084 394.092 413.628 393.792 413.016 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
455.411 388.8 mo
455.411 43.2002 li
@
grestore
455.411 388.8 mo
455.411 384.8 li
f
455.411 388.8 mo
455.411 384.8 li
@
455.411 43.2002 mo
455.411 47.2002 li
f
455.411 43.2002 mo
455.411 47.2002 li
@
442.608 400.764 mo
444.54 400.764 li
444.54 394.092 li
442.44 394.512 li
442.44 393.432 li
444.528 393.012 li
445.716 393.012 li
445.716 400.764 li
447.648 400.764 li
447.648 401.76 li
442.608 401.76 li
442.608 400.764 li
442.608 400.764 li
cp
ef
452.472 397.872 mo
453 397.872 453.42 397.692 453.732 397.332 cv
454.044 396.972 454.2 396.468 454.2 395.832 cv
454.2 395.208 454.044 394.704 453.732 394.344 cv
453.42 393.984 453 393.792 452.472 393.792 cv
451.944 393.792 451.524 393.984 451.212 394.344 cv
450.9 394.704 450.744 395.208 450.744 395.832 cv
450.744 396.468 450.9 396.972 451.212 397.332 cv
451.524 397.692 451.944 397.872 452.472 397.872 cv
452.472 397.872 li
cp
450.12 401.58 mo
450.12 400.5 li
450.408 400.644 450.708 400.752 451.02 400.824 cv
451.32 400.896 451.62 400.932 451.92 400.932 cv
452.688 400.932 453.288 400.68 453.696 400.152 cv
454.104 399.624 454.344 398.832 454.416 397.752 cv
454.176 398.088 453.888 398.352 453.552 398.532 cv
453.204 398.712 452.82 398.796 452.4 398.796 cv
451.512 398.796 450.816 398.532 450.313 398.004 cv
449.808 397.476 449.556 396.756 449.556 395.832 cv
449.556 394.944 449.82 394.224 450.348 393.672 cv
450.876 393.132 451.584 392.856 452.472 392.856 cv
453.48 392.856 454.26 393.252 454.788 394.02 cv
455.316 394.8 455.592 395.928 455.592 397.392 cv
455.592 398.784 455.256 399.876 454.608 400.692 cv
453.948 401.508 453.072 401.916 451.968 401.916 cv
451.668 401.916 451.368 401.88 451.068 401.832 cv
450.756 401.784 450.444 401.7 450.12 401.58 cv
ef
460.152 397.872 mo
460.68 397.872 461.1 397.692 461.412 397.332 cv
461.724 396.972 461.88 396.468 461.88 395.832 cv
461.88 395.208 461.724 394.704 461.412 394.344 cv
461.1 393.984 460.68 393.792 460.152 393.792 cv
459.624 393.792 459.204 393.984 458.892 394.344 cv
458.58 394.704 458.424 395.208 458.424 395.832 cv
458.424 396.468 458.58 396.972 458.892 397.332 cv
459.204 397.692 459.624 397.872 460.152 397.872 cv
460.152 397.872 li
cp
457.8 401.58 mo
457.8 400.5 li
458.088 400.644 458.388 400.752 458.7 400.824 cv
459 400.896 459.3 400.932 459.6 400.932 cv
460.368 400.932 460.968 400.68 461.376 400.152 cv
461.784 399.624 462.024 398.832 462.096 397.752 cv
461.856 398.088 461.568 398.352 461.232 398.532 cv
460.884 398.712 460.5 398.796 460.08 398.796 cv
459.192 398.796 458.496 398.532 457.992 398.004 cv
457.488 397.476 457.236 396.756 457.236 395.832 cv
457.236 394.944 457.5 394.224 458.028 393.672 cv
458.556 393.132 459.264 392.856 460.152 392.856 cv
461.16 392.856 461.94 393.252 462.468 394.02 cv
462.996 394.8 463.271 395.928 463.271 397.392 cv
463.271 398.784 462.936 399.876 462.288 400.692 cv
461.628 401.508 460.752 401.916 459.648 401.916 cv
459.348 401.916 459.048 401.88 458.748 401.832 cv
458.436 401.784 458.124 401.7 457.8 401.58 cv
ef
467.976 392.856 mo
468.948 392.856 469.692 393.252 470.22 394.02 cv
470.736 394.8 471 395.928 471 397.392 cv
471 398.868 470.736 399.996 470.22 400.764 cv
469.692 401.532 468.948 401.916 467.976 401.916 cv
466.992 401.916 466.236 401.532 465.72 400.764 cv
465.204 399.996 464.952 398.868 464.952 397.392 cv
464.952 395.928 465.204 394.8 465.72 394.02 cv
466.236 393.252 466.992 392.856 467.976 392.856 cv
467.976 392.856 li
cp
467.976 393.792 mo
467.364 393.792 466.908 394.092 466.596 394.692 cv
466.284 395.292 466.14 396.192 466.14 397.392 cv
466.14 398.592 466.284 399.492 466.596 400.092 cv
466.908 400.692 467.364 400.992 467.976 400.992 cv
468.588 400.992 469.044 400.692 469.356 400.092 cv
469.656 399.492 469.813 398.592 469.813 397.392 cv
469.813 396.192 469.656 395.292 469.356 394.692 cv
469.044 394.092 468.588 393.792 467.976 393.792 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
510.184 388.8 mo
510.184 43.2002 li
@
grestore
510.184 388.8 mo
510.184 384.8 li
f
510.184 388.8 mo
510.184 384.8 li
@
510.184 43.2002 mo
510.184 47.2002 li
f
510.184 43.2002 mo
510.184 47.2002 li
@
498.144 400.764 mo
502.271 400.764 li
502.271 401.76 li
496.716 401.76 li
496.716 400.764 li
497.16 400.308 497.771 399.684 498.552 398.892 cv
499.32 398.112 499.813 397.608 500.016 397.38 cv
500.4 396.96 500.664 396.6 500.808 396.3 cv
500.952 396.012 501.036 395.712 501.036 395.424 cv
501.036 394.968 500.868 394.584 500.544 394.296 cv
500.22 394.008 499.8 393.852 499.271 393.852 cv
498.9 393.852 498.504 393.924 498.096 394.044 cv
497.688 394.176 497.244 394.368 496.776 394.632 cv
496.776 393.432 li
497.256 393.24 497.7 393.096 498.108 393 cv
498.516 392.904 498.9 392.856 499.248 392.856 cv
500.148 392.856 500.868 393.084 501.408 393.54 cv
501.948 393.996 502.224 394.596 502.224 395.352 cv
502.224 395.712 502.152 396.06 502.02 396.372 cv
501.888 396.696 501.648 397.08 501.288 397.512 cv
501.192 397.632 500.88 397.956 500.352 398.496 cv
499.824 399.036 499.092 399.792 498.144 400.764 cv
498.144 400.764 li
cp
ef
507.096 392.856 mo
508.068 392.856 508.813 393.252 509.34 394.02 cv
509.856 394.8 510.12 395.928 510.12 397.392 cv
510.12 398.868 509.856 399.996 509.34 400.764 cv
508.813 401.532 508.068 401.916 507.096 401.916 cv
506.112 401.916 505.356 401.532 504.84 400.764 cv
504.324 399.996 504.072 398.868 504.072 397.392 cv
504.072 395.928 504.324 394.8 504.84 394.02 cv
505.356 393.252 506.112 392.856 507.096 392.856 cv
507.096 392.856 li
cp
507.096 393.792 mo
506.484 393.792 506.028 394.092 505.716 394.692 cv
505.404 395.292 505.26 396.192 505.26 397.392 cv
505.26 398.592 505.404 399.492 505.716 400.092 cv
506.028 400.692 506.484 400.992 507.096 400.992 cv
507.708 400.992 508.164 400.692 508.476 400.092 cv
508.776 399.492 508.932 398.592 508.932 397.392 cv
508.932 396.192 508.776 395.292 508.476 394.692 cv
508.164 394.092 507.708 393.792 507.096 393.792 cv
ef
512.448 400.764 mo
514.38 400.764 li
514.38 394.092 li
512.28 394.512 li
512.28 393.432 li
514.368 393.012 li
515.556 393.012 li
515.556 400.764 li
517.488 400.764 li
517.488 401.76 li
512.448 401.76 li
512.448 400.764 li
512.448 400.764 li
cp
ef
522.456 392.856 mo
523.428 392.856 524.172 393.252 524.7 394.02 cv
525.216 394.8 525.48 395.928 525.48 397.392 cv
525.48 398.868 525.216 399.996 524.7 400.764 cv
524.172 401.532 523.428 401.916 522.456 401.916 cv
521.472 401.916 520.716 401.532 520.2 400.764 cv
519.684 399.996 519.432 398.868 519.432 397.392 cv
519.432 395.928 519.684 394.8 520.2 394.02 cv
520.716 393.252 521.472 392.856 522.456 392.856 cv
522.456 392.856 li
cp
522.456 393.792 mo
521.844 393.792 521.388 394.092 521.076 394.692 cv
520.764 395.292 520.62 396.192 520.62 397.392 cv
520.62 398.592 520.764 399.492 521.076 400.092 cv
521.388 400.692 521.844 400.992 522.456 400.992 cv
523.068 400.992 523.524 400.692 523.836 400.092 cv
524.136 399.492 524.292 398.592 524.292 397.392 cv
524.292 396.192 524.136 395.292 523.836 394.692 cv
523.524 394.092 523.068 393.792 522.456 393.792 cv
ef
282.468 406.932 mo
283.728 406.932 li
286.152 410.532 li
288.564 406.932 li
289.836 406.932 li
286.74 411.516 li
286.74 415.68 li
285.552 415.68 li
285.552 411.516 li
282.468 406.932 li
282.468 406.932 li
cp
ef
293.904 411.816 mo
293.892 411.228 293.724 410.76 293.412 410.4 cv
293.088 410.052 292.656 409.872 292.128 409.872 cv
291.528 409.872 291.048 410.052 290.688 410.388 cv
290.328 410.724 290.112 411.204 290.064 411.816 cv
293.904 411.816 li
293.904 411.816 li
cp
294.984 412.128 mo
294.984 412.656 li
290.028 412.656 li
290.076 413.4 290.292 413.976 290.7 414.36 cv
291.096 414.744 291.648 414.936 292.368 414.936 cv
292.776 414.936 293.184 414.888 293.568 414.792 cv
293.952 414.696 294.348 414.54 294.732 414.324 cv
294.732 415.344 li
294.348 415.512 293.952 415.644 293.544 415.716 cv
293.136 415.788 292.716 415.836 292.308 415.836 cv
291.252 415.836 290.424 415.536 289.813 414.936 cv
289.2 414.336 288.9 413.508 288.9 412.464 cv
288.9 411.396 289.188 410.544 289.764 409.908 cv
290.34 409.284 291.132 408.96 292.116 408.96 cv
293.004 408.96 293.7 409.248 294.216 409.812 cv
294.72 410.388 294.984 411.156 294.984 412.128 cv
ef
301.944 411.936 mo
301.944 415.68 li
300.864 415.68 li
300.864 414.684 li
300.612 415.092 300.3 415.38 299.94 415.56 cv
299.58 415.74 299.124 415.836 298.596 415.836 cv
297.924 415.836 297.384 415.656 296.988 415.284 cv
296.592 414.912 296.4 414.408 296.4 413.771 cv
296.4 413.04 296.64 412.488 297.144 412.104 cv
297.636 411.732 298.368 411.54 299.352 411.54 cv
300.864 411.54 li
300.864 411.432 li
300.864 410.94 300.696 410.556 300.372 410.28 cv
300.048 410.016 299.592 409.872 299.004 409.872 cv
298.62 409.872 298.26 409.92 297.9 410.016 cv
297.54 410.112 297.204 410.244 296.88 410.412 cv
296.88 409.416 li
297.264 409.271 297.648 409.152 298.02 409.08 cv
298.392 409.008 298.752 408.96 299.112 408.96 cv
300.06 408.96 300.768 409.212 301.236 409.704 cv
301.704 410.196 301.944 410.94 301.944 411.936 cv
301.944 411.936 li
cp
299.796 412.38 mo
298.92 412.38 298.32 412.488 297.984 412.68 cv
297.648 412.884 297.48 413.22 297.48 413.7 cv
297.48 414.084 297.6 414.396 297.852 414.612 cv
298.104 414.84 298.452 414.948 298.884 414.948 cv
299.484 414.948 299.964 414.744 300.324 414.312 cv
300.684 413.892 300.864 413.328 300.864 412.62 cv
300.864 412.38 li
299.796 412.38 li
ef
307.813 410.124 mo
307.692 410.052 307.56 410.004 307.416 409.968 cv
307.272 409.944 307.116 409.92 306.948 409.92 cv
306.336 409.92 305.868 410.124 305.544 410.52 cv
305.208 410.916 305.052 411.48 305.052 412.224 cv
305.052 415.68 li
303.972 415.68 li
303.972 409.116 li
305.052 409.116 li
305.052 410.136 li
305.268 409.74 305.568 409.44 305.928 409.248 cv
306.288 409.056 306.732 408.96 307.26 408.96 cv
307.332 408.96 307.416 408.972 307.512 408.972 cv
307.596 408.984 307.692 408.996 307.813 409.02 cv
307.813 410.124 li
307.813 410.124 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 388.8 mo
518.4 388.8 li
@
grestore
72 388.8 mo
76 388.8 li
f
72 388.8 mo
76 388.8 li
@
518.4 388.8 mo
514.4 388.8 li
f
518.4 388.8 mo
514.4 388.8 li
@
46.7759 384.216 mo
47.748 384.216 48.4922 384.612 49.02 385.38 cv
49.5361 386.16 49.7998 387.288 49.7998 388.752 cv
49.7998 390.228 49.5361 391.356 49.02 392.124 cv
48.4922 392.892 47.748 393.276 46.7759 393.276 cv
45.792 393.276 45.0361 392.892 44.52 392.124 cv
44.0039 391.356 43.752 390.228 43.752 388.752 cv
43.752 387.288 44.0039 386.16 44.52 385.38 cv
45.0361 384.612 45.792 384.216 46.7759 384.216 cv
46.7759 384.216 li
cp
46.7759 385.152 mo
46.1641 385.152 45.708 385.452 45.396 386.052 cv
45.084 386.652 44.9399 387.552 44.9399 388.752 cv
44.9399 389.952 45.084 390.852 45.396 391.452 cv
45.708 392.052 46.1641 392.352 46.7759 392.352 cv
47.3882 392.352 47.8438 392.052 48.1558 391.452 cv
48.4561 390.852 48.6118 389.952 48.6118 388.752 cv
48.6118 387.552 48.4561 386.652 48.1558 386.052 cv
47.8438 385.452 47.3882 385.152 46.7759 385.152 cv
ef
51.6841 391.632 mo
52.9199 391.632 li
52.9199 393.12 li
51.6841 393.12 li
51.6841 391.632 li
51.6841 391.632 li
cp
ef
58.0562 384.216 mo
59.0278 384.216 59.772 384.612 60.2998 385.38 cv
60.8159 386.16 61.0801 387.288 61.0801 388.752 cv
61.0801 390.228 60.8159 391.356 60.2998 392.124 cv
59.772 392.892 59.0278 393.276 58.0562 393.276 cv
57.0718 393.276 56.3159 392.892 55.7998 392.124 cv
55.2842 391.356 55.0322 390.228 55.0322 388.752 cv
55.0322 387.288 55.2842 386.16 55.7998 385.38 cv
56.3159 384.612 57.0718 384.216 58.0562 384.216 cv
58.0562 384.216 li
cp
58.0562 385.152 mo
57.4438 385.152 56.9878 385.452 56.6758 386.052 cv
56.3638 386.652 56.2202 387.552 56.2202 388.752 cv
56.2202 389.952 56.3638 390.852 56.6758 391.452 cv
56.9878 392.052 57.4438 392.352 58.0562 392.352 cv
58.668 392.352 59.124 392.052 59.436 391.452 cv
59.7358 390.852 59.8921 389.952 59.8921 388.752 cv
59.8921 387.552 59.7358 386.652 59.436 386.052 cv
59.124 385.452 58.668 385.152 58.0562 385.152 cv
ef
65.7358 384.216 mo
66.708 384.216 67.4521 384.612 67.98 385.38 cv
68.4961 386.16 68.7598 387.288 68.7598 388.752 cv
68.7598 390.228 68.4961 391.356 67.98 392.124 cv
67.4521 392.892 66.708 393.276 65.7358 393.276 cv
64.752 393.276 63.9961 392.892 63.48 392.124 cv
62.9639 391.356 62.7119 390.228 62.7119 388.752 cv
62.7119 387.288 62.9639 386.16 63.48 385.38 cv
63.9961 384.612 64.752 384.216 65.7358 384.216 cv
65.7358 384.216 li
cp
65.7358 385.152 mo
65.124 385.152 64.668 385.452 64.356 386.052 cv
64.0439 386.652 63.8999 387.552 63.8999 388.752 cv
63.8999 389.952 64.0439 390.852 64.356 391.452 cv
64.668 392.052 65.124 392.352 65.7358 392.352 cv
66.3481 392.352 66.8042 392.052 67.1162 391.452 cv
67.416 390.852 67.5718 389.952 67.5718 388.752 cv
67.5718 387.552 67.416 386.652 67.1162 386.052 cv
66.8042 385.452 66.3481 385.152 65.7358 385.152 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 350.4 mo
518.4 350.4 li
@
grestore
72 350.4 mo
76 350.4 li
f
72 350.4 mo
76 350.4 li
@
518.4 350.4 mo
514.4 350.4 li
f
518.4 350.4 mo
514.4 350.4 li
@
47.0161 345.816 mo
47.9878 345.816 48.7319 346.212 49.2598 346.98 cv
49.7759 347.76 50.04 348.888 50.04 350.352 cv
50.04 351.828 49.7759 352.956 49.2598 353.724 cv
48.7319 354.492 47.9878 354.876 47.0161 354.876 cv
46.0322 354.876 45.2759 354.492 44.7598 353.724 cv
44.2441 352.956 43.9922 351.828 43.9922 350.352 cv
43.9922 348.888 44.2441 347.76 44.7598 346.98 cv
45.2759 346.212 46.0322 345.816 47.0161 345.816 cv
47.0161 345.816 li
cp
47.0161 346.752 mo
46.4038 346.752 45.9482 347.052 45.6362 347.652 cv
45.3242 348.252 45.1802 349.152 45.1802 350.352 cv
45.1802 351.552 45.3242 352.452 45.6362 353.052 cv
45.9482 353.652 46.4038 353.952 47.0161 353.952 cv
47.6279 353.952 48.084 353.652 48.396 353.052 cv
48.6958 352.452 48.8521 351.552 48.8521 350.352 cv
48.8521 349.152 48.6958 348.252 48.396 347.652 cv
48.084 347.052 47.6279 346.752 47.0161 346.752 cv
ef
51.9238 353.232 mo
53.1602 353.232 li
53.1602 354.72 li
51.9238 354.72 li
51.9238 353.232 li
51.9238 353.232 li
cp
ef
58.2959 345.816 mo
59.2681 345.816 60.0122 346.212 60.54 346.98 cv
61.0562 347.76 61.3198 348.888 61.3198 350.352 cv
61.3198 351.828 61.0562 352.956 60.54 353.724 cv
60.0122 354.492 59.2681 354.876 58.2959 354.876 cv
57.312 354.876 56.5562 354.492 56.04 353.724 cv
55.5239 352.956 55.272 351.828 55.272 350.352 cv
55.272 348.888 55.5239 347.76 56.04 346.98 cv
56.5562 346.212 57.312 345.816 58.2959 345.816 cv
58.2959 345.816 li
cp
58.2959 346.752 mo
57.6841 346.752 57.228 347.052 56.916 347.652 cv
56.604 348.252 56.46 349.152 56.46 350.352 cv
56.46 351.552 56.604 352.452 56.916 353.052 cv
57.228 353.652 57.6841 353.952 58.2959 353.952 cv
58.9082 353.952 59.3638 353.652 59.6758 353.052 cv
59.9761 352.452 60.1318 351.552 60.1318 350.352 cv
60.1318 349.152 59.9761 348.252 59.6758 347.652 cv
59.3638 347.052 58.9082 346.752 58.2959 346.752 cv
ef
63.4561 345.972 mo
68.1001 345.972 li
68.1001 346.968 li
64.5361 346.968 li
64.5361 349.116 li
64.7041 349.056 64.8838 349.008 65.0518 348.984 cv
65.2202 348.96 65.3999 348.936 65.5679 348.936 cv
66.54 348.936 67.3081 349.212 67.8838 349.74 cv
68.46 350.28 68.748 351 68.748 351.912 cv
68.748 352.86 68.4482 353.592 67.8599 354.108 cv
67.272 354.624 66.4438 354.876 65.3882 354.876 cv
65.0161 354.876 64.644 354.84 64.2598 354.792 cv
63.876 354.732 63.4922 354.648 63.084 354.516 cv
63.084 353.328 li
63.4321 353.52 63.792 353.664 64.1758 353.76 cv
64.5479 353.856 64.9438 353.892 65.3638 353.892 cv
66.0361 353.892 66.5762 353.724 66.9722 353.364 cv
67.356 353.004 67.5601 352.524 67.5601 351.912 cv
67.5601 351.312 67.356 350.832 66.9722 350.472 cv
66.5762 350.112 66.0361 349.932 65.3638 349.932 cv
65.0518 349.932 64.728 349.968 64.416 350.04 cv
64.104 350.112 63.7798 350.22 63.4561 350.364 cv
63.4561 345.972 li
63.4561 345.972 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 312 mo
518.4 312 li
@
grestore
72 312 mo
76 312 li
f
72 312 mo
76 312 li
@
518.4 312 mo
514.4 312 li
f
518.4 312 mo
514.4 312 li
@
46.7759 307.416 mo
47.748 307.416 48.4922 307.812 49.02 308.58 cv
49.5361 309.36 49.7998 310.488 49.7998 311.952 cv
49.7998 313.428 49.5361 314.556 49.02 315.324 cv
48.4922 316.092 47.748 316.476 46.7759 316.476 cv
45.792 316.476 45.0361 316.092 44.52 315.324 cv
44.0039 314.556 43.752 313.428 43.752 311.952 cv
43.752 310.488 44.0039 309.36 44.52 308.58 cv
45.0361 307.812 45.792 307.416 46.7759 307.416 cv
46.7759 307.416 li
cp
46.7759 308.352 mo
46.1641 308.352 45.708 308.652 45.396 309.252 cv
45.084 309.852 44.9399 310.752 44.9399 311.952 cv
44.9399 313.152 45.084 314.052 45.396 314.652 cv
45.708 315.252 46.1641 315.552 46.7759 315.552 cv
47.3882 315.552 47.8438 315.252 48.1558 314.652 cv
48.4561 314.052 48.6118 313.152 48.6118 311.952 cv
48.6118 310.752 48.4561 309.852 48.1558 309.252 cv
47.8438 308.652 47.3882 308.352 46.7759 308.352 cv
ef
51.6841 314.832 mo
52.9199 314.832 li
52.9199 316.32 li
51.6841 316.32 li
51.6841 314.832 li
51.6841 314.832 li
cp
ef
55.728 315.324 mo
57.6602 315.324 li
57.6602 308.652 li
55.5601 309.072 li
55.5601 307.992 li
57.6479 307.572 li
58.8359 307.572 li
58.8359 315.324 li
60.7681 315.324 li
60.7681 316.32 li
55.728 316.32 li
55.728 315.324 li
55.728 315.324 li
cp
ef
65.7358 307.416 mo
66.708 307.416 67.4521 307.812 67.98 308.58 cv
68.4961 309.36 68.7598 310.488 68.7598 311.952 cv
68.7598 313.428 68.4961 314.556 67.98 315.324 cv
67.4521 316.092 66.708 316.476 65.7358 316.476 cv
64.752 316.476 63.9961 316.092 63.48 315.324 cv
62.9639 314.556 62.7119 313.428 62.7119 311.952 cv
62.7119 310.488 62.9639 309.36 63.48 308.58 cv
63.9961 307.812 64.752 307.416 65.7358 307.416 cv
65.7358 307.416 li
cp
65.7358 308.352 mo
65.124 308.352 64.668 308.652 64.356 309.252 cv
64.0439 309.852 63.8999 310.752 63.8999 311.952 cv
63.8999 313.152 64.0439 314.052 64.356 314.652 cv
64.668 315.252 65.124 315.552 65.7358 315.552 cv
66.3481 315.552 66.8042 315.252 67.1162 314.652 cv
67.416 314.052 67.5718 313.152 67.5718 311.952 cv
67.5718 310.752 67.416 309.852 67.1162 309.252 cv
66.8042 308.652 66.3481 308.352 65.7358 308.352 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 273.6 mo
518.4 273.6 li
@
grestore
72 273.6 mo
76 273.6 li
f
72 273.6 mo
76 273.6 li
@
518.4 273.6 mo
514.4 273.6 li
f
518.4 273.6 mo
514.4 273.6 li
@
47.0161 269.016 mo
47.9878 269.016 48.7319 269.412 49.2598 270.18 cv
49.7759 270.96 50.04 272.088 50.04 273.552 cv
50.04 275.028 49.7759 276.156 49.2598 276.924 cv
48.7319 277.692 47.9878 278.076 47.0161 278.076 cv
46.0322 278.076 45.2759 277.692 44.7598 276.924 cv
44.2441 276.156 43.9922 275.028 43.9922 273.552 cv
43.9922 272.088 44.2441 270.96 44.7598 270.18 cv
45.2759 269.412 46.0322 269.016 47.0161 269.016 cv
47.0161 269.016 li
cp
47.0161 269.952 mo
46.4038 269.952 45.9482 270.252 45.6362 270.852 cv
45.3242 271.452 45.1802 272.352 45.1802 273.552 cv
45.1802 274.752 45.3242 275.652 45.6362 276.252 cv
45.9482 276.852 46.4038 277.152 47.0161 277.152 cv
47.6279 277.152 48.084 276.852 48.396 276.252 cv
48.6958 275.652 48.8521 274.752 48.8521 273.552 cv
48.8521 272.352 48.6958 271.452 48.396 270.852 cv
48.084 270.252 47.6279 269.952 47.0161 269.952 cv
ef
51.9238 276.432 mo
53.1602 276.432 li
53.1602 277.92 li
51.9238 277.92 li
51.9238 276.432 li
51.9238 276.432 li
cp
ef
55.9678 276.924 mo
57.8999 276.924 li
57.8999 270.252 li
55.7998 270.672 li
55.7998 269.592 li
57.8882 269.172 li
59.0762 269.172 li
59.0762 276.924 li
61.0078 276.924 li
61.0078 277.92 li
55.9678 277.92 li
55.9678 276.924 li
55.9678 276.924 li
cp
ef
63.4561 269.172 mo
68.1001 269.172 li
68.1001 270.168 li
64.5361 270.168 li
64.5361 272.316 li
64.7041 272.256 64.8838 272.208 65.0518 272.184 cv
65.2202 272.16 65.3999 272.136 65.5679 272.136 cv
66.54 272.136 67.3081 272.412 67.8838 272.94 cv
68.46 273.48 68.748 274.2 68.748 275.112 cv
68.748 276.06 68.4482 276.792 67.8599 277.308 cv
67.272 277.824 66.4438 278.076 65.3882 278.076 cv
65.0161 278.076 64.644 278.04 64.2598 277.992 cv
63.876 277.932 63.4922 277.848 63.084 277.716 cv
63.084 276.528 li
63.4321 276.72 63.792 276.864 64.1758 276.96 cv
64.5479 277.056 64.9438 277.092 65.3638 277.092 cv
66.0361 277.092 66.5762 276.924 66.9722 276.564 cv
67.356 276.204 67.5601 275.724 67.5601 275.112 cv
67.5601 274.512 67.356 274.032 66.9722 273.672 cv
66.5762 273.312 66.0361 273.132 65.3638 273.132 cv
65.0518 273.132 64.728 273.168 64.416 273.24 cv
64.104 273.312 63.7798 273.42 63.4561 273.564 cv
63.4561 269.172 li
63.4561 269.172 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 235.2 mo
518.4 235.2 li
@
grestore
72 235.2 mo
76 235.2 li
f
72 235.2 mo
76 235.2 li
@
518.4 235.2 mo
514.4 235.2 li
f
518.4 235.2 mo
514.4 235.2 li
@
46.7759 230.616 mo
47.748 230.616 48.4922 231.012 49.02 231.78 cv
49.5361 232.56 49.7998 233.688 49.7998 235.152 cv
49.7998 236.628 49.5361 237.756 49.02 238.524 cv
48.4922 239.292 47.748 239.676 46.7759 239.676 cv
45.792 239.676 45.0361 239.292 44.52 238.524 cv
44.0039 237.756 43.752 236.628 43.752 235.152 cv
43.752 233.688 44.0039 232.56 44.52 231.78 cv
45.0361 231.012 45.792 230.616 46.7759 230.616 cv
46.7759 230.616 li
cp
46.7759 231.552 mo
46.1641 231.552 45.708 231.852 45.396 232.452 cv
45.084 233.052 44.9399 233.952 44.9399 235.152 cv
44.9399 236.352 45.084 237.252 45.396 237.852 cv
45.708 238.452 46.1641 238.752 46.7759 238.752 cv
47.3882 238.752 47.8438 238.452 48.1558 237.852 cv
48.4561 237.252 48.6118 236.352 48.6118 235.152 cv
48.6118 233.952 48.4561 233.052 48.1558 232.452 cv
47.8438 231.852 47.3882 231.552 46.7759 231.552 cv
ef
51.6841 238.032 mo
52.9199 238.032 li
52.9199 239.52 li
51.6841 239.52 li
51.6841 238.032 li
51.6841 238.032 li
cp
ef
56.5439 238.524 mo
60.6719 238.524 li
60.6719 239.52 li
55.1162 239.52 li
55.1162 238.524 li
55.5601 238.068 56.1719 237.444 56.9521 236.652 cv
57.7202 235.872 58.2119 235.368 58.416 235.14 cv
58.7998 234.72 59.064 234.36 59.208 234.06 cv
59.3521 233.771 59.436 233.472 59.436 233.184 cv
59.436 232.728 59.2681 232.344 58.9438 232.056 cv
58.6201 231.768 58.2002 231.612 57.6719 231.612 cv
57.2998 231.612 56.9038 231.684 56.4961 231.804 cv
56.0879 231.936 55.644 232.128 55.1758 232.392 cv
55.1758 231.192 li
55.6558 231 56.1001 230.855 56.5078 230.76 cv
56.916 230.664 57.2998 230.616 57.6479 230.616 cv
58.5479 230.616 59.2681 230.844 59.8081 231.3 cv
60.3481 231.756 60.624 232.355 60.624 233.112 cv
60.624 233.472 60.5518 233.82 60.4199 234.132 cv
60.2881 234.456 60.0479 234.84 59.688 235.271 cv
59.5918 235.392 59.2798 235.716 58.752 236.256 cv
58.2241 236.796 57.4922 237.552 56.5439 238.524 cv
56.5439 238.524 li
cp
ef
65.7358 230.616 mo
66.708 230.616 67.4521 231.012 67.98 231.78 cv
68.4961 232.56 68.7598 233.688 68.7598 235.152 cv
68.7598 236.628 68.4961 237.756 67.98 238.524 cv
67.4521 239.292 66.708 239.676 65.7358 239.676 cv
64.752 239.676 63.9961 239.292 63.48 238.524 cv
62.9639 237.756 62.7119 236.628 62.7119 235.152 cv
62.7119 233.688 62.9639 232.56 63.48 231.78 cv
63.9961 231.012 64.752 230.616 65.7358 230.616 cv
65.7358 230.616 li
cp
65.7358 231.552 mo
65.124 231.552 64.668 231.852 64.356 232.452 cv
64.0439 233.052 63.8999 233.952 63.8999 235.152 cv
63.8999 236.352 64.0439 237.252 64.356 237.852 cv
64.668 238.452 65.124 238.752 65.7358 238.752 cv
66.3481 238.752 66.8042 238.452 67.1162 237.852 cv
67.416 237.252 67.5718 236.352 67.5718 235.152 cv
67.5718 233.952 67.416 233.052 67.1162 232.452 cv
66.8042 231.852 66.3481 231.552 65.7358 231.552 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 196.8 mo
518.4 196.8 li
@
grestore
72 196.8 mo
76 196.8 li
f
72 196.8 mo
76 196.8 li
@
518.4 196.8 mo
514.4 196.8 li
f
518.4 196.8 mo
514.4 196.8 li
@
47.0161 192.216 mo
47.9878 192.216 48.7319 192.612 49.2598 193.38 cv
49.7759 194.16 50.04 195.288 50.04 196.752 cv
50.04 198.228 49.7759 199.356 49.2598 200.124 cv
48.7319 200.892 47.9878 201.276 47.0161 201.276 cv
46.0322 201.276 45.2759 200.892 44.7598 200.124 cv
44.2441 199.356 43.9922 198.228 43.9922 196.752 cv
43.9922 195.288 44.2441 194.16 44.7598 193.38 cv
45.2759 192.612 46.0322 192.216 47.0161 192.216 cv
47.0161 192.216 li
cp
47.0161 193.152 mo
46.4038 193.152 45.9482 193.452 45.6362 194.052 cv
45.3242 194.652 45.1802 195.552 45.1802 196.752 cv
45.1802 197.952 45.3242 198.852 45.6362 199.452 cv
45.9482 200.052 46.4038 200.352 47.0161 200.352 cv
47.6279 200.352 48.084 200.052 48.396 199.452 cv
48.6958 198.852 48.8521 197.952 48.8521 196.752 cv
48.8521 195.552 48.6958 194.652 48.396 194.052 cv
48.084 193.452 47.6279 193.152 47.0161 193.152 cv
ef
51.9238 199.632 mo
53.1602 199.632 li
53.1602 201.12 li
51.9238 201.12 li
51.9238 199.632 li
51.9238 199.632 li
cp
ef
56.7842 200.124 mo
60.9121 200.124 li
60.9121 201.12 li
55.356 201.12 li
55.356 200.124 li
55.7998 199.668 56.4121 199.044 57.1919 198.252 cv
57.96 197.472 58.4521 196.968 58.6558 196.74 cv
59.04 196.32 59.3042 195.96 59.4482 195.66 cv
59.5918 195.372 59.6758 195.072 59.6758 194.784 cv
59.6758 194.328 59.5078 193.944 59.1841 193.656 cv
58.8599 193.368 58.4399 193.212 57.9121 193.212 cv
57.54 193.212 57.144 193.284 56.7358 193.404 cv
56.3281 193.536 55.8838 193.728 55.416 193.992 cv
55.416 192.792 li
55.896 192.6 56.3398 192.456 56.748 192.36 cv
57.1558 192.264 57.54 192.216 57.8882 192.216 cv
58.7881 192.216 59.5078 192.444 60.0479 192.9 cv
60.5879 193.356 60.8638 193.956 60.8638 194.712 cv
60.8638 195.072 60.792 195.42 60.6602 195.732 cv
60.5278 196.056 60.2881 196.44 59.9282 196.872 cv
59.832 196.992 59.52 197.316 58.9922 197.856 cv
58.4639 198.396 57.7319 199.152 56.7842 200.124 cv
56.7842 200.124 li
cp
ef
63.4561 192.372 mo
68.1001 192.372 li
68.1001 193.368 li
64.5361 193.368 li
64.5361 195.516 li
64.7041 195.456 64.8838 195.408 65.0518 195.384 cv
65.2202 195.36 65.3999 195.336 65.5679 195.336 cv
66.54 195.336 67.3081 195.612 67.8838 196.14 cv
68.46 196.68 68.748 197.4 68.748 198.312 cv
68.748 199.26 68.4482 199.992 67.8599 200.508 cv
67.272 201.024 66.4438 201.276 65.3882 201.276 cv
65.0161 201.276 64.644 201.24 64.2598 201.192 cv
63.876 201.132 63.4922 201.048 63.084 200.916 cv
63.084 199.728 li
63.4321 199.92 63.792 200.064 64.1758 200.16 cv
64.5479 200.256 64.9438 200.292 65.3638 200.292 cv
66.0361 200.292 66.5762 200.124 66.9722 199.764 cv
67.356 199.404 67.5601 198.924 67.5601 198.312 cv
67.5601 197.712 67.356 197.232 66.9722 196.872 cv
66.5762 196.512 66.0361 196.332 65.3638 196.332 cv
65.0518 196.332 64.728 196.368 64.416 196.44 cv
64.104 196.512 63.7798 196.62 63.4561 196.764 cv
63.4561 192.372 li
63.4561 192.372 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 158.4 mo
518.4 158.4 li
@
grestore
72 158.4 mo
76 158.4 li
f
72 158.4 mo
76 158.4 li
@
518.4 158.4 mo
514.4 158.4 li
f
518.4 158.4 mo
514.4 158.4 li
@
46.7759 153.816 mo
47.748 153.816 48.4922 154.212 49.02 154.98 cv
49.5361 155.76 49.7998 156.888 49.7998 158.352 cv
49.7998 159.828 49.5361 160.956 49.02 161.724 cv
48.4922 162.492 47.748 162.876 46.7759 162.876 cv
45.792 162.876 45.0361 162.492 44.52 161.724 cv
44.0039 160.956 43.752 159.828 43.752 158.352 cv
43.752 156.888 44.0039 155.76 44.52 154.98 cv
45.0361 154.212 45.792 153.816 46.7759 153.816 cv
46.7759 153.816 li
cp
46.7759 154.752 mo
46.1641 154.752 45.708 155.052 45.396 155.652 cv
45.084 156.252 44.9399 157.152 44.9399 158.352 cv
44.9399 159.552 45.084 160.452 45.396 161.052 cv
45.708 161.652 46.1641 161.952 46.7759 161.952 cv
47.3882 161.952 47.8438 161.652 48.1558 161.052 cv
48.4561 160.452 48.6118 159.552 48.6118 158.352 cv
48.6118 157.152 48.4561 156.252 48.1558 155.652 cv
47.8438 155.052 47.3882 154.752 46.7759 154.752 cv
ef
51.6841 161.232 mo
52.9199 161.232 li
52.9199 162.72 li
51.6841 162.72 li
51.6841 161.232 li
51.6841 161.232 li
cp
ef
59.1118 158.004 mo
59.6758 158.124 60.1201 158.376 60.4321 158.76 cv
60.7441 159.144 60.9121 159.624 60.9121 160.176 cv
60.9121 161.04 60.6118 161.712 60.0239 162.18 cv
59.4238 162.648 58.584 162.876 57.4922 162.876 cv
57.1201 162.876 56.7358 162.84 56.3521 162.768 cv
55.9678 162.708 55.5601 162.6 55.1519 162.456 cv
55.1519 161.316 li
55.4761 161.508 55.8359 161.652 56.2319 161.748 cv
56.6162 161.844 57.0239 161.892 57.4561 161.892 cv
58.2002 161.892 58.7642 161.748 59.1479 161.46 cv
59.5322 161.172 59.7358 160.74 59.7358 160.176 cv
59.7358 159.672 59.5562 159.264 59.1958 158.976 cv
58.8359 158.688 58.332 158.532 57.6841 158.532 cv
56.6641 158.532 li
56.6641 157.56 li
57.7319 157.56 li
58.3081 157.56 58.752 157.452 59.064 157.212 cv
59.376 156.984 59.5322 156.648 59.5322 156.204 cv
59.5322 155.76 59.3638 155.412 59.0518 155.172 cv
58.728 154.932 58.272 154.812 57.6841 154.812 cv
57.3599 154.812 57.0122 154.848 56.6401 154.92 cv
56.2681 154.992 55.8599 155.1 55.416 155.244 cv
55.416 154.188 li
55.8599 154.068 56.2798 153.972 56.6758 153.912 cv
57.0601 153.852 57.4321 153.816 57.792 153.816 cv
58.6802 153.816 59.3882 154.02 59.916 154.428 cv
60.4438 154.836 60.708 155.388 60.708 156.084 cv
60.708 156.564 60.564 156.972 60.2881 157.308 cv
60.0122 157.644 59.6162 157.884 59.1118 158.004 cv
59.1118 158.004 li
cp
ef
65.7358 153.816 mo
66.708 153.816 67.4521 154.212 67.98 154.98 cv
68.4961 155.76 68.7598 156.888 68.7598 158.352 cv
68.7598 159.828 68.4961 160.956 67.98 161.724 cv
67.4521 162.492 66.708 162.876 65.7358 162.876 cv
64.752 162.876 63.9961 162.492 63.48 161.724 cv
62.9639 160.956 62.7119 159.828 62.7119 158.352 cv
62.7119 156.888 62.9639 155.76 63.48 154.98 cv
63.9961 154.212 64.752 153.816 65.7358 153.816 cv
65.7358 153.816 li
cp
65.7358 154.752 mo
65.124 154.752 64.668 155.052 64.356 155.652 cv
64.0439 156.252 63.8999 157.152 63.8999 158.352 cv
63.8999 159.552 64.0439 160.452 64.356 161.052 cv
64.668 161.652 65.124 161.952 65.7358 161.952 cv
66.3481 161.952 66.8042 161.652 67.1162 161.052 cv
67.416 160.452 67.5718 159.552 67.5718 158.352 cv
67.5718 157.152 67.416 156.252 67.1162 155.652 cv
66.8042 155.052 66.3481 154.752 65.7358 154.752 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 120 mo
518.4 120 li
@
grestore
72 120 mo
76 120 li
f
72 120 mo
76 120 li
@
518.4 120 mo
514.4 120 li
f
518.4 120 mo
514.4 120 li
@
47.0161 115.416 mo
47.9878 115.416 48.7319 115.812 49.2598 116.58 cv
49.7759 117.36 50.04 118.488 50.04 119.952 cv
50.04 121.428 49.7759 122.556 49.2598 123.324 cv
48.7319 124.092 47.9878 124.476 47.0161 124.476 cv
46.0322 124.476 45.2759 124.092 44.7598 123.324 cv
44.2441 122.556 43.9922 121.428 43.9922 119.952 cv
43.9922 118.488 44.2441 117.36 44.7598 116.58 cv
45.2759 115.812 46.0322 115.416 47.0161 115.416 cv
47.0161 115.416 li
cp
47.0161 116.352 mo
46.4038 116.352 45.9482 116.652 45.6362 117.252 cv
45.3242 117.852 45.1802 118.752 45.1802 119.952 cv
45.1802 121.152 45.3242 122.052 45.6362 122.652 cv
45.9482 123.252 46.4038 123.552 47.0161 123.552 cv
47.6279 123.552 48.084 123.252 48.396 122.652 cv
48.6958 122.052 48.8521 121.152 48.8521 119.952 cv
48.8521 118.752 48.6958 117.852 48.396 117.252 cv
48.084 116.652 47.6279 116.352 47.0161 116.352 cv
ef
51.9238 122.832 mo
53.1602 122.832 li
53.1602 124.32 li
51.9238 124.32 li
51.9238 122.832 li
51.9238 122.832 li
cp
ef
59.3521 119.604 mo
59.916 119.724 60.3599 119.976 60.6719 120.36 cv
60.9839 120.744 61.1519 121.224 61.1519 121.776 cv
61.1519 122.64 60.8521 123.312 60.2642 123.78 cv
59.6641 124.248 58.8242 124.476 57.7319 124.476 cv
57.3599 124.476 56.9761 124.44 56.5918 124.368 cv
56.208 124.308 55.7998 124.2 55.3921 124.056 cv
55.3921 122.916 li
55.7158 123.108 56.0762 123.252 56.4722 123.348 cv
56.856 123.444 57.2642 123.492 57.6958 123.492 cv
58.4399 123.492 59.0039 123.348 59.3882 123.06 cv
59.772 122.772 59.9761 122.34 59.9761 121.776 cv
59.9761 121.272 59.7959 120.864 59.436 120.576 cv
59.0762 120.288 58.5718 120.132 57.9238 120.132 cv
56.9038 120.132 li
56.9038 119.16 li
57.9722 119.16 li
58.5479 119.16 58.9922 119.052 59.3042 118.812 cv
59.6162 118.584 59.772 118.248 59.772 117.804 cv
59.772 117.36 59.604 117.012 59.292 116.772 cv
58.9678 116.532 58.5122 116.412 57.9238 116.412 cv
57.6001 116.412 57.252 116.448 56.8799 116.52 cv
56.5078 116.592 56.1001 116.7 55.6558 116.844 cv
55.6558 115.788 li
56.1001 115.668 56.52 115.572 56.916 115.512 cv
57.2998 115.452 57.6719 115.416 58.0322 115.416 cv
58.9199 115.416 59.6279 115.62 60.1558 116.028 cv
60.6841 116.436 60.9482 116.988 60.9482 117.684 cv
60.9482 118.164 60.8042 118.572 60.5278 118.908 cv
60.252 119.244 59.856 119.484 59.3521 119.604 cv
59.3521 119.604 li
cp
ef
63.4561 115.572 mo
68.1001 115.572 li
68.1001 116.568 li
64.5361 116.568 li
64.5361 118.716 li
64.7041 118.656 64.8838 118.608 65.0518 118.584 cv
65.2202 118.56 65.3999 118.536 65.5679 118.536 cv
66.54 118.536 67.3081 118.812 67.8838 119.34 cv
68.46 119.88 68.748 120.6 68.748 121.512 cv
68.748 122.46 68.4482 123.192 67.8599 123.708 cv
67.272 124.224 66.4438 124.476 65.3882 124.476 cv
65.0161 124.476 64.644 124.44 64.2598 124.392 cv
63.876 124.332 63.4922 124.248 63.084 124.116 cv
63.084 122.928 li
63.4321 123.12 63.792 123.264 64.1758 123.36 cv
64.5479 123.456 64.9438 123.492 65.3638 123.492 cv
66.0361 123.492 66.5762 123.324 66.9722 122.964 cv
67.356 122.604 67.5601 122.124 67.5601 121.512 cv
67.5601 120.912 67.356 120.432 66.9722 120.072 cv
66.5762 119.712 66.0361 119.532 65.3638 119.532 cv
65.0518 119.532 64.728 119.568 64.416 119.64 cv
64.104 119.712 63.7798 119.82 63.4561 119.964 cv
63.4561 115.572 li
63.4561 115.572 li
cp
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 81.6001 mo
518.4 81.6001 li
@
grestore
72 81.6001 mo
76 81.6001 li
f
72 81.6001 mo
76 81.6001 li
@
518.4 81.6001 mo
514.4 81.6001 li
f
518.4 81.6001 mo
514.4 81.6001 li
@
46.7759 77.0161 mo
47.748 77.0161 48.4922 77.4121 49.02 78.1797 cv
49.5361 78.96 49.7998 80.0879 49.7998 81.5518 cv
49.7998 83.0278 49.5361 84.1563 49.02 84.9238 cv
48.4922 85.6919 47.748 86.0762 46.7759 86.0762 cv
45.792 86.0762 45.0361 85.6919 44.52 84.9238 cv
44.0039 84.1563 43.752 83.0278 43.752 81.5518 cv
43.752 80.0879 44.0039 78.96 44.52 78.1797 cv
45.0361 77.4121 45.792 77.0161 46.7759 77.0161 cv
46.7759 77.0161 li
cp
46.7759 77.9521 mo
46.1641 77.9521 45.708 78.252 45.396 78.8521 cv
45.084 79.4521 44.9399 80.3521 44.9399 81.5518 cv
44.9399 82.752 45.084 83.6519 45.396 84.252 cv
45.708 84.8521 46.1641 85.1519 46.7759 85.1519 cv
47.3882 85.1519 47.8438 84.8521 48.1558 84.252 cv
48.4561 83.6519 48.6118 82.752 48.6118 81.5518 cv
48.6118 80.3521 48.4561 79.4521 48.1558 78.8521 cv
47.8438 78.252 47.3882 77.9521 46.7759 77.9521 cv
ef
51.6841 84.4321 mo
52.9199 84.4321 li
52.9199 85.9199 li
51.6841 85.9199 li
51.6841 84.4321 li
51.6841 84.4321 li
cp
ef
58.4639 77.1719 mo
59.9521 77.1719 li
59.9521 82.8721 li
61.2002 82.8721 li
61.2002 83.856 li
59.9521 83.856 li
59.9521 85.9199 li
58.7759 85.9199 li
58.7759 83.856 li
54.8281 83.856 li
54.8281 82.7158 li
58.4639 77.1719 li
58.4639 77.1719 li
cp
58.7759 78.2041 mo
55.7881 82.8721 li
58.7759 82.8721 li
58.7759 78.2041 li
ef
65.7358 77.0161 mo
66.708 77.0161 67.4521 77.4121 67.98 78.1797 cv
68.4961 78.96 68.7598 80.0879 68.7598 81.5518 cv
68.7598 83.0278 68.4961 84.1563 67.98 84.9238 cv
67.4521 85.6919 66.708 86.0762 65.7358 86.0762 cv
64.752 86.0762 63.9961 85.6919 63.48 84.9238 cv
62.9639 84.1563 62.7119 83.0278 62.7119 81.5518 cv
62.7119 80.0879 62.9639 78.96 63.48 78.1797 cv
63.9961 77.4121 64.752 77.0161 65.7358 77.0161 cv
65.7358 77.0161 li
cp
65.7358 77.9521 mo
65.124 77.9521 64.668 78.252 64.356 78.8521 cv
64.0439 79.4521 63.8999 80.3521 63.8999 81.5518 cv
63.8999 82.752 64.0439 83.6519 64.356 84.252 cv
64.668 84.8521 65.124 85.1519 65.7358 85.1519 cv
66.3481 85.1519 66.8042 84.8521 67.1162 84.252 cv
67.416 83.6519 67.5718 82.752 67.5718 81.5518 cv
67.5718 80.3521 67.416 79.4521 67.1162 78.8521 cv
66.8042 78.252 66.3481 77.9521 65.7358 77.9521 cv
ef
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2002 li
72 43.2002 li
72 388.8 li
cp
clp
[1 3 ] 0 dsh
72 43.2002 mo
518.4 43.2002 li
@
grestore
72 43.2002 mo
76 43.2002 li
f
72 43.2002 mo
76 43.2002 li
@
518.4 43.2002 mo
514.4 43.2002 li
f
518.4 43.2002 mo
514.4 43.2002 li
@
47.0161 38.6162 mo
47.9878 38.6162 48.7319 39.0117 49.2598 39.7798 cv
49.7759 40.5601 50.04 41.688 50.04 43.1519 cv
50.04 44.6279 49.7759 45.7559 49.2598 46.5239 cv
48.7319 47.292 47.9878 47.6758 47.0161 47.6758 cv
46.0322 47.6758 45.2759 47.292 44.7598 46.5239 cv
44.2441 45.7559 43.9922 44.6279 43.9922 43.1519 cv
43.9922 41.688 44.2441 40.5601 44.7598 39.7798 cv
45.2759 39.0117 46.0322 38.6162 47.0161 38.6162 cv
47.0161 38.6162 li
cp
47.0161 39.5518 mo
46.4038 39.5518 45.9482 39.8521 45.6362 40.4521 cv
45.3242 41.0518 45.1802 41.9521 45.1802 43.1519 cv
45.1802 44.3521 45.3242 45.252 45.6362 45.8521 cv
45.9482 46.4521 46.4038 46.752 47.0161 46.752 cv
47.6279 46.752 48.084 46.4521 48.396 45.8521 cv
48.6958 45.252 48.8521 44.3521 48.8521 43.1519 cv
48.8521 41.9521 48.6958 41.0518 48.396 40.4521 cv
48.084 39.8521 47.6279 39.5518 47.0161 39.5518 cv
ef
51.9238 46.0322 mo
53.1602 46.0322 li
53.1602 47.52 li
51.9238 47.52 li
51.9238 46.0322 li
51.9238 46.0322 li
cp
ef
58.7041 38.772 mo
60.1919 38.772 li
60.1919 44.4717 li
61.4399 44.4717 li
61.4399 45.4561 li
60.1919 45.4561 li
60.1919 47.52 li
59.0161 47.52 li
59.0161 45.4561 li
55.0679 45.4561 li
55.0679 44.3159 li
58.7041 38.772 li
58.7041 38.772 li
cp
59.0161 39.8037 mo
56.0278 44.4717 li
59.0161 44.4717 li
59.0161 39.8037 li
ef
63.4561 38.772 mo
68.1001 38.772 li
68.1001 39.7681 li
64.5361 39.7681 li
64.5361 41.916 li
64.7041 41.856 64.8838 41.8081 65.0518 41.7842 cv
65.2202 41.7598 65.3999 41.7358 65.5679 41.7358 cv
66.54 41.7358 67.3081 42.0117 67.8838 42.54 cv
68.46 43.0801 68.748 43.7998 68.748 44.7119 cv
68.748 45.6602 68.4482 46.3921 67.8599 46.9082 cv
67.272 47.4238 66.4438 47.6758 65.3882 47.6758 cv
65.0161 47.6758 64.644 47.6401 64.2598 47.5918 cv
63.876 47.5322 63.4922 47.4482 63.084 47.3159 cv
63.084 46.1279 li
63.4321 46.3198 63.792 46.4639 64.1758 46.5601 cv
64.5479 46.6563 64.9438 46.6919 65.3638 46.6919 cv
66.0361 46.6919 66.5762 46.5239 66.9722 46.1641 cv
67.356 45.8037 67.5601 45.3242 67.5601 44.7119 cv
67.5601 44.1118 67.356 43.6318 66.9722 43.272 cv
66.5762 42.9121 66.0361 42.7319 65.3638 42.7319 cv
65.0518 42.7319 64.728 42.7681 64.416 42.8398 cv
64.104 42.9121 63.7798 43.02 63.4561 43.1641 cv
63.4561 38.772 li
63.4561 38.772 li
cp
ef
28.9321 278.184 mo
28.9321 275.508 li
28.9321 274.536 29.1602 273.792 29.604 273.288 cv
30.0479 272.784 30.6958 272.532 31.5479 272.532 cv
32.4121 272.532 33.0718 272.784 33.5039 273.288 cv
33.9478 273.792 34.1641 274.536 34.1641 275.508 cv
34.1641 276.996 li
37.6802 276.996 li
37.6802 278.184 li
28.9321 278.184 li
28.9321 278.184 li
cp
29.9038 276.996 mo
33.1919 276.996 li
33.1919 275.508 li
33.1919 274.956 33.0601 274.536 32.772 274.236 cv
32.4839 273.936 32.0762 273.78 31.5479 273.78 cv
31.02 273.78 30.624 273.936 30.3359 274.236 cv
30.0479 274.536 29.9038 274.956 29.9038 275.508 cv
29.9038 276.996 li
ef
33.8159 266.976 mo
33.228 266.988 32.7598 267.156 32.3999 267.468 cv
32.0518 267.792 31.8721 268.224 31.8721 268.752 cv
31.8721 269.352 32.0518 269.832 32.3882 270.192 cv
32.7241 270.552 33.2041 270.768 33.8159 270.816 cv
33.8159 266.976 li
33.8159 266.976 li
cp
34.1279 265.896 mo
34.6558 265.896 li
34.6558 270.852 li
35.3999 270.804 35.9761 270.588 36.3599 270.18 cv
36.7441 269.784 36.936 269.232 36.936 268.512 cv
36.936 268.104 36.8882 267.696 36.792 267.312 cv
36.6958 266.928 36.54 266.532 36.3242 266.148 cv
37.3438 266.148 li
37.5122 266.532 37.644 266.928 37.7158 267.336 cv
37.7881 267.744 37.8359 268.164 37.8359 268.572 cv
37.8359 269.628 37.5361 270.456 36.936 271.068 cv
36.3359 271.68 35.5078 271.98 34.4639 271.98 cv
33.396 271.98 32.5439 271.692 31.9082 271.116 cv
31.2842 270.54 30.96 269.748 30.96 268.764 cv
30.96 267.876 31.248 267.18 31.812 266.664 cv
32.3882 266.16 33.1558 265.896 34.1279 265.896 cv
ef
32.124 260.268 mo
32.0518 260.388 32.0039 260.52 31.9678 260.664 cv
31.9438 260.808 31.9199 260.964 31.9199 261.132 cv
31.9199 261.744 32.124 262.212 32.52 262.536 cv
32.916 262.872 33.48 263.028 34.2241 263.028 cv
37.6802 263.028 li
37.6802 264.108 li
31.1162 264.108 li
31.1162 263.028 li
32.1362 263.028 li
31.7402 262.812 31.4399 262.512 31.248 262.152 cv
31.0562 261.792 30.96 261.348 30.96 260.82 cv
30.96 260.748 30.9722 260.664 30.9722 260.568 cv
30.9839 260.484 30.9961 260.388 31.02 260.268 cv
32.124 260.268 li
32.124 260.268 li
cp
ef
31.3682 254.544 mo
32.376 254.544 li
32.208 254.855 32.0879 255.156 32.0039 255.468 cv
31.9199 255.78 31.8721 256.08 31.8721 256.392 cv
31.8721 257.088 32.1001 257.64 32.5439 258.024 cv
32.9878 258.408 33.6118 258.6 34.4038 258.6 cv
35.208 258.6 35.832 258.408 36.2759 258.024 cv
36.7202 257.64 36.936 257.088 36.936 256.392 cv
36.936 256.08 36.8999 255.78 36.8159 255.468 cv
36.7319 255.156 36.6001 254.855 36.4321 254.544 cv
37.4277 254.544 li
37.5718 254.855 37.6802 255.168 37.7402 255.48 cv
37.7998 255.804 37.8359 256.152 37.8359 256.512 cv
37.8359 257.496 37.5361 258.288 36.9121 258.864 cv
36.2998 259.452 35.46 259.74 34.4038 259.74 cv
33.3359 259.74 32.4961 259.452 31.8838 258.864 cv
31.272 258.276 30.96 257.472 30.96 256.44 cv
30.96 256.104 30.9961 255.78 31.0679 255.468 cv
31.1401 255.156 31.2358 254.844 31.3682 254.544 cv
31.3682 254.544 li
cp
ef
33.8159 248.256 mo
33.228 248.268 32.7598 248.436 32.3999 248.748 cv
32.0518 249.072 31.8721 249.504 31.8721 250.032 cv
31.8721 250.632 32.0518 251.112 32.3882 251.472 cv
32.7241 251.832 33.2041 252.048 33.8159 252.096 cv
33.8159 248.256 li
33.8159 248.256 li
cp
34.1279 247.176 mo
34.6558 247.176 li
34.6558 252.132 li
35.3999 252.084 35.9761 251.868 36.3599 251.46 cv
36.7441 251.064 36.936 250.512 36.936 249.792 cv
36.936 249.384 36.8882 248.976 36.792 248.592 cv
36.6958 248.208 36.54 247.812 36.3242 247.428 cv
37.3438 247.428 li
37.5122 247.812 37.644 248.208 37.7158 248.616 cv
37.7881 249.024 37.8359 249.444 37.8359 249.852 cv
37.8359 250.908 37.5361 251.736 36.936 252.348 cv
36.3359 252.96 35.5078 253.26 34.4639 253.26 cv
33.396 253.26 32.5439 252.972 31.9082 252.396 cv
31.2842 251.82 30.96 251.028 30.96 250.044 cv
30.96 249.156 31.248 248.46 31.812 247.944 cv
32.3882 247.44 33.1558 247.176 34.1279 247.176 cv
ef
33.7202 239.892 mo
37.6802 239.892 li
37.6802 240.972 li
33.7559 240.972 li
33.1318 240.972 32.6758 241.104 32.3638 241.344 cv
32.0518 241.584 31.896 241.944 31.896 242.424 cv
31.896 243.012 32.0879 243.468 32.46 243.804 cv
32.832 244.14 33.3359 244.308 33.9722 244.308 cv
37.6802 244.308 li
37.6802 245.388 li
31.1162 245.388 li
31.1162 244.308 li
32.1362 244.308 li
31.752 244.056 31.4521 243.756 31.2598 243.396 cv
31.0679 243.048 30.96 242.64 30.96 242.184 cv
30.96 241.44 31.2002 240.864 31.668 240.48 cv
32.1362 240.096 32.8198 239.892 33.7202 239.892 cv
33.7202 239.892 li
cp
ef
29.2559 236.604 mo
31.1162 236.604 li
31.1162 234.384 li
31.9561 234.384 li
31.9561 236.604 li
35.52 236.604 li
36.0601 236.604 36.4082 236.532 36.5518 236.388 cv
36.708 236.244 36.7798 235.944 36.7798 235.488 cv
36.7798 234.384 li
37.6802 234.384 li
37.6802 235.488 li
37.6802 236.328 37.5239 236.904 37.2119 237.216 cv
36.8999 237.528 36.3359 237.684 35.52 237.684 cv
31.9561 237.684 li
31.9561 238.476 li
31.1162 238.476 li
31.1162 237.684 li
29.2559 237.684 li
29.2559 236.604 li
29.2559 236.604 li
cp
ef
30.96 226.728 mo
30.96 225.792 31.272 225.06 31.8721 224.52 cv
32.4839 223.992 33.3242 223.716 34.4038 223.716 cv
35.4839 223.716 36.3242 223.992 36.9238 224.52 cv
37.5361 225.06 37.8359 225.792 37.8359 226.728 cv
37.8359 227.676 37.5361 228.42 36.9238 228.948 cv
36.3242 229.476 35.4839 229.74 34.4038 229.74 cv
33.3242 229.74 32.4839 229.476 31.8721 228.948 cv
31.272 228.42 30.96 227.676 30.96 226.728 cv
30.96 226.728 li
cp
31.8721 226.728 mo
31.8721 227.304 32.1001 227.76 32.5562 228.096 cv
33.0122 228.432 33.624 228.6 34.4038 228.6 cv
35.1958 228.6 35.8081 228.444 36.2642 228.108 cv
36.7202 227.771 36.936 227.316 36.936 226.728 cv
36.936 226.152 36.7202 225.696 36.2642 225.36 cv
35.8081 225.024 35.1958 224.855 34.4038 224.855 cv
33.6362 224.855 33.0122 225.024 32.5562 225.36 cv
32.1001 225.696 31.8721 226.152 31.8721 226.728 cv
ef
28.5601 218.508 mo
29.46 218.508 li
29.46 219.54 li
29.46 219.924 29.5439 220.2 29.7002 220.344 cv
29.856 220.5 30.1318 220.572 30.54 220.572 cv
31.1162 220.572 li
31.1162 218.796 li
31.9561 218.796 li
31.9561 220.572 li
37.6802 220.572 li
37.6802 221.652 li
31.9561 221.652 li
31.9561 222.684 li
31.1162 222.684 li
31.1162 221.652 li
30.6602 221.652 li
29.9399 221.652 29.3999 221.484 29.064 221.148 cv
28.728 220.812 28.5601 220.271 28.5601 219.528 cv
28.5601 218.508 li
28.5601 218.508 li
cp
ef
29.2559 212.844 mo
31.1162 212.844 li
31.1162 210.624 li
31.9561 210.624 li
31.9561 212.844 li
35.52 212.844 li
36.0601 212.844 36.4082 212.772 36.5518 212.628 cv
36.708 212.484 36.7798 212.184 36.7798 211.728 cv
36.7798 210.624 li
37.6802 210.624 li
37.6802 211.728 li
37.6802 212.568 37.5239 213.144 37.2119 213.456 cv
36.8999 213.768 36.3359 213.924 35.52 213.924 cv
31.9561 213.924 li
31.9561 214.716 li
31.1162 214.716 li
31.1162 213.924 li
29.2559 213.924 li
29.2559 212.844 li
29.2559 212.844 li
cp
ef
28.5601 209.112 mo
28.5601 208.032 li
29.9277 208.032 li
29.9277 209.112 li
28.5601 209.112 li
28.5601 209.112 li
cp
31.1162 209.112 mo
31.1162 208.032 li
37.6802 208.032 li
37.6802 209.112 li
31.1162 209.112 li
ef
29.2559 204.684 mo
31.1162 204.684 li
31.1162 202.464 li
31.9561 202.464 li
31.9561 204.684 li
35.52 204.684 li
36.0601 204.684 36.4082 204.612 36.5518 204.468 cv
36.708 204.324 36.7798 204.024 36.7798 203.568 cv
36.7798 202.464 li
37.6802 202.464 li
37.6802 203.568 li
37.6802 204.408 37.5239 204.984 37.2119 205.296 cv
36.8999 205.608 36.3359 205.764 35.52 205.764 cv
31.9561 205.764 li
31.9561 206.556 li
31.1162 206.556 li
31.1162 205.764 li
29.2559 205.764 li
29.2559 204.684 li
29.2559 204.684 li
cp
ef
28.5601 201.192 mo
28.5601 200.112 li
37.6802 200.112 li
37.6802 201.192 li
28.5601 201.192 li
28.5601 201.192 li
cp
ef
33.8159 193.296 mo
33.228 193.308 32.7598 193.476 32.3999 193.788 cv
32.0518 194.112 31.8721 194.544 31.8721 195.072 cv
31.8721 195.672 32.0518 196.152 32.3882 196.512 cv
32.7241 196.872 33.2041 197.088 33.8159 197.136 cv
33.8159 193.296 li
33.8159 193.296 li
cp
34.1279 192.216 mo
34.6558 192.216 li
34.6558 197.172 li
35.3999 197.124 35.9761 196.908 36.3599 196.5 cv
36.7441 196.104 36.936 195.552 36.936 194.832 cv
36.936 194.424 36.8882 194.016 36.792 193.632 cv
36.6958 193.248 36.54 192.852 36.3242 192.468 cv
37.3438 192.468 li
37.5122 192.852 37.644 193.248 37.7158 193.656 cv
37.7881 194.064 37.8359 194.484 37.8359 194.892 cv
37.8359 195.948 37.5361 196.776 36.936 197.388 cv
36.3359 198 35.5078 198.3 34.4639 198.3 cv
33.396 198.3 32.5439 198.012 31.9082 197.436 cv
31.2842 196.86 30.96 196.068 30.96 195.084 cv
30.96 194.196 31.248 193.5 31.812 192.984 cv
32.3882 192.48 33.1558 192.216 34.1279 192.216 cv
ef
31.1162 187.176 mo
31.1162 186.096 li
36.2402 184.752 li
31.1162 183.408 li
31.1162 182.136 li
36.2402 180.792 li
31.1162 179.448 li
31.1162 178.368 li
37.6802 180.084 li
37.6802 181.356 li
32.3042 182.772 li
37.6802 184.188 li
37.6802 185.46 li
31.1162 187.176 li
31.1162 187.176 li
cp
ef
30.96 174.168 mo
30.96 173.232 31.272 172.5 31.8721 171.96 cv
32.4839 171.432 33.3242 171.156 34.4038 171.156 cv
35.4839 171.156 36.3242 171.432 36.9238 171.96 cv
37.5361 172.5 37.8359 173.232 37.8359 174.168 cv
37.8359 175.116 37.5361 175.86 36.9238 176.388 cv
36.3242 176.916 35.4839 177.18 34.4038 177.18 cv
33.3242 177.18 32.4839 176.916 31.8721 176.388 cv
31.272 175.86 30.96 175.116 30.96 174.168 cv
30.96 174.168 li
cp
31.8721 174.168 mo
31.8721 174.744 32.1001 175.2 32.5562 175.536 cv
33.0122 175.872 33.624 176.04 34.4038 176.04 cv
35.1958 176.04 35.8081 175.884 36.2642 175.548 cv
36.7202 175.212 36.936 174.756 36.936 174.168 cv
36.936 173.592 36.7202 173.136 36.2642 172.8 cv
35.8081 172.464 35.1958 172.296 34.4038 172.296 cv
33.6362 172.296 33.0122 172.464 32.5562 172.8 cv
32.1001 173.136 31.8721 173.592 31.8721 174.168 cv
ef
32.124 165.708 mo
32.0518 165.828 32.0039 165.96 31.9678 166.104 cv
31.9438 166.248 31.9199 166.404 31.9199 166.572 cv
31.9199 167.184 32.124 167.652 32.52 167.976 cv
32.916 168.312 33.48 168.468 34.2241 168.468 cv
37.6802 168.468 li
37.6802 169.548 li
31.1162 169.548 li
31.1162 168.468 li
32.1362 168.468 li
31.7402 168.252 31.4399 167.952 31.248 167.592 cv
31.0562 167.232 30.96 166.788 30.96 166.26 cv
30.96 166.188 30.9722 166.104 30.9722 166.008 cv
30.9839 165.924 30.9961 165.828 31.02 165.708 cv
32.124 165.708 li
32.124 165.708 li
cp
ef
34.4038 164.064 mo
35.1958 164.064 35.8198 163.908 36.2759 163.584 cv
36.7319 163.26 36.9478 162.804 36.9478 162.228 cv
36.9478 161.664 36.7319 161.22 36.2759 160.884 cv
35.8198 160.56 35.1958 160.392 34.4038 160.392 cv
33.6118 160.392 33 160.56 32.5439 160.884 cv
32.0879 161.22 31.8599 161.664 31.8599 162.228 cv
31.8599 162.804 32.0879 163.26 32.5439 163.584 cv
33 163.908 33.6118 164.064 34.4038 164.064 cv
34.4038 164.064 li
cp
32.1118 160.392 mo
28.5601 160.392 li
28.5601 159.312 li
37.6802 159.312 li
37.6802 160.392 li
36.6958 160.392 li
37.0918 160.62 37.3799 160.908 37.5601 161.256 cv
37.7402 161.604 37.8359 162.012 37.8359 162.492 cv
37.8359 163.284 37.5239 163.932 36.8999 164.436 cv
36.2759 164.94 35.436 165.18 34.4038 165.18 cv
33.3721 165.18 32.5439 164.94 31.9082 164.436 cv
31.2842 163.932 30.96 163.284 30.96 162.492 cv
30.96 162.012 31.0562 161.604 31.248 161.256 cv
31.4399 160.908 31.728 160.62 32.1118 160.392 cv
ef
31.3081 152.844 mo
32.3281 152.844 li
32.1841 153.156 32.064 153.468 31.98 153.792 cv
31.9082 154.128 31.8599 154.464 31.8599 154.812 cv
31.8599 155.352 31.9438 155.76 32.1118 156.024 cv
32.2798 156.288 32.52 156.42 32.8438 156.42 cv
33.0962 156.42 33.2881 156.324 33.4321 156.132 cv
33.5762 155.94 33.7202 155.556 33.8398 154.98 cv
33.9238 154.608 li
34.0918 153.84 34.332 153.3 34.6201 152.976 cv
34.9199 152.664 35.3398 152.496 35.8682 152.496 cv
36.48 152.496 36.96 152.736 37.3081 153.216 cv
37.668 153.696 37.8359 154.368 37.8359 155.208 cv
37.8359 155.568 37.7998 155.928 37.7402 156.312 cv
37.6802 156.696 37.584 157.092 37.4399 157.512 cv
36.3242 157.512 li
36.54 157.116 36.6958 156.72 36.792 156.336 cv
36.8999 155.952 36.9478 155.568 36.9478 155.184 cv
36.9478 154.68 36.8638 154.284 36.6958 154.008 cv
36.5278 153.744 36.2759 153.6 35.9521 153.6 cv
35.6641 153.6 35.436 153.708 35.2798 153.9 cv
35.124 154.092 34.9678 154.524 34.8242 155.196 cv
34.7402 155.568 li
34.5962 156.24 34.3799 156.732 34.0918 157.02 cv
33.8042 157.32 33.4082 157.464 32.8921 157.464 cv
32.2798 157.464 31.7998 157.248 31.4639 156.816 cv
31.1279 156.384 30.96 155.76 30.96 154.944 cv
30.96 154.548 30.9961 154.176 31.0562 153.816 cv
31.1162 153.468 31.2002 153.144 31.3081 152.844 cv
31.3081 152.844 li
cp
ef
1 lw
2 lc
72 388.8 mo
72 43.2002 li
72 388.8 mo
518.4 388.8 li
518.4 388.8 mo
518.4 43.2002 li
72 43.2002 mo
518.4 43.2002 li
@
372.752 71.7642 mo
487.515 71.7642 li
487.515 49.3999 li
372.752 49.3999 li
372.752 71.7642 li
372.752 71.7642 li
cp
1 1 1 rgb
f
372.752 71.7642 mo
487.515 71.7642 li
487.515 49.3999 li
372.752 49.3999 li
372.752 71.7642 li
372.752 71.7642 li
cp
0 0 0 rgb
@
382.832 60.7607 mo
402.992 60.7607 li
0 0 1 rgb
@
420.229 54.7759 mo
421.524 54.7759 li
421.524 56.4175 li
420.229 56.4175 li
420.229 54.7759 li
420.229 54.7759 li
cp
420.229 57.8433 mo
421.524 57.8433 li
421.524 65.7197 li
420.229 65.7197 li
420.229 57.8433 li
0 0 0 rgb
ef
430.62 60.9678 mo
430.62 65.7197 li
429.324 65.7197 li
429.324 61.0112 li
429.324 60.2622 429.166 59.7153 428.878 59.3408 cv
428.59 58.9663 428.157 58.7793 427.582 58.7793 cv
426.876 58.7793 426.329 59.0098 425.926 59.4561 cv
425.522 59.9023 425.321 60.5073 425.321 61.2705 cv
425.321 65.7197 li
424.025 65.7197 li
424.025 57.8433 li
425.321 57.8433 li
425.321 59.0674 li
425.623 58.6064 425.983 58.2461 426.415 58.0161 cv
426.833 57.7856 427.322 57.6563 427.869 57.6563 cv
428.763 57.6563 429.454 57.9438 429.914 58.5054 cv
430.375 59.0674 430.62 59.8877 430.62 60.9678 cv
430.62 60.9678 li
cp
ef
437.177 54.7759 mo
437.177 55.856 li
435.938 55.856 li
435.478 55.856 435.146 55.957 434.974 56.144 cv
434.786 56.3311 434.7 56.6621 434.7 57.1519 cv
434.7 57.8433 li
436.831 57.8433 li
436.831 58.8511 li
434.7 58.8511 li
434.7 65.7197 li
433.404 65.7197 li
433.404 58.8511 li
432.166 58.8511 li
432.166 57.8433 li
433.404 57.8433 li
433.404 57.2959 li
433.404 56.4321 433.605 55.7842 434.009 55.3809 cv
434.412 54.9775 435.061 54.7759 435.953 54.7759 cv
437.177 54.7759 li
437.177 54.7759 li
cp
ef
438.468 54.7759 mo
439.764 54.7759 li
439.764 65.7197 li
438.468 65.7197 li
438.468 54.7759 li
438.468 54.7759 li
cp
ef
442.179 62.6094 mo
442.179 57.8433 li
443.475 57.8433 li
443.475 62.5664 li
443.475 63.3154 443.618 63.8623 443.906 64.2368 cv
444.194 64.6113 444.627 64.7983 445.217 64.7983 cv
445.908 64.7983 446.47 64.5825 446.873 64.1357 cv
447.276 63.6895 447.478 63.085 447.478 62.3071 cv
447.478 57.8433 li
448.773 57.8433 li
448.773 65.7197 li
447.478 65.7197 li
447.478 64.5103 li
447.161 65 446.786 65.3457 446.383 65.5762 cv
445.966 65.792 445.49 65.9072 444.943 65.9072 cv
444.036 65.9072 443.345 65.6338 442.884 65.0718 cv
442.409 64.5249 442.179 63.7041 442.179 62.6094 cv
442.179 62.6094 li
cp
ef
456.871 61.083 mo
456.856 60.3774 456.655 59.8159 456.281 59.3838 cv
455.893 58.9663 455.374 58.7505 454.74 58.7505 cv
454.021 58.7505 453.444 58.9663 453.012 59.3696 cv
452.58 59.7729 452.321 60.3486 452.264 61.083 cv
456.871 61.083 li
456.871 61.083 li
cp
458.167 61.4575 mo
458.167 62.0913 li
452.22 62.0913 li
452.277 62.9839 452.537 63.6753 453.026 64.1357 cv
453.502 64.5967 454.164 64.8271 455.028 64.8271 cv
455.518 64.8271 456.007 64.7695 456.468 64.6543 cv
456.929 64.5391 457.404 64.3521 457.865 64.0928 cv
457.865 65.3169 li
457.404 65.5186 456.929 65.6768 456.439 65.7632 cv
455.949 65.8496 455.445 65.9072 454.956 65.9072 cv
453.688 65.9072 452.695 65.5474 451.961 64.8271 cv
451.227 64.1074 450.866 63.1138 450.866 61.8608 cv
450.866 60.5791 451.212 59.5566 451.903 58.7935 cv
452.595 58.0449 453.545 57.6563 454.726 57.6563 cv
455.791 57.6563 456.627 58.0015 457.246 58.6782 cv
457.851 59.3696 458.167 60.291 458.167 61.4575 cv
ef
466.86 60.9678 mo
466.86 65.7197 li
465.564 65.7197 li
465.564 61.0112 li
465.564 60.2622 465.405 59.7153 465.117 59.3408 cv
464.83 58.9663 464.397 58.7793 463.821 58.7793 cv
463.116 58.7793 462.568 59.0098 462.166 59.4561 cv
461.763 59.9023 461.561 60.5073 461.561 61.2705 cv
461.561 65.7197 li
460.265 65.7197 li
460.265 57.8433 li
461.561 57.8433 li
461.561 59.0674 li
461.863 58.6064 462.224 58.2461 462.655 58.0161 cv
463.073 57.7856 463.563 57.6563 464.109 57.6563 cv
465.002 57.6563 465.693 57.9438 466.154 58.5054 cv
466.615 59.0674 466.86 59.8877 466.86 60.9678 cv
466.86 60.9678 li
cp
ef
468.866 57.8433 mo
475.016 57.8433 li
475.016 59.0239 li
470.148 64.6831 li
475.016 64.6831 li
475.016 65.7197 li
468.693 65.7197 li
468.693 64.5391 li
473.561 58.8799 li
468.866 58.8799 li
468.866 57.8433 li
468.866 57.8433 li
cp
ef
483.031 61.2271 mo
483.031 65.7197 li
481.735 65.7197 li
481.735 64.5249 li
481.433 65.0142 481.059 65.3599 480.627 65.5762 cv
480.194 65.792 479.647 65.9072 479.014 65.9072 cv
478.207 65.9072 477.56 65.6914 477.084 65.2446 cv
476.609 64.7983 476.379 64.1934 476.379 63.4302 cv
476.379 62.5518 476.666 61.8896 477.271 61.4287 cv
477.861 60.9824 478.74 60.752 479.921 60.752 cv
481.735 60.752 li
481.735 60.6226 li
481.735 60.0322 481.533 59.5713 481.145 59.2402 cv
480.756 58.9233 480.209 58.7505 479.503 58.7505 cv
479.043 58.7505 478.61 58.8081 478.179 58.9233 cv
477.746 59.0381 477.344 59.1968 476.954 59.3984 cv
476.954 58.2031 li
477.415 58.0303 477.876 57.8862 478.322 57.7998 cv
478.769 57.7134 479.201 57.6563 479.633 57.6563 cv
480.771 57.6563 481.62 57.9585 482.182 58.5488 cv
482.743 59.1392 483.031 60.0322 483.031 61.2271 cv
483.031 61.2271 li
cp
480.454 61.7598 mo
479.402 61.7598 478.683 61.8896 478.279 62.1201 cv
477.876 62.3647 477.675 62.7681 477.675 63.3438 cv
477.675 63.8047 477.818 64.1792 478.121 64.4385 cv
478.423 64.7119 478.841 64.8418 479.359 64.8418 cv
480.079 64.8418 480.655 64.5967 481.087 64.0781 cv
481.52 63.5742 481.735 62.8975 481.735 62.0479 cv
481.735 61.7598 li
480.454 61.7598 li
ef
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 50 /two putdup 65 /A putdup 72 /H putdup 75 /K putdup 82 /R putdup 83 /S putdup 87 /W putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 117 /u putdup 118 /v putdup 119 /w putdup 127 /f_l putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings26 dict dup begin/space <1C60D8A8C9B896187A> |-/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-/A <1C60D8A8C9B7D7E88499B0B4629F6223175CD4E8063229FBCC9F00B932F15865B21E5E7BB034E6AEB00B8493B7416EA5F21E0E31EA4A4AA7B249DD04C2020B54E2FE3571164F33157FAF89CB55ED12EC09CD04764D59017211B80D8BF81FE221E84A40> |-/H <1C60D8A8C9B6415B1C8023DCDB0FF1D084A484AF3579A723AF8D5247ABB5D292AC378AF267DE95E8DC7174E8DD00326C723C8D6F70CCD88C857300A53452> |-/K <1C60D8A8C9B79D2DFFE43841A70974C488289A3FDB0CBC62C7FBB8CDC8C30C59CB3585B4E609BAE0DA114BF5A7F3C4AE09FD4E66CCEB1583EF9D5A7360C1994188D5C7242A> |-/R <1C60D8A8C9B7818197CA8C10BDEF0792283B4AD60A4778EF579EA03A9938895E46A3DD671B55D56CE5AC1FF66AA5C5464B6272AB067D7AABFB9BA4824D96D968B50E7E75C15CA7D5303E4D6EB750FDAD2DAE18E237F2D0B786B8A46E9DCB053FB02CA78233BC22EC230776B8699564C207758BBC5B113141> |-/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D45C854A0BE693CA04DDB35CE9C6FCC12699F3ECF3D1B67F9F5777A6EECDAF3C0F3F32C0B6BC38F752623DB2A9617BDB514ED25F1A310A0C42BE659A27D8F2C06C4BFA42A6084F73A353D30020A89B386DABBAAA17119B17F011D1BF8067CBFE17C2D6AE10C51C95BF00F09A50ED067AF> |-/W <1C60D8A8C9B683825E2D044740A889FBE934ECCE78E1156C56B6149D738CA6C7B4AECC7FA154428E6DD464F11C7D97D1FA9A6F6B9A75D5C94F0DB87ED3BDE4384A0C5BEF384B64AB6AB82F0CAD9F523DB7B169A9EFE68886BAAEBDCCF81A77828FB78CC41F51C2F02BE854F0FC98D5C093F2F1B7BFBBE0B76D7E8A41F57E61D5D8AA27543AC483B2961CB710> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624097F1B5D47BF4F384727F53BA1763156DBDB0266> |-/d <1C60D8A8C9B7E7C1D82219353B31AE497773900CFE039E7C34F7CEBE101056958EFFC2C789CCBD8768CC683564B6074DAAAE648B50C88AD4C58AC712C8476BA68C74E592EF7E71792F9E5367AB3C80F9D183D28DD5E961AA14DCB5D9206768FB9E099DA642A8BAA73D52C56C9913DC619FDF3F90996DC8D242E6BF94BEBE752CB2F5D6196384CDD6E5AC10AFB49712810FFD82A2782B9B182DA37A23E6043872EFC1C407DD53136E> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F43B727FC67DAAB0A1AC346364003E4FEF79FBAC399EF60BAB44182D20FA0C6402BF1E27F05398DCDDDA14D79F5733F11E560A813FF9D16C42617DFDA23021803BAB86086244EE74B29A5E1F99E79BC6C6C8880FE4C572C55E990D88B7521BD46854B97930948AAC94E7DFE2FF69F2221950186414A7427A5E80E1B04B219E3300404246D87351FD05C6F3EA0B95C636083B47E4D5C2DAA8BBB8D343439CEC8A6CCD7C3BA57C2332F2A02343DC56BF6AA691E1A081F9D254D> |-/h <1C60D8A8C9B790A816BA887E1DA4852044FABD5C80CA3A9E2E9C1F200BD200369E1A531F52CE66B5B19C492F0751A1C2858510B2E2690FB789B214E0E0C6537C1C71B0F5B79BE42FC591254AEEEA9BA5BA2F0A43A49AB11B4C> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/m <1C60D8A8C9B6B7700392E60257FC106462D2DFCBC2A10DB5A615FEAAB80AD406B3832324841574E3D3133104747B3854CDADF52623F13A7F1244387949CA519BF305061F6B288B581C60DA40B94376A357459EBA755901A927650F836941E942CE400E1FF6115974FBE2B4AAC56A74FF06B173793CC52E5CDF6F129032B1749CF571CC87D5D8236938E9D26865B5B2E013E76E7BD1DBAB8AA6F040AACF> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CEF7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFBBE8C69D79181> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F89019F8CCCB6FE3AF5C57> |-/v <1C60D8A8C9B75A17982D11DC3FC677436DFDC6EA949B3A8A476902498B78CD729866CE567C88B5C4105F11006EA75E6774682E91A2E1F257423C8BD0B940F1B9F1BCB8B413DFC78AF75D4027> |-/w <1C60D8A8C9B615D1D39C3ADF830FB08A1A35A87DCFD157E58FABDD21BA80846DED508D58D627D5468CDEA878B4EBB2BC39F9E17357A3B538845D213A53BE481E0D6B92FA11EAB84DAA099CD1E52DEE6734C0A900F3A37F8B6CBD74174B2BAF5100CBE402299FC69ADD471E1494375657D0074EB17A39D5C9C17257D613AB99E3> |-/f_l <1C60D8A8C9B7B07F53A1558F68652DF63EDE037C44284B37F0FB5A285045707C132A4FE29538F84FBE31BD64CD80C5A0EE4E3DEF7EDB0B3441E0379AB88CDE6E86B0150F58DBB11ACAD7FE230743428ACF3193E7134BFD6C98C99A4B1D56D0F7> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BWBVGB+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/BWBVGB+MyriadPro-Regular*1 [32{/.notdef}rp /space 17{/.notdef}rp /two 14{/.notdef}rp /A 6{/.notdef}rp /H 2{/.notdef}rp /K 6{/.notdef}rp /R /S 3{/.notdef}rp /W 9{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /.notdef /u /v /w 7{/.notdef}rp /f_l 128{/.notdef}rp]BWBVGB+MyriadPro-Regular nfBWBVGB+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf155.94 129.334 mo(Russion \177u)[6.45605 6.61182 4.75195 4.75195 2.80811 6.58789 6.65967 2.54395 6.27588 0 ]xsh159.756 143.734 mo(pandemic)[6.82764 5.78418 6.65967 6.76807 6.01221 10.0078 2.80762 0 ]xsh206.623 59.084 mo(Spanish \177u pandemic)[5.91602 6.82764 5.78418 6.65967 2.80811 4.75195 6.65967 2.54395 6.27588 6.6123 2.54395 6.82764 5.78369 6.66016 6.76807 6.01172 10.0078 2.80811 0 ]xsh303.598 266.584 mo(WW2)[10.3438 10.1519 0 ]xsh342.646 290.834 mo(Asian \177u)[7.27197 4.75195 2.80811 5.78369 6.66016 2.54395 6.27588 0 ]xsh338.878 305.234 mo(pandemic)[6.82764 5.78418 6.66016 6.76807 6.01172 10.0078 2.80811 0 ]xsh385.608 322.834 mo(Hong Kong)[7.82373 6.58789 6.65967 6.70801 2.54395 6.50391 6.58789 6.66016 0 ]xsh381.162 337.234 mo(\177u pandemic)[6.27588 6.61182 2.54395 6.82764 5.78418 6.66016 6.76807 6.01172 10.0078 2.80811 0 ]xsh457.226 324.834 mo(Avian \177u)[7.09229 5.77197 2.80811 5.78418 6.66016 2.54395 6.27588 0 ]xsh466.136 339.234 mo(scare)[4.75195 5.37598 5.78369 3.80371 0 ]xsh469.718 271.334 mo(Swine \177u)[5.81982 8.83203 2.80859 6.66016 6.01172 2.54395 6.27539 0 ]xsh467.378 285.734 mo(pandemic)[6.82764 5.78418 6.66016 6.76807 6.01172 10.0078 2.80811 0 ]xsh2 lw
0 lc
0 lj
4 ml
183 148 mo
183 162 li
@
184.025 164.362 mo
184.524 162.708 184.984 161.634 185.517 160.308 cv
180.472 160.308 li
180.698 160.782 181.465 162.708 181.964 164.362 cv
182.499 166.131 182.864 167.736 182.995 168.776 cv
183.125 167.736 183.491 166.131 184.025 164.362 cv
cp
f
258 59 mo
258 73 li
@
259.025 75.3618 mo
259.524 73.7085 259.984 72.6338 260.517 71.3076 cv
255.472 71.3076 li
255.698 71.7822 256.465 73.7085 256.964 75.3618 cv
257.499 77.1313 257.864 78.7358 257.995 79.7764 cv
258.125 78.7358 258.491 77.1313 259.025 75.3618 cv
cp
f
317 274.7 mo
317 288.7 li
@
318.025 291.063 mo
318.524 289.408 318.984 288.334 319.517 287.008 cv
314.473 287.008 li
314.697 287.482 315.465 289.408 315.964 291.063 cv
316.498 292.832 316.864 294.436 316.994 295.477 cv
317.125 294.436 317.49 292.832 318.025 291.063 cv
cp
f
365.5 312 mo
365.5 342 li
@
366.525 344.362 mo
367.024 342.709 367.484 341.634 368.017 340.308 cv
362.973 340.308 li
363.197 340.782 363.965 342.709 364.464 344.362 cv
364.998 346.132 365.364 347.736 365.494 348.776 cv
365.625 347.736 365.99 346.132 366.525 344.362 cv
cp
f
396.5 343.232 mo
396.5 353.768 li
@
397.525 356.13 mo
398.024 354.477 398.484 353.401 399.017 352.075 cv
393.973 352.075 li
394.197 352.55 394.965 354.477 395.464 356.13 cv
395.998 357.899 396.364 359.504 396.494 360.544 cv
396.625 359.504 396.99 357.899 397.525 356.13 cv
cp
f
494.5 339.4 mo
494.5 353.4 li
@
495.525 355.762 mo
496.024 354.109 496.484 353.034 497.017 351.708 cv
491.973 351.708 li
492.197 352.183 492.965 354.109 493.464 355.762 cv
493.998 357.531 494.364 359.137 494.494 360.177 cv
494.625 359.137 494.99 357.531 495.525 355.762 cv
cp
f
510.184 292 mo
510.184 340 li
@
511.209 342.362 mo
511.708 340.709 512.168 339.634 512.7 338.308 cv
507.656 338.308 li
507.881 338.782 508.648 340.709 509.147 342.362 cv
509.682 344.132 510.048 345.736 510.178 346.776 cv
510.309 345.736 510.674 344.132 511.209 342.362 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/BWBVGB+MyriadPro-Regular*1 uf/BWBVGB+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Jason Schwarz) ()%%Title: (influenza.eps)%%CreationDate: 8/7/14 11:30 PM%AI9_DataStream%Gb!R&GCSnhdO>$B!PSX]+b:3?(#sC^HLIC)8Q[-$./W@Zrj\U!SWRGe2RY@%\`Z)!X^=V\ASEui/r^R)ju^J(^"ND/GQ(nZMkUp2%.cF&Z)cjpO-lUoW?8VNX<Jm@$n>FYTSFnqN7_`<oZoYo"HFWH?[2hH6I_q:`pqG-jFoE-$\#QiSmZhgj4b0QQs7Dc13kV)tBRC:o%eK.fREnKcfRZ4n&e_In8>&Lbej\G9B3XG%#!R!mq2*Yocl6jKApI9'aX9][pQ<srGf6mW-@)TfonUA+$)V,j?!+DY:rr\>Zpcs0P%IpY)<"$chd+9H?qPrq:`orp^\`uY8YAq/1.%[rs^F.>.9ebJC;We1LASg"Fh2([uQHua_CRP5!\`CVpSE1G=]oVmQ,`a@!1^Ao#!%>-gBUoY9UOcC-VJMd11>g&*df/h74dN$-KqMd`[6]5BP4F:>^.S\B:&WAe"^LqHr0<H4ON8>>cK.pQ)$T8`lu7&Mo\;3G8L,J`qK%oq+_"lJT&(BO>n"#dg#(.a)6L/?5+331GUdZD;>3%VmQ[73k#N;"/%DeS%k``1OkFSG&DDc1X2N8:.K2RWWCl1a#Qi6%D^A\KBZ&%U!UV@#D5L85n!<_34@Ol\N.C"*F+!n$+6g.`0->olMs,!P)$#S(TW0<PR<;FK_HC7L\(NSODG'p-d2:Qal')"j(G&nPfbc\Q=YFn%bP5&&l-jYjhkk='10?&j_/G_Mf#hO-<[L`t)f=k$f$SWAUVf<D>M$-GY%'']$U:msTn'NX"amXQ^aFg;egZsUBt9bUi7m?K4ti8e%3tu-20852T8>"n2`cG8m7I_%,iL'*JCZ1Y>Oj[l%,5fA?3$S:=E>t:<n)B`('>NL^n.T$#GbQeMM!u(uNPD_4a+Sk=Csr<f(6/be%YthigA]FWjj:oWKM\JhZ8`-<gVpJAp.;ZA8K\Vq>UB^[P[;^NgM(R*mUnag5k`"J=XG,[jAsd%]^5M$h:],sBU[sP='QPb@:TT91%_bW=OPY*?1C&ch\5m%D'5sNAZ;>;QjYnk<JJJU@f$9^^NiM-;!QAt^722m#e#=iE'-B8SnVPC"aEI@P<[4$I`paAo$]D.5*E-.eP%6.lJ2:s@<..!6IcCs\&*D$W.u'M8`;?PmiVnP5dQ=Ju*q]HQ@UN#6'"Y[]8[GM5*+T0B1Q.--UK.5fR7VmrEPPfZ-^^D=<-G=#/Z%>:n,Un79p1V/CqR/c*Ao/K-B(h3qmWbLScu6j>".D$q9eX9Q=,^U.;CVC2f4+9&-8;.T\PM*A1ndsm6A^K\J;^JIm0Bo2MPrmN_#%h>0kGA[D#U2J_rUAcHd2qS`5)s5ikE]ChZm$UotB>%7H-s%4U6h>0kG$0FH%cZ/CBPKk]WDLA4o@=459:t0NjN;.Mj'Q`AV/rOk[%U/if]2=b%<n-@iO,qRARnN["2I[o:cImD0\XQ`d3Gh]?TrHGe#B`)f3gFu)37k,ol=db<(re(7@2c?IK'Co'91:3!gZ]u`[NV<0+%n2Z+Vc[KM@4f_kn^tp]$`GujZ!,AK:&a)EE,`VM,I)d=,;S]i<ir^`,VK`r/g)LEuX"sI-@c%$`LuY?qQ*^7"bWbt55Nr^XV^8.@%!eh[D12$5OBW:@:Z40T7cU-J*[ub6F#^jWc)/mtZ3i@SHC?F3.O`tKB3F.7Zr(l4e&Qi-k`at+EHJ=8g.8)BGAkbg=16\^=#PQ1\%=""6`NQpQD)\)?T5fn>]O.WeGj(FOI=ZTH=;QX7Sgk@N-@StY2khPqNV/q[:NKL.R:+@=sD]U]H)jaTG)jM[Qcm$bp[W+-YSDe(g%Ckm]BAoc.`?'cJ<RbViQ3Dc`X#/abZK]@ubJHZ(RMTuXJ>#?'k.0`9plX"Z5I6/lE+`4jMCP4#HCP40O03PJbh"q@G[B^1BGu1Gl%VMLO^oUDNoB?=ee'a&NaB<?"?(cOWG&t!ckT-JHnUa#MC_GrMUK5J%'Hm;U!bh+ndE2O$m'b)4nA=<BT?OkjX-j:nk-q^:G(8["k%7$P*BHRlWXj_sl@j*p/N:#o?m:,aBWD`X*S2nj.g3&dGklne')CSMS<qmPQ7SU\"/n8J0c=DFaUQo25aigaa;VP-s1Z>i!7PA:X\%&7pJ06tHKR,2JbK+6?.*<,N6Z/fDWn9W\>J#E0Op3+k$8U`tL`b-BNU$o3\)Ff]:J>Dd'b[X>H5q*St[ZJ.1qm/gZ!.=,5lmVbnq%@r\Gu.?9$0#-q>@E"P4ck:ICE'Zd@)_mXX5#(9"gSb!'Vgmc;pdu#qc'oDQ@i1Sf]U`]jHTihmcR&85)C'd;W/eh%X0#OPsrTcR^%UQ@3&bF!D>".LBC'%<Nif9lJ&XOqNS@,KISUXX*NNF;BF3L'MV^,=_[R=BSST3uRn>%Z8l?ll-gkL3u?0LRY4Bf:`Oo:fi8>5$qg%IlIjMJP.?N.io=)9@HJYP1dQXZS<AM^AW'4#oW"kdrl"IUJZIf<j"B9gh^cG%>J+,VuI2E*\B<]C7.rhpm/Shp9QL/T6'qT;),tJ%i^L\<hLZUq38^W]6%A7P3MW6Ffp'R`AtKZf-A'Sp[6+NU!BO]GU'k=#*Ke.7m`l[0SjWWA>:)7KRG)DY'O.G8P2Y*W%&llJQs+jQ%0IC>0:Q;Inp);F2;$_GN0I`IBD'f`$T)lqp3g1kMdgV6hdsd-rX\cVJXZ\Ug8O#p2M&QQI;N00DV=M'u&\g$R2#,Ko]j0@/>E85`%:ao^&Bd"lL>&ZlQ=n!%cR#g$AeiejeaE7((lEs,rE\:D!#NR4#g\anQ48u+K$sM<-\gEluTHl#p5W,pFTBU/j*5[*d4ib\(O4Hi2%/T5k^K[rOQB6ed<ULU']"6\kR([)(Bg05i08bn0?$[J40"N]>Pog.\o81f3jW!o2+FG,l>ER$k&GbC0YbH!@Bf>&@2X_L]r8%eo0%Wq)6MbSb=jZ6<#'(*q/\T!E]#::Y<@W/Ba6S?mP*.*J2Hn@W.EQ-M>ZP7ciNFPu^J-g(o0Af;Lf%nQV`GlfHkF+b;9jrA/+'Tp\.%iCRME7f8H62rh(Koqs3>ReY*21=bOc.5i^0S_k!5'(HFRp(810TOXbFf<>aaCc*Iojj8%6I\YK"S[K!Mc5A`HZ63RQ.K_;_@:-M5%9YQk\j#';Ag.Y0YW9SX'@`3)bR&2lU;jphdB#J^MW6?.Nia@FloNF(_9nAU5@l18.1>dt_.1KG&Gctplfp%(^[Wlf+_=r'NbJp!%%NUo/+P&bWs^kgMgOc'Q`S+XaL3.$Y8i;Fm(#J&TP*BXeX\!aTS;J_b)a1t`q.@F<QUhE:(].C51IW*=_.U*6:ek0mm8->ck+l6fH%+YPgHi-2<!),cbN-W+SV5H0gp+7kY6Ci-7Iq:cg]@<n4UD8sA]*Ku/g%-_EO3K$51RL2Z6`3#t7Mkb+.5Mb>I*094(#.E"nb0!Uq%N-,\qN_2-+`4T;5>?3K?NBt=6h$SDflkZ'9nXuR,PH?0]S('h`Bo16)45ZFcUNj+%0Z+ERRuON9(ob>;CfXs!-)*hMZhFO_9:u`@%s#F"&jG`f#%P8X[TjojZ4W`46!ncj<=\%B#bdYb4q_d<^WJ>(Jk:@gsdtZ,c_,fR#A(2i):M*WX(X1G>l%#n2Q6r'SKU$Sb<SN1`%ZppfifH+b;`$j9B<nXEc^J;@JIYhXhkuJlEMq4BgKj_0I[ij3lKT+nd<%NlZT=k0-X<1(S>-`jK!]ch8?W2Cjj[Pc\GYWa`C`t#J%lWMf.Rdj<sO*'sd\_@elEn[]a.N7h2eZ^t@m71QiIZ3_aKS`6sOXFsV[UcPfQKWPfcebDRW@!53M9SDaJ1)?%`fAr%cDnr^r1d6P%TIa7bNI94!oc;3h;D$4L^28+'AJX%`]edS*T\^sO"4]f0c806>lPcXDj`WL8s,b1NW7Sm3YY+dNXCD0GURn:mnSN$)0Kj:HA#qRm%UG4;:*cfGbi,!of[6q$eNV,"5NNk7`n$QPP)RG^2&o6V<3/hc43p6&j_rK+@IoNJ'[J"LrPL`TOL:3o5B^HobA^ipp)E'A,NC'$t%'TJF4Fkd*ks!i,>E//2cfH,=hla/^FoU5M6H#hRT%(i4ROK>@0LRg`+he[eN)IYdmrp3YbC>_S)FKXJ:o\`;*Sa4,PFJ79a2d<D!%\l>d@#EAAtT\6>(d\fRB;#8mnUIqRd8SdR*XkB`aIm.%q^XH2`%Xl)a)Qt$<2oqJ^FG%<]i*L8fY;U+d9j4I:eS1Ipg8+O@\jPe,%B\a/"[q""V:f)nRlB#$e>#drSTinj2rVUL(dWGPod7Djhhs(-5d;.\hqMcD2b"]V]>HPmfh6$A^"5U.;]^\p;fABe_V&n<c%'A(/%[8-Ig?M!c(O<4%oou9e8pRS08R,+UmSO'sZOj96?Vu9Z(rtR;I\ufE@VqE+pQ&OW#1tq2dTsH^8;U>-ol.&!:cr@@-^qYB!rS"K0%?]5=l-tg6n%NBg9AA.T<G.R3fX]><CIfaaMCXj35@(u<]lG2J@K(1jSWG_WU#-Gnc_"pMTd:fqV>o\.)>HKd23BA$<7VqEm.G[9.%C"EB]FQ8/S,(p@Q-B/pNBUe(P<DEqfc+f]<+=>N1SDTfcIIsO]7SCX*LHnHk`Is_.,L(qj+&*S+,7iuuh1^;=FX.MRf+t!l=8NF?%5k5)Y%_b!A5*/;`S`<8J`;Q7%PYj2e.oFg_e+.pY>kcK8qm=d#X`V^nB8l_Pf!qS7Y5)\4l(^;b<57<aF)TNapo2hj8FO4rX]DP9%L7g(l3BEE()R_l2^#;bf3ZJ,AG1qrEFKGo=Ks"$YYISuKHIX,:1tKPln;qOs-Xs+*Y&uGg@6ONLP'GoJMXZuSXd1#VO`#?WHCu:0%Cc&^0kN\W4`mm<07d*^nLlBBlU*cc==,l*G[09nml"9epG\-@Ta+9$g;?6o6UP^jf?UA4&6q.;F0PFKkp#a:b)@$%*&erdM?Dfug%JXC+;MZXZ<d!SkiTDgZ2X5T/=X(dY&aAcSFf@&2%]^Rk46I2NeNRja@Q:-F(12u0d)sts@=Af:'g]H2Y^&7'V^!h:%e))^WJ.>k]%3.;%$T>?3>`r"+S(S>5FcWW\\<9\O[h>R%;-PRem$(k3&?f?A?poY\LZSMA79](BKUZPnm>*c0H]5ca%Y'QI&nJON=rr\Dt?=jAl%?^J[mTJ=0Sb8TLUoYUF\Yl>HPl?$2VI.g&WR&l[>@f?=e50h4WmF*u4oOq%%K!V@[Dt%,c$e4n<!?V5![pH"b(*]cj=``oEjgj%X%I5XB(AIqHCl[A?Sp`4l9$"l3o58H+s-"eWOC9>M;5@AO0N,PiNpuq@!34+gr;Z!XeX4-0\1eU)FKl=$*Y$]X;9cu1V^`eB'/MqX"%\sV4f^AP!S)[+s4=..RN$p_h7C)b)O.6!_anH8Cko#r_LBURPPMK5=*IEA;"9Utk]SNal+Ye`Ps*^],/2V:U^96_Jsd-^mMl'(C.%,J8b7IfN:`:X]M[b0:\/(8tU8JcUO="^2fl_E?)CXLZ#d#o`Wos.t+NhlQ?doK(k=hcD)oGO)WVl9Z`7-8C^a]mmob0W*.RU/;"[%Z;JYtZl0l%Zuclm;OX<f;HQJ$[&bI0j:=Q$Ot8=Re2&;t<-Pm7OTYnrrdc^-nAh0*'`M09#p4pET7q5)9(+B!=R-I@-_TDe7Q;*B%ES\V8N/]NB1;"2+Vi`K7`a/YG(?j4WfKLr43rH8LLENO_#=/r^?2#;7^DcLgH6!#58@GbbJd$-.$\B$"Ag8?Vn/2t)V=cmjdpD3E%?]?P8IF0r,W)P-?$"lP&K]b$0PS&)_q0r1?$.e/sS>afV70>*3=<HlO!^)_6"'<OIS_#@"LntG/*E8L[X#.V&',tNZ8P>9A-_2;o%?EDaA-RP'1rS=E71f*[m]^$7VO&0"#[Kb'J/@fTrJG!PS&]1Fh_9=:Gs**#?>e&-lJ>@I`5:V49W/3bB$#5=7Yqkt\jrMYW!rLYt%E+keV^gu)Arsk$a#G9O5B6b.#UUs*Nq@PR):Vk++8VLlcLFCM><0q)NruWbGL)bmgNAF[r]O`!.H;,@9JMQ^68)j=BmeH"A;fB00%g^(t"rW*8=hFN6HfPA3R^Xu'AKrVrIec.^*bb9Hf<p^:mfNt=IlUX^:(f0[3n5$MZT>m2OrR\fa^&A6*)JBrZ>\mF?Wj[XO>qGGk%e8#/YdV92R^?s\T;XD%TaWUgs!9=+m0,oNWJqie4ibParB?(99Rhs0Dpfa6BGG?3iCduZ0:&g0I(O\dqBO71YpJrLEiK'POs%SHd%r`<K.a/]/J.`UGtLAaF$k<CK=ro`Ka]jF2A#^%2ENhGJ.5L(&FbC:*Ps"A>*s5RJd`S1)ObQe#HZhD.>(5moglnulYc2\"#;<).O%:SnFRbG4P(B-jj`AINe7CRG-:ed#PJ`l9M-B*Y6Rd^T=+2/q5"aG>eDs4JRSTho6RoQMDao:I'p<Z*iVItEX>TDo6m:INuLB@s7B%a=1j'EE*MVks#Wo:Ld5'KB4m>*;YV5/Cmt&+UC)JQ#0tP@ijS>H;n"A([gu8rC67Z7_&%kUY!J0#9u.Cj+YctJ3+XcK>ueYR]a&e%h/KKKG2qIggn`>3#Ah"J,0d3p-l@M-8*sUtGC:b:C=EHY?MM4fWjZ]&d14+!JVe?PhnbNB_XA<l,g2pX""Q9ugXj?`NW*#SK!aA3%2[O>TXlJAfS,[AYo*Jn4J'o&GX==Ud`_VAB/l_=Y5,5-`C5uF-=*oSo::4..A@>mA,/A-DKZ$k0oW%;-[gM1sqZfB"f#.IK^Dd3C%`.`Kf]dbI/f"8*'F[*>",gH#k^O7Z;AkgZ2&SD;"?NG"u9D.G?qVH$G#QL0tArr,l2PYG+k>qAVgAW'm59&Rf:=kjoV\5+dS"a,h%f,^+F;sf&r@-Vqt"%TJ.X3%;D1M3fHD5N\\B-f7ST#o!_rGZX6ka3&?9&P$*>O;JRoUA(_<n3ogd1_.+S3.iOlHS8u7t)<H^2>lF%+A3.=ieFP?aasZUKCB0pGg]hjhgn.-aPSn*HFVe9KM]23-DI9a-d.uCn8a%O@DJ0>E'1Oi\cn<p"X]oqGR:3LoLGr[r24J3YfZLR%`[3o`m0`8;6%n33/eocE*ZmTb0jHcOoG`fb[*X8_:jV,14n_OY^tGo^A$?2V,`L;;AHM^k(XP:IBXPXsU=I:ob<Ao%f(cM1+[/mb%%C`]UC8JPu?E/ipUo&I(RB3BNIpM=?f`_glo2"O4<H%N!TC&XQO,UMM_a_C%+!:I$?sL*h3NBW59,Qrb)09:<G!;@s7Y#g8rd/_U%;sjE_V0.*ZqK&HUXjp(p3c,E.!u.7hTOLVo:qYfp]KUIboi.iE`)Ri,4]M=Z:AF,Hrlt)#7kGpK`_7QL$4sYGh:,NAH@L4Xf)>OB%:4[NmAd_O!Yu*eMncB7k>-f+-*LO,5XsPr,;Ng<;oiSWYpcq]lH,lMLGC`&Km>oP[C-?GlED0B,`nmc0^(56U76k"N%SW&&*N"B<%%m&O^FZCTWTJeGM17m$9hf@TaFb%U]e,eiT:^<p^::P_Z#H<$Mg\^3Ar><#u:SCPPiRV)f.IO*!W1fpBL8paJ(od=T2q;sV(SY?n%C46@!6Vrh8+e+,E;i`sihC\Hd]tU%a75p0hC5-fYmsFe6qahZ#>OCSq5M9[LljUTH4Wf?0.\Yk=]3D@8VsEo4DF@9ca9`#EpT2>h%Tjl!\#=t&)q#-h(Z.Jm]U%O[On@n#PqC"n(Gk+b@%3#h=+qcC<mjaDE7D3>dbuKDp^t[mK6go*/qLCVVEK7>O/[FQ[BPVEI+&t]Z%F^)8'HjGtdWO;VP."s^7B$9h_4XGO6f[8_XLIg$:)P^q97lQO/!4,CVCRtIoh&)FD0">)E^D\[G0'\'\KEeEZoP6BLX13LrN$nj>%XmKJn-)/2W)BcXf4GqmsC)umbI,n4m8gd7iBl4+fLdbMj`_1E^RQcHN<9SF>53;pGd.\D=WDF[3ioiF0pLdk`XG?1H+Fudm=5.R:%*+6=&,IPN_@?B^hQ,]t*Q`9IkiuQpal2ZM#;sa)Ko^""Jr_)g;Lo:O'd[/b$_CUSA&OEekN:Uhsdq[:;/XtoddXH\m1)()#j:)8M%#+>6)X)H6[OE\9Y`*B>`(oV=+@iJdKdq6<;B)S8hbH)Xae$S?tbSV-c7rh)T0Y4c35tTp;^Da@fX=B7/mmr8Qe`.IYC0<]Zn\*a]%J2ilLCf%O35*LZMqVTOMpjR'%qZj01*`]E$^lEj0+0:<0>9,QUY^OlDa)1AeXuSVmnN5+-0ficZbGK[i+ne8^(*`=.B;%/Jo-K43%ggsoD5H>P=8;l,8@U"90&j&&@Bd'$,?;9d6%:oB0;DukQAb3aKq%n=\+n&YFo#2-Qo"DMWYuNB)#l!*9;^ntoOnjmQjh7ce1;.]?%MFJ65hj]c'ab(X;qeF!C[uXK60jMJPX<$15,>$ir'%1"Y1"*`R.E'Pt^=5@Oi/6F7cKX)lSBo@2bX:OU@5I^[mV')8:q*#'H`rDq%.,+!(DnY>b\gI`pLO+G3]=3'T.X)quRo8_>5q"p]n#sl<\ZM=1Ra]ul(O>7-;+Rir5^u9AYMmn1V;rkL#r"88l)<M*D=k$)PI5f^%X^':_=HN3^jhZrKdeR2blH:C9q:'/fpFPqqU$_2#Z!E2;PC\pC.=S2CrG4pErbhXbYE]m9I:'@*qUBjUIQD]A[%b74lh`=af1o\=%:6%Y<8%2NsRH@p(lJCc;,hD:>d@P]_BB#,\+K_hNSVEk>\,DT"j.o2Cl;t'uEaNkU<4TaWb/3GKCSqR%H6s>3dOsN,DIXF(=1:VZ%:,@gUZccV!X4'#$ZM8BUFUDX;\ud6%=8(NMGHM4#qGYYC:<usA*9`YH#-BrN'PR$MA=q=tT]BbMhupZOO3VM*;;!u_,bS)41I=\e%Rq9o@e^j!%_!9FDAD1n.pTbdPn`[>bbHt>+Z>6B:gp?@tkoO66o6B/4+7&&UXM:J]pY7gs%H#*;4LXkVm+/.4ek=auVpL?M<gPFW%H5l:C.eh7Uq0DGGFefE,r^QNAI<4Z(BdbH1eqPOnA'HR-1d6+Z4[p>]p\N^P-1#_r"MO![eK&KcEX\LRh,)T]efubrcT8a8`Z1O]%/s!_bBW%])n$6f+&%f^+@nCh/1_f=1m/?Xcn&=l,l.4PPnS58lg$.r!CE_lgl!mu.>]97+Vat;-"<St_%dT+^JSV0MY<*\pSXqt2%*TZ$;7EM_q(5/0B]<!N7(QK8dQ_3a>XD=^m7q0NFe*BW;dNY6:U+Tq='Q1MQY",BOnXGm"\"%63[la&ZDOlAQ`bo-jF+[[-"@"?P%oBB91^!i1ocTcWmbuN@jT*M?:dOFIJdBW\@-'n#43\:`CkJ*MSSY#8hH]P^d_9j_(6FncI8S1'rSDB+YSd7ine*=fC@V;.#hXL59%_+kXg9QReT&Ut\t]E20cQa_:dZ+d>H/?qsboi6dE=Vd#n<77bQZ5q]+GFIgi57\O7e"kMCoYLaL;(D.DQmkD#]DW==psd]*V`V03%RKL6c>krJqG5=='5Hph?I\#-DgH'jkT\K+;.(g=Zg<oI5kd3HoG1pa"`*'#(k:-:!pTF,8j\=1&]Q8LC6or:nkZAWCqs+(=)0RKg%+S\?3?FUrEmmF#$Lii(HhV6Y=W4_Bo1nOr>I"-S:FQ!"C=H.,(qbN'"a4$;jZ._EHFF+?N:gT&Jo1MN"l6]s5hV/pM]HlM.&[GQl%qs#*"bjB,VVk$$?WK*n=m-bAf=`O=)F+8Od3O4!X><;M'3nQFI5?R9a5<T^P6d_Ys661A7cb,k9D@]f2SfW?NX_Tjef;I;c#LUno%d[CQ`NeA^"/sE&+1X"D#a3qE:e'6N>@InZon^PM0;1A1]WRo@@]Y1fJ>0'r3\N`7&Q2b[>jgb3:P7,aYJ,6@FKZE\r5<j0Q/U9JW%q<]HB)d2p5pWmK?Me\Ehl[lD)eOPh78)Jdo]eSTAbL>aI['d-8Q+\m&\2u,M(/>h:Dgr&=?RpX"(L3S%DpR`.Z,k%IgXBJIlh*@S%Q$:Pa0moQ2I4jXU:XAVspiJn0ol@6#rQ+S&dIlbnD*><Gh2K"/V^!%2k?IK,h:pJ[p%EPf^=bA,^+L!qg\TdT+!SCO]sk>"l'c=(%Xr6\26rjgW`5l-Pi\n)co)aC&C],^qH]/L*Y;>f8$^'N//(d14h\po[H`Q`Ics6"%riD^?a4^.n\>+78ip740l!r3/Ftqh.HB3]4%[nm-M-Z,3>]`i+]lR^/JSYZh"K!uP-'`SD&eCf+S](kF\52WITJ+E#LU&:)Glr5Cr1T):bAer3UC<IR"<k#M4mpCH'X[H.W:+MUd%^"KBDecjZBG&Qn01OLr=XgIF#Ic`^l/sghTT'p!)S^s-o(TgH+Q]9ShM:J^1_+8EKpJ."NHga]Gb+F9F/+).*hnc'dn0YtqGk^L1%lIdUiitZ"YF0*;(na$tWO_ZWBY$%;nlbYj:rFO$NMJHU8ORC4tCa)W/og&1F(E3k@pSbWA\ePNJY;^k-NcNPLa)"Ak[t>\+lb_Cl%Ysc=T5G?R;Ihg?0gF%e30Pb]Vjn&UnI([H_Fp'FF6fLJs="7u%4?oAgK6UXH/24T7(O6"&]sHOSeZYK?,Nq=`rb<.Bpp"LUYj)L8%Z"OZ`o2l].o7+nb8Z#3a@W-V*']hMD10XB0$Y47Bc^''?.VuV,liKEf%b,0VHlt/r*"<,*WB#Q>@f'Hfit0;j]lJN*?^FW2%9H,N%KO;BCl8sN:J<Xq(Y-3ruMGG.o+g"kB!gUS<>Kn/ta!7.&>jsqfbP68!_]uY\KqeJNa[c$,kVe(Er5h#Z=3'@`Ds`q>$i34]A"t7O%BK&ujOVN9C.[Ouhb='GBC$`j/fL+$djDH,6pfR@*$VFP;?'uPi.B=[oQWEf,_Rp]AdhX7UN;<4^5MebVaE!*.qmEk2oTYpS?+pD^%oQJUqMN46eQ]bHsmT7UZA9S/W%[WS\k/rscVpg2M4@HW]iQ!/bF</2'#sIK>2mMbpQ#Y-Da\*S.7hZ?VY/MfhT,,JBHC=>c(Ec&>%qKd"<MPi2`W8c!2<:45fI][Be'4V7-+^mu=`KX*6Qu$H2F.mT>>.32Nr%r7lSpguLb]r]#M"t/64a:]*F-C:g3(cs@1fd.1#&)5o%.H!6k%!MMRl8\UB\o@9\JFEEHN_jc(Cf^+obI,b:rEs[m[b]'b?!_K>::-8P'8dl*$BcO?$Z/iZN^Zat8:Pap>7S.K-*R>p5UQG%%q$6l6I?87?R#;^AS.aR[de7mnl^/<0qmtr@CP.M9$JK!&.qK711sT^?d:0duQ`?QZ$:Q>4hs]oNEpLi<pAt'`Ld/1aI-ImYkmK\d%dXiis8I,3B/UDuTbBQ88%!n@a9ZXpX=+"k6gC0)ul%75gcW!oM6-6Gi<aVhlr8@uOK/PX5n*ktQ[O+`fo:l'&#AI=`F24/Kda!Y'%]0r,*@k=q)#YiJ!h'_TMlQ3?(Bl`OlJsF:M&Y?i4(s0T3[-hu$F3i=J%RikrCj0)lcfp;4^m1O=ddo/B3.[hu=*$lEEj-4bE5Og.%afuN7m/u,tgN!EYQ*[*U@0DXrD"fNTi5I>MVTI0'Er\NY-!*p_8V&"73,Qj<E&*I@%6t=D)(_bsX,>'W]df6AjE*uB$ut%qOM%]Z%7IggMZlLY,-L8GlW3K-"GUjG`%hAjF2f-;DUel.WTV`D'-B3!rpLetN!W^6L4K6*a3PM'Wo4*97LB8[533[4Q5k,8P--sX.V!%`D%3$4jrL:l]d%91+;a#^n]nj!#gLU_:FJ3H?\B<X?$b2T"1&+bqq=m?F:lLH.ZD/8';E0Okl_(^Dk4[-H!i+-f1#`2n>!USknIqUt3%pQ5`<]X3]MJoOP*J<9,KA\T1K4F*:sRYV+VDkQ08=$d-:C3b^+`m94_k^VKEU)l%GTE@4l#)LZ\`^K(P-2gmOMAT-rOBu7?PJf`!%i\c6,YBZ%tOu^'eM_s'\C##..fM1TtV^ZIQIOH,MQtCEDI_IcfmL4H$_W/<V29liCiN@N@=+dg7(Rmr-Y+O$k?OiVfE!eX55ECo(%FM2_KBXGEn*L-^8.-+1gLCU.>PlU"h68&gs2]ZB*K8$!r<Tdf6,'L?8oT3e1;L?WjlJf(%IK'M1lL*)mn,0`A:<=W3B3q4Gi-Wm,%k)iZkT^aLJ/00CN.#n&C>Honk<gd28EboqZ,H[,3o20eg)W1=5m#L-0crb)CUn*o6OL4T>N7i8-H'3=te9d_#n'[SOKlA4^C0Mc*%)Yp]+F=FJ2?7QFp*SI-*V@L6]XBpfKhJ7LF7`=+_5ZDddB.3'-T:6I1eO?3<:G1&-+sarCF-()6Ds(kXE!tO!1%.OQ6WXIs6,LX;%fe'$%\-SE/Zh"+'Rm``tpTGs2BPt'_da%1lm<Us3YG@^jc_[sRTeX&P'ClHT7^c'/'=K'/HI0*s6['KgZn3.D/)UDGY<"Ra"l8qb%@*dBZNMe!AHq>BVdnRoP&bsJd/2T8AO<qR..;&%\POEs>1@rQ/Y7c`<CnT^PK1%C"1U\=%+ZBui0G^FSRC>GC<a75md?XI2m<E]4%Vb-<fRQqd\0^@i!$eJMI_QF>dB<goB7/HOKFQ%$W+*q%!'UU>i`bRqT/;X2eW=*R7"Z/,YbbY:qe6&/FMqq,LdW3lI\$O`][T8bJ%S4SXp]%QgqXb<EYgBjYbrH4eW@B'^UdOa,!TaPj5pmS#e=YD"H?`)P;KVQ;'dtO*jj>Tk;gFta,!J'LTdiGiiP&R7I_ucK`0c"=#%9@o9Icr_EF$t/<d;sLlkK!28`A#p[[3g3NHH?qu'!VtMhob:L/j(&&V>7W/IIQO)6,^1T3PT54e*/Z3,U6b41eWOQ-fi'W=pO/Pg%O.C(Crr0TP0>//O"#(O9iq^3)J);[<QF?oPp$5R/gq6=fH@q1d!Yb*+N!5%cH`[_/B+cZH[f+dd0b4qmO@oCd^'0D0*NG&FdK+mh%$OchcQ`6*M%*11@kb`<crqNg&@M_[@AF8^/-"b.;7?Z?bX'5d6-p!t?3r]W"Oc5t_F6NNXkc"5:HOcTr#+],0i$:=)rY]hOCr,@W%kkm7#6IGVid.q>$3O/gdcCsjUTF43OP=+N*5t?*BbTVbe^E1LGRR7RUIg-o8KpsBDc9HrAfjj&`kj07O]edmDDUu8b*dI-IT\\L^%5k9g)Sh9]VD;<uoNs3UkiiKj3GLi?;O4b*`4OOU^3h'Y5\b@$"fo#N!Z\e0.RUn:ddqgmL10>_c&B2B'kL8);bi9o`m.ef8i8[Ii%j-RPPG:_m8#K](!ED.4n#Gfb33K/tnQo#UQf%dHKCi.q]1Kae0"C"/?msAmUGq%!ND3"$)F\O3OChUP[]=I6>CpKOY-fefh5srE2%)DO.5h;"?6S6jXrA@JPHK%QnG+NA&"QZl0E\fo^jRE\"ire-9a[pXd5>"R@JCs!6[ga2PHTZjDgh"bl.i1/Ycm0pmp#q^KNR8/uU%b4>=ZVD+&)mE9B_fpk4f%%W@g*%".m,k[%!!mu*?<o7'K`.#0H0X=cr1Crhli,;@aP/la8F@"i5G4gaU%V't6Png[s:/0Iall:8#%jC:fo7Gn1pmlg1&e-2:*I;.IXp^-NdgAY^o/5D;I2`<&'Ri#s%]WAB]p3\:3>5@[59UV\2]2k=3@o$UIQAI<X]bE6l+IPWe(1['R%YLXZGkVUr[47'4$*Ji%TYmHAJeNMrY55B4oC#RTm-#bt&+0S*/0o!:F4%fUEQr"?,D^;^Uj6V&]&L$9)(RA]J!n4AY]b]IO[:\+p%-[_rLPVY/-1?.]mGc/'2kPar7n6TRGOM*"s\8rD)Tu52sg%.H!`'!E4QlRV=pYSnm4*#gU<\2K4o$-h^14@l?KIoYu-,WXO9osFY%3o1`ODDNu34U*#tK8(sOHd!.!K31rnohVnu$&ns8.%Zs03-Gog1@,()^pqTJ:QQRlaI(72;+/D/,^D-sk*KKm/0ZlfGC"e83$46P%B6W]u#CT*17UFNT@skj1&Xa[0E+/HGC'Ob`1?KM4(q8Je@$ZV-rN61kE+Sa:\O9u0h&X>\cmFgp\7?!4^XI'3k3$J),B^Tq]La;&%*cZWsbda5;!L%R)2jlpq*,Lt[mVjH!I/Q/_Ic#A]A%?qGO.=.ZCXIXP5S-G<7c=j?'@\0mF5&]jf>p8+d'hqtDj#2*QgS:TXUAXf%`uJ;"]Wq^]jjd)6QdKr2l=&'<HN&24QB(R]'HY"TKI#/p+&^'VEj2Zld.?7SA(s&/`Vapj;+29>HbSZ*o&8e]Qn`%>RIfC73Ibl9%HoUk+d.>P<Rq[Xmi-`$h4&kC-%nC1$bT&Sp+3sOI:s])ke)nP.G=*7kJ+Lp?F#eFY)k1n4>_#`Sk)^+obmV:_DpJ/t0#!^nZ49?%%VHoj9jGT<%#q5;78B2=[hR7!W4cpu$,c9W#le0bQ;$[?\#s#F7^R`2l=*UtjL\!V71o<E*g6jh=T!gE>2nSO0+"u$EI03s(rQ^Ar%IG)tY.1]A0r"F'd9PE;^j.>KmQ].ll6"kFohIu8qRr^^QQmWi=T'iLI-ZrPOJF>M&iI,o&VZE!)r7E]jpIa/-JIVEUJ-fjNl\;k.%]q4Y@R[3+pCM_4D`6>a?d.jJ-:2@c[-6+`k//r@sq`3/27dBA'1/a`nkEqA=NQj+$p$$Z1)6)VI3ff6LlGE([Ik/>j;PBYLj<g3H%(?e_[Z-^"l:QoCd#!W<\GDY/MoaqDu3Abm,9h'B%c?a;DKFQOC@jWC%>`5GqH-3D&VS]#i2KhTOI?7C'_KjDLHrK!9MH^9[Kq$;i%S2M,-E<ag+mscStc8DUUpJa,UpfKf]%.n0D;;aDufdH=3^-Q56'B,MUf_sS8<5XAF,CJj-p0`CN1,``/LjTCGk.P[tA9bE!"a`.R%+dEPEK]BC]!OM\n@WZuN!Krom+9ePH/ir9l*`rR/SDG1I9$W1U7kVm44ruqqi^<P(E]6/&+-h.*>H_74`G[IF/`b@c\&H>+_.@U6%EI"tBGtV]+YK@a4>Ubp+T#u1iAUC+AD*em'jl4B@0$.uY4+&Xr-L?hZ6mLB%n`Kh0%q"!f^p_i&O7uu&DKh[TB6Z5)k`]FFY1<70%1p`")C-R%k]8aq:lcS(TijIL3S`6L"T3f'1EI3G2,MDHXQ+0TV.:D5:BsU`NZ5[,3g%*:i;rTtYFpmDHb-P$?I(4Iad4*qm(KF4f%DdLP'YC=T29,[1n/*Dg$<i72:nO66Ca&T<<07;,nEd6Wt.EJbll+1]'eKoNLJajPgc#1&&Pn$bh/dRJ`P[Bq<Kt#V*>_!S'l^^>`%;OoN(Hc9]T>$fX7MaB#jmC==Njjn.^!a=-aI>t0B@"VC^e=J84W>`*JqW33kprK$WDkIGIp65@Ao.[l0\_SOoG)r0ZR4:#K,WB-G%DWK0NWO!a0Tr9[-*-(ki52T#o`pE#\dj9%+j7BeT/`9skYoo%>CEP=Z")Og@SY\7CrGf[LV).PPI(/LG_(MB"([7JQRr6q>b[fCK%DLR*NKpu.%SQd_;qtVqPACJ*."C:e6`b[]F>e1e.+"(11p=s@HFZ,cm/^E/:3G$[M2)Y)\OGU=.gmn4K)L7K^3k'5M:05^iS'EUP%cET,[LMT#\3/d`?\9VW6\]*8Smr_siF?\kmbqY^5/XObsGB=nZFDa^?bl1kRl.eOESnpN92P&V#Kq]6KVZF*fgucq*2q1OSFJDQi%]i005CcZLhEh:s+'4G_BCqA#kn1:tmB@BS5Z,s<9gcV[bgp?8#)BcT@F3US'CEPJ.Cc]&UP*%os1M>1IjjH0&f@dLpgsX70.jOZ,%VK9qWF6]+FZg$8,@Cn+,0%k=I1:cP/:$7g8kAqa&ljhrKXOna-T]:L+cS6b9^]^ou"7IjdEs,-`$7md-FYW@^lJ+Yq[4\>fYKkb2%#_o7^2r!&BeARM+:OGBW@1eG$M?>@p_)(E1*N2hs!f;Lo\'%K6:Mq<&h&Z@no'(eda_`8VT7laN;^3^bg+p5**g+Y"o?Vtn-+Ict%p5."5>0Ql<]*WN/gon8pT5tak,bP"'4)YFH&7BoGkV[QJR9[Q@klRC^m_:uS?$&$cJ.@<aZ!!8p!aKd_,bfN;q/non&Oi=MmXjLL%(&Y5F1NMA"fa$j]'p<dD'8pa<T'2]Fmbusl/9]Uj"!t^BhkC6@>E@%!bL8T_Zkii.e(d%MSk(g&\q9JEH-#^NcQSEgm,$VrTF=3V%9cQI*dL\.$\SNHOoF1[Y.65HY>=:r@jqF<aGUbcKZ_>%_HSA_W28t7VcJ;<`o@j^s3R?MXQN;:tNS2s3p(N\d`ah9QB3kogX`tll%*f<_Dc?(P^js?.5B&u;+MF2Q6AI=LUfgQeuT31E#"1p@oei][oj.,u:QG8^qIOZHu<Z"M@iHa2UfU*@dB/lg$4AkpPZ0FScJGWZ$%N!QfAim&Ro;!,EdBoFG-\VL$-,1GB2VS'Iq@#2C7DAep&*R@-.8U/#M*U'5knX5FWX0\6.L!`hVVcp2Lm7`hll#Dd7a:ZD?NllWC%ie/-<3#KRuO^Z*A?F7CH7hQ\?I`H&t"D#E<DRd%D/)B[(Ru.YFDRc28hWd[M\FZuFaW5TsaF#Nck&aPY)"n8`;r1dMP.^4mRs7o8%7sg<X,mChmEoJ&+`n^="2B'IOJ&>R=;pB<Gb$5RkfQI^Bmko?!D0=f[9J1-0G[bN4iS?A%&ASU[ANnB_Z1dG6/\?GZF091<P=Dn6%cA7!ok)`]'XV`"Jr-bj?m<G62a)A*=c@kg`A%J3Z^YOU=]Co7P[s6>T%I[nhCN9*_GonSI1BR\(0tm9#^6W&_ND3n$aTr::[WD'"%l+#Wq]GZXfb.BoIl6&YlY<@[05.t<[M4R"sR*7XG7g0]:oYt)h:Lk<jN7:hR1o<Nm@3LnX(l$[9+Z2`U">gPU4Ujcampa]bfDOHk%k=H,cB@bNFg-%7/`jeH'=)9;)S9Heb)*l3=>_A6hfJ"QI2o[I&ptdS^qfRtgIA696ANc*@B_T4g9KBDMrGl-pmM413f;)W#7[dJT%d-L(T;4=5'[A2Q5U;_oYrDiB]eD&78AZcLMq,FImaJTPg)s:ea:d!-k*BY*CEnnQUh/,<djhleHR%3m6F4&h>qAE($[X>U'7d\\U%#uCM'NG_3H]M,a]CjG4CobYdDZtH:'q'pm^enHO)mpY7_`13C4q-A'.e@A?A=^o)DHD8a)/t<a6.<f,h)]lP>$SfuW[,1:HFA9US%N"H22DZ"Htc8j>B*4P7e8,DG9q=c,e@^+/5^WtApB;`pCNN]opV[^+1NI0Qg-g,]F#Sp#[Ntm^NZ[9.($_<i[P>4,t]LZ.g!C6Wn%8XSfgZgV4=_m:E=CMi_BF;1ZB-%8>L0f=6@EA9K``[q^*,BlBJ`eeoq[%6*_aTOb4c>ecqE[U)M0gFLl=L>7^8-'n[hC2%25s_4_%&3`?RZk^S2YmKOES@2H](-OTWfjh5e,"ZDtc7N]1VU"R@QH.uq>H<,a^mlcJ:7me0DMKRn#9/Jj3Y(/>G&L/rOtE0`5dHTN$blg6%HLP3D,bF@h$KrKXSrd<,p1`nlGXhGIg;R'l1U;7R^W,)rl(6!39O,8qJhCF,`*g]tEH=,tY(X,GVei/qdMu;5?t`?Ba2_LYF#^W@%k1jgqHGXa*Vi3/gpPtR%E<n/Y!!^[a)san>A)=i)K#G\LRmu82N\bIZ\o?^pk+E@L>oM#37h-(?%N#U,Hg[;sWsM(pYHoD<f__m'%[u_WHR,>;,jCAPN#(k"m;\tttLo2V,YP9NdaV)_$KCO/_"AU4hELq5Zc0iM1<o],t>;Xn2Bf,j$AZOd8c9VGGS-Nb=T@+.IJ9H5,%R`akSkK5k$E2NH;j]S[$h'D/Q$o]VjhOgdPF9&i;fsO#'NP576&r_g`h^A1AV0QNDSgVMlcc/H&Kh&74MdN@'!XtM"khOQK7=nVA%f@)]Z_lJX!BubdF!-._1cN846T2uLF[mP:q/3s4TNfeIh.C0!pUuLWINp_PmR\<l%e>!kM2@Iki,sF>>,<8erka:I$4jHQh+q)a:%,^ZW2Z!L#\)&\^WHCFV,^56`<S,-#Hqe]L9;j['c72=s7.Gsn>g#d9'+8(atk(>&-9DQY$iab"+9lVVS>81uSQh't/O$'mEq1@I1%3Q%\@[\s6/Feh-F!-NT.-oKZ;<kipM%>FQQbpAQhDJ)>]G-@NdB[4Pn.<aIWhWs>H'lqF$Rd+3D#?<g&opbYk.-J9mr_Xh7:OL$+%rB+\Jh<O0G2UnPsq?<VSRIBh?h\j:"Y%G8s00gl9*:EKpR9X(W>Z8D]Gd!b>cpmK-SF0]Js',H!\cKb2?9eGj\aN@cr*DV>C%=L=%I#<:Lr-+ZVS-<cM:=/VXcf?=rlC7$E5CZ*l<dEhHYFkisIM8;<ja"&%^T6\*$[UfZrS2Qj=h"7PHlq5cEo)H+lf[.4RJf/$lfZ$U%_X6QYl!?US`*&Fce>_m/F'h`uDY8)+c7nq)I\YZUpfm]UI7dG9Vm(OHr.S:pTt@28f?\T1`\\j;QSeTQIf::hm2;nPhs4puh\s&U%DrdFh.IZs$8"aiHgT:/Gq=<5s;Xus<p%)N2T&;fH),B_+ho@[&hLk^-IZnDc\DQW8^I7G%gNKlLrVS6mRe&`?]mfsiqTUB<D;>,L%:innqqY@<R4*M91H`s(AXaW(]a#Cg]%DVf8Aj/o/][^pQp[O79V$!7E0RBq[,ZjLr,g:*!qMcb)fP^@<1PTMSf?Y]qf3A3Na\&&X%bjhL6$1IQY1NT.:_;Cm.]mfRoHQ@U>?a.2p=mu#>>7#O5qK2K.9t'6-j^,^dPMsbjrG;3Qo;bIsk</RrlK<62fgPT2H,q^P#)m6#%.IZs$hrlm0;k!8`5Hj]=AK8^Ak<,leJoTnrp\IVH=&++GT1s9ah!-iAmQphY5C\Or"Uss^]@YBd0JliDB=ujB59\V+aKs^gkC9P)%M`iuK]mbE"&@Gs/EN`_G)eQO*rTl?)][b=e]68dQrVVquQn6Oup\O\9#A,FD;IsT24WGn7+B,s-]&U\JY*?SpJ#B:&k<cdk("8A;%rAWTfdhWsE9Nf!3YMLhbfKT#HLV/FN2D51VB`^a2<0e&<4*M6E7T^r0(`u51l'::nI&&D5Q&b^ST%)(T<^1rol""ma=h[%"F)!&L%s4U7mL=MR&7TNmPH!GYtM!PZ3O^.]+]l="7=^SbQ>qAI[gQtD\NN[4T'[9l(rP!%(oqTjhn$eLa_oAOUT02N>hHYro_iN!Eo4I="%P!0rD]N4$sf@N>5ro[VdF8BsDf_FYW*d.e%k[eS,f9;OF$_9a7*>OmS2W>6;[@;i@30%kU0)Zb5mml-O?>jKT/@,+W3K?Z+doKqQ%VX+Y$@:rdm?eq$%b$sO%W19H,om4lRA8h7N^!^7j4*ekt7p)YMp2;CbPs'E2.>a.n2kb>g^%V;p#E-ZgV[Z^Y`9)d7QYuO&`J8L%%W4\DMW``CgdX)*uo"Q"/aD-RSjk'/<fZCh_G31&jHZGKm)_2rnn1D&T\fACF>KUijo$Oeeb/)6Tjo1R?0-=g>Ao]:ndo.]p*A.9l%Z:L5W$g%=tUt9tu9#_"Z$W&FQ4ZbkCGkQE@[VW3K1acD<2/`rKdQTc7G-mMG&5G_n9"4WRS)*^E[@#=+pN4+pmHm6nn\OY6p!lWO%0Cs@Md+,7hZG(EX00C=-mZEW(q>3R:Z8Gcbfrj,Mn?5rg\/$*N@se+M@d.HP1DDDtX(`.nVd6<Ns6;rImQ2l2ma]pBFS.SL3dqBZ%6mV;>:mbIXDgCMl+[qhWAGb?nEJB.RWl3"\^t<N0^9/j)=)r')`@hqlP'0m!`Prhl94$?-Hn2tO*tO'dQeg!DNMB#Ti'-3&>nbq1%k(?\55p?)B5/<`,gnSYiDE^\_%mIHdbQe4D+M"lZANVr/PEC`fUP5^NQ6;G[;-L[(P,aq2P$C)6m^dp[Br2Nm'*/c4I`/qDOb@'f%g@kD:e85"E6*%YB76IF,4NZiS,p8Kjh@F\!U6TJ]!k*/&OCR=ig>4:Sb*oFq4Gq'O&^pF87/H]L>DB%WCZMH/c`EUL\OmaQ#k=am%+LNhsV):F8ZF_:8/Fatl,*N@5iaIjnY>"LSMeTZo6I?ZS'Y"ptoO<;+EP9cCCgS\?3UO?uUYHQ5\;Z*8N.14;V;+l0W1Q/a]m[6.%98X8Gho=#]f;o:BML/Q@$/SSFQAQ4M+sm+qm8RYH[B:hH(Jo-lq"R1C>q3goY9TJHobj)H]@Dm]Ci=?j-ef<3LTtf7Y:?%2fB0ne%]&2<e]O)XZcV@d!hJm<`UVML(lB$O(Ng!n%loKrdR*oH\W-%V=9Y?\..>bmmV`m:=-V?=AH\ffl[Z=Q+A)qZ)EXsLEeQ+-><u3J(%dPgqY^MGNQhq?hnBLt=:5/6>ZibY-!RoEpI>d$B'L."9J4>?ml5Oa66[do\QmYtG7Ljl0a^e!p&_?BZPJD(5F[gPUh`5%kVhI5tm%HTs*\mtWu($>aK:H\Jrt>TGB8DOsk-XN,=$Nld!qJ=EW2fD(ZMb&o6CoD<gu=A*]k4/f-1pp:I-d>6MKG<);0/LP_;[1&!?nZAo9%.:':"[dGe==G;,cHP=6Yd>CgaWN6GdG@_d'_j=['0T`EO:t4bbG^oHT2;NZKSmd,CoX_e8&O@LU\D"U.280a]fTi5>T;9+Nn*CpS%kCXiXRCJ]h(F`M>,;%8cIS[%.SmPkXrbB#I\ZQ2CGOIKYqo?30HuHKr47"7"MVrQF)=Qoe>(r?9p,G$g?a!!HH1OSPB7$O1gkWDP%]X`)M,&aVG]<#"hI6"JaT)sVR7?F`r9%^p%:H:1$FDT7uD)<LLq3FdsdCO]TkF*b9&F)JkZ1>JJig%LI5qE\2b(FMm$M',MZ6SO)%-(7fpikj#&^,V^bn:">$,U5u)?c@3EB99l2>]k4.H4^X"S_PrkfX`Wa9ac-FB!_,d8DQD(JH/SR.U9Y;QK:]\n;)s3UOfnQZ[q*4%fe42QfqDjG00_u4*0HGjaOWN>Z\ni&rn"R\(XO$rma"E;X9#_-FuCK35LKc*ZkKEgBg7MAV4)fiVmTBTY=S2U]S7b;%'5Od!DU!^%/$&ZPZEiqQ"E#Vh9kd_=e.V<[ZtPiEl_7t`Y3t/L<f+YNFtss\B:[Fc]Ks;oZ\$F85]#%tlO3(9lGQ0Xq?-h)^dn.mP:0nk]\Gq:%kn6-sUmJj:^u04%F;fL5\p+9*Y#LqSOKbNrL9Y1*E^V*Ds)H`]6-0#lqBGN-!1K&J;2Ts23FOuak06/BOsVS"-auos^7G(['FDbX%V29jQ$OMZLiT$no!lp-QCCV&_F%@9AOE]#\0ntAHcD_6Zl[;6HXO@G>,p"J=7BPhJ@RC%hpn<Ot^$!n^TBcK!5]9;g7')r.1DEAI%Ok_:%,,'1+lpV.qh\UuNqE/sH--leJIH!@H:>,hbJDM+1eUVYjNIMV<VsRK6Npu.c'p:"N8^&puSfg075d'`r,(Fg/S7NN_NQ""#%BW>L&J<:dJ3?"Pf"ns@VkV=7h0oIMi/5pP4N2Oh'%A4[[D1\\/WF4Y`&fO#o9fO(HSgoB/5^8o>_P0]lg"9I-DAu<ON\nOKV*Run%@tBD$e#Ogm9$S*2=`eAu6r;`r=]?j:'eeIh"/=LEN5[C>,H$Bd24pH49H%DeO'ss+2CaS=#>fCFM+gTQEJN28K#ZdN"IGm7&WH6*%1=\'0!jRQG=r0JY7bine`k]C;fIF'6V]!LSVoZ)XAD\^nMO7-`Y?Eb;*QPA[;hUc4-Gb>ST158$&F_lo`#7D$[u]oI17NZOX@_O&%aP(Fs+d-LfqiTr*p*?s;gYE6+TsVNU8^pZ8=K)j7aE9CW_>]S)!Lr%TCnbpPnKD<)BUqSGBS;<!_VF@)B1F0*L<#']f5H7*;3<J>%?om[bO8#0qcVpF;:^]0X48)c6m^Z4HMcj::4?d.@mD0\A^B`V/>O0\u)Z+Rp:rXP7ns::&N/bc#]%fTi[YMe'15_K`*4(?'cmtrq%i`e=GSN4;0"%VLZ%Og!qEK'Ft]bScMr>ct'Tl".[OiLAnG0WYbc.;,RQ:01l*u$"6)c%P_rlVabs*_RJKFcH-;pn?l+KOi:(t?Z`%[H(,O3V3!SoNF:)rugbB4N[E#SDAGhGs1*FIgt-9,UCr2K<Ap?*P1@Yn1YT+l#:VqRK!%R'emRs[.a0dF*Yr!@kX"7U]\1m_*409%Ai:eLd@SN6ScNj:prl4hj^N?7&&u`,fB>JG]8Zf"c>"hSb0o)NZ$Qm!D28qsYllXcUuZ*4Z]#L8p\MUCcl^>V@,`B96P(L2gmf?N%MpEbIYF68C93Oei4*oSEF3Wl8_""lX*8G<k6=WjK+L<T;4tfr.kgl>29;h-XK@=Zh(#3f652:g/OMtPM$C8OJknQUF0##*uO[tuV%L9V\=XC9g-n>h=)HI:+:d<3k]&JkLO*a*rp4Kjq0@)ai@o0QJ`dP2LKZVROL*:@8)<bHH38eWRh`%d(T/\Z]]ef;&*)iG)HR'\$+%9r)X5nH2PTE,?2D@8#Ifehicmm'?7!^WW((`K0B*:HA1CYV3]3LZ`nI^+.)D<snGj+50&@q6P0AeT>eLkMcqsGo[I9(2Ne?'rY@u%TsJ*"edGB\Y%QhWaAOYH]YD5qF:V-="EEfd=b[g,hI]su<&%E+8]Ou(mPpkL1CA5qfFe\57$;?j`W=2YnDlKt&15s%mY@0@ZR2Q=%GCqb85?V6Io.7'4X\fjX8NR^>\j$o^.MP]K0U_8W-(+UQa<rjeW1,W`&!Dl)At-3?Jo+gFL4"FE"&j5k&IWJKp5[SGZT8Pr$:6<:%@!c)2K;Wp)H26T89/rk`R_69_T_P]]o(&YS6(+f-k:!Ob@i+l]kn&O(MB.VU'FC'tTP1[VMou43GVWQmhKgi!*Y_kC&]tDC'=fMR%+'dYk"gN*Tqf10B.,F%S:SQ!'n_@bsf;?tf0:"@gZosZDfoIAVmP&2<p.3D<a>Ijr,,0%cD[d^83ON>g/9Waag`gMl/qI-J_HGjK%\Em"jeL/a].#+GU!BdQmP7oB^R[IV`gZ;jZ>\ndcV2\t&X0uYAg.9>'C:j>R@bX=:Q$.2Ldb\+-c?Uj3YI/E)'$N>$Z"i#1bHI@P%DXWp2(##gt?U,,p)cRFPIK"+-hE,36r-AIZ^@^Yr\47kGQCEZhg3PW3B5(mBb$UoO:0+$EAO4VDArZjG>lban%ZOe^@$]Y-oqJti%nk%t>'cL`^7B*d9!T&m=Q;I$g?gf^tIbi7'/S7kc@:58#)/)7=[;OaAm%G^kh'>N>3_kE+)qC[=e-\b:UMYB'0qo<3@ffpN*Bgsp%/\[Ng.Si!nRkdas3XG9tQWU`Jlm?r5EC.ao)=YIV8_hec)f/.sjbU]=?NBueZQQrHT!sLbK;cF-V[3?tT6-<-TXNtDNCVgKf/8@-%h)Z66@P9!f7,bO1&-G2("X`5O=7K8?o('n76/7AfaLS'@A\Cu62_0(egq'aS+'!15BAogA>ZToV]R8buk^B!ML]#n`FI=cgWN0:k%r-#i&[<YY%%]^Oq`LV[hTA.PZmt[Y5\)Z5[7+riHj*#V'iQ!^EPY[\EEc%//Vj[.rdPfo-iKRj+8TeYRH;T.30-(\fe&c2;V\>9/%\2bEAd?e.E1?+PTLLXH3?-;u1^jn.p&W@R77hFlF,R/Pt[X6ACP^+$/3Wj&uo,u9H&1;6t$b65l:.R.!10`G-qegaXc>@7-T5I6>%$Xk,h\m\jdEqb!Gf`#d_jlQ8OL5P#^pt>e\<9q>3Ke>>HI21lJN$reO@RJqWZ47YXZBNpt%JnN-EHd>FY-H[UWK5h8Q#iEF3U&-$%H/Oe![e4`0n=oH->T(lU!6D,[Z18irM2,^>B8XT]Z^`j)WaHqo6RW!E_p9=UJRQM.L`CcSne^(;Rst8VGh]Bk`8YC43kV$p]3=AH%+iBK!]i.@'m(3[see?3e!'q-#"J3GU$:Uj$H;%j4K`VKBk\bl?d`q<gZ7ZlAj?;_lEn*h`b<)."7C>?1He[sbS2HL"'*t_ZL99P@%.K490iu&pNRh>9h(+W`B7mufK7M+MpDC`qe"nZ!amY\E1r6_GH`*?7'Qu_oHLnY7\;0>ee3jnY;:Or:&c\8+4SQPiABt93f-Oq^e%UQ/j`:aeACO2rA>S5!))4ZsuJIu'X_ip.0_Z\:.&f@n0OS?#0@`mI2kbgdqYj(Nb2q",WTg?u-9[S^-(_jKdK',Q^#!N0\IJD4\T%;3+7Oo^mqZrX]pJRtmBM\M!0B*mn_j`NYjEb`=9YDo$P9AfVIWpj0V&Pp2WZ,D'X%rUCInP*sQ]!l6JNOn12Ai@X?I`$Ph/;'3q%%gnOZtVkkDqa[\jrg-F/A`aD#L).c5)+0>c*b,"g\h'P+Tr;m5Fb0FaUZcBM0lE^'YYcGX"Vq0h-'Fd'sg=thVQ0%+*?:@;%KX=pu%^"liMi4ci60HP'D%pCH"k4cZO=teNB"8o"mq@PdS.VOH`*mCgQIBq<CWT3TV,$$nnK^CXiYp<`QrC*;Ri69_EnkSGJW5G`AcjT,i%/TA/3:].'E>$'?./iL#U]-$4LL8=uS%^/5s=DddWcRVFZq%HUjp+c$LSJA5K+njGrQ&_r&gXk\':=.'C*Mk.,"uS]`[E^WFqnEd[%c(;Hrc\sY[9TR$[ge/Tr!RD#'BTV()+ONj)f8CD7XOeP;mTJt36gX3DCnPHIFYJX+c<6I=Z?=b@NUoe]SVi==GO4JJ&b,kBb/J3J%,?nq/Wo/[sKVjZY`+',N5#JmW!giZ&NcdMg$M`]-]%I\If(XC)=4u8J3,Cl,")d*M8B")mm#VXkQ(UDu<#>W(YFo]&H`_L/K.t'p%_N9R3i_A6IC!tbXq#Ll$fG"P^!b1+Dh-<Y@K&<PA,:_aM0dl/@%M(Z<]`KSjj$]Gp<Q7E6K8[T@VD9Jr(np/X.Us[.^tG>PAPAmR%aISC@W/QQI#2Q=6caB'9KlPLN2bW;nJ"i9U][mc^H#+Hh"_"o.PR".LSL8pK&O:K3Y+/@7"Ag-*Hl-AuI7@:Fm!<QKYcL%cVMaYS%`c"e0Zo77H$gs_fIr,'0j5N\,JD6)<JFf#pN$,XL%no"7=p@uPEcpRW!4W<;!:Ur;ef>dJP\^WfNehPffQr<o-$$]MYuKLah0/u,%0\.%CXV``%Zr'o!Fp"m8J_VTUg-#uRg/508hGR^f73k@21PDJ'2DiXjS\_td^i)TX'\aMHR7:d6QgG`i>XJ!jrF3;R.!i]dP-6bk%>!_+`(^8E+]ctEo98\-,V._lKPA#S#B^[uPe3#`i`?reZL%;CVQdRNlK_^ft8oOUD7tJg0ql38oJmRU]ked"899U3jS4sX*V<>B`%'")9u[nN_iLi(#7]-N]rZ7I;8ZJK=^ggD"Jjk!S>+@p&6=i[aO5W"&ggSWu&VTsWD&BeWV?IF<-)!OfE,m>-6N;`FIZ-'-hljq$]%Jh9KSYNrG=l")Ni$B>hO`5hQI^dsOA(X,k/B-?2bDIb,0EU*WiK'fZCpRo)sfJ57m[gPdnOX&E(H=0G\4?+)##;6.lW4B4AC6_pb%,JR1bCYU0$gIRRa:SF&eb/E>p,&X7U1P>uL,5DSA'S3H#]2m[ijMWPs/!E)7giD,i)n.L[\)+IP"9u;rHZkiIjfsQQYlnF;8[GI>%EmeT]ZC0iK<eD/Z?7U,Zq@V0M7i#:bXBl1M4sZ'NlK7[6B7&aO]NJ/3N+AD<'AM/*U1R(q#70&f\+W/9.9eWn&SWtKO?M4%Q1F?8%j/TUrhhj,2jShn"e4[f%-#qV^n^d$#OU5;nbb8*`np3MH;Kn+sPeCG%);2d^#p?>Dj7(ZqaE!$m?R/m+f`ss<I]poT0-VVI1(s\P%N<>sp_cUMF2@bg`lu@7:,g"%,;N3DG4_(e&H`D)Rs(mHI9c(]M"[:?N_cEOVg1u-qgYoQe7OXh^(WG]`]i4>V)HVp5#K9GTpsWme%_X$0&m]s(3T2gf/>,U3_Y>IL1X=`%i>O4II`b,5`b:R*!cn""#M\fUJieMKf4gMV%hV5oB;8?Ot,dtHH,Ops&4gOe3,l=`COi25;%19u(N=,\DY@gT!@lN'A=Fd76nr&edBhoZu,<Yjs1K-$dIgKX.)%\+O**pW^km,$lAMX8tFoq!3-i_PY770q/!*eSO0Hgg/F"'U+*%%rji/f:T[rg<E7sJA8dU`0/XS*8^dGCdaFHq$]a+r"=iF>MG9NqtpaZO6a:u@I<SlB#aXS2bWqbP,br(-E9^':\<k&Q*#CV&4-<`%Q,q,o,?$BmT5iGRabF3;Oj-arBig^O-$i*e=<h.[OTYGW8E&e<HR\PT0'Ak)ctt)K.B@bG[Ve30?fcABSgn23fS*WkS[>\DZu%oT%VmluX_j=Zh_%ERX*=P8V$/]f8QYJnOL$0ebmn27Gq_*K8CQKm.UGNWYPu@_F8qLc=b-aVO$83X?lQ\HGaiLgeUq*rTO.W/JEd!\A%MMVPXc7T7,CIS#sj4?BH/FZ<%RM/SH.2=d:kL_.<RGcWmrFsE_>I3i4s!W8+b,>&9Ftq1&,ahhF'0FY)/b>2UMMniGH_KZq/RAf)%='fgI(NS-N)fLE`mBE(lb-c/e(<\qF^&TJ.UGlq3:%QjHfd*a[IX^18ei750Fnbc%MX%1h;__&IW\3('h8NE9i@cBjjZPG<mt$]]%pRN[$3<FfNUUQsWj4U"X4n?>/p)qRg.,>A0Nh%?^mmYge4'+%N^Z8pP8qA,RW.6Naj[cQ5Wk$]?/iTn3rC&C7*qbm56dn7g<f5.X%)bXB8;`)<a;)#q6;tRdk&*f9XFsG?"Pat-ugon>4[RQ@4)j+(k#__=YGT%Ff!@+jki-(2*nKn^Ib!*m9+f;G[Ft;7PK=h:UWr_c7%4bj6&kJ=D_:Zb4b%lQKNOTMDs'`#(Xo"Q'B%CalO<AHaaMFj>07_i^LT-Kc8[UikD0qF'R8&N>o`]PE"V:(9:B)8-\AGSst,bO=.%b8uZ`'ekI:bm)H5%?RuReOiHebP`8J&p./EcSS2@Z]s^B"u6'_[[h,o=c>c?91@/o&[7ULRVP5@hc3(ipSH)h)B!VCERSKUpe+.#%gOqbMZC>3rm(Sg(T!f<`Grp7@%1nGOq8j<#q-8=lSS52*QBX(Eog;U2JH^_*g_85?[(+3kJn_S7Ss\o\!o-bj;"2>sJ7Q+i$>=VF%"-3S8LI]4*[N"kS!nZH>0LO9]jJfHUOsUN<VZ[0>8pD&3>]r%OC^gg<TBaXTSb9=?F^.3\R[Elc!k+_/Js.iSd?,dT1h&6]SjARH%C^mT^-3?+,;L[/U,Q.@ghrD_:jdoltoK_B_"rpn4gI*3MS9u/+k>ok`N9g/Dk8>+]^M\QK??V$*NmYWZhTAo9(@K1Po&BWXJ:nfh%KK`M/%>I2+@@YBuBHlANLhfM;[/_nb(nNf'f4&dUCfE>hX9Rb+QC-bQGgRp2&WBFO<5b438sPA08"/WWKX%KJ;gHK]I??A5?`<>Q%/SUVU>^bt\^KaJeXQ$<nq2]4>_sMehI(c;/<<KQqmkN$aKkSo%+(?]QW?Cfu4hHtT-#(cZ<0L8FXp5OV4H2@jfN['(cSUToA6CU"%Cc\8@-VB9&SR@,K:sR)Nmp2'F:/3#=Dka\9-"k]J@P,-URYg'?R=^W.");APpn3L!.=X#=-d4sF%%HuH7[??fSpiDAi8_6\#NqhQ%DrAC<W5i\,GOATBe+EU+B8B,Lln=Km1W+Sl/jtTe89Kh3Zc[I=69uc+]N@puN[0)a.d3R-o70e1eC-OaoJ"*G3(h]%Fd5>n0N8UZ%%J-,Is.ET#%XW?.GSmVFiQleO>fY'0?;KqN]Rhgk%l?F@&O-;!P@f=fO!.5iLt(bGgUY,'kBu%QT*`I&3HIlF(>$eedajF]U`7A_%C#V8":12o28$nhnAo$S]Ufj*iI)%<V/EE!oOD(e[I#reiGCtQHd7_%h>i]+gcdgfRmGk-i\0&8'EC1c0'fmtmb=hB=ntm:pFgf?Z%#n>bNq9bKCmSsL)99%*c6hW<[3F$<b*pRB_b3bI-;(p95(Wa4<OU^lm;Y\^AG;SpHgtO)9EqR(qio)e4OSpc<rVh`cf<&`)-#^n_%@u&F`X\A^P:B4I5.t?ep[\QQ'4Dls45AdLM.5=1[KO2ai`cSs/4l5tB<+V1BF;@Dh1e'h_@(2?`W>/*$9?#t%JhWY89h@Z3K\,^Z%K0+-G+jOtu"P.YL)eNDQVsXr4)A,,#ELAuB<lcFT.7`HaN)V@Ae/o"4aGWX4KJ^sUr.jJ(RN,um4tPsUXaFoX?$;feN6WIjHdMI8%2SR=OJuqhqF"."dB0-7GMouR5V08D:C'[8':ib5+%(fV-IEa]7S*d!95E/u?%+G4Xr5VT-%uX=D/?(+H;6fcW4VT,`_dY`Ue.+oS%e%+>.fW5ONST_F8:O!n<mZ*@2pP\#'0Wk3ZFZ7/lJ4=d;g@-MNlPm#-iG1sikMYOk?_JY@3X$'Y6NR>jMZ85\#OobU./I"I#p4pE%T7q5)hm`rKU(km&iL`pnS&ITqj:>87^gHl\qMRK6#lVVe(Ejrebt>8kLP:tYa^ufXFb\`/j['T%-t7rupc&C[#Z.1j,XINb,>$1V%"BgkgZ5/[9;jo$6WY@%]O=hhJ9W=asYGO\%JgT3pjHQ[CH<:gAPV1$4.EeN_X:"F]@Oe-f[%<j%,j7QqKiCO.ZVVtV,(M=]d&ibZ%-tJ":TVPOQUou7GL(lpl18%'82/GW+AU6u#Z90D<.&AaT"(ed&&cka*VPY&-'hMOtP[m[X9o0.+.-iQh7DprQ8EmF=oji:q&P+0-%Q-f_&MOou!;(#omGQkYlAM'`/):G+PVZ:YH%2N*"):BdWR?G_.J8h_qR1'-8OY[-'9M1R=d[DAU6p[\=)-Tas;HZGAC5N)AUsj'n%9$I^OWK:+7-)as:R@M]I'nHI?+XXE%Hc,*!ZE1!f_5]1Y9stQV,GbMTVahMQA2<6%%"LV4.AUL!M%g!8k^n5aRZN\om=6T?'^M3P%dPER=MNUQiD_+dbRK1Ti=ZIc63\AOP'Eq>8XidA'`h*uS5&kTC82VX?18$O^9TG>=art99@`r;&^gC/R!aJc%aa+`f_2N'%:5D4A%qN,];'HEH/`hb2bXHk$SW<retf77BGNM&j@2(VZ/(cJUhW+;S,142Lji,tP1+<;>%JX#+-MZC"+",7+j.mb#%f4>#?TZROs,)RhB%mL1C'JM8-A,W)(>$$;UcOZp]W8g=`J>cB6R9Zd>Q&e&#EV3IJb83KO:8LP%d$r":Sb#CX/84Ssh`1t+9BaQ$k^_8O[571)_!e#_j%%:0c[Od*sQprH<_74CS`8s*,H,FgU@6lsPgYd=I!doD#d'nB6aFpUfl+%;sn!r\!1#m<@nV.]mMcj<2coa4iRARN$,U+6Ak)+bs!%OATa2iC5\g+n)FG8jn[@:dgGMNrgLLRj".sOH0Yq)3?iQ-^hBD8=DmO-r0k6X/+?@L-A$LQk_'I1>,W-''P!a,,G;L,bmtF7=e<L%";4F#J^gIU.*EK[GYOr<KA^HYL;'\j#NMUk5\O[R!_QK[8W/c:_oV'&h5gr/-dchR(pY9&#a5;%K!#Z,JiM=,S2-I$O^]?,Z%Cbb%7Co3dU^X%R@5F/=5hr.d9Bc`*jK*s;J^dD*Z:$sobUTDV8LY:t(C2LXedNu0RA#hT!>25BYZH?=Q''2D-n/[1/5fER"F3_=73HeC%7`5?CD(<W_X@f?Z1)N7[\Z>!.Q-Z,*A5\]o[$%s#*$K$()/'_DbRM4X8r+)pjfX]AF/,[%A>p[\<.gmM<#V_qTPT@'72Fr.QJo%o%<FIRo8:0j(7MlIR&l-D$&A8,cL.59=KisQE568\r.]P2e3oMI%YbVkW<DaSX&RdgW9.!\>1DE[(Yq/PD#bL<2eH)+*b;(7k.$PFe%IfqY@`>QNe:h93UZ<0LW5oH>KN"okXOJ"qYU7NYT'm)4r-]QW>'T+7La(2,FNUeU@4O?kAM:?!^XeIKrb_0OWK`m'K<Zs8rckinp%PY@CVR\ap(EX4<a/O^qlYCbEWFH'1cV@r;u611b+Dr=V>VSFS]\LVAR2e]lQZj:1Y@2jHVi\CUF=&Z)=B!OT&;HM77M+iPb+cMun%W@Jj6"3Q@#?"go^E,&e#"\GD!)1i.2do;-95j0\NDd[l+WrFjfRN"4D+HA3B9V`(nNRj*q;m+:HRt+^>:El!mFD`i^FTm=g3ed.*%>M1<)I2-KeVGscD+2tH(-<?q[]#1]Y9Wk6+*HoOBUe^g9nYXj=V8gb8Y";+o[T6S*YL"j<WTPEf*/fU@DP>f\C9Rd7BTZ3^h<\&1%("ej1PdbkT7L%k>opb,7"APXC%>%`Kd/F()6NdY,"klXJi=3,p`Ka$1<'jV0AO+hbG(;=oS!EAPW&b4cOEZs@.FO2j5gD@f/k(/c%+MfhS&?]RO'd,)W&8l(7];&pZU"(<ZU'S7AWC.:`k/o`@<Q(M[2SN1E"g!D/D#m94!KB>V[#GJlYm1/W0$YXRTF?K3Y_.[b#HL;h%a=9K9J]dUJZ]$A^X!Pc_<d/5RK0ZAh31rOG6N^a)DR<o86`n20Or>3W2Oh,)P))*Zg&WLrWg"-HF*7$l:)O3@'GrPmW@;`ec'K87%ZcW[Z)!r.g_S.d.)]fS4@b=l:7KogXr/<V5XVNAgSJMT9=I30jFarW!TIBms8J"0J@f`8t&a`S7#3<7b+l>(`Xcci/17]S_3rg\L%&sTGiLqt@FI7JXO^-W1Bl9S>\^Om1d=[3*cM0,4e(n8U01&ID/g^_,YJl2bATHKF@mUUdJ7L@$G@=PEql7"a:[f_@(R;&f_e3BD)%>9ILnpliZJ#IRQ@%ZE'8@n3F@X(=<XA7[gf4:\'DW%SP)keB[T4ZX<kdo#CCo0qOMZ>:"FE[*re&s[jhilf8:b")_qN0#laNJs!U%7P.$/J0Rn0ifL6nC*$!_EG&aB$jc`21K=']3!oj5*=&%>3oqQB\<#j=TS0aEPSPs=-!mZM#72'GG,lK/&TRBO^6#EE2@PDgg9<q]%Q#LailTbGrN4L9S3._c^CNUR?&H[e4T1LSk%s'@n*/;*rKIP?TW)>\(10TG&SlmD8m>WE"7uKLs#\Z\*g+d4E\3Q3+V'ns%$:/Vh%BF0rO(5c6$PAdb?(<h`=g0-7GNp@5N8!J7k,j)h/JFb'tGYBa<1,P7)7MI/?To@j$,V(<5D\OPV6SOh&YQZt3V?/E`=TQJJ`IM+3%5a'ZVJP*($'B,6f1+1%kH=Z;U0%3B+k;AI0)91*Z15EE[W0aZ.AM(V)9F.FX["L8GBJ*j?67Z\OR4>FddKO`^T`iRI)sr/MX"kQf%KC_Y'"PtZ'5R?DB9Mc)G>/_+h8f/lL!dZ);QE-ilE(OObJuSkZbap+;RGg#/1e]5q(/T`3WhJoYU%$qCr.D_[)N%G>=Y6Y6<!F7a%7dMQ8"'Lnf2_8HjacKXBCJY_-'03kI=\HEW#R20!)c\^121bmlL`RrV1/%nG"Kdfsc"JSjDH(JjD!McV`X=7p2c-56MrZb%%*X'$%Uf.OPas+/sW*07H7lLQ%OdJt>CDkM4E"m7o0ru<n-Wm+jd=U>?0nu1V9Bal<9p:@`K"9Dk$PNmV1J("?OlBCu/0;sZ3ejh[3_9Ys%-<pj9Q!>15bAo1GR2@fnb>NDLOdehj(K3@Ae/8)-b5Bmo$(FV@e6+@4I95,A@3dCd7+T+*l8kD0?!mjOlS$.bU+"NJ5Amb_8puGZ%&Jf;qQ<D57DKtA=5+tMD.6!_?$OW8$_H[E\$IbB`,*;sq/?$=B6CCdtY:54'e1n8#iCe^s(qEj^5j#FnUEQ!pQ'f0qG<"2VV\ZRg%64Tfn)fV9YZ8jniR+@CD1nChH)61Yl8[Bhnln<-&4;4_G@k\R8UOX;S;.QE:BZ@uRd2.j9bu-b7i<IfoS2fZU1o@A[bfou.m3tr!%2a%`]@Of:]<*!V!/Vm\A*!O1*).?.]F2\cGM-Qd>fQVe[X@-R\VqD8H:8/TLSdb%!aJG1aLo(TM'FM,h"g,<l,pc5Eps=C/KkWcP%)21B%G:"8D_$!?LE3@97D3f-.1WlfX)_G1u1A^%YBL$.gg47qH%d0Y<>UGW5nm@HF!uEm>X)HS#(V`/RarFiSs(gSW[OllIl5)eW%L#3Y>)''GV;W"_$s'OUZp"j^.fqG%rI#%<&?uhCNrJ+p-h`P&O)8O'2'?j.#GoPsb99+ROUk)!11>b:/Wn+2MhRb(<Z6!NqL<j0j%2H_So`VMq;QY#s;:u!PDg"t8Y+s^GDbL0seKhJ7MiDQp6D'l.L>nBs#f[fJpdOJ]TH_p+]Ka4IHi=7BOGfO8<YfNf59]8u3eQl<"%`.1N:,clk,%b7EOg7^S.fQq4lL!K`)ocADo$52LI"Z(F#C3$dUBeJ0jKdaN"$K2]iV0fH^!#nkm$C:?!Z^ls`CYD)iTjIt"#V\'<%JF)^h$G$TX]aHB9&2aW`2XP75RumTNZ@(^kb$fQ94Db>](E3h@MD97T`M-^?3J_8>"/.q0Hiq186[Ch=%tr4tH5S>k]-7SM>6[V/%Ig3u60q:uL@-unGB!)^Sl+C*l8Tm.K-88Al8uW9lf8=a?$+2caq.VH<mF9mRk!64^"_-qEhpdiUVZpl-<&X1"A<PW8D[\WIRhe?C%lSa/<H8IYLG'=RdeW4'ciuF_%^aR]S1AAVa<G88>LS4]ZVB39M9`)2W*D<F0f(MQ`KjKi,#!F1hF6BiAQ[,T*g_TA88s)TT/o+VG%/A<r`:;od7@OGi;UNsQ;g%sG$eW2p/%]t]:<'IJUIlOK5.!ckif2X0tMG7XQT8.ci6=uSck[Q^>ZtXWJ*D-&es61(PNsL:(^WgCh%GT36>`QhU_"clQ!/S.("f8_>\kdq4[2VOKhF[>5?-lAKh=]6pu[?p<AUe4CEUn%9u=m]+3`ITF'%V6[A@VnZ;:3&0061N-S4l-FK%3*"9&QBk]8<L,Pml.k2I`\SW._b#F@&e8%UT:O#C`O^C5e+Zb/]u*IKmo]#RI6P-@SsJ5)H9X9k;4-)!<0?UTZpTUd_I*DqFq`hP%eGr_5dPJe=+JDXKN$_M),V(C793Ws(P/S2Ia%d[]/,T:%D>QNK;N'[d<4'_f>aem,)F[T6k\N!P$Bi(q9KZ-?i_hU6=;`@f_h7:m%PF#^9bs).=[NFep!A<bqTYe-Wg*7`i2lSW;((9MiZtu&bMHA)(:*?sjJ^KX<MI^O7CMAqX8M](aD!_TjTWrWI)B<fIK@saOWKp#7%8o4reB6UJ6U(`qVpAcR%OYU'n"TtKr?rF@53%:SRgS-_6jE9)r2adCNXZmh3XO`T>^BX#mLZlKVIrE$#4oJgTDmpsgQ_=2\0/*<]%B>KH/\51NjdfN2o/O4t^pT%-!OP[L$C85&Ah]8#p6[%H!/)S'N\J=&4eTMD%"/B`Z3s1Mj;5<DAkaYD#AO#CV%^Tb;XL:UK$^/Y8%`S?EpRV;\3F(tV";)6jgE!cC-?>^!<3Fop'F1@W@dA]_Xg^RfnSQNrdfD\Nud6>r`&bRb2nK;T[T5]$r;CmFT"Aoqc%\A;lD5BEK%Dke+Q_TA=^f>uhs_d);h\T'C]VJ$el#e1j-AddDKo3@9ESR)n25P^cQdN39>f<l1C=a9)IbcDIsCVJG1H[$QBZ0d>+;3I<oh]afB%9_C6o;Th)9N88hT-aGE&[CoL<XGY@B;32f&NNX-D\lL!C4kt\XYnVZt&45bg>Qb5D`n,&CN#H%n:Ugn_qSVYsfH=e^Ysj$\NA6fk%AdeO#RSIbUS-UJLm@OO(9O2_E\1*-gc:bSFd/$&W:.AC[7&CpcmTMO91/VNta668MD*j_`UINlj9mU$I`hinJ[hA>RCjR<eOWn>E%(Cji9b5(?s_DLX5X98hS6L71:oK=:V[tPSEi#_=#ZiM]>jqO]k?:4'[j)tm:)m]aCWaWV-f(BqD00Dus&E1e!>&%*R0PZJZG>t9t%/r#bBkF+H3nQGp\9**/1;D#GPe5S0IJtT@*JnQUI\a73<N:*`?E%%^m5*j3?gF8V$6q$_&\34`LP%r\Mo1'V+8,#ABbpE7b6r$tZ%,B&VkD@DF,5S'bDoYV?p480Oi!R])ML\2?b"k(%e$^p#KVPAYMX=hOGR1Z:TTLeh;W^,e8i1bMLD3gqo6\b2RSPGGmVtUtsAcT)&%5kO(=+SpE0oebE&3H0TI@g#s9d!rR9T^]Ce-I#r-M7G-u%`PV3i[9hA3(IXC8#c%3E">!F#82?r$*/gja,gDXDAW@VH'$5YY5jlF%_=^3.58A"BkWn7<E>W>'H*QL$`dQ&mA:s#W5@TQ)Z&Gj_fV/8"R'C"%,tnREA!'XVAd5CWjo!*_"`fT(-'Dk7_&.n26D\>IL5>!i%&<<i&VinK1F&tH7Em.0rp)RB&Wg*/^Cei`6.:_=1*Gkf*4Q75K)f13Jnq_f_^OjEVK,`'Xh1b21Ihg];AC)sraY<?5c@i\Di$]tO%`m@-88I7lWD8s1'AZCE4a0[8qI&C*L7d0&+BkEc]mWpr<d&7H@f4.91Bi5:Ue.JG]/mh0WH7]J@e@#RB&gTn*APd*dhdnY<dd=,(%N6.q(pI%f_GY>H1_sfE^O8%U+BtI.'jL!sGiO`9kY->H(!2`Va=1EdiorIZkR+i<sb5h$qI<+*WUb&%OkQK%cj=&15d[QIhBf.3m%1.8EhBs%Hjg0P.ans,*XjY]u(7rr[?.#?TQ3!S>GWfkcC^k)lm.JT_$.PjLmZCH$WTY(]'9U51(n6VeL\fX9Vl9n>P_fLiSa,;W.%*N[E#6`8a-((.$h%ZHF@W(=XsCb7eB8Ws!H8N,[8),SFAN&l/1Q"f$0U)'<tX_k1D83tWQ].AaJUi]=51-d]CPLb\,#:E)BE*H<)%J@lBHj(9]hV"\V@=ST=sLA*("^B3lS&(5st?G6*5p@JU'="C$#]1a@A?K'K&e[tZ/=F.1?/[^Q,?55$(=8)$g?U>V\,)sY<*iua'%VURifZ#Ea/Ib\A.+7GRWYZ=s=TlU$+f=0(UbH.GT%4'83@nPc"lZ#q7f2g0+RDKE/V^@CqgMtcQmFlS#/b;km-et\="6`sK;W>#]%j\a7>eEmGF;,t(+**79pD&LDO[0tO3%7Yab8>p^][t2*YL[$dRN\^qf\Ui+.%!<NF%Fq#Gf$D@`pT,>?h=71Vj*%nYQDeX&E#1[F%m/U%$$A@+kJFL:A[V_eN>dS?5Rnbu4[LJ[p)jq==Xj^r3U?Z9FT*NV=)r3E8H#<-\01@E9(i\!"EBncI9*.#5,)-bp[Z-`'B:u\m%/-VL(g/UompSDWZkfV;2[Z0-!6le>tVJM6cfW8sZgKs7km7#d<ERdfQ$<OgdUhsJiRoJccDX,rk\:YA\:I:7cV$0r_kDQc^.q6'Q%g6h:i?"pHY#>umDJY9\g4jn8TZ.+Ah,jEHC[WIh*37:rghb-hWD7V1Eb%_hJce$0;>qcVKO@>fWU@WRHP,2>#;+^=K9bf"4T&d7L%cI$kWZcC<MQ=r5J>O:_q0KBN!RM=;'Pq<6O1%sob`.I*:K5V!c[+\gt7FV?h2lsIBo;^S-QJ5(+ismTs^1.a2=i\I"DHJ#/_Vd!n%7@0D^lL9Y;m6ta/SS1)F0$UsLT1r>Yf'a:u6DVIg'qsb[6cBlJEl)>mMSlMlYDVR!AiY%0d&[s#'ucH/Ci1eE/r?M?);6=*n3jR'%M2;71P;j9$'fH7n_<`:Lj7+m8@=&-KVT5&=/'u99,2?Gd`\:FRAo_NDYqa_^kW?Zf[9>XZ+LTOH8WAe"6Ih.jMEqeAL"R#j9C0]T%`m/PKK70f4#H!PWSTl_l8)d-FIAcWYJrl('XnGWmAYp)thQ)rM:c)2)(^,]I6#mIUbEtHLL[dm'*LZ=@eb6fX$I"MPV#OnI]_AH"%oS:\OUUUE6#JfH9]pKgkPs#-8qX)8g81aK8HokZYN^K-on$(O6NTkE;Ql+M;403i,Nk*gD(Y6GR?a;g-UB,E%]Ohc\#b5'1f>lB)%G+Iej"6:jX=53e,@o,%pFTM5Fq>IN+5%3gq"sc)p1I4d\<lROp+MbFB]*D"@!(Ug?Qlmc'Gkj9l&Gp,[/PQd!2Q1&92"O<m`@:7D%1>kYA"@r[4c+5lsMtqq6KmXkXIN5u]nk/6.f]7KVlf4)s)Wh8+.39arr=MTc>7&CQ3Jn"-('p@ES=hW'5gr1K`D$ojm2&/=OO."B%&suQ)9VUA^V+qW*;p18O@)"&p8eDBR0%N[U@f9JVY7S*uUc^7H9b::2qrp+"5leDr4tI7A'XiZt+R$r"WrEFTE>3K3a))]:/&JYo%LtGF`@qR]NYX#EV\6ZWGJgI5^Y8\U&.o02:ni*Z^UNDr^7V`u.mC1T)JZRS8L8O^,WG5&69mHJf9bC/H-I2jI5+hL=j,^Xs/4bA'%4=&<R<Q`Ml)[%.!e_tB8]iIf<`"(p&;h00K5JZ[UI`)/`5T,]mQB&;70L+&\=s'IaN/sVh#N9g(*]Lu<N"70O4(ObHk)Zc1X-Hqq%HZVL_s,B!,S$BRV51I6E$EV\_ZCb=,'saVU1N,)t0K_td+)M_$-CFlk-cb=.>%V`fSR5)TYZLq,S'r-,7k]*[hUb/b2GQCeRl1^E%Zb/O_NOWYPE"+c+a2?B3fbHlUP)bCNWI^^V8<Yqh?9+RGhpTMWJT[T_T&FOWH(<Hs#\<-Y/JlXh,rkN<LTR*7\8Q*8)\B;#2P_q6%T@gSqO/,44SN4qo[gg%>/D+!oYFa;HVm(O^M;o5dDgPh&NFHA%q&h.M\o1cm=:OfUB%T`L-5+FNh<,F_hH@dIDOYdnPL^%[QLI(#%Z"M#c+!G#2n+g&OCnWT7k'A9#llA3@AHnDSB&\B'NVda$\`EG[A<ou->S*L*.9LC77g=$.qDX=fE76PM5FD=dVpo]PM/tJ27j$p6%;0URsH!$DYU,YaS^H-;SC`D"eUTiQWh-(c(bQllp0K6m4\GJDW](%n0#i:n<gk+Ck7@=QC;./4cg6\f6)/QNhg(_1eDX5boqpgP.%^6k/,/U[-top:[;jHN=5-j?GboD[DT2'Ckuj:O85@1)JW"q:Ual8=<Jk_RprZ5INm99[>AG9T-\Eh")e,*Cu^J?qQh*`&TrdYOHn%Go+G\)t@0\,n90`/(Z^D=Y<5d!oa]&;J@ZTHSb1]9h_"s]IJm.XoJG6J2R^9OApQ>UJdHoaZGX0V%4f-$HX*+b8ZV89:lNr>$;]S%;JJarLmgeZYbJg*7r*^V9dt@>nj#hI[S5ID/uYXTeB#QU_9J+r$$e/?@p!&l:/7#DL[^bjl[HB^?t:6kaQ'aBSLgf-]OuC"(Hn)5%J>[?kQOTa63\WT;Z6oAqZFt?j"ASH1,h^mmF%BeB`_8ASZ>j@U.:!Lc=d]Gt[WT`YC#(7-\FrcE[KS+.':'V7:!"]h=*Z6pK&NFc%LZEU9*]J`I@so_eS@&&4K`*e':4A#uX7,,O=1+qjkW<LgaYb[_gP2ZGEEnP'-^Lp!ep@"Xps3oHfG?Vf[2pg7jIE\]Brt0>m_(pF%)G/@qTL/GnA:";3gj6Q&oT^-7I3elR;10amYG_5uHP)XhI8q2Mn<F!3Et[UcBcXa/=gP/n-fU"O;*0,cZ^<;>gg&ehl&fI%SL#;E%R&dQh&*[JDQ2oR?cB8jp<h<'.B*iUR2Vu]$B??"?g/ORg?.o*A?gV.%2E=EVqi!:lrXp>QcD/V+HgIgP]VZ&rr$@Y`GZ9/!&Gh+F%01dE`hLt)GZ&6!T0<q4AY5T'\jEZ(40<oNgh+4:*m-V/4=&IMgB2ZIVbg;A:M:[lHkf$bX"hI]P8`/d$$MbT2Ohuss>LI4BL:<ss%)<Bt`g..`UFDj``I\k[ZcE;=`#a?8:0$fq@(hJd6I+sP;f2nRA%!RPfXOGWdiMtCkoU!4o^@7HlIuD)&`6LA-&d*1LlB/iWO3D`&%1rF%7a^9W[h_4tl5g&.:OSMPDT(&)FXl:u?K#1k-6q_C=R3T,YGWo,eZSQSpf!;l,E+s+\jGlM9m[i/k/;ag3#/rP"kdoB/bY_#e%K;9i^gsUG+J[c3Aj(8RtcX`Q0qqu0M?;GH0F5NjQ,J@K)T=BljK6W#[c8T.i*\p"eKU+=\%0.7NK@nED#)lm6kq'(&YcMDW_f+:\%1?BJ'R_)PF6?.IjX^?/p)J7.$2S(eKVL/L*hGd;HG53^/0/9>OZ[-_4aMam^p9>lj1O=-Ig)Wap]qdTkDS@\!1$dc/b05.DfpDZ)%BQ3+>59W)%R.(R+/.poC5/P!k0#W(U[t7&g2k))`j]KM]+Dm[[n(Oj5BMCZ6q9^l6AE3I)Mh0cd.gQ#Q)I2[A#k,dhCbN3=AO3_t%=n%V#0tE]lpQ2og6O!Y.@p2S%<ff)$"nS9CCXU)Bp*/[(To)Fo$KYI2ftU)SG+%YI2<Vto.g_#KPpPZ6=M.)R%rX*&,>@s"lT(0C%]s$th/XFC9*j@WH4W;BEj=ahtp`/7\OC:-BLc9">)fjHM`#QCbSD0_5SK"R?fs4IDfXkmr(r\d7R*J!9R+K`b@YAZ`DA,F;=m'Et%dl-B*<-ou^"\qI&M\_Wb:F&#gQl$AlM*oZq@:Ki`]FMe9*3V^F7X4nUNUX8<f:#&qg@X*U<2=A.iaXE.gWCBO)U]DPV)4u5C7bTl%2&eE,`QQhi<?)-qm2SMe%-E);W'$Hj1.:67$@8o+N:8-oW=a#NOYc(#$^)/P1GsQ+l@.4s/7NCKNBr[d*Alqe]FNWTAf-#nq45i2%V"kq]?\/%OKCiNpn+U/=T)PtiD-([ii6hPDb90mdd'I-!rl0qqq:I;hG[b*<gUGZ)G(6-+>P8Q-m5?EkG?>d?foJ3GXmm@SG(ESh%ASd1bGer/T#;ENuRlLs(_D!Z[qm>ZKB:._-$E"lOJo3l3)WBor=f@)n*qoA$=T;\7*pc18_IO&d$KeS545Lk/bB65RK)oj<9D7,r%\h_;,dA'EW*/Kc?RuW#rFLI%G3$:lM'?3"nl);T\H9kI[b]39)4-j&`f.P@k_-&f8_]/ms3RpjlF9G.!FOn\+7)JXG&9SD^8F@`Z%a),K+\r16^K;_=6B]_8chPI&Fl5#r#=QA5sU@l5E=P<<4!nO6Hoh?kAX<2Sk!O=4"A^WK!PfX*(3Gp_=N$6DbZlX:[)f2uR;.s+%%4V"Jn%s%G?@Pb<dII@#h_pMe$B?"?DjZqVK&:1krmE1@W:>rRV(2f&lIJ(]%&,rF`hC\N?4kDCJ\.\74&(*W0VD9K8<VU!0.\Sc`%h2%t'RRg2F$=V4l4gKRDZ*]XW,[&Pe2AMOJ3`9@Ej\*u]D8*P(X]d(5^FsG,i0AoH.0@hD?RF/8.,uMpd!Hl-"G`_ZA7L]8]FLrO%4C/9[nNMuP,k!]5TL6RQaa:\K:c=,e0k4=@85nH=K"oJI\mRVGDl)])g:bD0h&@n=LQ2Vkk0'I];_g)-W*rqAQ#$*sig1!Mklo(`%jdIoS(_>@e$^),F0e20cOd,NT/lh`n8n&t.Q>r"W9+qBZd$8mBdM84LB]oRbBl7V1$)/-h:;R)^h&@5Zh,V)='RWf"Q'ilBe<8iT%"hYAgbJ;5M.";L)!grHJ+k)dopEq6:Tr,dj6^6k\HHu['P3U43?6,6or*;BXKUR/:+`0AH8tA/fOku]U93ULdL."6rS=VL$=VVC&%C6m)=&<0,E\0,M:Tp[#bOO?!pg&7)hN=8^3Q&TS!D4K5F`<lN-BTJX6r37S:]WY@8E++5*-H$GBIl/D+H<#=gK-j"Tc,[;^&9.AN%6>Aj8I)'t*QpR5P"\\Ff?^cVO8E@Kr-Aa[_[X(J1\\iH3a?JBfjkG"'c%iPP03=SQM:$]1JL9Q<Rh'";H<aVaE/scLbd8E\$),!(%!8!_jG.YQFXN/;ZBFb<eGmc:UbLKCp*_p80I#"eY1&0h%XG7HkQ-mh"LG=&'333@4ZgmIY>7[K%l'1utH3X1V5CfJ"=g6/"(er#J%9S:`g)lEQfOFCp#C8jYY=;_Z[O_Z3OL`o\R$jcW@h-V?.,*5ch&s<8MMEU;1"Ieon>8e%qMMA=h&"n8&OZMg`2IGm0K.5;0UX[@!%(af:&.(?-',jboob?cu86A;oYU^6'Z$n^)W7lbR!(;q%MmBsd%</*-c('MJTmPO*=1=eSBXN&gNgoM^i-D"EQ=9:iJ"kgX=BnS#C%XJEjgV/AT3/\nS5K#P]^(qjU`i4"*VY.pJ42q(TMnQ]n2DJ^=,4Vm2VF!,&V'Z_!YW$c][BWPn>5uQqF,L7Hs8J@DB`I4c/M4(74%KrdRsSSL<FcKtcmMf`5:>_"RN8s%8gX.JCtR]-q=_DP,AP0]j`a5V6G*]F1G9ek2=Ti:/Dp'+">]1jSPA[;%ueo1e$;/K7o\WlU>%js#$.OM+n=#83UKak^gUV]T'AT&MH7]<.2`?Xaf^1%/)q:$calp)1h%!(ApsGILQg'dS!!KH;>Z?+aUV/k%NZp`M+V]$"A=Ul.3d%2gV+=olf@a\L6@4-75QbTmNRV(dduD-(#7TI-S0H>p3dF"Va;ti'DdX\/8*m#*QJD(=$M.\`Q=fMhFOVGg7IDm`?`O6]"\kT-0BB%h=Q@mOh"\[)cJM96`tsMprF*t1,gr0>h!:S59t=?`q8A)W`'dj*F._n?0aq/7kdBSNS9iM-)36c3ekg_b^<]KGNNCGSK*Jk]IPNp%gEl:RZ3uL.$n`0:MZXc!l3N7q$LQh\>K\J@Ta=IqOT`iCB:C/o[W7p\Nm@b^.2MT0TSpgI3"1s:BEm.QX#YGlp29N*7Zgi/`1rVI%%uEe\'@1MA7I^q\Lb:q1Q_e"Naa0+;C9=^;,UKYU&rtpq*ONl35c3W0gS$T5pcVA#Ebm``Fp78DKl;=L3Fc+Y3m:<FIR=<qURM+;%PVj/Bg]p\R\/:sNieRl7_HdaqLIWRM=8X-:P\F%.e36MQ:ec3':heP3hB&R46ku:bP\03F-^+F$9O*CB`2I@PE&3:WSd44//2'@,%Sr`e:H9TWXl+<*hg_J)#AAgis$3WpU,!iT3[nF`S`(g-C?Mdp#V>4hM(SZK?K*WsD;\>7KTSlZ@@CYKS+"sD`H)$gfc\^8n[`C!H%P.%'jr?==c1.R&[DG\c4EQ?]eN#);JW/AhiFQ`Yq3`_<2nb\FYO*o`qGV4[J'f\=)OT(0Uj1SO%Va'D7(q:c1H11Y.'YC)Xki!@,%=?%&b5^bc9p5\7DR<Yk21^C=3D8Ya'd#k6gIDQF$:=+AHq\r(^(<_@ok&POrr!<(8OcbXqUK2!jkskQfYd=%m$Y:[&"a7hrV,6^%%]JA-GnDa*EZ1IV_0!O%-GZO_":=2UCQPeI^!<nd0k-31kDCKKt!MTK-pSu"W=ufGpb&`VeIqQuF4D<=E*O+<^-k#Y-Np0)YV4A@-%_39Z+eGdLDJqY#a^5UfIYiT^e'd9kMJi9mhBt]\r]P%K&8k6D*Xh3t@V[?]"96+/`R-PQa_>hSbecnViDJu"pZe6jgWB#6T9Whni%5$Te%GE^<k\,m+m:9DFa=)X/fTu531!hnc!o3Xb]!QPL'?u^\NfPR0Xl4D_FJ?4VYn5?0d!ej&/XqD9m#TC,X^+\fmbu-3WT7Ni5%'4n<I%AU;,/dQtc$?tMbDu"3(pZu=75g,.8bZj56[T-CjfNehR4X)D>Y*$u*7Zp/2Db7O:gLTJF!ueW=9@B;<H>-*`$)C.4;KM&d%!Z55#*G^Z4'I:;WR$\FBM,2N(@:g(9/197.-nbZMrMTQ:oH.&Q@(hj>/en0X-/Y65U?;c%#7%^3lA`.+AXSE.O@\b\@+6^4-KuT)%?C@cYPk:=gS>o=%;Q3##G@%LMR8"$iWgSXJ".*RR1;HFp1%KdIPFY74Yektq;,a\Jg+1AUWl4G#4([45col9$PNpL[T^sI<b<QX/%-"0GU)7I>i%-'k1U0oG>na/udQ;dRTGN'(4m=r[B%SP%iqf.CVDr7f6@sH2_qV^nJfA4T%`rImLL92o;)u&p]nQ6T6c-c)EJa7s/%"j'o0R&!#I'G;XZ.rlql$L&4GLP1Q1'f!/^<UD?fjdD'rqV-YC@i^u)OAtJi7hAuZJZ*dEJd%8D<a=p.%j!)ea`()tA('ce4>)+S%.>CNiG%N?BbW;m;*WpY8n9D%hbCdi#i])lMiBV.U"-Y^#RR1OQHUY.A;'CC?E(QuJd?%i#YgYn>1<[kIa$<t'4[/NtSX9nMAf^FQ%Z3)PH':(1G:!"`i=.-U(T05r\F&61umVt%QP[`r%LEt;(?tt(pZqg>5J0<1Ij9^^+rW;2RQ;tlaBbn#`4#RJMTDBQF,kCX22[,]+%e9G/G+LaaVZ1@94`V5a,O@2hEdn)(uoA[kd$F]N2c(k^m0:7TSBlOBkAah]"n=)1sEi:0&%K&a-k53$D6qXCq\Po;h+s5(FKb!0n%2RtHY;hhegP,14!:?6cm`!r8tH.4u+",!(=aF=:<)#\M_/J:R!p'$Kd9fs]i\JBuqmLJdj)Z4LD?)#h3n`D5*0T0[TncYl+A^N=`%YDD&tSu>+]LX#<%if(2;9<uo2^Ea)8IVn\u'U$Td]aBefpidBM%ANu9;'Nki8!tLCZ0(KZ=W/kJbqQ-ajpTTGfq*aW/5Y[r+d=KL%'47?8>YfMb!@L,q!K>pco\[q,^V?KU8r8*[\n>u%8N,60(L:N[Q7:8!-r1(\C@aUQI6M;$VU"M5TP!p;$V4T6:0a8mMbbdG@3]cI%?%##rc%V.N4ZJ.<-Ym1=(0u$cTr%>4I#L5/Kb,>'5@otRR,4Uf[*Tjp0?I\HXU(rn@dCs3,t>GCG?T@u7/n;eI=C$^E]5q`oXdm,%dhY,M4qBmN+:O(<5:.E_YiJ:t0pY?r`'q?h/'l'1$;t<)egk5"%f_RAr0\p&3>hb5I.hib<$>Al]3gUWZ[VSnbc-e_P-?jUjZAhH%O;%2h0"XuHV=[AVaJW/oH@Z,m7egk+p+/nW@L`BJm,BJ:$F77#bIe8#N1J96[Qc"gKjqOS@+jamW`\TiV:I_EG$gPFIc"t1P]qbM%2aQWE4#83r&$YhT`S#!aInY7b#fo^8ke[XdP_2jd,hTr_W%#RnSsfnX^1*@;ksQ_2NY2grI!=Gq=.)tk)<!,NA0Qrh7.fpLZi+S3%?0<tAh:DZ&i9t719Qg0dr%=)UE8Q,5m1=73FioP!Y/=qoo84qZ6=Qk.^boO>!':PkZ%>i[agG![CqMh:k@$mbbYB)WkD1Ag>UqEn%;ngHq_bs);<C($]PE17+[o><8;`S=dU<LCURXC%Mkl?;LgaUJLo>b"*-1;[][9X;;0edja&5GL^<)"V*+G/Q)L^.iJ.dn66Lj><!%dhW!+g!+;t=SukaCYDZ%^pURJ-<ou#q0:CF4(2E\;iK,iU3kZH6qY].Mo0bsDT@i&)<=)IOQhQG3j%4*fg$JQ4"9"6_2D[9/>'b[%CpYpAZRuIgWEF&Ce4*LbB`^Q%KVtE/N!B9MWACZ8T$P7N`V:-XFj8+ERU24TjD[+Q_nO*EbM6b/p($E&<#f+!Oq]gDe@OUt"QJ$s%W%^1QglmRTj@a9T'#uGq7uhU&*M*Be$i$Z:]KqI,ZQjEUr#6!SNS!oG^c1B/M-2Pg6dEkKH/:horRkVT59gm798t(-cu=98`8X7)%7(MXIQ-dk=??lo#Sbi]MlrthR4.cq&T;Ab0Vcg8/<okl"$4f4eE;2J@HiW6dJqMcAd]BP4YM/718S$kLT`P[\nu/HBEY**X]``8s%IAdJe"NcQqV!+0WI"k@\d:8J'jBGMV\>J0.0$`TuceFFcd<$R[W'Fl@&q*DD%*4=EUhm2Q;FDhC7<jj6laY'q;Z=P"Bg5a[G,.Th%&Rl@-Q($Zj)t2V`UMrJceGZ$RF@:We5se]DM.Edll:dn6'fBSZ@q3^)A9^\,;YC:9E)2jpOTS4/o0CF@][3NX?IUbpl^+J0r@:H6%n%AKBJcj)..RY<'>/VC=<#?Ij"Hu8mN5OCX4`1Ic>Nh%+Wh-A\<rY1cUZk?k@aBod)YL2hhI5O#G:]8j1X<L53q"7DL7WdQWJL`Y%QHVFfmne2Q1<BbfB'Wci69IIPb9`7?>lhp]Mi(t`7WW,IMl9nE,!:NEFK^LZ'D'7UU(I"nW+VUq*_nW%l!<*fksT]ATI7fU,l3gg%(m#Jh8^U^^;A9;H7<=F/gUMsAaM4OT^kk1#""IpI`eV$5*cEfgb&#*I:4Iag.fot.r(re^9d89TJ@,0Y+t_/T/m#;KMKKt>LFgO*%9S"pYbgPjS0R[Qhm'iG'-39FlC"&c[OC4RGr.L:B,U[@m+YTUbOJuus8m]o0dTL\TR(SI7j(:-sA`;s!j)cd:pV\n83*A_p*_rWl%$,>ejMf[o50=r8+O1?3#NcdUl$DO7s.;Gt9V\*^+95]YFa@3(geWl'9^O&re[[iiRZ_D]aU9mDG2CXMr5_J>eZ>0J0s&Dk!-lOUp%'M6D`OduUF3bl3Oj"G!:mSq_GU)\:DjQ\llH^SibN_[X%guI+uVJ[U*l%HDLZD(I5hH3pkU*l;q*YECpg_e=A\_Dr;aXkqag,\GL%d<94R;V212NP.nt'1e-p5U!V2U6'6K<gA0/-i$H!F!tA8lZ"_85Ot&/fa*3_f4q2hqh:Lu8\1<K8bM7*IAu@'/c#A-c,"%rLZ]1e%lc(%'+p=b/OLd_n!m.-k,HJ"-ZU2mF$%^@IApYJ4N3nb(oJAQ0;q*lZ>18jJF%`p<8<e"4-/ETfA`jgTdfSZentQms9c9^m1c`dO%.]pNbZ1mg@-@;`tX#0$8,^YlFG`XeF:!m.M1+3KY#LOHQQXNPI7Xr2W!"Vg)F4F#&)VEWolgpT[aOt0g$6(Fa2DeB,cQ7DJS4W-D%dbT\Uhke4Y)C*.&a3'Am>?X,li>j7.1D<Ogc%F/Cp=KDT"'g2/1<=^i0@_I4@qcA9)!t:1OG%G/Am>MmM3ODHR(AnIM*]g$Z8&<k%Z\.`aOLJYFg^IaKF5.Wskc'6#d<PdnfX#%n+*`(^Dssq$m5oJGF$/,S$4Y0keoF+2s!+lkF'*/(l9%S$^6PPQ\^b`&n9::,6s:Ko%?Gi4tPdaQAXsf/"*OJEAA;=&Z6jg7O2:IYERN`VQC!JK2NOdCM=k/,j7'^TbWV]g3q30&L&!JCr3XOtG]FJ"#DYt#6=P*eY^!+(@%;OoC4RD2FN<p$og9]Llc.fjkVB'Sj!=qW9T%SSB+CXVKICUo%\,-CI0>,!/:*9+gKR:QuRF>dkcb_B.%e&J<1;g__K[4:,<PZ]Ia%jCD4'P*AZUBcH,d9I@S9'!L?g\/@Y*M2e5&=VpNjR6KmHn-OFW%(*+%<X"AK4/?c!E4VM?B0hVF:H8uIN"3j7TYJ$IIaH:*3h8>]%L:PLtHSrD?^Ff/lD1%:6Lt`!EeM7@O,)c?KgQAVm-:?>>Ko!eIGM\o1^&5KfFH@u!o8VVq/+%XH/b/q8'mjs;f?0.W9"PW0lrQWb%S^*FdO;g?I3?c5,\ttf8LC!HYj;@sl8tA:''6/((TuT&Fc3G/<`tl-Zomm]hs%5>47?jE.5O<N(oZQ7T-Xt@[Lc:4oD9<NB(""@2%[Zn-,"/*.]djPuGB5B"FH.;p(EF3(=g6o3QlOCpDY7$!,[;TTWRCbiNk$U`?alTRq-;GhAZ!nJ_c\e+K4WE^9Q@^p:8Q%a*,^]#G%?Zp>N&oj?";/5mJXtd<61CF:;ilbYtWB@Gbc8TAj<UG0K/7HU8n`+ap5B!eK(]IR7<c+AGhXC7d>=D:@$mMVBo.0@M%+=&5A:S<\%GQk\^GQLf/"i)Tl#3'&WfT7_)O37N3>_\rAAR_D5"BsM(JLtR^Gs-4P>Mdk7N@cN5dOGQh[*!7u.H-gqMNO.%8E#lgR"@(bOTII5%F<]DG`7Y*kBOmKdbp=<]UgS>,]tM@e!dP1A/<di@QE_GR&P<(3-c-^;6"R\H*>'19jTe!a[6\FfP+,#,EaT:4_oeE[-G`MoPKjGG%E9B3Z\gb.!:LpmPXV4Ta4'>,EPcVo70"!:MAWe*hDNa&\at+:'c=]"DOIAcgMO\36.?:*H*NdBZ!5?HrQH9eGQI(Yb)VI-<`j/'M%DQs!%)t]D0EY.9I5[$4D%cF[&S?l!m*O,]t6c\bTnPrS<$SF)2]W_T#DPqjMZ#"XE;r`)SV7YTD)sG_.2s@;$cZk_<oJ5U8U`VX!%/q)8]Fj$DJ,!\?\O:hl\r(Cit00CbJ:l<7jEWnanDF(Pg?ZmrrU`@UT'V3TR%mAI0[bREZkb6&/cl>U@=^^O/l5AhmB4K'&+=K2i%6uO_2s*#?KIgHua%s'9qq4Mfn\sp8`Dn3/P"N]Di@Nps$EFKP?=d*BZ>"cC@?La+onqr4t$Vtc)O`E0h+aKcf*qN?<g7gO<cpNk<%d[WiGbJ;X-X@YNPCWT(D<-UPSD)E4b"86s]_k5j$?Q*hp=3XOn03nHKdS0s?W^"8_9@X5^aZo#(?Q'#M`@E!3GbCDS_r5HMC&i=d%\':=hcFn=3S&9SeC[.3RQ;lB9S&5QYMPelg]t*ea.]AQ<*n!>Cp:<o1<9JoKVg+N%$T]f4S%:F':NfV]Dg)b`5kZ``ofjsAl!1^;%$6qu90O#gcGeB'jRo:;VZ'23,.3;SNTn.Fm%_8UekjG@r_k@Nuc6A`ZH9"F/98A?t4NJ?sX?+?8mAt]-ZFIh-,^uF3-sek/AofAW%'W61)7K7G.M-fK$Sp]3_Q2KH0Gp6go"ssgJ:#o-X<k&u'"g<RH(lu.'HeaS@X%s_rGJ@DurpRXo(#/[h`Nt#?LQuf80inr=?!&f0%F[T;4KKT^_),,bM+D:%E`W[=LDW7R+!&_D'k2gQP@iO<XQ"JuNSLSn$XE6G5EJKfs]OP<F#9p)qcGiIb@bn?=(Ver][//U7ibAVY%l0RJG1up'V7KA`[Z?R8so>!22NJ?)RHMJH]$"%0k6XM&LT<RlD!jUeBiG6C&n98p;9S>P#1FrQ#mds)+,P^N4-00"J@L&sqDoC"]%K>'_I2Ze"9SK*[#mcAGidQoM+;TaEJ#)r16g,/:<\8jSJ1j"bnf)2Q"jlg%SYUFDH@gB8SPJuWs4d1ZE$pnbdG&ou&8"3i5i+u=W%h;Mj-)V6K>3;V\;.1XBrMVc%6]&<`J,*>,B*KISU\RV256jt"4PQfGg-H:u+;,Q@@ce2K[%!Y?B>ND[rh+`/[U3Aq]a0CkLO.u_k%3ZR[:UFViea3k`/N](D7OBF3s,rtP-\=^7_O*!BkhD:?kBPbP7iS%q-DVA`$rV9/pWqKRgrb7/Kc>[378FGT(KNW,<]:K(2p9gIn%[jAO;ng)B2\Ao2<5c3$8Kl'=pW)aL(/h*Q/CYPnaC\0lZ2K%_Ro!VDJ<PPt)2(['[P`bPjWX02EBe0+;U*i'_6#e$D?\t&C+'qf`%.%72Q'N)tfd@J2F3b[t'ah@S2[Gm>`PWm4\F2,X_0B(d[%UaSq:XVAmG'FsM,u7:3FB]RbP$JWWRZP&'%kr6D-eFhPDO;-k`k."!%'#4Bi:6$]aF@hcbnc;3;mNsJ:Ke"mVOgd%N(/QBX+E]iI$21U&_SVrmfIVVa,i4:AEAN8d:<AK!;>!NgHWFs-XKD=<DmAm#48+q0%Mp;2H7Xd,=T*=rjHWI5TZI,@fMrhG,X[L>_cYgs5RpHE=W<9Kh[Njf9GbT3KiUWJ])t0g0nRlBp)&'Uq7W_<b8^=k.909AikQ]CZ%iaGX`8)m[,H7lpbmImDPJ-5:&dKKoa:sd@cE]QGc`:%'n(ko/>hUll^m51T_WE&*i-8*e-M<l2u_BUJc[3u3TKJLO<JE(=d_7;QJ%A*'*Y$YTV5R.o6<?/'WTh$.bl^gbHEJi1k`ie'6rY]V$X;o<erfZb!i!s(f`?Cn!u=hj8"Lj(*)QCQQ<[;7t)S#):YSPM*$,ep>-%-\Y5iLT0Pk9JG'Ur5Gt5>1\_U!1)-H'&mTrh0C.Bd`RE6Y78r-oV][sp]9\AAhlC"&Uh,]g:hA"^#41rm9,q"3`a"3PdlV]SkFBt%Tu'/89Cl0CpL/'P_Sp<$bAgh8O.0-ul]NoIJfNRN0?F;;>F3"`AUb(hHL-7BDNC>DOVGW_`NC.;Bk(1ZAb-[+Z,;K3klB,7e.]^2%*G+:3cW]BUY>*E0*n89_ScfG#h$P\oc[(a=C92GQ,UKMcSBrqJL,U\-s,pQ;SFX4NjHYenMgk6&`J#s.[__IBa&\U!p,]G1FJG_c%Qe>Q1TL"^KGL7B;5`TGk$1`"I+h>C`)Y]EHQK1V5C?04BM?BiQ)45^l2$Jcf>2`p%Paj)F3>eqEp:)!ZTAZ#BkMsh($1+!q(_tJ-%(_s&8^ZeBGN%QFVUg&;e'tra)-Mb+Q$Qh?ilgaLfRHsB_RsMkNI:jVqFd^[rEb%AN?jUMm."GBP,ZNCXk#!]b-Yh3o*'lP^`a8Sp%JJ?.PQD,H`/#'5[[O-cUdNk`;d[`pN/th,f<"rS8CPA%J./>HhF%fn1m`dW(/o/.ZCQ@hu_ANh/:=5K%$8n.H\>H-U38PZ3f/riH%gL^ArFIBr,QfXrr3D\X[1NP3.ELdklBS-2*HL^R]dV=8c'ZYSM743>ZM6?EtS@n)POrWmUF94Hs"\$b4Rc$oI<B(g0"eUG4(lPj8%HeaS>X'6Xpa,O?8hue=,XOZ(7r:UU>og\@"jp$uG,$):'A.]/7cO,pq/:HVC'HbIlDiLp&^,<*.n2\Bb`L@C--sMAKn3j?0_S5M+%7aiQ?)Zch5gL(L%QIlQVL5_[LkrL[Dh8r[Djq;V'"Bn5k"m/lVFEeeHZ1.<8OkFedq0.B!5EO.=d?l;11)ot%pZAN%D/lo1I+1'D%_STN6`-Gs-[LhUmDq?bB6/o](U[GReRWph^>`FKaEOCJ@4I'd/GT]%n%@,1oVAhUieVm$@`;OY.a,bFW+:u!hL9$?8h3"3qZFPd-%ZJ0X,FX"a=j#(t9^ae"2Z:#%0=.]>U$*r9E]soq9nHNL)*FOE8QX,RQnjI(KCA]ks1"qP23WROW]D/'G+D.4M[:SsokD+@p-iriO%[CDO,ln34D0?ELjeY,P>o"/h(IeF-"ZjWkh#1tqFK89+SGSm$8F`?5_?,VfuFaXQ\feE48-4su"lrc'gdLpB-a,ls44_au>)!H>h%RWK3a.`j2ZX)9!Le6<'uY\";S"Nh9Kb+T)?+;'/SAJg!(<PIc=]!XaY5SOeY+F^MGd3T_;467R"B#\ZlTYP\G'r_2_C7-uh&qL,5%c"tW1'Z?g);GdQH2`O7!l8GRH<%6oJRfR#&1BqD'GhR:c'VfNld&ERggSq)GAAAL.lHHf#@AK1pP]]\$%pKgrVg+ZdHm^he,YY1@%!K5UjdAXah_87%KJ.dCT15tm>l:+%[#[HD[PA`=r`E`V40OfuE'ng(aOE).+4Ze],An,E*#";-cS4"HJV`[%an9LImj\a#b:\NOS%^W2p4An:8-[)CU\buMsd'rr0uT@i\FZCeVYO,H0':sgZ68sj4IY[=nsQ)'n+PuN6^e!FfYeWPD;p9]jj>R.\sNZ^c:ehLIVVZU%,%\Q?R[eN%5qPg3-k8J&t/ekTTt9e`cK?h5bL]iA"VkW'eiEh^'&)/8A:01VHK_^VE!kK0/,%B@Z%As>,$Y*<HEP+>6>/BF9?lf%^K%-Uh"?>D1%I]F<Luk\8#,)f3D0H3u&%4nq)+!`/fbIUIng5QYl-0r+rpB?T4t8Ek,%,B![29tf_,i5s$T%$)$G>5Ob4JW8_(n8#`m%RVQ.3p+T5W@A'Mt@_n_kO9.mC$tDn$DZF@/$<#3FRc"[F$N:2`_-rHFKCCcsO.4ODNB3ah-JM2C.BmI(ep>r7hqhf'gNW!7;tFVG%C\*U8.MfpYq6%^r&WCL`CTP87_Rs^Dm'iN"]\^8Mji0S.]Km?!pW#N?`E^<,oJ0ZMH@?ASoWie8pGm%5bB=;1F]DkU6aJLQjGbfK%$<k1<@ZB]JDMWBt4pYr?X>fV]MX)LJ7i?K[+lYS)?h9;QAb`^EfiEMjX?#1o3bd@<c8Jrj[jqGI5jdF60qc]L1=[&"#?u/(ds9C*%B0^r.X#>VcMMZ,r9>P-VD2HDPpe;:a32e8^e(b&=q([uPaFmu+#,?Eo`'=MbR#i.Bp#1hTXX\\5OqZ%&J)hm]@(I9bo,GI!fY+V]%\4"E$;6acQG.1EKS=LTA"[`BhFph5r#=-nSE.fY@aK44q)X*W6pk)G!k$UJ5:F_f8a:_eI#/YFo9J6fbf.!H9'ekH6Tn)Ik1<?eV%LarUUK!2'#QSN`bg&Oc3%j&PrZ$Q.8]k#-W@=E!<UN%uPpKNqA>\1TaJidLg`asOurPL:_mN+uQ_"1N*8lTC.Dg$_+>>TJD<O:B>%9C?N7<PC51CS'9/"P.<04aasa,ghYI]=`-I`bsim,Uqiq;\odk'9H:H'2`eQ5$Sop?A1u,ELtM<L9@lcZYQQPX1jO:Ajq"Z^5j4a%Hl!nVarFo.TfOkEQc]I6G#\WA:bU<4`Vi\u8L-7;`(%`j=ckNg[8td-;%t3L,_qg(h($R;6>`P5_f;Ls#44%FH"=*T`8G!r3fqe!%^k)Zgkd]I\\hI#--+?<dN5s,']u:5W.`YXqRF-u5V4uo\]2V35dn9_:\6g^BM.DATPA1dhL%`HnMM;l<KGGnt[Ai:j`l?1e>8CWq%Y#Jlh\k>C!knRYEp.KuN.H;843Zg5U"SUDuKgAKiR2"gD]FNNQAcR<QB^hJ,CAl+!Y?E/hebY`?C;"5[>6!AG<U7IG-T1ZH/E:Qe%O^UD6`Z9E:-0$.1]X;djPCmLEAE+:>BeTbB1=XC&ehi*6g0/?%d^6r(D3DTn2/IH=>c^a9/P7J=VKrr7.r@_jmO7=G4fB/r-^&mN%Cl=cEXD#okU:7Rt$U@H_n2a*(?=TEjh?&3#\BTK5Os;AAD#dg0;)mu'l;_[[P7D=X$L6SARsA0-GNg`BQC"s]a-p^(f[<[$BtJ\9%b]uq;,CdbX">AG:+uSqXV%dRcRM:`3m7#5OW/A)k:nC4GW.Bd-=d+)pm2bl6[S[e+(?$tjYClOn+31k3hm(1LD$B_@e[XKk]6[N<%H+2F0mVBR&?fbueY_0e_C>CV3L(!1g9^r8/('[SdeqNjc']jnF$-tgiIgQmNcC9f:1u?3Ta<LY-@&l4rTbs]LNnq>HB6Mh1G\DVI%2`!tL:>:J&=?8'=1hjff.8qa]paihb45LOpJAO6!N1]DU=b8"f#I>8XYNF23'uW4q`@E]N[qkNP<a5D/K[/C$Xs`DOTga#PLR^Ee%SU$gCJ3GL>0[+u2OnC,i_JDo$6kBsMN6FX+V)H%o&XB8#Ij4#MUqO>7bd1P^9!&8)kcc.k16r*upmIObQk]-aV&W)kJ>PCdZhiRE%*HRsdG]ZD.`hCN/j%,o)KEh.O(uJJ</(G[9"k/m_^bXhkN6K3+@H1j]%2_RSiT=;6C#^bomlesl(5Up#HVMN\*gN2=o`<GAB)AgC%<s6skb]FD4p'r]en$M)qP!]b4fG(Q7>qH4]KE6L@-]CLYX_Q*tO/i>MGdMKl22`fjLY7a+SKs7Y+kuY#QLj"J"K!l&GCeD4P1?`"%-*Kf[p,.[T"4c<!OW6f]Sgmja,08^o1](d!9lC^kZ\Z%-i*sh<HSB!?ZRn!V:Qh"LZR/V^3C]?u8L_oEVLYqlJkq%qFID@X5,gFV%MDNlS36.5CNf+$h]F3goa>R.'6FMHqOR5=a^P6B>0kQNM+kpMuK*iL%4XeE-R)L@J,IW-XjeIV`&3FhB&R-CrZ->%]fQ+f>_"JTt%FY[?O$pGr;B^@/Ngg(a^M]!;WC'i93?4.?-.1]U[R)DlRiS$X*3?qcJ>=X?^b6AX=g+:3^D<rnfY/P!.V=>)r(SJ%"BPhR(%*bBY%G9*7h[/)kD2-bLlfk?(TZ+%60;"7`1rt_k/9#DrBocC<]I7&#!]"9BcRACT?Q!0J^e:Xs!Q^BA5r1bM_"5kg%!-/Vadi37'9kWn+%CodGqM]/mT5-m&L9<*c#C\2Is%lEHpP[`,XJGJ(:[Dao_E<8RGZS=mc0k#:Za.:H[6XCT'o+q4C;;8N;?P:>N%IBEu#8bf3#R]+S%ht3b4`Kua;12>Rp^#lBbLXOao;AHp4[VhF)I/#j30+=EjNP_fVaL3s$W<Uf!<"3XQo@`G4dL,`Wk$j!*27%,g+F'&p*Sm0+C,CO7%V%a$-=d-_$V)<s1P9N#+KB<<B@u6K2\#a7jemDT2HjlI^lQCP(#tYBm(:D+gbQQ%dD*S[Z"VSp,n6"Z&@S'R.>9^:t>nF\XZALn>%T*&;^+>N/L1LZ!F2:lpbUkeK'+F2A`IF0\k)7M2O(b732=>[FoV2/p8_k:h/*'fpfJpQRY?o=GE<:h[CP8H#WoYrl'%G'QO!+,i;%+P\5i$/>aYXOpJc;XiF&XF0o*>nT)[ZHWiH:N!u$.sL=EkCT;5g`=CQT-]K$59c$P0hhQHdg8'B@*a^q>#uN@pXiqf"YZM)5fo+`%nICIQ#OebO6>NT^YPl&QDI3sSU6lOO>l0J"KQLT=Ue23;8lEq_Ss$B-OdtNiXV'N#7?W&G>"H],7hRX,QB9@/V'oC6U6K,;UK#/c%88ZQq-&!BE;j-2A9"tFchQ*7<EWb[F`h5l(%\i]aE72?@Y()QVAcO%ZJ79KI,<QH6jbR@lOu/&nUb#+`]:>7a>1Oq7Vm]J_-9W!7%+us1MoW&7,`\:".4YW;s=<Q\Q(5!oe*X5T,k![@"#,_B49hYi;[ZZD;:[jbtk>8gOfAgHOImVd6<5DA>g>XbhnP%A*n]\R/^EK7"%T!dXO%*Gqoe5R.uh$>P5+@*)2UtXDc'e'Nf[&mmn`Cp[_Tu%FF;BlTdc6*[6RR5J7F&Q(]SL?S4:Q<R)Iskip5RGS$)9+qI(5>Cq%;i7CS4c6ZnabaQK&l\P2U3=6J<V\&#P1cQi#NU$[hP2jg$]&=.*gRD(E>b.ob#[I3XMPjZ`3DVcGg2+1iqaCgpI+rW=h7:;c9rDK%@`h(Rh@L0FCdX/%ElK0".\'t[-rM]M"]E2mV3D$(;%]QK[5Gp$Os\.PP3t`\4:R8*c\fZ5BWc;/BF8&Nh(]shU\;28ak+=%Zcbno%,r-.dZXWfEm1OEL6]RV=iY<sNkaXHT*6Om9ah_HXC\B:VcW]`Hj0r"h2*YG(ceZmY??Z-:d'H'8cIH'IO7AsbjkC_*fF\h3,NV"6%^L0.;#FjcOheTE5U$GnnK`U.*c*%d!IVQ*s:%,?a.$$KiJEGG2O_TD8OQ9dN'"?!H8N"^f;p^_CaP[6lmTh1QT%$YmT%%qD9jE'Y%ql;rW:.K'*,GN.q$GcA]"S.jX5eK&mY1.'G#AS>B8d,i6E;-2<R(MpFR4gEdM0u:&i5h6g9"?V*!07l[Tk_fE.91],]kq]FCrMfW%mG"rLFI`IM3cEGVA$SKG`LCV5POHf@=mTI\3*b<>'6n<f!,ZWT[Pm9,3uXGFF[LHp""E*V;MtAZE>fln,BJiC6Y;ru#IPB9jXC@"%-Yspe``p9&h2h,a(;CZSX[0L#jRRGVm$UR/?(Gf!U#XQ]+iU!U9"@%6!.2nHmSj2XLrV;`gYee\\l3J"mN9V=?BQB`Mu.c)V2.RO%\VXH=c+e6*"6<<Bjs.-D_&?T<(Mr4o.cg)X[!!58B[,OdQIBfSQ7\df^EnZ2ELs&i6meb<Z^_ADA#>2MnD3roF=G+4/m/Wj,.TP-%4=s-eHCRq>1<"[L2nm6(Jc)C:Q>lEu6(\Kb\J&(Zfs?O0$W%\/a$MBBhX$BmUj$slB\i<.[jtO%15?.'3\sPa96GaE[+'2tI1mJ?%m3+4"[MPA:'<rk:JJ@e`X&F[liZ9>NSi7(ja21]*[OcW@a,Y6OoI%O=5EW0__3>0A=JYEP'FuR#;0jA)Z*UBee!b9bm=+!o#n+kf%h/<,kYSYRtfHNjbT`)Za5psHIX@T5#DMD6tZ*o!W7K85II!@%ILntbJ1mGVX3FdF+Y[aGQ%EuA"@Ij!Ni<c0_lGF-?(]h92gA$=8%0L*4u-ss)(lRQF_%/>%b"uY(WA9LuaV$0M\-O',@Eg`N!/bk;[nT7Y?"I9B0l"hs;M@cD[T&r$?2<Hte7@'qj=bWd0o4KRMf]]'9%!?\bA%Ne3QV4aHYBO!^+04aejV9Ss4pq8bsWuXe;:KIm/&E)TM#>Hr1/edl*)T.MS);P1EAfISc'2G1PZ>`Q@DKlFbc\oHbHd\AF%p?qYTS.I%DgprrCq$S4u/0/FnBW!16R-?$b)?0V4p98n,0Q52'j;M[U<!:_b&^P]fII$D/firru\!RI%(V.e35/A\/>!J:4T%L8K%dt!g-l^]\.@5_6YiSJXO<p",^&-s7_caJVX^o#[.dc.c2`OJB*eB3EWR#[+'<eqi]*grZ^^")<mVG^cg+rc`m3%3ib7&I1<7Q]K=%HQ#>E<U(>Mh_m]HFMV"m]PWm9DV%?6`lL*0=n<\9UR3($n[1Mi_R.AC_)3K2m&T%"F/e81_Y"tP2G7ec+h8^i&q[%GJ9<sUB8C,$%b2IM\5Z?\45"hJkcr\d+;t(R8Gh2gs)Q#HV((9\O/UJTmF#7S[Q<k*)(9KioEk$"^'rZt@,N7'^I!+,=&*WBq;&6maG'Z/7]VXH%%,nEXo&-<C1-t^'-*4%cr-g#+H>%chmgg;fqU*U%O$hCNmdCPZu2G;1hlIhSJ]sb@*=_#lJ!M<m1."+aE%+psU/t'(frE!%f9PU1.%B3p0F-p*V\CZKjHfbS]J9r2RI0=@ZR3t?%7)f,Ygp7-b<-ATg'f^p_0Mr]g3#u)PHh0#mU)A*[jF+0)g"#BJ]2XoMUl\\VK^E*%&%htG6ubXW$[(K2d5R#N]`=dafQ[^LKcE0+UkJ8;R\b`8XZ3'MPF\t0FH3*M\l\smd#APpZgRd3MIIVI]Z_sSPZ/^)2Z;O-JZRjej>%/Y34toKQba-QHolOpmlm^*an1%$_C-FKV/1XqD4M>muDud8jehN_)CF"K$^Cf,"g(#:EFlKEoO=R#sRg)fN+A6Q[:qZ&@o*d"=!F%%[omrd=cR`:fp^&o1Q*9;7!XGOflLH#4X%<]pKY#q*[?+CIOIO0sU/LO.>bCSf):XcB-R8N2d?@S#Jgm`)FP8":AF28C7UIO@1=n%=h&sl/r7MPhb%2$hIEAoC%X=MaSajW/Q9r>HY6D9[lMWX95P5hakgUe\uoQb(EDrPD,=1&I0.0!KD(>/hqaGR#ftOGBnLS;R(F#E%oqo@7Td(#\.@-IIM3rZ=89\XEDFGr8Y)o`anbL;n@uL(86QZGTa'R7]X>IQ/R[q@[GadEs%R4m:U(2?a6KTE\gE7ZaKiP5]hCZ<S%nSP`le/->pI:28q\W2uX8^92*e_cg.r2onQR\,?>j"/T'o=9sul@'s5f:[i3a\XL,K%@5R6$R__SYCj!K=r/J.c5@pn_jL4W+`da%-)@Q(_CeNM>a)1&j"4<GPq#qAQ.\01^:+):dZ]&2N-JaLGd>\mY!h.n^^$JM^<Z5fZZe-Q.h/hHVH(U!*uHqd%g"D7$m3RC_1Un<%1X;@J++$bJpBgN&R:NH^cE@+M(/[ba:R+ks.ee+XR<S#eo^OkBrHA(>^XT^@XX;9A*YWEqnI^!i@q;X26ah;eeV!%g!@[n#B4sTt%&MegD0su09WbHO4n_;7Zi[K'*"d[\A2BCR94MUX!8&DUZ#iQbI8Z[mPLG1:B[2?g=O30Xq(RAt<LtcJrhdPX$(u@?U%*1M2>cJF/%qr-eV5?/,]qcJc"^[%##Cggp]m9>j8Ft=`&4X+Fj^#a'Z;ssC<Ec9&28uYN6Zo@C2]8'%0k[!IMmm5I/(G,l6gT0<7Y]E7Xfg?ub%291r!05p3E4?:"ekp.:5'Fg1QKT`L`$#uR394h=!>frMRbM&OISlCu;,3?"<(U7ibT/rj0*)h)c9UQ(oQ7"ZW3bES,<8[Gd9S4\6%9proXqjj_fqn0l=39Fc4G:^/bGH>NAK2]0@WF/;_e?klQ5TS7f'RP^p0RkVg=u<]E\3X]OLtW(U:^k582Zm[,)DM"?%2aN6RUTr&%HfTGb`DHuJYG:f9)b7k8gVh\OE$#0WmSC:6Yn%4f-3B2!qV-(n25Z.9E1+nP%NuNpHPA(?8oO3'0S%r1Ep^asKl*uF6JpD`8!-fg%Wr0^KQAK@?AD\t>^6Oqs`EKoHS)<(2CR)H+jUNfu15Y&qS,%Ml0HdO@ing]IJ,$AQDC*L+m7C!u"55XfK&%+0(M*<4o!fS#k:K`C%qGUA'Kj(q]^n);,k!LUL\qS:n[\$h:DY/M!7M!H*,&3_T?r$IOk5kCd.dc.Z9TLesZR&PYq+;sr^b+'#(,;MJG<rUVYB[^G-DPGJ%!0jl^><FU#H"r6B_?E>n/9,DY)7RPbEf&%\r&0>h%P-GVYhif".,H\i*hq*A`r'CSj@_&GV)sXn5&]^RUbV#mV3ShgNO,*tpK2.k%[D%!H_GGZQB>4ON]-sbD5-M[^e?QR'b-sR_(")(YQBQg\-/G*io6bNk:(DQ^5:6*J)n?,\Ej7\(/"mlR>AT/^K8IinQ>-TI4N!@U%@-026\ch/P(CFXYS;92DJh^27[7p9+].ANN&!L71dLB6lNT%Rgb(.-7?^4chI&hC%,$1aU=7GD`j1!@(qX1VhhleAWQ]J>G'2NGi%_t`g")7C9pTB.4[Wo)-#O]Jr`--\SNrQV/4!VebGW=B%#o02aA=W74/;,PZBbd/Y8lY!c0H[,K?\[+A:GJ-;Hk1$<\0<jI/.pom>%05IH:Y@cj]f?\,8Mpp"`Ta;`qd_I.5K5rDuU8;G/N4n3UOp]O7-i0q%e)P)/c_p'u$R@laV%>e=5`WO(r%)?((l4+5Im2Wi:&WBn%<j1b2Yf,.7nSh^pqoMf.p\.f[nSn5R\[K_?]?^[i8S;DmmXCY5DpCNcS*Ar!ZOG<+<_gq(,@TQ1)Wl]Z>f[UtPYpkcOr?+fo:?b/%MCYD9oAk3p'./,P_UQdU`'J<KA-`Zh+8F/aOLg2n2m2S_kjn<\/+,TXYbh-k"$?FNNpe'%8?](,_lD.'?!L-30YZ+aq6V[,HPRQl%45b^-Oo.:/Rb^`KW_@37L$,$`c_dqL3gGu,,0=+W39tj(E@EW%GO4/]YVsh4rojc$kh9pr[n10=m:@CP]r"d=/-Zs*LNU"[$,Vkc%n)API&iB-\$:R3BEC]&!#0#n9jEN)D,/[^kDcZqP.T4ihBVutb/IPqEc*lga/5?FXIY]^lL*tGVgPUFd.8GXr.bGCl"VXOU_<R[C%L*J*r)7(-O6QJc#$aXs(r\Y='4cQZ(b)-D_Qc*HL"5-n$2[!%6%AhRGhm"N^s.qT0IZgJ>+it0=LG>IDj--=*8Kq@jXiFuX0m[fk%CbLg''j'ebl=^I!3#YC<Yp_(7(MdgGo5reWP3C([4^Nmr'^Nd*KTd]c.-F\4H0.+-.KDdoP%R-rY(Dm*/:`+<kFhtXSd2tR/L<Qb%>ui-5BtWWK1G&='*3)-=Ea%UsNl[9ci$X-l4Mh_%M)ti@AK-B#0CqVqh.#JMqX?-TO0AVjCGIre@`0eXD*)sbe'U4m!fV2`"%@(?%r/Olh+;!"A?q'*q!=kZ]<'D]=U+:eQ&ei8MYF`sa;UUPkg$u^@W!,-Ana(_m]W0o,WZ']K%:1'04/dNUD7!d%P(@n9RDrM0Q:NaS%+E+O(F,"/#jjlPoC>!_n^EQ:ROdI26#ofou9O&P1<1cP<j/EbYAkne*^eSl)nO5,;TjY*)T;A>jAjt-$95Ds/P9cbP8Mkp`NWg&1%X3\oG&*IfkTdFu(HM)Y*3>er`,*gC9YNtnSb!t3`mVgs!lcA2_&!3+9!RH!1@JAT=%pT%XK+=qI[W"&8C-(u%'qJX;a'5mXmd$Kl%[F:p%:J!JA=S`fHNWW+S<3MS*^m:i7KIm>/9T#$%#Eh5#d&aG].sa@H;#/`oT7^;V`QN3`hFI'(4ncNSU\H8WT0+%2U"/oJdo`uT%2pXlT,4N6o`e;Jq^nM^-7*L+sGKi7o?)K"CRMi]B"]l6]M@[Bn&CE+*f>F_0*sGI)N,0%]2aaIgVglJGd01`D;iboIeWhocO@r-D%JT,R"(3aD/*8H)br6A;5jJVLb*dlNb'=oC5^+d[8\T$?Yi0"]*=pHW]9/M\#.5GW)fsK;TVf6DlglG6i;f(KP;Ie7^Z-DMB`7Ir"%PhAd(N0X.0RPII.of_Yg:Yi[n+d1i-0[F)l-M'u3)%;8@e*EG%^pH'umc+2lq_G^W*8-dYd,18-Z5jQkHTaR]b*as@Lq8(+74U9n%K?la)Q\+A?Mjk/Db'Dtj-p(=gSU&KnS,"0>C)S)Z:%nXX!9=/F_?9&5c`hF(BOCBMK.#f5Z`,bJ\03K_4H3i&AUDts9O)a5;b>:-%``L?bguRRiL58cKmdD,h#Dp`#9ij6#SAYK$\6VbJ?W48*r.jGpp7"Z/\M89]/"%r8kKP\30AdZA["U'G@j%-"]r15TRicu*ZL7NS%MWI"p551XVKP0OIUWO5KSp_j.4k>W&b0-P:bWLEP?+4?M%c+H`7"=?,.'W4kD'(\LR!P3=g+OQJlUTa=[sRguI\))a1]ZE7o$>B!%n5ea!H,)Z@Ie*62`pij9%I\*X=TV&$%cU8+3\gob\2#N"=YLh7o[e]Sdi0^M]Rg(^&$VnU+6uEZ,dEDAq`+,\o>c@[c%gK;+fL.%%jQhAFY2_Am]A"aX3qC=SleoO,6lps$6#_ja+)GU]+E\U.W+B6t`#RF9@Zt+^.Grujna53L'Go+4F6dCs_ChrU5$BqWe9HVrDr39J%$@:_?S]rcD==Cdh8NO_iQMBARZ^6XF.u%!pVk!!pOmO-3*&la/FopjZD7K3EX.nA*!Nbb"XCumA<\H=Sgk>'<dJ$%0lXBqYB<+,W%9,[('a)#l?a#SA@HA^,Sf1t^PZgEUbqQb4\VISA^e1'K[,J+u>"bH!fNe\@NN%$O\p@^XOR3V7h*JQ+Xb9/^/e[i+SHa=4KCGTK_%R:)S%F#SW[8;n.]=2*T*24/NHVBb6r#I4kM%2!7ML:*5AE(HZ]04c=<a>"WcJ@Ag?`XH"ZSog;J1JXoo[ei7n*]K8lZ`p(6qn+(B%:mq??9h_>3YpZ\4Ke(Z]/Kk+lLiEEMU,mJ0D&p&Kp?o;[>MG/GY,2<fLD;SX$ck@&0$(1@$PuJ=L`Lu9kO65Pb^LBEhqhdQ7:BtJ%lh=fKgVu*n!u4GfbBo2no7A"NXogGVmX2A\NM(H`Fruf#+6&)^MJT0YT'H^\5F(7QAo,un3[aL.)=Zf@G#"#\q16LG2*13leuo0+%I#Dq3Ykm`KL6ciAHUj&d]K$F:3O%QljMf]ipL#\nblTD_A^rr1N*T16H%n+<&4/qJ0b'(oFiTdVf$i"d>PB/7?lWteS8/GH.Js`O%$j<2>Y3qQQ\Di#5GATM[%?Q#0RMg#-d,T*6%lCE[KL,p1(bUKd(LY4ehLhF49.%G,f[faZ=;d:sp(#"!Zst==%pN)@Oj5hC2iY)h%+i*fj8"82;N<uA$#+RSd2[RJM2]^(ZbWNGj&oj67/c@6N&c2.a[13J]c7>YT(`NS.VSd]92Bt")$oITT_ge:ZO.3+<NNaX#_:WQ/%3^kEV&LM%s[PP>e?(+i2Za"*&&]hMHbW`<?[UIt(=DY'[r!+j&ZNoYOHkt_lD'8G\%A(Z'a5-p7B6Xj#p>IEBmN.SSjGJei'GEBe%S)&JmFu#,"E_Q8rO=4T7+s?dH:=Cqc-`(3qH"jZtS6mIGp=qitg(CAJQ]oh$*h7#H"lM]Dd13?qmSgG5[Zb]Br!2-8Y-[2"Q/0P7%V&G:U;UD[!inaaJFl='EHGb#N)EfL&@*`dXYj[rbM85JF)H($(KkJ&%h$`'*4e]9/Hdh7a`A.nO=YT?#c!<kLbXr:aCId(M#P(O[%ED[23f$@S/m?B\W%VkGj1.rS#d@G$rY*%t4CO;sjERGOW(,+2Z+5\EQ*08p]XkNnI&A`I*cfF!Mj09H)Fr]%ONQDS`+NmM#MXMa5%H[L/X7@V5\V9O.]V&eC(gpeRJK$U*u9tck0?"NH;XJl"2lf]Ho]MnW/QH`K8W0="2AE9j>p$VA,iTD3qY.K^AK=L5D2>+mcG](1T%F-!/pSsVA-%HkLJ>Z]I<XDp-E4B6O"k?4^nn,ul9O,\NC2&pmQ]`4t3DfhY<;U(9%Vm=%EYSEt7DlZi:l0>c#@nK5SlA;=>SlfER%]oFh]#KqNF^V.N_=3#HIYuYEVBn_l'B:^X>Fp4gk)/8EH3jc#l9"MTo4"+V'A\$JgP+u=6,Vm86"(e1T=?*h4]!f>(@a8(ilPn-t%oHd'^o1&$Ag['7AbW+(1p.9iaNFJE`T)4e0M%044!aGR,TPXc%33MB2YT0Ti;IAlHDBQa+#&<bBpWlJ'*EHj&a5XHoa(%\Y)DU7d%*$*Z[QSl%.3s<1;*r)f[!HE:34+&im9_0WIEJIqC%<91A!FT$D-p@?.O@=r@0A([A]6u"rG>iMl*5HM^l"%_KMrB1a[.m+$c>FbO%Rs[;h@90-RCHkuH&*rfI]0MTa1nCHefR#3flTQ(G?3JKT<.W=!lPmpRRRt/`o,>&(71MQ;;)#<IH,FeOfBL@o^WJsbpA1at3D6[/%4,h=N@r5M!et"mm;a'g0&UOPoqS0O8+Z8jnUnUf44A9suWkj7-T!V:h5hM?Z!b!MEWg`0&-VFoR6sJIg]<o6U=)0.COt679^9I"M%s*Yf\,'Y0Wgoprdr@F\n2!R32>7Ru4dD!koE2T;p)qb?/%qKbAlkXh6hi>[?SB_flKt3b0X"Mb5m'Kj<I*sokf$u'HKC/r^Y3e%l%0Q`'(%5lmk[^"Ma3!n<KnUe]d']`\<<H^2,_3CKq/$Rf.[WYmjB?e_Rc.*eYcFG])quSmVPOnA73=89R`U+!:9o<uY8C%a(Z'5?8%M0&@?)h&_I$Sn$/h+K=]7ej4(Y<.:u^h!.7DAV6[2UtM*:D12?#0.cmc5d2_c+[VW1W\<<.%-iLD?0Ga<`P+.le6^@X@K9Ds5V##%roMbHq=_H#mgkKJrp\1a?[Vb>+91436N$#us7#+dc]<SIS)58/J,AJ;^\RT8O.Upna01!eD]f#<&&8.:hu/=ks7%XaDG]4tmdImf%MT'Pbj*Q^_dl7<lV9\2p]nJZMk.C)rq;gZ:k$42FTE"ENfDkX%[t"2LpE0Fto?VpXGl7*\5CE(Y([-Vjr6OR+,&QbOJ+ME?rhhFL%cZa",ViSUlgMak)npc&c]5PuHp?RW4?iKcbhgP<Mr:`F)pW^2IY2B9TK0/th_>`WTI2G2[_W@r;T30_A1Y1**`k'19=P*I,f%'e2%?%;df#g^&eT]mZTi8.5P(&p8&R/Qs'1!PM8Gnf;2IrgY6s8E"0G-r^clsHZpr&[OYrV&ONVD$6/U*`u$c&\f^eLl[YZ]Kc'.=TDA%+NN@:9jDa^/G@NLn:th*<ufftrRj&::W#qijp*?$)+b^MT8pA3g/gG78fCMBZB(OLU`GR9Vsq*P>B!-7GnCaaS)st!9Y\SkV`h<W%=pX9+\YGIJ?G$+p"VT%Yq4muYTE"k4T_-k#p927-QQ-S9gP4cjs75&B-ND>/^4oV^$\j#a-:m.&G5Kn5K:b3[/(2>0n#];&maX)?%,(bLGI2EM<2V\aM8IY?N_uaP'+g$;+pM/$n02#bM_ech7.Q:QsH2$:Cg>RUfeE`h0FWE[$p<!D*Bf0f=2Wf/B&R;.+`Gd%&5DOT>%hZ*jY'Z+nt)"+KhXil4iE9Dc@h_l`Ef5S4<F%n8.fsRFX]&MmK*I)q'!l:dG61UEQDF7einB3TbBKHbEGdM*ui&^bF0?^Mn$4Rm-%[o;#jltP*4m]0daoNO3qpT/bqI,'>We?rfA:WT0X`,?UfAXVe<YXX]SA-')RZ`aiXoht!m(N.aof%n)gcsMN]5Ru#a2Z.O1HsA#Z%,k6B1gJ8XT%JaVP$%(M>!<puq"F9_1#n/hiJCk=(HuI*oJ:U5Q="\_j!fqmCll:9FD_U[rCr$36L:qu.b(lRd,6b"Q^)_]De'9:C%dVq;&%aU]V`&;[:bk?-&QTHnr6S=):7oUsamI/@Tnmt5]bK&],)Y6/[<p/J!5sG[k)'1'hq5L.HVh<biUiW"V<&RMlrA"2,!oh+Y%6RrCX9YZ1(%_j;kGPc7B*.D=okqW\Xs$4^BGWM_<iK)\?4\mIE:tOjihsIttZb^A=piiSM!oi7t]97F?Zgk5QI/L=Ff,jtRj8V"u%!Tj+S>VffYr9KZk\KCfY\H=`F-h(&I_O*7P"i8r9?`iTVB>TZG'9JRf(*spKTpa8PaF$[^-:6a\nhIPB#<UK@OI-9S]5o$L!`[][%*]-uJk\\NGo:c;CH*As&;_VZ%7%otQXQ[(,J,)3O)k2@uFFLZDYUlC4FKoAQnIp98:S%[3C(:hHAo7d&m,88,mo*>LKmC/c]uNSB%^lP+V=4oK`0d#h1%.%]\^/(>dh_p(k9[!VYFk\-84ki3%>4DFi*s+>$Nh5g4Ure>'omK2.#K2pU-NIc8YY1t#Xa@27V7St0%(M<i%!IS-Y8,r$As7!)Hr3lXKJ,/qbJ+ppsJ,/J]qG/2^orJ,l`UCS>Vf0?F_t2&i5Q(N<^A)&BIf/3kYMhY>nmB_XI/NrP?iJeo2LbJl%hu;dtru9&TM2M>u=9%CNs7XA1"fqQ-8,~>%AI9_PrivateDataEnd